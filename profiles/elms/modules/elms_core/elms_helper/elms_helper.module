<?php
/**
 * @file
 * UX improvements for the ELMS experience that we want
 */
define('ELMS_VERSION', '6.x-1.0-alpha7');
define('ELMS_PREVIEW_DISABLED', 2);

/**
 * Implements hook_define_highlight_relationship().
 */
function elms_helper_define_highlight_relationship() {
  // define the container though content provides no defintions, all are modular
  $relationships['enhance_content'] = array(
    'types' => array('page', 'folder'),
    'name' => t('Enhance Content'),
    'perm' => 'enhance instructional content',
    'highlight_types' => array(),
  );
  // define the ability to take notes, note features will implement this
  $relationships['note_taking'] = array(
    'types' => array('page', 'folder'),
    'name' => t('Note taking'),
    'perm' => 'take notes on content',
    'highlight_types' => array(),
  );
  // define the ability to take notes, note features will implement this
  $relationships['feedback'] = array(
    'types' => array('studio_submission'),
    'name' => t('Provide Feedback'),
    'perm' => 'provide feedback on content',
    'highlight_types' => array(),
  );
  return $relationships;
}

/**
 * Implements hook_permission().
 */
function elms_helper_permission() {
  return array(
    'administer elms configuration' => array(
      'title' => t('administer elms configuration'),
      'description' => t('TODO Add a description for \'administer elms configuration\''),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function elms_helper_theme_registry_alter(&$vars) {
  // hijack the node tpl away from organic groups
  // array_splice($vars['node']['theme paths'], 2, 0, drupal_get_path('module', 'elms_helper'));
}

/**
 * Implements hook_init().
 */
function elms_helper_init() {
  global $user;
  drupal_add_css(drupal_get_path('module', 'elms_helper') . '/css/elms_helper.css', array('type' => 'file', 'weight' => CSS_THEME));
  drupal_add_css(drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/redmond/redmond.css');
  // account for possible og theme swap when using the outline designer
  /*
   if (arg(0) == 'outline_designer') {
   $book_node = node_load(arg(2));
   if (isset($book_node->og_groups)) {
   foreach ($book_node->og_groups as $groupnid) {
   $group_node = node_load($groupnid);
   }
   if (og_is_group_type($group_node->type)) {
   og_set_theme($group_node);
   $theme_settings = variable_get('theme_'. $group_node->og_theme .'_settings', array());
   // add in custom font setting, a none file exists too
   drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css', 'theme');
   // add in custom css if this course has any
   if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
   drupal_add_css($theme_settings['extra_css_path'], 'theme');
   }
   og_set_group_context($group_node);
   og_set_language($group_node);
   }
   }
   }
   // fixes glitch in other og projects where it forgets to set theme
   if (arg(0) == 'node') {
   $node = menu_get_object();
   if (og_is_group_type($node->type)) {
   og_set_theme($node);
   $theme_settings = variable_get('theme_'. $node->og_theme .'_settings', array());
   // add in custom font setting, a none file exists too
   drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css', 'theme');
   // add in custom css if this course has any
   if ($theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
   drupal_add_css($theme_settings['extra_css_path'], 'theme');
   }
   og_set_group_context($node);
   og_set_language($node);
   }
   else {
   $group = og_context();
   // unset breadcrumbs while in a group as elms takes care of pathing
   drupal_set_breadcrumb(array());
   if (isset($group->type)) {
   $theme_settings = variable_get('theme_'. $group->og_theme .'_settings', array());
   // add in custom font setting, a none file exists too
   if (isset($theme_settings['font'])) {
   drupal_add_css(drupal_get_path('module', 'elms_helper') .'/css/'. $theme_settings['font'] .'.css', 'theme');
   }
   // add in custom css if this course has any
   if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
   drupal_add_css($theme_settings['extra_css_path'], 'theme');
   }
   }
   }
   }*/
  // reworking of above code minus theme crud
  $group = og_context();
  // verify we are in a group
  if (isset($group->nid)) {
    // account for custom theme settings
    $theme_settings = variable_get('theme_' . $group->og_theme . '_settings', array());
    // add in custom font setting, a none file exists too
    drupal_add_css(drupal_get_path('module', 'elms_helper') . '/css/' . $theme_settings['font'] . '.css', array('type' => 'file', 'weight' => CSS_THEME));
    // add in custom css if this course has any
    if (isset($theme_settings['extra_css_path']) && $theme_settings['extra_css_path'] != '' && $theme_settings['extra_css_use'] == 1) {
      drupal_add_css($theme_settings['extra_css_path'], array('type' => 'file', 'weight' => CSS_THEME));
    }
  }
}

/**
 * Implements hook_menu().
 */
function elms_helper_menu() {
  $items = array();
  $items['admin/elms'] = array(
    'title' => 'ELMS',
    'description' => 'Adjust elms system configuration options.',
    'weight' => -20,
    'access arguments' => array('administer elms configuration'),
    'page callback' => 'elms_helper_settings_overview',
    'file' => 'elms_helper.admin.inc',
  );
  $items['admin/elms/defaults'] = array(
    'title' => 'System defaults',
    'description' => 'Set defaults for themes used and other global logic',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_helper_settings'),
    'access arguments' => array('administer elms configuration'),
  );
  $items['active_site'] = array(
    'title' => 'Active site',
    'description' => 'Attempts to pass someone through to an active area correctly',
    'page callback' => '_elms_get_active_site',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['active_login'] = array(
    'title' => 'Active login',
    'description' => 'login then redirect to the passed name pair',
    'page callback' => '_elms_get_active_login',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Helper for pushing someone to the active site
 */
function _elms_get_active_site($parent_title) {
  global $user;
  // this will only work for authenticated users
  if ($user->uid == 0 && !empty($parent_title)) {
    // redirect and try again
    // TODO array('destination' => $_GET['q']) needs to be an array of keys and values instead of a string.
    drupal_goto('user', array('query' => array('destination' => $_GET['q'])));
  }
  elseif (!empty($parent_title)) {
    // see if this title is a url alias
    $src = db_query("SELECT src FROM {url_alias} WHERE dst = :dst", array(':dst' => check_plain($parent_title)))->fetchField();
    // if the SRC is invalid then push to the front page
    if (empty($src)) {
      drupal_goto('<front>');
    }
    // strip off the node/ portion if we can
    $parent_nid = str_replace('node/', '', $src);
    // check that this is a number before running other queries
    if (is_numeric($parent_nid)) {
      // select all sites associated to this parent based on path
      // TODO Please convert this statement to the D7 database API syntax.
      $result = db_query(db_rewrite_sql("SELECT {node}.nid AS nid FROM {node} JOIN {content_type_site} ON {node}.vid = {content_type_site}.vid WHERE {node}.status=1 AND {node}.type in ('site') AND {content_type_site}.field_parent_ref_nid=%d"), $parent_nid);
      $site_nids = array();
      $count = 0;
      // loop through and store what the user has access to
      while ($val = db_fetch_array($result)) {
        $site_node = node_load($val['nid']);
        // verify they have access
        if (node_access('view', $site_node)) {
          $site_nids[] = $val['nid'];
        }
        $count++;
      }
      // if there were any results, process this, otherwise push to page
      if ($count > 0) {
        if (count($site_nids) == 1) {
          // user has access to 1 thing, go to it!
          drupal_goto('node/' . $site_nids[0]);
        }
        elseif (count($site_nids) == 0) {
          // user has access to nothing, push to parent to deal with
          drupal_goto('node/' . $parent_nid);
        }
        else {
          // more then one address was found, check again for group access
          // this accounts for open sections that are false positives
          foreach ($site_nids as $site_nid) {
            // see if the user is in any of these sites or just has access
            if (isset($user->og_groups[$site_nid])) {
              $in_groups[] = $site_nid;
            }
          }
          // see if there was a single group that the user was in
          if (count($in_groups) == 1) {
            // user is registered to 1 group in this parent, go there!
            drupal_goto('node/' . $in_groups[0]);
          }
          else {
            // either there are too many sites the user is in or none, fallback to parent
            drupal_goto('node/' . $parent_nid);
          }
        }
      }
      else {
        drupal_goto('node/' . $parent_nid);
      }
    }
  }
  else {
    // go to the front page if we were unable to find anything
    drupal_goto('<front>');
  }
}

/**
 * Helper for pushing someone to the active site
 */
function _elms_get_active_login($parent_title) {
  global $user;
  if (!empty($parent_title)) {
    // see if this title is a url alias
    $src = db_query("SELECT src FROM {url_alias} WHERE dst = :dst", array(':dst' => check_plain($parent_title)))->fetchField();
    // if the SRC is invalid then push to the front page
    if (empty($src)) {
      drupal_goto('<front>');
    }
    // if the user is logged out, prompt a login that will redirect to the right place
    if ($user->uid == 0) {
      // TODO array('destination' => $src) needs to be an array of keys and values instead of a string.
      drupal_goto('user', array('query' => array('destination' => $src)));
    }
    else {
      drupal_goto($src);
    }
  }
  else {
    // go to the front page if we were unable to find anything
    drupal_goto('<front>');
  }
}

/**
 * Settings form for book feature.
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function elms_helper_settings($form, &$form_state) {
  $form = array();
  // render a select list based on a list of all available resources
  $result = db_query("SELECT name, info FROM {system} WHERE type = :type AND status = :status", array(':type' => 'theme', ':status' => 1));
  while ($theme = db_fetch_array($result)) {
    $info = unserialize($theme['info']);
    $options[$theme['name']] = $info['name'];
  }
  $form['elms_helper_default_theme'] = array(
    '#default_value' => variable_get('elms_helper_default_theme', 'chamfer'),
    '#description' => t('The default theme for newly created sites'),
    '#type' => 'select',
    '#multiple' => FALSE,
    '#title' => t('Default theme'),
    '#options' => $options,
  );
  $form['elms_helper_disallowed_themes'] = array(
    '#default_value' => variable_get('elms_helper_disallowed_themes', array('cube')),
    '#description' => t("These are themes that should not be allowed to be used in sites. Typical usage for this would be hiding the default system or admin themes so that versions don't look the same as the system creating them."),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Disallowed themes'),
    '#options' => $options,
  );
  return system_settings_form($form);
}


/**
 * Implements hook_menu_alter().
 */
function elms_helper_menu_alter(&$items) {
  // remove some confusing pages from menu items
  $items['node/%node/outline']['type'] = MENU_CALLBACK;
  $items['node/%/outline_designer']['type'] = MENU_CALLBACK;
  $items['og/activity']['type'] = MENU_CALLBACK;
  // add additional protection to user search functionality
  // we don't want ANYONE to be able to search for users
  // except for admins
  if (isset($items['search/user/%menu_tail'])) {
    $menu_item = &$items['search/user/%menu_tail'];
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
  if (isset($items['user/autocomplete'])) {
    $menu_item = &$items['user/autocomplete'];
    $menu_item['access callback'] = 'user_access';
    $menu_item['access arguments'] = array('administer users');
  }
  // alter things for the group form standard we want
  $items['node/%node/features']['title'] = t('ID toolkit');
  // if user progress dashboard stats are invoked
  if (isset($items['node/%node/up_stats'])) {
    $items['node/%node/up_stats']['access callback'] = '_elms_helper_uprd_status_access';
    $items['node/%node/up_stats']['access arguments'] = array(1);
  }
}

/**
 * Callback to make sure this isnt the group type
 */
function _elms_helper_uprd_status_access($node) {
  return (!og_is_group_type($node->type) && $node->type != ELMS_ROOT_TYPE) ? user_access('view user_progress requirements dashboard') : FALSE;
}

/**
 * Implements hook_form_alter().
 */
function elms_helper_form_alter(&$form, &$form_state, $form_id) {
  // hide preview button as its kind of silly
  // code borrowed from preview module
  if ($form_id == 'node_configure') {
    if (isset($form['node_preview']['#options'])) {
      $form['node_preview']['#options'][ELMS_PREVIEW_DISABLED] = t('Disabled');
    }
  }
  else if (isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {
    $disabled = ELMS_PREVIEW_DISABLED == variable_get('node_preview', 0);
    if ($disabled) {
      if (!$form['buttons']['submit']['#access']) {
        // Restore Submit button.
        $form['buttons']['submit']['#access'] = TRUE;
      }
      // Hide Preview button.
      $form['buttons']['preview']['#access'] = FALSE;
    }
  }

  // hijack the spaces theme form and make it have ELMS specific stuff
  if ($form_id == '_spaces_theme_theme_form') {
    // add css logic validation
    $form['#validate'][] = '_elms_helper_theme_validate';
    $group = og_context();
    // get local overrides from the new theme if possible
    $settings = variable_get('theme_' . $group->og_theme . '_settings', array());
    // verify something was returned, otherwise pull from the global defaults
    if (count($settings) == 0) {
      $settings = variable_get('theme_settings', array());
    }
    // unset values that have been deselected
    $theme_ary = variable_get('elms_helper_disallowed_themes', array('cube'));
    $form_themes = $form['themes'];
    // remove non-theme defaults
    unset($form_themes['#type']);
    unset($form_themes['#title']);
    unset($form_themes['#description']);
    unset($form_themes['#collapsible']);
    unset($form_themes['#theme']);
    unset($form_themes['#weight']);
    unset($form_themes['theme']);
    foreach ($form_themes as $key => $theme) {
      if (in_array($theme['description']['#title'], $theme_ary)) {
        unset($form['themes'][$key]);
        unset($form['themes']['theme']['#options'][$key]);
      }
    }
    // add in css options and chamfer specific code
    // font selection
    $options = array(
      'none' => '- Use CSS Default -',
      'georgia' => 'Georgia, serif',
      'palatino' => '"Palatino Linotype", "Book Antiqua", Palatino, serif',
      'times' => '"Times New Roman", Times, serif',
      'arial' => 'Arial, Helvetica, sans-serif',
      'arialblack' => 'Arial Black, Gadget, sans-serif',
      'comic' => '"Comic Sans MS", cursive, sans-serif',
      'impact' => 'Impact, Charcoal, sans-serif',
      'lucidasans' => '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
      'tahoma' => 'Tahoma, Geneva, sans-serif',
      'trebuchet' => '"Trebuchet MS", Helvetica, sans-serif',
      'verdana' => 'Verdana, Geneva, sans-serif',
      'courier' => '"Courier New", Courier, monospace',
      'lucidaconsole' => '"Lucida Console", Monaco, monospace',
    );
    $form['font_contatiner'] = array(
      '#type' => 'fieldset',
      '#title' => t('Font / style'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['font_contatiner']['font'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t("Font"),
      '#description' => 'Select a font for all content in this site.  Leaving default will use whatever your theme has indicated.',
      '#required' => TRUE,
      '#default_value' => $settings['font'],
    );
    $form['font_contatiner']['extra_css_use'] = array(
      '#type' => 'select',
      '#title' => t('Use..'),
      '#options' => array(
        0 => 'Theme CSS Only',
        1 => 'Upload / File Path',
      ),
      '#default_value' => $settings['extra_css_use'],
    );
    $form['font_contatiner']['extra_css_path'] = array(
      '#type' => 'textfield',
      '#size' => '40',
      '#title' => t("File path"),
      '#required' => FALSE,
      '#default_value' => $settings['extra_css_path'],
    );
    $form['font_contatiner']['extra_css_upload'] = array(
      '#type' => 'file',
      '#size' => '10',
      '#title' => t("Upload CSS file"),
      '#description' => 'Upload your own CSS file for use in this site',
      '#required' => FALSE,
    );
    if ($form['themes']['theme']['#default_value'] == 'chamfer') {
      drupal_add_js(drupal_get_path('theme', 'chamfer') . '/js/settings.js', array('type' => 'file', 'weight' => JS_THEME));
      if (module_exists('jquery_colorpicker')) {
        drupal_add_js(drupal_get_path('theme', 'chamfer') . '/js/jquery_colorpicker.js', array('type' => 'file', 'weight' => JS_THEME));
      }
      /*
       * The default values for the theme variables. Make sure $defaults exactly
       * matches the $defaults in the template.php file.
       */
      $color_array = array(
        'default' => 'Default',
        'mudbrown' => 'Mud Brown',
        'silver' => 'Silver',
        'formalgreen' => 'Formal Green',
        'black' => 'Space Opera Black',
        'custom' => 'Custom',
      );
      $defaults = array(
        'chamfer_borders' => 1,
        'chamfer_bgimage' => 0,
        'chamfer_top_logo' => 1, // 0,1 or 2 for off, clear or solid
        'chamfer_top_link' => '',
        'chamfer_bottom_logo' => 1, // 0,1 or 2 for off, clear or solid
        'chamfer_bottom_link' => '',
        'chamfer_color_template' => 'default',
        'chamfer_color_primary' => '000000',
        'chamfer_color_secondary' => '000000',
        'chamfer_color_header1' => '0099FF',
        'chamfer_color_header2' => '00CCFF',
        'chamfer_color_text' => '666666',
        'chamfer_color_link' => '0099FF',
        'chamfer_color_blocks' => 'E7E7E7',
        'chamfer_color_blockstyle_link' => '6D6D6D',
        'chamfer_color_blockstyle_bgcolor' => 'df5c5c',
        'chamfer_color_blockstyle_linkhover' => 'FFFFFF',
        'chamfer_color_footer_text' => 'FFFFFF',
        'chamfer_color_footer_link' => '00CCFF',
      );
      $form['logo']['#title'] = t('Site banner');
      $form['logo']['logo_upload']['#description'] = 'In Chamfer this will take the place of the site-banner (correct dimensions are 950px by 108px). File size must be less then 2M';
      // Create the form widgets using Forms API
      $form['chamfer_color_template'] = array(
        '#type' => 'select',
        '#title' => t('Chamfer template'),
        '#description' => t('Use this color template'),
        '#options' => $color_array,
        '#default_value' => $settings['chamfer_color_template'],
      );
      if (module_exists('jquery_colorpicker')) {
        $fieldtype = 'colorpicker';
      }
      else {
        $fieldtype = 'textfield';
      }
      // page colors
      $form['page'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer page settings'),
        '#description' => t("Change page related colors"),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['page']['chamfer_bgimage'] = array(
        '#type' => 'checkbox',
        '#title' => t('Background image'),
        '#description' => t('Whether or not to show the background image'),
        '#default_value' => $settings['chamfer_bgimage'],
      );
      $form['page']['chamfer_borders'] = array(
        '#type' => 'checkbox',
        '#title' => t('Include borders'),
        '#description' => t('Whether or not there should be a 10px border'),
        '#default_value' => $settings['chamfer_borders'],
      );
      $form['page']['chamfer_color_primary'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Background'),
        '#description' => t('Color of the background'),
        '#default_value' => $settings['chamfer_color_primary'],
      );
      $form['page']['chamfer_color_secondary'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Secondary background'),
        '#description' => t('Color of the Inner background, the border and header / footer'),
        '#default_value' => $settings['chamfer_color_secondary'],
      );
      // header
      $form['header'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer header settings'),
        '#description' => t('Change items in the header'),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['header']['chamfer_top_logo'] = array(
        '#type' => 'select',
        '#title' => t('Show top logo'),
        '#description' => t('Display the logo at the top left of the interface'),
        '#options' => array(
          0 => 'No',
          1 => 'Logo 1',
          2 => 'Logo 2',
        ),
        '#default_value' => $settings['chamfer_top_logo'],
      );
      $form['header']['chamfer_top_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Top logo link'),
        '#description' => t('The link the logo should go to when clicked, leave blank for none'),
        '#default_value' => $settings['chamfer_top_link'],
      );
      $form['header']['chamfer_color_header1'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Site title'),
        '#description' => t('Color of the site title'),
        '#default_value' => $settings['chamfer_color_header1'],
      );
      $form['header']['chamfer_color_header2'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Site slogan'),
        '#description' => t('Color of the site slogan'),
        '#default_value' => $settings['chamfer_color_header2'],
      );
      // content
      $form['content'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer content settings'),
        '#description' => t("Change content related colors"),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['content']['chamfer_color_text'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Text'),
        '#description' => t('Body of content text'),
        '#default_value' => $settings['chamfer_color_text'],
      );
      $form['content']['chamfer_color_link'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Links'),
        '#description' => t('Color of content links'),
        '#default_value' => $settings['chamfer_color_link'],
      );
      $form['content']['chamfer_color_blocks'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Block background'),
        '#description' => t('Background color of the block regions in the content'),
        '#default_value' => $settings['chamfer_color_blocks'],
      );
      // footer
      $form['footer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Chamfer footer settings'),
        '#description' => t('Change items in the footer'),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $form['footer']['chamfer_bottom_logo'] = array(
        '#type' => 'select',
        '#title' => t('Show bottom logo'),
        '#description' => t('Display the logo at the top left of the interface'),
        '#options' => array(
          0 => 'No',
          1 => 'Logo 1',
          2 => 'Logo 2',
        ),
        '#default_value' => $settings['chamfer_bottom_logo'],
      );
      $form['footer']['chamfer_bottom_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Bottom logo link'),
        '#description' => t('The link the logo should go to when clicked, leave blank for none'),
        '#default_value' => $settings['chamfer_bottom_link'],
      );
      $form['footer']['chamfer_color_footer_text'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Footer text'),
        '#description' => t('Color of the footer text'),
        '#default_value' => $settings['chamfer_color_footer_text'],
      );
      $form['footer']['chamfer_color_footer_links'] = array(
        '#type' => $fieldtype,
        '#size' => 6,
        '#maxlength' => 6,
        '#title' => t('Footer links'),
        '#description' => t('Color of the footer links'),
        '#default_value' => $settings['chamfer_color_footer_links'],
      );
    }
  }
  if ($form_id == 'user_profile_form') {
    // remove change theme from view even if they have the permission, gives us granularity so they can set it in the group / site creation
    $form['theme_select']['#access'] = FALSE;
    // contact form has been removed because the form should only be used for instructor to student and student to instructor, this walls students from contacting each other via the system. also reduces confusion as this isn't something they should want to turn off (need to communicate with instructor and visa versa)
    $form['contact']['#access'] = FALSE;
  }
  // form modifications for js to work
  if (strpos($form_id, 'editview_node_form_') === 0) {
    $form['title']['#attributes']['class'] = 'editview_title';
    $form['field_due_date']['#attributes']['class'] = 'editview_date';
    $form['field_content_ref']['#attributes']['class'] = 'editview_nid';
    $form['field_task_link']['#attributes']['class'] = 'editview_task_link';
  }
}

function _elms_helper_theme_validate() {
  // custom css
  if (isset($form_state['storage']['css'])) {
    $dir = file_create_path(file_directory_path() . '/spaces_theme_custom_css');
    $is_writable = file_prepare_directory($dir, 1);
    if ($is_writable) {
      $validators = array(
        'file_validate_size' => array(2 * 1024),
        'file_validate_extensions' => array('css'),
      );
      if ($file = file_save_upload('extra_css_upload', $validators, $dir, FILE_EXISTS_RENAME)) {
        $form_state['storage']['css'] = str_replace(' ', '%20', $file->filepath);
      }
    }
  }
}

/**
 * Implements hook_link_alter().
 */
function elms_helper_link_alter(&$links, $node, $comment = NULL) {
  // remove add book as it's confusing with outline designer in place
  if (isset($links['book_add_child'])) {
    unset($links['book_add_child']);
  }
  // get a list of anything associated to this and remove it
  // we do this because the left side region pulls all links over there
  $tmp_ref_links = nodereference_url_build_all_links($node, 0);
  foreach ($tmp_ref_links as $key => $link) {
    unset($links[$key]);
  }
  // check for flags before we assume its there
  if (module_exists('flag')) {
    // unset all flags
    $flag_links = flag_link('node', $node);
    // if this has flags then render them here
    if (count($flag_links)) {
      foreach ($flag_links as $key => $flag) {
        unset($links[$key]);
      }
    }
  }
}

/**
 * Implements hook_content_extra_fields().
 */
function elms_helper_content_extra_fields($type_name) {
  $fields['spaces_preset'] = array(
    'label' => t('Spaces Presets'),
    'description' => t('Spaces type'),
    'weight' => 100,
  );
  $fields['purl'] = array(
    'label' => t('Purl'),
    'description' => t('Persistent URL textfield'),
    'weight' => 0,
  );
  $fields['themes'] = array(
    'label' => t('Themes'),
    'description' => t('Theme setting from OG'),
    'weight' => 1,
  );
  return $fields;
}

/**
 * Implements hook_dashboard_requirements().
 */
function elms_helper_dashboard_requirements($provider) {
  switch ($provider) {
    case 'system':
      // count active accounts
      $user_accounts_count = db_query("SELECT COUNT(uid) FROM {users} WHERE status = :status", array(':status' => 1))->fetchField();
      $requirements['user_accounts_count'] = array(
        'title' => t('Count of user accounts'),
        'value' => $user_accounts_count,
        'severity' => REQUIREMENT_INFO,
      );
      // count students / instructors / TAs
      $count_students = db_query("SELECT COUNT(u.uid) FROM {users} AS u JOIN {users_roles} AS ur ON u.uid=ur.uid JOIN {role} AS r ON ur.rid=r.rid WHERE r.name = :r.name AND status = :status", array(':r.name' => 'student', ':status' => 1))->fetchField();
      $requirements['active_student_accounts'] = array(
        'title' => t('Student count'),
        'value' => $count_students,
        'severity' => REQUIREMENT_INFO,
      );
      // list all admins
      $accounts_list = array(
        'administrator' => '',
        'instructional designer' => '',
        'staff' => '',
        'instructor' => '',
        'student staff' => '',
        'teaching assistant' => '',
      );
      $result = db_query("SELECT u.name AS uname, r.name AS rolename FROM {users} AS u JOIN {users_roles} AS ur ON u.uid=ur.uid JOIN {role} AS r ON ur.rid=r.rid WHERE r.name IN('administrator', 'instructional designer', 'staff', 'instructor', 'student staff', 'teaching assistant') AND status = :status", array(':status' => 1));
      while ($val = db_fetch_array($result)) {
        $accounts_list[$val['rolename']] .= $val['uname'] . ' ';
        $counts[$val['rolename']]++;
      }
      // loop through and render all this info
      foreach ($accounts_list as $rolename => $unames) {
        $requirements['active_' . str_replace(' ', '', $rolename) . '_accounts'] = array(
          'title' => t('@account Accounts', array('@account' => ucwords($rolename))),
          'value' => $counts[$rolename] . ' (' . $unames . ')',
          'severity' => REQUIREMENT_INFO,
        );
      }
      break;
  }
  return $requirements;
}
