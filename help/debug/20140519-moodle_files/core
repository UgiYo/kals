/**
 * KALS_language
 * 語系控制器
 *
 * @package		KALS
 * @category		JavaScript Libraries
 * @author		Pudding Chen <puddingchen.35@gmail.com>
 * @copyright		Copyright (c) 2010, Pudding Chen
 * @license		http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link		http://sites.google.com/site/puddingkals/
 * @version		1.0 2010/7/27 下午 06:47:21
 * @extends {Event_dispatcher}
 */
function KALS_language() {
    
    Event_dispatcher.call(this);
    
    this._lang = {};
    this._listeners_lang_param = [];
    
    var _this = this;
    //Context訂閱一下
    if (typeof(KALS_context) !== 'undefined') {
        KALS_context.add_listener(function (_dispatcher, _data) {
            if (typeof(_data.KALS_language) !== 'undefined') {
				_this.set_lang(_data.KALS_language);
			}
        });
    }
}

KALS_language.prototype = new Event_dispatcher();

/**
 * 語言檔的內容
 * @type {Object} JSON
 * @property
 * @private
 */
KALS_language.prototype._lang = {};

/**
 * 監聽者請求的語系擋內容
 * @type {Array} = [
 *     param1,    //KALS_language_param
 *     param2
 * ]
 * @property
 * @private
 */
KALS_language.prototype._listeners_lang_param = [];

/**
 * 將資料語系資料保存到lang變數中
 * 2010.9.2 現在是從KALS_context.load()中去向伺服器取得語系資料。設定的地方請看KALS_language的constructor
 * @param {Object} _lang_data
 */
KALS_language.prototype.set_lang = function(_lang_data){
    this._lang = _lang_data;
    this.set_changed();
    this.notify_listeners(_lang_data);
    return this;
};

/**
 * 依據語系索引取得語系檔
 * 
 * @param {KALS_language_param|string} _lang_param 如果是字串，則會將_lang_param直接作為語系索引
 * @type {jQuery} 輸出的語系結果
 */
KALS_language.prototype.line = function(_lang_param){
    var _line, _arg;
    if ($.is_object(_lang_param)) {
        _line = $.get_parameter(_lang_param, 'line');
        _arg = $.get_parameter(_lang_param, 'arg');
    }
    else if ($.is_string(_lang_param)) {
        _line = _lang_param;
    }

    if ($.is_null(_line)) {
        return null;
    }
    
    if ($.isset(this._lang) &&
	$.isset(this._lang[_line])) {
        var _lang = this._lang[_line];
        _lang = this._lang_set_arg(_lang, _arg);
        return _lang;
    }
    else {
        return _lang_param;
    }
};


/**
 * 依據語系索引取得語系檔
 * 
 * @param {KALS_language_param|string} _lang_param 如果是字串，則會將_lang_param直接作為語系索引
 * @type {String} 輸出的語系結果
 */
/*
KALS_language.prototype.get_line_string = function(_lang_param){
    if (_lang_param === null || _lang_param === undefined) {
        return;
    }
    $.test_msg("lang.get_line_string()", _lang_param);
    var _jquery = this.line(_lang_param);
    if ($.is_string(_jquery)) {
        return _jquery;
    }
    else {
        return _jquery.text();
    }
};
*/

/**
 * 是否有該語系檔
 * @param {KALS_language_param|String} _lang_param
 */
KALS_language.prototype.has_line = function (_lang_param) {
    //var _line, _arg;
    if ($.is_object(_lang_param)) {
        _lang_param = $.get_parameter(_lang_param, 'line');
    }

    if ($.isset(this._lang) &&
    $.isset(this._lang[_lang_param])) {
        return true;
    }
    else {
        return false;
    }
};

/**
 * 將lang字串中取代參數
 * @param {string} _lang
 * @param {Array} _arg
 * @type {jQuery}
 */
KALS_language.prototype._lang_set_arg = function (_lang, _arg) {
    if ($.isset(_arg)) {
        _arg = $.filter_array(_arg);
        
        //$.test_msg('lang._lang_set_arg' [_lang, _arg]);
        
        for (var _i in _arg) {
            var _search = '{'+_i+'}';
            var _replace = '<span class="lang-arg-'+_i+'"></span>';
            _lang = $.str_replace(_search, _replace, _lang); 
        }
        
        _lang = $('<span>'+_lang+'</span>');
        
        for (_i in _arg) {
            var _a = _arg[_i];
            if ($.is_object(_a) && typeof(_a.msg) === "string") {
                _lang.find('span.lang-arg-' + _i).html(_a);
            }
            else if ($.is_object(_a)) {
                _lang.find('span.lang-arg-' + _i).append(_a);
            }
            else {
                _lang.find('span.lang-arg-' + _i).html(_a);
            }
        }
    }
    return _lang;
};

/**
 * 加入觀察
 * @param {jQuery} _obj 要顯示語系的容器
 * @param {String|KALS_language_param} _lang_param 語系參數
 */
KALS_language.prototype.add_listener = function(_obj, _lang_param) {
    /*
    if (_lang_param === undefined) {
        return this;
    }
    */
    
    if ($.inArray(_obj, this._listeners) === -1) {
        this._listeners.push(_obj);
        var _key = $.inArray(_obj, this._listeners);
        
        //$.test_msg("語系設定是？", _lang_param);
        if ($.is_string(_lang_param)) {
            _lang_param = new KALS_language_param(_lang_param);
        }
       
        this._listeners_lang_param[_key] = _lang_param;
        
        var _lang = this.line(_lang_param);
        
        if ($.isset(_lang)) {
            this._setup_obj(_obj, _lang);
        }   
        else if (typeof(_lang_param.msg) !== 'undefined'
            && $.isset(_lang_param.msg)) {
            //如果找不到語系檔，則將預設顯示值輸出
            this._setup_obj(_obj, _lang_param.msg);
        }   
    }
    else {
        //如果已經存在此設定，則刪除原本的設定之後，再設定一次
        this.delete_listener(_obj);
        this.add_listener(_obj, _lang_param);
    }
    return this;
};

/**
 * 移除監聽者
 * @param {Object} _obj
 */
KALS_language.prototype.delete_listener = function (_obj) {
    var _key = $.inArray(_obj, this._listeners);
    if (_key > -1) {
        delete this._listeners[_key];
        delete this._listeners_lang_param[_key];
    }
    return this;
};

/**
 * 當語系檔有所修改時(KALS_language.set_lang())，確認每個觀察者是否有對應的語系檔，然後設定之。
 */
KALS_language.prototype.notify_listeners = function () {
    if (this._changed) {
        for (var _i in this._listeners) {
            var _lang_param = this._listeners_lang_param[_i];
            var _lang = this.line(_lang_param);
            if ($.isset(_lang)) {
                this._setup_obj(this._listeners[_i], _lang);
            }
        }
        this._changed = false;
    }
    return this;
};

/**
 * 建立監聽者，以<span>標籤組合而成
 * @param {string|KALS_language_param} _lang_param 語系參數
 * @returns jQuery 以SPAN組成
 */
KALS_language.prototype.create_listener = function (_lang_param) {
    if ($.is_string(_lang_param)) {
        _lang_param = new KALS_language_param(_lang_param);
    }
    
    var _listener = $('<span></span>');
    
    this.add_listener(_listener, _lang_param);
    
    return _listener;
};

/**
 * 建立間隔時間的監聽者
 * @param {number} _time
 * @type {jQuery}
 */
KALS_language.prototype.create_interval_time_listener = function (_time) {
    
    var _param = this.get_interval_param(_time);
    return this.create_listener(_param);
};

KALS_language.prototype.get_interval_message = function (_time) {
    var _param = this.get_interval_param(_time);
    return this.line(_param);
};

/**
 * 日期相關的語言變數。
 * @property
 * @private
 */
KALS_language.prototype._date_params = {
    interval: {
        recent: new KALS_language_param('recent', 'time.recent'),
        within_minute: new KALS_language_param('within 1 mimute', 'time.within_1_minute'),
        minute: new KALS_language_param('1 mimute ago', 'time.1_minute_ago'),
        minutes: new KALS_language_param('{0} mimutes ago', 'time.n_minutes_ago'),
        hour: new KALS_language_param('1 hour ago', 'time.1_hour_ago'),
        hours: new KALS_language_param('{0} hours ago', 'time.n_hours_ago'),
        half_day: new KALS_language_param('half of the day ago', 'time.half_day_ago'),
        day: new KALS_language_param('1 day ago', 'time.1_day_ago'),
        days: new KALS_language_param('{0} days ago', 'time.n_days_ago'),
        week: new KALS_language_param('1 week ago', 'time.1_week_ago'),
        weeks: new KALS_language_param('{0} weeks ago', 'time.n_weeks_ago'),
        month: new KALS_language_param('1 month ago', 'time.1_month_ago'),
        months: new KALS_language_param('{0} months ago', 'time.n_months_ago'),
        date: new KALS_language_param('{0} {1}', 'time.on_date'),
        year: new KALS_language_param('{0}', 'time.in_year'),
		fulldate: new KALS_language_param('{0}, {1} {2}', 'time.fulldate')
    },  
    month_name: [
        null,    //編號0沒有月份
        new KALS_language_param('Jan', 'time.month_name.1'),
        new KALS_language_param('Feb', 'time.month_name.2'),
        new KALS_language_param('Mar', 'time.month_name.3'),
        new KALS_language_param('Apr', 'time.month_name.4'),
        new KALS_language_param('May', 'time.month_name.5'),
        new KALS_language_param('Jun', 'time.month_name.6'),
        new KALS_language_param('Jul', 'time.month_name.7'),
        new KALS_language_param('Aug', 'time.month_name.8'),
        new KALS_language_param('Sep', 'time.month_name.9'),
        new KALS_language_param('Oct', 'time.month_name.10'),
        new KALS_language_param('Nov', 'time.month_name.11'),
        new KALS_language_param('Dec', 'time.month_name.12') 
    ]
};

/**
 * 建立間隔時間敘述
 * 
 * 間距：
 * - 最近: 0 ~ 30s
 * - 1分鐘之內: 30s ~ 1m 
 * - n分鐘: 1m ~ 1h  
 * - 1小時左右: 1h ~ 1.5h
 * - n小時左右: nh - 0.5h ~ nh + 0.5h
 * - 半天左右: 12h ~ 1d
 * - 1天左右: 1d ~ 1.5d
 * - n天左右: nd-0.5d ~ nd+0.5d
 * - 1週左右: 7d ~ 10.5d
 * - 2週左右: 10.5d ~ 17.5d
 * - 半個月左右: 17.5d ~ 30d
 * - 1個月: 30d ~ 45d
 * - 8月26日: 45d ~ 365d
 * - 2011年: 365d ~ 
 * @param {number|strig} _time 單位是秒數
 * @type {KALS_language_param} Lang語言變數的結果
 */
KALS_language.prototype.get_interval_param = function (_time) {
    var _s, _m, _h, _hh, _d, _hd, _w, _hw, _y;
    _s = 1;    //一秒鐘
    _m = _s * 60;    //一分鐘
    _h = _m * 60;    //一小時
    _hh = _h / 2;    //半小時
    _d = _h * 24;    //一天
    _hd = _d / 2;    //半天
    _w = _d * 7;    //一週
    _hw = _w / 2;    //半週
    _month = 30* _d;
    _y = _d * 365;    //一年
    
    var _date_params = this._date_params.interval;
    var _lang_param = null;
    var _unit = null;
    
    if ($.is_string(_time)) {
		_time = parseInt(_time, 10);
	}
    
    var _interval = $.get_interval_time(_time);
    
    //$.test_msg('lang.get_itnerval_param()', [parseInt((new Date()).getTime() / 1000, 10), _time, _interval]);
    
    var _test_scope = function (_interval, _min, _max) {
        
        if (_min === null) {
            _min = 0;
        }
        
        if (_max !== null) {
            if ($.is_number(_max)) {
                _max--;
            }
            return (_interval > _min && _interval < _max);
        }
        else {
            return (_interval > _min);
        }
    };
    
    var _parse_unit = function (_len) {
        var _u = _interval / _len;
        _u = Math.round(_u); 
        return _u;
    };
    
    if (_interval < 30 *_s) {
        _lang_param = _date_params.recent;
    }
    else if (_test_scope(_interval, 30*_s, _m)) {
        _lang_param = _date_params.within_minute;
    }
    else if (_test_scope(_interval, _m, _h)) {
        _unit = _parse_unit(_m);
        _lang_param = _date_params.minutes;
    }
    else if (_test_scope(_interval, _h, 2*_h)) {
        _lang_param = _date_params.hour;
    }
    else if (_test_scope(_interval, 2*_h, 12*_h)) {
        _unit = _parse_unit(_h);
        _lang_param = _date_params.hours;
    }
    else if (_test_scope(_interval, 12*_h, _d)) {
        _lang_param = _date_params.half_day;
    }
    else if (_test_scope(_interval, _d, 2*_d)) {
        _lang_param = _date_params.day;
    }
    else if (_test_scope(_interval, 2*_d, _w)) {
        _unit = _parse_unit(_d);
        _lang_param = _date_params.days;
    }
    else if (_test_scope(_interval, _w, 2*_w)) {
        _lang_param = _date_params.week;
    }
    else if (_test_scope(_interval, 2*_w, 3*_w)) {
        _unit = _parse_unit(_w);
        _lang_param = _date_params.weeks;
    }
    else if (_test_scope(_interval, 3*_w, _month)) {
        _lang_param = _date_params.month;
    }
    else if (_test_scope(_interval, _month, _y)) {
        var _date_obj = new Date();
        _date_obj.setTime(_time*1000);
        //$.test_msg("lang date", _time);
        _month = this.get_month(_date_obj);
        var _date = _date_obj.getDate();
        _lang_param = _date_params.date;
        _lang_param.arg = [_month, _date];
    }
    else if (_test_scope(_interval, _y, null)) {
        _date_obj = new Date();
        _date_obj.setTime(_time*1000);
        
        var _year = _date_obj.getFullYear();
        _lang_param = _date_params.year;
        _unit = _year;
    }
    
    //$.test_msg("lang get_interval_param", _lang_param);
	
    if (_unit !== null
        && $.is_class(_lang_param, 'KALS_language_param')
        && $.is_null(_lang_param.arg)) {
        _lang_param.arg = [_unit];
    }
    
    return _lang_param;
};

/**
 * 取得月份
 * @param {date} )_date_obj
 * @type {string} 月份字串，例如Jan、Feb
 */
KALS_language.prototype.get_month = function (_date_obj) {
	
	var _month_number = _date_obj.getMonth();
	_month_number++;
	
    if ($.is_number(_month_number)
        && _month_number > 0
        && _month_number < 13) {
		//$.test_msg("lang", _month_number);
		var _month_param = this._date_params.month_name[_month_number];
		var _month_msg = this.line(_month_param.line); 
        return _month_msg;
    }
    return null;
};

/**
 * 顯示全部日期
 * @param {number} _time
 */
KALS_language.prototype.get_fulldate = function (_time) {
	if ($.is_string(_time)) {
		_time = parseInt(_time, 10);
	}
	
    var _date_params = this._date_params.interval;
	
    var _date_obj = new Date();
    _date_obj.setTime(_time*1000);
    _month = this.get_month(_date_obj);
    var _date = _date_obj.getDate();
	
	var _year = _date_obj.getFullYear();
    _lang_param = _date_params.fulldate;
    _lang_param.arg = [_year, _month, _date];
    
	//$.test_msg("lang get_fulldate _lang_param_arg", _lang_param);
	
    //return _lang_param;
	return this.line(_lang_param);
};

/**
 * 將顯示語言資料_lang設置到物件_obj中。依據_obj的不同，input跟textarea會設置到placeholder的值去。
 * @param {jQuery} _obj
 * @param {string} _lang
 */
KALS_language.prototype._setup_obj = function (_obj, _lang) {
    var _tag_name = _obj.attr('tagName').toLowerCase();
    if (_tag_name === 'input'
        || _tag_name === 'textarea') {   
        _obj.attr('placeholder', _lang).val('').blur();    //.change();
    }
    else {
        _obj.html(_lang);
    }
    return this;
};

/* End of file KALS_language */
/* Location: ./system/application/views/web_apps/core/KALS_language.js *//**
 * KALS_view_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pulipuli Chen <pulipuli.chen@gmai.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license	   http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2013/11/21 下午 09:02:21
 * @extends {JSONP_dispatcher}
 */
function KALS_view_manager(){
    
    JSONP_dispatcher.call(this);
}

KALS_view_manager.prototype = new JSONP_dispatcher();

/**
 * 跟KALS_context訂閱的key
 * @version 20140517 Pulipuli Chen
 *  不採用這個訂閱了
 * @type String
 */
//KALS_view_manager.prototype._$context_register = 'KALS_view_manager';

/**
 * 取得樣板
 * @param {String} _index
 * @type {String}
 */
KALS_view_manager.prototype.get_view = function (_index) {
    //$.test_msg('KALS_view_manager', this._data);
    //return JSONP_dispatcher.prototype.get_field.call(this, _index);
    var _view = JSONP_dispatcher.prototype.get_field.call(this, _index);
    if (_view === undefined) {
        _view = "{{kals-lang:kals_framework.view_config_error}}";
    }
    var _classname = this._get_view_classname(_index);
    _view = $("<span>" + _view + "<span>")
       .addClass('KALS')
       .addClass("kals-view")
       .addClass(_classname);
    _view = this._view_initialize(_view, _index);
    return _view;
};

/**
 * 將index轉換成classname
 * @param {String} _index
 * @param {String} _replace 要取代的變數
 */
KALS_view_manager.prototype._get_view_classname = function (_index, _replace) {
    
    if (_index === undefined || _index === null) {
        return;
    }
    
    if (_replace === undefined) {
        _replace = '-';
    }
    return _index.replace(/[\W|\_]/g, _replace).toLowerCase();
};

/**
 * KALS自訂的事件
 */
KALS_view_manager.prototype._kals_events = KALS_CONFIG.view.kals_events;

/**
 * 取得語言
 * @param {jQuery} _view
 * @param {String}
 * @type {jQuery}
 */
KALS_view_manager.prototype._view_initialize_language = function(_view, _index) {

    //var _container = $("<div></div>").append(_view);
    var _kals_lang = _view.find('*[kals-lang]');
    var _view_classname = this._get_view_classname(_index, '_');
    _view_classname = 'view.' + _view_classname + '.';
    //$.test_msg('parse lang', [_kals_lang.length, _view.html()]);

    _kals_lang.each(function (_index, _ele) {
        _ele = $(_ele);

        var _text = _ele.html();
        var _line = _ele.attr('kals-lang');

        if (KALS_context.lang.has_line(_line)) {
            KALS_context.lang.add_listener(_ele, new KALS_language_param(_text, _line));
        }
        else if (KALS_context.lang.has_line(_view_classname + _line)) {
            KALS_context.lang.add_listener(_ele, new KALS_language_param(_text, _view_classname + _line));
        }
    });

    return _view;
};

/**
 * 特殊樣板初始化
 * @param {jQuery} _view
 * @param {String} _index
 */
KALS_view_manager.prototype._view_initialize = function (_view, _index) {
	
    _view = this._view_initialize_text(_view);

    var _init_attrs = this._init_attrs;
    //$.test_msg('init template', _init_attrs);
    for (var _i in _init_attrs) {
        //$.test_msg('init template', _init_attrs[_i]);
        _view = this._view_initialize_attr(_view, _init_attrs[_i]);
    }
	
    _view = this._view_initialize_language(_view, _index);

    return _view;
};

/**
 * 需要初始化的屬性
 */
KALS_view_manager.prototype._init_attrs = KALS_CONFIG.view.init_attrs;

/**
 * 取得使用的屬性名稱
 */
KALS_view_manager.prototype.get_attr_names = function () {
    return this._init_attrs();
};

/**
 * KALS自訂的屬性名稱
 * @type {jQuery}
 */
KALS_view_manager.prototype._kals_attrs = KALS_CONFIG.view.kals_attrs;

/**
 * 取得KALS自訂的屬性名稱
 * @type {jQuery}
 */
KALS_view_manager.prototype.get_kals_atts = function () {
    return this._kals_attrs;
};

/**
 * 需要初始化的事件名稱
 */
KALS_view_manager.prototype._event_names = KALS_CONFIG.view.event_names;

/**
 * 取得需要初始化的事件名稱
 */
KALS_view_manager.prototype.get_event_names = function () {
    return this._event_names;
};

/**
 * 找尋變數的規則
 * @type {RegExp}
 */
KALS_view_manager.prototype._view_regular_expression = KALS_CONFIG.view.regular_expression;

/**
 * 初始化文字的部份
 * @param {Object} _view
 */
KALS_view_manager.prototype._view_initialize_text = function (_view) {
	
	var _this = this;
	var _lang_prefix = 'kals-lang:';
	_view.find(':contains("{{")').filter(':contains("}}")').each(function (_index, _ele) {
        var _jquery_ele = $(_ele);
        
        _jquery_ele.contents()
          .filter(function () {
            return this.nodeType !== 1;
          })
          .filter(function () {
            return ((this.textContent.indexOf("{{") !== -1) 
			 && (this.textContent.indexOf("}}") !== -1) );
          })
          .wrap("<span class='kals-field-parent'></span>")
          .each(function (_content_index, _content_ele) {
            
            var _jquery_content_ele = $(_content_ele);
            var _text = _jquery_content_ele.text();
            //alert(_text);
            //_text = _text.replace(/\{\$[]}/g);
            //_jquery_content_ele.text("??");
            //_jquery_content_ele.remove();
            
            _text = _text.replace(_this._view_regular_expression, function (_match) {
                var _field_name = _match.substr(2, _match.length-4);
                /*
                var _needle = 'kals-lang:';
                return '<span kals-field="' + _field_name + '" kals-field-origin-value="'+_match+'">' + _match + "</span>";
                */
                if ($.starts_with(_field_name, _lang_prefix)) {
                    var _line_index = _field_name.substr(_lang_prefix.length, _field_name.length - _lang_prefix.length);
                    var _line = KALS_context.lang.line(_line_index);

                    return '<span kals-lang="' + _line_index + '">' + _line + "</span>";
                }
                else {
                        return '<span kals-field="' + _field_name + '">' + _match + "</span>";
                }
            });
            
            //_text = "???";
            
            _jquery_content_ele.parent().html(_text);
        });
    });
	
	_view.find('[kals-field]').each(function (_index, _ele) {
		var _j_ele = $(_ele);
		_j_ele.attr('kals-field-origin-value', _j_ele.html());
	});
	
	return _view;
};

/**
 * 初始化class的部份
 * @param {Object} _view
 * @param {String} _attr_name 
 */
KALS_view_manager.prototype._view_initialize_attr = function (_view, _attr_name) {
	
	var _this = this;
	/*
	if (_attr_name == 'style') {
		
		//$.test_msg('init attr', [_attr_name, _view.find('['+_attr_name+'*="{{"]')
        //    .filter('['+_attr_name+'*="}}"]').length]);
		var _found = _view.find('['+_attr_name+'*="{{"]');
		$.test_msg('init attr', [_attr_name, _found.length]);
		
		_found.eq(0).each(function(_i, _e) {
			$.test_msg('style', _e.style);
			
		});
	}  
	*/
    _view.find('['+_attr_name+'*="{{"]')
	   .filter('['+_attr_name+'*="}}"]')
	   .each(function (_index, _ele) {
	   	   $.test_msg('init attr', [_attr_name]);
	       var _jquery_ele = $(_ele);
	       var _origin_value = _jquery_ele.attr(_attr_name);
	       var _field_name_array = _origin_value.match(_this._view_regular_expression);
	       
	       
	       for (var _i in _field_name_array) {
	          var _name = _field_name_array[_i];
	          _name = _name.substr(2, _name.length -3); 
	          _field_name_array[_i] = _name;
	       }
	       
	       var _field_name = _field_name_array.join(' '); 
	       
	       _jquery_ele.attr("kals-attr-" + _attr_name , _field_name);
	       _jquery_ele.attr("kals-attr-" + _attr_name + "-origin-value", _origin_value);
	   });
    
    return _view;
};

/* End of file KALS_view_manager */
/* Location: ./system/application/views/web_apps/KALS_view_manager.js *//**
 * Viewportmove_dispatcher
 * 畫面移動、視窗放大縮小時的事件通知者
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/7/28 下午 03:36:17
 * @extends {Event_dispatcher}
 */
function Viewportmove_dispatcher() {
    
    Event_dispatcher.call(this);
    
    // 2010.8 以下都是偵測手機縮放尺寸的功能，已經放棄不使用
    //this._detect_interval = 1000;
    //this._viewport_locked = false;
    //this._zoom_scale = 1;
    
    var _this = this;
    var _event = function(){
        if (typeof($viewport_trigger) !== 'undefined') {
            clearTimeout($viewport_trigger);
        }
        
        $viewport_trigger = setTimeout(function () {
            //$.test_msg('viewportmove event', {height: $.is_small_height(), width: $.is_small_width()});
            
            _this.set_changed();
            _this.notify_listeners();
            clearTimeout($viewport_trigger);
        }, 500);
    };
    
    $(window).bind('scroll', _event)
        .bind('resize', _event)
        .bind('load', _event);
        
    if ($.is_mobile_mode()) {
        _event = function () {
            _this.set_changed();
            _this.notify_listeners(_this);
        };
        
        $(document).bind('click', _event)
            .bind('mouseup', _event)
            .bind('touchend', _event);
    }
    
}

Viewportmove_dispatcher.prototype = new Event_dispatcher();

// --------
// 手機縮放尺寸偵測函式
// 2010.8 已經放棄不使用
// -------

/**
 * 偵測縮放尺寸的間隔時間，單位是毫秒
 * @type {number}
 */
//Viewportmove_dispatcher.prototype._detect_interval = 1000;

/**
 * zoom_scale
 * 
 * 目前縮放的比例
 * @class Viewportmove_dispatcher
 * @type number
 */
//Viewportmove_dispatcher.prototype._zoom_scale = 1;

/**
 * 設定縮放偵測器
 * 2010.8 後來決定不使用了
 * 
 * Provides a device_scale class on iOS devices for scaling user
 * interface elements relative to the current zoom factor.
 * 
 * http://37signals.com/svn/posts/2407-device-scale-user-interface-elements-in-ios-mobile-safari
 * Copyright (c) 2010 37signals.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @memberOf {Viewportmove_dispatcher}
 * @copyright http://37signals.com/svn/posts/2407-device-scale-user-interface-elements-in-ios-mobile-safari
 * @author Copyright (c) 2010 37signals.
 */
/*
Viewportmove_dispatcher.prototype._setup_zoom_detector = function () {
    
    return;
    
    if (typeof(jQuery) != 'undefined' 
         && typeof(jQuery.is_mobile_mode) == 'function'
         && jQuery.is_mobile_mode() === false)
        return;
    
    //原程式有這一段，但是用意不明，所以我先把他刪掉了
    //var _hasTouchSupport = "createTouch" in document;
    //if (!hasTouchSupport) return;
    
    var _headElement  = document.getElementsByTagName("head")[0];
    var _styleElement = document.createElement("style");
    
    _styleElement.setAttribute("type", "text/css");
    _headElement.appendChild(_styleElement);
    this._width_stylesheet = _styleElement.sheet;
    
    //設置寬度偵測器
    var _padding_text = 'a';
    for (var _i = 0; _i < 2000; _i++)
        _padding_text = _padding_text + ' a';
    
    var _width_detector_container = $('<div><span class="detector">'+_padding_text+'</span></div>')
        //.css('max-height', '0px')
        .css('overflow', 'hidden')
        .css('margin', '0')
        .css('padding', '0')
        .css('font-size', '1px')
        //.css('position', 'absolute')
        //.css('left', 0)
        .appendTo($('body'));
        _width_detector_container.find('span').css('background-color', 'red');
    this._width_detector = _width_detector_container.find('.detector');
    
    //其他的捲軸移動事件由Viewportview_dispatcher去偵測
    //window.addEventListener("scroll", updateDeviceScaleStyle, false);
    //window.addEventListener("resize", updateDeviceScaleStyle, false);
    //window.addEventListener("load",   updateDeviceScaleStyle, false);
    
    this._update_device_scale_style();
    
    var _this = this;
    setInterval(function () {
        
        var _detect_width = _this.get_detector_width();
        var _viewport_width = _this.get_viewport_width();
        
        //如果偵測到的寬度與之前設定的寬度不同，則觸發事件
        if (_detect_width != _viewport_width) {
            //將偵測到的寬度存成設定的寬度
            _this.viewport_width = _detect_width;
            _this.update_device_scale_style();
            _this.set_changed();
            _this.notify_listeners();
        }
    }, this._detect_interval);
    
    return this;
};
*/

/**
 * @type {jQuery}
 */
//Viewportmove_dispatcher.prototype._width_detector = null;

//Viewportmove_dispatcher.prototype._width_stylesheet = null;

/*
Viewportmove_dispatcher.prototype._get_viewport_width = function () {
    return this.viewport_width;
};
*/

/*
Viewportmove_dispatcher.prototype._get_detector_width = function () {
    var _width = this._width_detector.width();
    var _body = $('body');
    var _body_margin_left = _body.css('margin-left');
        _body_margin_left = _body_margin_left.substr(0, _body_margin_left.length - 2); 
    var _body_margin_right = _body.css('margin-right');
        _body_margin_right = _body_margin_right.substr(0, _body_margin_right.length - 2);
    var _max_width = $(document).width();
    
    var _screen_x = window.screenLeft;
    
    
    
    //$.test_msg($(document).width(), [_body_width, _body_margin_left, _body_margin_right, _width]);
    
    if ((_max_width - _body_margin_left - _body_margin_right) == _width) {
        _width = eval(parseInt(_width) + parseInt(_body_margin_left) + parseInt(_body_margin_right));
        _width = _width + _screen_x * 2;
        
    }
    else {
        //_width = eval(parseInt(_width) + parseInt(_body_margin_left));
        //_width = _width + _screen_x * 2 + $.getScrollbarWidth();
        
        _width = eval(parseInt(_width) + parseInt(_body_margin_left) + parseInt(_body_margin_right));
        _width = _width + _screen_x * 2;
    }
    
    //var _scrollbar = $.getScrollbarWidth();
    //if (_scrollbar > 0)
    //    _scrollbar = _scrollbar + 3;
    //
    //_width = eval(parseInt(_width) + parseInt(_body_margin_left) + parseInt(_body_margin_right));
    //    _width = _width + _screen_x * 2 + _scrollbar;
    
    return _width;
};
*/

/*
Viewportmove_dispatcher.prototype._get_device_scale = function() {
    var _deviceWidth = null;
    //偵測方向
    var _landscape = Math.abs(window.orientation) == 90;
    
    //if (_landscape) {
      // iPhone OS < 3.2 reports a screen height of 396px
      // Android沒有辦法偵測到landscape，所以這條規則無效
      //_deviceWidth = Math.max(480, screen.height);
    //} else {
      //_deviceWidth = screen.width;
    //}
    var _deviceWidth = this._get_detector_width();
    
    //var _result = _width_detector.find('.detector').width() / _deviceWidth;
    var _result = _deviceWidth / window.outerWidth;
    
    // 加入平滑化(smooth)修正比例參數
    for (var _i = 0; _i < this._scale_range.length-1; _i++) {
        var _range1 = this._scale_range[_i];
        var _range2 = this._scale_range[(_i+1)];
        
        if (_result == _range1)
            break;
        
        if (_result < _range1 
            && _result > _range2) {
            var _middle = (_range1 + _range2) / 2;
            if (_result > _middle)
                _result = _range1;
            else
                _result = _range2;
            break;
        }
    }
    
    return _result;
};
*/

/**
 * Android手機瀏覽器可能的縮放比例，用來作為平滑化的依據。
 * 但是這個比例並不一定正確，仍需要確認。
 * 不同手機上也可能會有不同比例。
 */
//Viewportmove_dispatcher.prototype._scale_range = [2.5, 2, 1.5, 1.25, 1, 0.75, 0.625, 0.5, 0.375, 0.3125, 0.25, 0.2];

/*
Viewportmove_dispatcher.prototype._update_device_scale_style = function () {
    var _stylesheet = this._width_stylesheet;
    if (typeof(_stylesheet.cssRules) != 'undefined' 
        && _stylesheet.cssRules.length) {
        _stylesheet.deleteRule(0);
    }
    
    var _scale = this._get_device_scale();
    
    _stylesheet.insertRule(
      ".device_scale {-webkit-transform:scale(" + _scale + ")}", 0
    );
    
    this._zoom_scale = _scale;
};
*/

//Viewportmove_dispatcher.prototype._viewport_locked = false,

/*
Viewportmove_dispatcher.prototype.lock_viewport = function () {
    if (this._viewport_locked === true)
        return;
    
    var _head = $('head');
    var _origin_viewport = $('head meta[name=viewport]');
    if (_origin_viewport.length === 0) {
        _origin_viewport = $('<meta name="viewport" ' 
                + 'content="width='+$(document).width()+', maximum-scale=5.0, minimum-scale=1.0, user-scalable=yes '
                + ' initial-scale=' + this._zoom_scale+ '" />')
            .appendTo(_head);
    }
    var _x_offset = window.pageXOffset;
        _origin_viewport.attr('x_offset', _x_offset);
    var _y_offset = window.pageYOffset;
        _origin_viewport.attr('y_offset', _y_offset);
    
    _origin_viewport.attr('name', 'origin_viewport');
    
    var _new_viewport = $('<meta name="viewport" content="width=device-width, maximum-scale=1.0, minimum-scale=1.0, user-scalable=yes" />')
        .appendTo(_head);
        
    this._viewport_locked = true;
    return this;
};
*/

/*
Viewportmove_dispatcher.prototype.unlock_viewport = function(){
    if (this._viewport_locked === false)
        return;
    
    var _new_viewport = $('head meta#kals_viewport_lock');
    var _origin_viewport = $('head meta[name=origin_viewport]');
    
    if (_new_viewport.length > 0)
        _new_viewport.remove();
    if (_origin_viewport.length > 0) {
        _origin_viewport.attr('name', 'viewport');
        alert(_origin_viewport.attr('content'));
        var _x_offset = _origin_viewport.attr('x_offset');
        var _y_offset = _origin_viewport.attr('y_offset');
        if (typeof(_x_offset) != 'undefined'
            && typeof(_y_offset) != 'undefined')
            window.scrollTo(_x_offset, _y_offset);
    }
    
    this._viewport_locked = false;
    return this;
};
*/

/* End of file Viewportmove_dispatcher */
/* Location: ./system/application/views/web_apps/toolkit/Viewportmove_dispatcher.js *//**
 * Feedback_manager
 * 設置意見回饋
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/16 下午 03:38:58
 */
function Feedback_manager() {
	
}

/**
 * @type Feedback
 */
Feedback_manager.prototype._feedback = null;

Feedback_manager.prototype.init = function () {
	
    var _base_url = KALS_context.get_base_url();
    var _libraries_url = KALS_context.get_library_url();

    var _lang = KALS_context.lang;

    //$.test_msg('feedback init', _lang.line('feedback.ui.label'));

    this._feedback = Feedback({
        //h2cPath: 'js/html2canvas.js',
        h2cPath: _base_url + 'libraries/feedback.js/html2canvas.js',
        url: _base_url + 'feedback',
        label: _lang.line('feedback.ui.label'),   //"Send Feedback";
        header: _lang.line('feedback.ui.header'),   //"Send Feedback";
        nextLabel: _lang.line('feedback.ui.nextLabel'),   //"Continue";
        reviewLabel: _lang.line('feedback.ui.reviewLabel'),   //"Review";
        sendLabel: _lang.line('feedback.ui.sendLabel'),   //"Send";
        closeLabel: _lang.line('feedback.ui.closeLabel'),   //"Close";
        messageSuccess: _lang.line('feedback.ui.messageSuccess'),   //"Your feedback was sent succesfully.";
        messageError: _lang.line('feedback.ui.messageError'),   // "There was an error sending your feedback to the server.";
        issueLabel: _lang.line('feedback.ui.issueLabel')   //  "Please describe the issue you are experiencing";
    });
};

Feedback_manager.prototype.open = function () {
    this._feedback.open();
    //$(".feedback-btn.KALS").click();
};

Feedback_manager.prototype.nav_heading = new KALS_language_param (
    'Feedback',
    'toolbar.navigation_list.feedback'
);

/**
 * 導覽列相關的設定
 * @type JSON
 */
Feedback_manager.prototype.nav_config = {
    /**
     * 顯示資料 
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * 檢測是否是獨立視窗
 * 
 * 搭配模組化使用
 * @returns {Boolean}
 */
Feedback_manager.prototype.is_absolute = function () {
    return false;
}

/* End of file Feedback_manager */
/* Location: ./system/application/views/web_apps/Feedback_manager.js *//**
 * KALS_authentication
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license	   http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/12 下午 09:02:21
 * @extends {JSONP_dispatcher}
 */
function KALS_authentication(){
    
    JSONP_dispatcher.call(this);
    
    this._auth_data = null;
    this.reset_auth_data();
    
    //從這邊開始，向伺服器取得預設重置的資料
    /*
    var _this = this;
    var _default_data_url = 'authentication/default_data';
    KALS_util.ajax_get({
        url: _default_data_url,
        callback: function (_data) {
            
            //$.test_msg('KALS_authentication() _default_data', _data);
            
            _this._default_reset_data = _data;
        }
    });
    */
   
   //2010.10.26 請KALS_context給予資料吧
   var _this = this;
   KALS_context.add_once_listener(function (_context, _data) {
       if (typeof(_data.auth) !== 'undefined') {
           _this._default_reset_data = _data.auth;
       }
   });
}

KALS_authentication.prototype = new JSONP_dispatcher();

KALS_authentication.prototype._login_url = 'authentication/login';
KALS_authentication.prototype._encrypt_login_url = 'authentication/encrypt_login';
KALS_authentication.prototype._register_url = 'authentication/register';
KALS_authentication.prototype._logout_url = 'authentication/logout';
KALS_authentication.prototype._deregister_url = 'authentication/deregister';
KALS_authentication.prototype._check_login_url = 'authentication/check_login';

KALS_authentication.prototype._is_login = false;

// ---------
// 登入資料
// ---------

/**
 * 登入資料
 */
KALS_authentication.prototype._auth_data = null;

/**
 * 取得登入資料
 * @type {Object} JSON物件
 */
KALS_authentication.prototype.get_auth_data = function () {
    return this._auth_data;
};

KALS_authentication.prototype.set_email = function (_value) {
    _value = $.trim(_value);
    this._auth_data.email = _value;
    return this;
};

KALS_authentication.prototype.set_password = function (_value) {
    this._auth_data.password = _value;
    return this;
};

/**
 * 設定是否是嵌入登入
 * @param {Boolean} _value
 * @returns {KALS_authentication}
 */
KALS_authentication.prototype.set_embed = function (_value) {
    this._auth_data.embed = _value;
    return this;
};

/**
 * 設置標註指引類型
 * @deprecated 20111106 Pudding Chen
 *     廢棄，在讀取generic_info的時候設置吧
 */
//KALS_authentication.prototype.set_anchor_navigation_type = function (_value) {
//    this._auth_data['anchor_navigation_type'] = _value;
//    return this;
//};

KALS_authentication.prototype.is_embed = function () {
    return this._auth_data.embed;
};

KALS_authentication.prototype.is_login = function () {
    return this._is_login;   
}; 

/**
 * 清空帳號資料
 * 
 * @return {null}
 * @version 20111110 Pudding Chen
 */
KALS_authentication.prototype.reset_auth_data = function () {
    this._auth_data = {
        email: null,
        password: null,
        embed: false,
        anchor_navigation_type: KALS_CONFIG.anchor_navigation_type
    };
    
    //如果有KALS_CONFIG設定的話
    if (typeof(KALS_CONFIG.user_email) === 'string') {
        this._auth_data.email = KALS_CONFIG.user_email;
        this._auth_data.embed = true;
    }
    
    return this.reset_data();
};

KALS_authentication.prototype.config_is_embed = function () {
    return (typeof(KALS_CONFIG.user_email) === 'string');
};

/**
 * 取得登入錯誤的訊息。這是依據this._auth_data來判斷的。
 * @type {KALS_language_param}
 * @private
 */
KALS_authentication.prototype._get_error_message = function () {
    var _lang_param;
    
    if (this._auth_data.email === null 
        && (this._auth_data.embed === false && this._auth_data.password === null)) {
        _lang_param = new KALS_language_param('Email and Password are empty.'
            , 'authentication.error.message_empty_email_and_password');
    }   
    else if (this._auth_data.email === null) {
        _lang_param = new KALS_language_param('Email is empty.'
            , 'authentication.error.message_empty_email');
    }   
    else if (this._auth_data.embed === false && this._auth_data.password === null) {
        _lang_param = new KALS_language_param('Password is empty.'
            , 'authentication.error.message_empty_password');
    }   
    else {
        _lang_param = new KALS_language_param('System error.'
            , 'authentication.error.message');
    }    
    
    return _lang_param;
};

// ---------
// 登入功能
// ---------

/**
 * 登入
 * 
 * 以有的資料進行登入動作
 * @param {boolean} _return_error = false 是否要回傳錯誤訊息？
 * @param {Function} _callback 登入之後的動作
 */
KALS_authentication.prototype.login = function (_return_error, _callback) {
    
    if ($.is_function(_return_error) 
            && $.is_null(_callback)) {
        _callback = _return_error;
        _return_error = false;
    }
    
    var _data = this.get_auth_data();
    var _this = this;
    var _heading, _message;
        
    if (_data.email === null
            || (_data.embed === false && _data.password === null)) {   
        _heading = new KALS_language_param('ERROR', 'authentication.login_error.heading');
        _message = this._get_error_message();
        
        KALS_util.alert(_heading, _message, function () {
             _this.show_login_form();   
        });
    }
    else    //如果資料都齊全
    {   
        this._$load_url = this._login_url;
        
        //$.test_msg('login', this._$load_url);
        //$.test_msg('login data', _data);
        
        this.request_embed_email(function () {
            _this.load(_data, function (_this, _data) {
                _this._after_login(_return_error, _data, _callback);
            });
        });
    }
    return this;
};

/**
 * 登入之後的動作
 * 
 * @version 20140519 Pulipuli Chen
 * @param {boolean} _return_error = false 是否要回傳錯誤訊息？
 * @param {JSON} _data
 * @param {Function} _callback
 * @returns {KALS_authentication}
 */
KALS_authentication.prototype._after_login = function (_return_error, _data, _callback) {
    //$.test_msg('login load', _data);

    var _this = this;
    if (typeof(_data.error) !== 'undefined') {
        //顯示錯誤

        var _heading = new KALS_language_param('ERROR', 'authentication.login_error.heading');
        var _message = new KALS_language_param('E-mail or password is not correct.', 'authentication.login_error.' + _data.error);
        //$.test_msg('auth.login()', _return_error);
        if (_return_error) {
            if ($.is_function(_callback)) {
                _callback(_this, _message);
            }
        }
        else {
            KALS_util.alert(_heading, _message, function () {
                //_this.show_login_form();
                var _content = new Window_login();
                KALS_window.setup_window(_content);   
            });   
        }
    }
    else {
        _this._is_login = true;

        if (KALS_CONFIG.isolation_mode) {
            KALS_context.policy.set_attr("read", true);
        }

        setTimeout(function () {
            if ($.is_function(_callback)) {
                _callback(_this, _data);
            } 
        }, 100);

        //else
        //    _this.login_callback(_this, _data);




        //$.test_msg('load complete', [_this._is_login, _this.is_login()]);
    }
    
    return this;
};

/**
 * 內嵌登入的檢查方法
 * @param {Function} _callback
 * @returns {KALS_authentication}
 */
KALS_authentication.prototype.request_embed_email = function (_callback) {
    
    if (this._auth_data.embed === true) {
        
        var _url = this._auth_data.email;
        
        var _this = this;
        if ($.is_url(_url) || $.starts_with(_url, "/")) {
            $.test_msg("內嵌登入，是網址", _url);
            
            if (_url.indexOf("?") === -1) {
                _url = _url + "?" + $.create_id("auth");
            }
            else {
                _url = _url + "&" + $.create_id("auth");
            }
            
            $.get(_url, function (_data) {
                if ($.is_email(_data)) {
                    _this.set_email(_data);
                }
                else {
                    _this.set_embed(false);
                }
                $.trigger_callback(_callback);
            });
        }
        else {
            $.trigger_callback(_callback);
            return this;
        }
    }
    else {
        $.trigger_callback(_callback);
        return this;
    }
};

/**
 * 顯示登入表單
 * @param {function} _callback
 */
KALS_authentication.prototype.show_login_form = function (_callback) {
    
    // TODO KALS_authentication.show_login_form() 這邊要顯示登入表單，但是尚未撰寫，所以先空著
    $.trigger_callback(_callback);
    return this;
};

/**
 * 以加密的方式登入
 * @param {boolean} _embed = false
 */
KALS_authentication.prototype.encrypt_login = function () {
    
    //現在先不作加密式登入功能
    //未來有時間再來作
    
    //所以就使用普通登入的功能
    return this.login(_embed);
};

// ---------
// 註冊功能
// ---------

/**
 * 註冊
 * @param {boolean} _return_error = false
 * @param {function} _callback = function (_auth, _data) { };
 */
KALS_authentication.prototype.register = function (_return_error, _callback) {
    
    if ($.is_function(_return_error) && $.is_null(_callback)) {
        _callback = _return_error;
        _return_error = false;
    }
    
    var _data = this.get_auth_data();
    var _this = this;
    var _heading, _message;
        
    if (_data.email === null) {
        _heading = new KALS_language_param('REGISTER ERROR', 'authentication.register_error.heading');
        _message = this._get_error_message();
        KALS_util.alert(_heading, _message, function () { _this.show_register_form(); });
    }
    else {
        this._$load_url = this._register_url;
        
        this.load(_data, function (_this, _data) {
            
            //$.test_msg('auth.register()', [_data, _return_error]);
            
			//先檢查登入是否有錯誤
            if (typeof(_data.error) !== 'undefined') {
                _heading = new KALS_language_param('REGISTER ERROR', 'authentication.register_error.heading');
                _message = new KALS_language_param('The e-mail is not correct or had been registered.'
                    , 'authentication.register_error.' + _data.error);
                
                if (_return_error) {
                    if ($.is_function(_callback)) {
                        _callback(_this, _message);
                    }     
                }
                else {
                    KALS_util.alert(_heading, _message, function () { 
                        //_this.show_register_form();
                        var _content = new Window_register();
                        KALS_window.setup_window(_content);
                    });
                }
            }
            else {
               //正常登入的情況
               _this._is_login = true;
               
                setTimeout(function () {
                    if ($.is_function(_callback)) {
                        _callback(_this, _data);
                    } 
                }, 100);
                //else
                //    this.register_callback(_this, _data);
                
            }  
        });    //this.load(...
    }
    
    return this;
};

/**
 * 顯示註冊表單
 * @param {Function} _callback
 */
KALS_authentication.prototype.show_register_form = function (_callback) {
    // TODO 2010.8 show_regieter_form 這邊要顯示註冊表單，但是尚未撰寫，所以先空著
    
    $.trigger_callback(_callback);
    return this;
};

// ---------
// 登出功能
// ---------

/**
 * 登出
 * @param {boolean} _return_error = false
 * @param {function} _callback = function (_auth: KALS_authentication, _data) { }; 
 */
KALS_authentication.prototype.logout = function (_return_error, _callback) {
    
    if ($.is_function(_return_error) && $.is_null(_callback)) {
        _callback = _return_error;
        _return_error = false;
    }
    
    var _heading, _message;
    
    this._$load_url = this._logout_url;
    
    this.load(function (_this, _data) {
        
        //$.test_msg('auth logout', _data);
        
        if (typeof(_data.error) !== 'undefined') {
            
            
            //顯示錯誤
            _heading = new KALS_language_param('ERROR', 'authentication.logout_error.heading');
            _message = new KALS_language_param('Logout failed.', 'authentication.logout_error.message');
            
            if (_return_error) {
                if ($.is_function(_callback)) {
                    _callback(_this, _message);
                }      
            }
            else {
                KALS_util.alert(_heading, _message, function () { 
                    //_this.show_login_form();
                    var _content = new Window_logout();
                    KALS_window.setup_window(_content); 
                });
            }
        }
        else { //if (_data === true) {
            /**
             * 由於登出後回傳資料有所修改，原本的登出會有bug
             * 在此修正
             * @version 20111110 Pudding Chen
             */
               
            var _auth_data = _this.reset_auth_data();
            
            _this._is_login = false;
			
            if (KALS_CONFIG.isolation_mode) {
                KALS_context.policy.set_attr("read", false);
            }
            
            setTimeout(function () {
                if ($.is_function(_callback)) {
                    _callback(_this, _data);
                }    
            }, 100);
        }
    });
    return this;
};


/**
 * 刪除已經登入的使用者
 * 這是測試用的功能，平常不應該使用
 * @param {function} _callback = function (_auth: KALS_authentication, _data) { }; 
 */
KALS_authentication.prototype.deregister = function (_callback) {
    
    var _heading, _message;
    
    this._$load_url = this._deregister_url;
    
    //$.test_msg('auth.deregister()', this._$load_url);
    
    this.load(function (_this, _data) {
        
        //$.test_msg('auth.deregister() loaded', _data);
        
        if (typeof(_data.error) !== 'undefined') {            
            //顯示錯誤
            _heading = new KALS_language_param('ERROR', 'authentication.deregister_error.heading');
            _message = new KALS_language_param('Logout failed.', 'authentication.deregister_error.message');
            
            KALS_util.alert(_heading, _message, function () { 
                //_this.show_login_form();
                var _content = new Window_logout();
                KALS_window.setup_window(_content); 
            });
        }
        else if (_data === true) {
            _this._is_login = false;
            
            var _auth_data = _this.reset_auth_data();
            
            KALS_util.notify('Deregister success!');
            
            setTimeout(function () {
                if ($.is_function(_callback)) {
                    _callback(_this, _data);
                }    
            }, 100);
        }
    });
    return this;
};

// --------
// 確認是否登入
// --------

/**
 * 不輸入帳號密碼地到伺服器查詢是否有session登入狀態。有的話則切換成登入。
 * @param {function} _callback
 */
KALS_authentication.prototype.check_login = function (_callback) {
    
    var _embed_login = this.config_is_embed();
    
    if (_embed_login === false) {
        //如果不是預設帳號登入，則改成check_login
        //20111105 Pudding Chen
        this._$load_url = this._check_login_url;
        
        /**
         * @deprecated 20111106 Pudding Chen
         */
        //設定資料
        //var _check_data = {};
            //標註指引類型
            //_check_data['anchor_navigation_type'] = this.get_auth_data().get_anchor_navigation_type();
        //this.load(_check_data ,function (_this, _data) {
        
        this.load(function (_this, _data) {
            
            //$.test_msg("check_login", _data);
			
            if (typeof(_data.login) === 'boolean' 
                    && _data.login === true) {
                _this._is_login = true;
            }
            else {
                _this._is_login = false;
            }
            
            _this._login_checked = true;
            
            if (typeof(_data.webpage_id) === "number") {
                KALS_context.webpage_id = _data.webpage_id;
            }
            
            //$.test_msg('auth check_login()', _data);
            
            if ($.is_function(_callback)) {
                _callback(_this, _data);
            }
        });    //this.load(function (_this, _data) {
    }
    else {
        this._login_checked = true;
        this.login(false, _callback);
    }
    
    return this;
};

/**
 * 已經確認過是否登入
 * @type Boolean
 */
KALS_authentication.prototype._login_checked = false;

/**
 * 確認是否已經check過
 * @returns {Boolean}
 */
KALS_authentication.prototype.is_login_checked = function () {
    return this._login_checked;
}

/* End of file KALS_authentication */
/* Location: ./system/application/views/web_apps/KALS_authentication.js *//**
 * URL_hash_dispatcher
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/21 下午 02:28:30
 * @extends {Event_dispatcher}
 */
function URL_hash_dispatcher(){
   
   Event_dispatcher.call(this);
   
   this._hash_data = null;
   //this._setup_onhashchange_backward(); 
}

URL_hash_dispatcher.prototype = new Event_dispatcher(); 

/**
 * @memberOf {URL_hash_dispatcher}
 * @type {Name_value_pair}
 */
URL_hash_dispatcher.prototype._hash_data = null;

/**
 * 取得hash字串
 *
 * @memberOf {URL_hash_dispatcher}
 * @type {String} Description about return value.
 */
URL_hash_dispatcher.prototype._get_location_hash = function () {
    var _hash = '';
    if (typeof(location.hash) !== 'undefined') {
        _hash = location.hash;
        if (_hash.substring(0, 1) === '#') {
            _hash = _hash.substring(1, _hash.length);
        }
    }
    else {
        //2010.8 因為大部分瀏覽器都支援location.hash，所以下面這種情況應該是不會發生
        var _url = location.href;
    
        var _hash_pos = _url.indexOf('#');
        var _query_pos = _url.indexOf('?');
        
        var _start = 0;
        var _end = _url.length;
        if (_hash_pos === -1) {
            //情況1：沒有hash
            return '';
        }
        else if (_query_pos === -1) {
            //情況2：有hash但沒有query
            _start = _hash_pos + 1;
        }
        else if (_hash_pos < _query_pos) {
            //情況3：hash比query先寫
            _start = _hash_pos + 1;
            _end = _query_pos;
        }
        else {
            //情況4：query比hash
            _start = _hash_pos + 1;
        }
        
        _hash = _url.substring(_start, _end);    
    }
    
    return _hash;
};

/**
 * 設定hash
 * @param {String} _hash 
 */
URL_hash_dispatcher.prototype._set_location_hash = function(_hash) {
    
    this._set_lock = true;
    
    _hash = $.trim(_hash);
    _hash = '#' + _hash;
    
    var _pos = this._save_scroll_position();
    
    if (typeof(location.hash) !== 'undefined') {   
        //$.test_msg('設定location hash', this._set_lcok);
        window.location.hash = _hash;
    }
    else {
        //2010.8 因為大部分瀏覽器都支援location.hash，所以下面這種情況應該是不會發生
        var _url = location.href;
        
        var _hash_pos = _url.indexOf('#');
        
        if (_hash_pos !== -1) {
            var _start = _hash_pos;
            var _end = _url.length;
            
            var _query_pos = _url.indexOf('?');
            if (_query_pos !== -1
                && (_query_pos > _hash_pos)) {
                _end = _query_pos;
            }
            
            var _head = _url.substring(0, _start);
            var _foot = '';
            if (_url.length !== _end) {
                _foot = _url.substring(_end, _url.length);
            }
            
            _url = _head + _foot;
        }
        
        window.location.href = _url + _hash;
    }
    
    this._restore_scroll_position(_pos);
    
    return this;
};

URL_hash_dispatcher.prototype._save_scroll_position = function () {
    
    var _pos = {
        x: window.scrollX,
        y: window.scrollY
    };
    return _pos;
};

/**
 * 讓網頁開始捲動
 * @deprecated 20131115 不使用了
 * @param {Object} _pos
 */
URL_hash_dispatcher.prototype._restore_scroll_position = function (_pos) {

    window.scrollTo(_pos.x, _pos.y);

};

URL_hash_dispatcher.prototype._set_document_title = function (_hash) {
    
    this._set_lock = true;
    //設定標題修改
    var _title = document.title;
    var _hash_pos = _title.lastIndexOf('#');
    
    if (_hash_pos > -1) {
        _title = _title.substring(0, _hash_pos);
    }
    
    if (_hash !== '') {
		_hash = ' #' + _hash;
	}
    
    _title = _title + _hash;
    document.title = _title;
    
    return this;
};

/**
 * @type {Name_value_pair}
 * @param {boolean} _force = false：是否要強制覆蓋原本的設定。如果已經從this._get_location_hash()取得過資料，則此處不會再設定。
 */
URL_hash_dispatcher.prototype._setup_hash_data = function (_force) {
    if ($.is_null(_force)) {
		_force = false;
	}
    
    if (this._hash_data === null || _force) {
        var _hash = this._get_location_hash();
        //$.test_msg('setup', _hash);
        this._hash_data = new Name_value_pair(_hash);
    }
    return this._hash_data;
};

/**
 * 取得hash的欄位資料
 * @param {string} _key
 * @param {Object} _default = null 預設值
 */
URL_hash_dispatcher.prototype.get_field = function (_key, _default) {
    
    var _hash_data = this._setup_hash_data();
    return _hash_data.get_field(_key, _default);
};

/**
 * 確認hash的欄位資料
 * @param {string} _key
 */
URL_hash_dispatcher.prototype.has_field = function (_key) {
    
    var _hash_data = this._setup_hash_data();
    return _hash_data.has_field(_key);
};


/**
 * 取得所有hash的資料
 * @type {Name_value_pair}
 */
URL_hash_dispatcher.prototype.get_hash_data = function () {
    return this._setup_hash_data();
};

/**
 * 設定指定欄位的資料到hash中
 * @param {string} _key
 * @param {Object} _value
 */
URL_hash_dispatcher.prototype.set_field = function (_key, _value) {
    
    try {
        //嘗試將值化為字串，因為hash只能存入字串而已
        _value = _value + '';
    }
    catch (e) { }
    
    var _hash_data = this._setup_hash_data();
    _hash_data.set_field(_key, _value);
    this._hash_data = _hash_data;
    var _hash = _hash_data.serialize();
    
    this._set_location_hash(_hash);
    this._set_document_title(_hash);
    
    return this;        
};

/**
 * 刪除指定的欄位，並設定到hash中
 * @param {string} _key
 */
URL_hash_dispatcher.prototype.delete_field = function (_key) {
    
	
    var _hash_data = this._setup_hash_data();
    _hash_data.delete_field(_key);
    this._hash_data = _hash_data;
    var _hash = _hash_data.serialize();
    
    this._set_location_hash(_hash);
    this._set_document_title(_hash);
    
    return this;     
};

/**
 * 設定this._hash_data當中
 * @deprecated 不建議使用此方法
 * @param {Object} _object_data
 */
URL_hash_dispatcher.prototype.set_hash_data = function (_object_data) {
    
    var _hash_data = this._setup_hash_data();
    _hash_data._data = _object_data;
    this._hash_data = _hash_data;
    var _hash = _hash_data.serialize();
    this._set_location_hash(_hash);
    
    //通知有所改變
    this.notify_listeners(_hash_data.get_data());
    return this;
};

/**
 * 重置hash data
 */
URL_hash_dispatcher.prototype.clear_hash = function () {
    
    this._hash_data = null;
    this._set_location_hash('');
    this.notify_listeners({});
    return this;
};

/**
 * 是否已經設定了監聽事件？在this._setup_onhashchange()之後就會變成true了
 * @type {boolean}
 */
URL_hash_dispatcher.prototype._had_setup_onhashchange = false;
URL_hash_dispatcher.prototype._set_lock = false;

/**
 * 設定hash改變的監聽事件，並限定是非URL_hash_dispatcher設定的hash(通常都是「上一頁」的功能)。這是要搭配「jquery.ba-hashchange.js」才能運作的功能。
 * 
 */
URL_hash_dispatcher.prototype._setup_onhashchange_backward = function () {
    if (this._had_setup_onhashchange === false) {
        var _this = this;
        $(window).hashchange(function () {
            if (_this._set_lock === false) {
                //$.test_msg('backward setup 之前', _this._hash_data.get_data());
                
                //只有在沒有特別設定this._set_lock的時候，才會執行這段
                var _hash_data = _this._setup_hash_data(true);
                
                
                //$.test_msg('backward', _hash_data.get_data());
                
                //加上一個上一頁的備註
                //_hash_data.set_field('backward', true);
                var _data = _hash_data.get_data();
                var _backward_field = 'backward';
                _data[_backward_field] = true;
                //$.test_msg('hashchange' + _this._set_lock, _data);
                _this.notify_listeners(_data);   
                delete _data[_backward_field]; 
            }
            else {
                setTimeout(function () {
                    _this._set_lock = false;    
                }, 2000);
            }
        });
        this._had_setup_onhashchange = true;
    }
    return this;
};

/**
 * 開啟之前檢查網頁的hash
 * @param {function} _callback
 */
URL_hash_dispatcher.prototype.check_hash = function (_callback) {
    
    //$.test_msg('URL_hash_dispatcher.check_hash()', [window.location.hash]);
    
    //$.test_msg('has check_hash() end', this.has_field('select'));
    
	//$.test_msg('URL_hash_dispatcher', 'pass1');
	
    //優先度：view recommend = select
    if (this.has_field('view') === true) {
        
    }
    else if (this.has_field("mobile") === true) {
        this._action_mobile();
    }
    else {
		//$.test_msg('URL_hash_dispatcher', 'pass3');
		
        if (this.has_field('recommend') === true) {
            this._action_recommend()
        }
        if (this.has_field('select') === true) {
            this._action_select();
        }  
    }
    
    //$.test_msg('has check_hash() end', this.has_field('recommend'));
    
    this.delete_field('backward');
    this.delete_field('model');
	
	//$.test_msg('URL_hash_dispatcher', 'pass');
    
    $.trigger_callback(_callback);
    return this;
};

/**
 * 啟動view的動作
 * @returns {URL_hash_dispatcher.prototype}
 */
URL_hash_dispatcher.prototype._action_view = function () {
    
    if ($.is_mobile_mode()) {
        return this;
    }
    
    //$.test_msg('URL_hash_dispatcher', 'pass2');
		
    var _id = this.get_field('view');
    KALS_context.init_profile.add_listener(function () {
        KALS_text.tool.view.load_view(_id);
    });
    
    return this;
};

/**
 * 啟動mobile相關的動作
 * @returns {URL_hash_dispatcher}
 */
URL_hash_dispatcher.prototype._action_mobile = function () {
    
    var _url; 
    
    if (this.has_field("topic_id") === false) {
        //KALS_context.redirect("mobile_apps/annotation_topics", true);
        _url = "mobile_apps/annotation_topics";
    }
    else {
        //KALS_context.redirect("mobile_apps/annotation_thread/topic_id/" + this.get_field("topic_id") + "#annotation_" + this.get_field("annotation_id"), true);
        _url = "mobile_apps/annotation_thread/topic_id/" 
                + this.get_field("topic_id")
                + "#annotation_" 
                + this.get_field("annotation_id");
    }
    
    KALS_context.redirect(_url, true);
    
    return this;
};

/**
 * 啟動recommend的動作
 * @returns {URL_hash_dispatcher.prototype}
 */
URL_hash_dispatcher.prototype._action_recommend = function () {
    
    if ($.is_mobile_mode()) {
        return this;
    }
    
    //$.test_msg('URL_hash_dispatcher', 'pass4');
    var _id = this.get_field('recommend');
    //$.test_msg('has check_hash() recommend', _id);
    KALS_text.tool.recommend.load_recommend(_id);
    
    return this;
};

/**
 * 啟動select的動作
 * @returns {URL_hash_dispatcher.prototype}
 */
URL_hash_dispatcher.prototype._action_select = function () {
    
    if ($.is_mobile_mode()) {
        return this;
    }
    
    //$.test_msg('URL_hash_dispatcher', 'pass5');
    var _scope_text = this.get_field('select');
    //$.test_msg('has check_hash()', _scope_text);

    KALS_context.init_profile.add_listener(function () {
        KALS_text.selection.select.load_select(_scope_text);  
    });
    /*
    KALS_context.init_profile.add_listener(function () {
        //KALS_context.auth.add_once_listener(function () {
            //setTimeout(function () {
                $.test_msg("gogo select");
                KALS_text.selection.select.load_select(_scope_text);  
            ///}, 5000);
        //});
    });
    */
    //setTimeout(function () {
    //	KALS_text.selection.select.load_select(_scope_text);
    //}, 3000); 
    
    return this;
};

/* End of file URL_hash_dispatcher */
/* Location: ./system/application/views/web_apps/URL_hash_dispatcher.js *//**
 * URL_dispatcher
 *
 * 分擔KALS_context中關於網址部分的工作
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2014/5/19 下午 03:36:17
 * @extends {Multi_event_dispatcher}
 */
function URL_dispatcher(){
   
   Event_dispatcher.call(this);
   
    //設定基本網址
    if (typeof(KALS_loader) !== 'undefined') {
        this.base_url = KALS_loader.get_base_url();
    }
    else {
        // TODO 2010.8 KALS_context.setup_base_url: 只能在測試時使用
        this.setup_base_url();
    }
    
    if (this.base_url === null || this.base_url === '') {
        this.base_url = 'http://demo-kals.lias.nccu.edu.tw/kals/web_apps/';
    }
}

URL_dispatcher.prototype = new Multi_event_dispatcher(); 


/**
 * @example http://192.168.11.2/kals/web_apps/
 * @example /kals/web_apps/
 * @type {string}
 */
URL_dispatcher.prototype.base_url = null;

/**
 * 測試時使用限定
 * 偵測基本網址的用法
 * 
 * @type {string} base_url
 */
URL_dispatcher.prototype.setup_base_url = function () {
    if (this.base_url !== null) {
        return this;
    }
    
    var _scripts = $('script');
    
    //$.test_msg('KALS_context.setup_base_url()', _scripts.length);
    
    var _needle = '/web_apps/';
    for (var _i in _scripts) {
        var _src = _scripts.eq(_i).attr('src');
        if (typeof(_src) !== 'string') {
			continue;
		}
        
        var _pos = _src.indexOf(_needle); 
        if (_pos > 0) {
            this.base_url = _src.substring(0, _pos + _needle.length);
            
            //$.test_msg('KALS_context.setup_base_url()', this.base_url);
            
            return this.base_url;
        }
    }
    return null;
};

/**
 * 供其他物件取用基礎網址
 * @param {string|array} _file
 * @param {Boolean} _from_root = false 是否從根目錄開始(/kals)，而非從/kals/web_apps開始
 * @type {string}
 */
URL_dispatcher.prototype.get_base_url = function (_file, _from_root) {
    
    if (_from_root === undefined) {
        _from_root = false;
    }
    
    if ($.is_null(_file)) {
        _file = '';
    }
    else if ($.is_array(_file)) {
        var _temp = '';
        for (var _i in _file) {
            var _f = _file[_i];
            if ($.starts_with(_f, '/')) {
                _f = _f.substr(1, _f.length);
            }
            if (_i < _file.length - 1) {
                $.appends_with(_f, '/');
            }
            
            _temp = _temp + _f;
        }
        _file = _temp;
    }
    
    if (this.base_url === null) {
        return _file;
    }
    
    if ($.is_string(_file) && $.starts_with(_file, '/')) {
        _file = _file.substring(1, _file.length);
    }
    
    if ($.ends_with(this.base_url, '/') === false) {
        this.base_url = this.base_url + '/';
    }
    
    var _url;
    
    // 如果是從根目錄開始的話
    if (_from_root === true) {
        var _needle = "web_apps/";
        var _root_path = this.base_url.substr(0, (this.base_url.length - _needle.length));
        _url = _root_path + _file;
    }
    else {
        _url = this.base_url + _file;
    }
    
    //$.test_msg('KALS_context.get_base_url()', [_url, this.base_url, _file]); 
    
    return _url;
};

/**
 * 回傳圖片網址
 * @param {string} _img 圖片的檔案名稱
 * @type {string} 圖片的完整網址
 */
URL_dispatcher.prototype.get_image_url = function (_img) {
    
    if ($.is_null(_img)) {
        _img = '';
    }
    
    if ($.is_string(_img) && $.starts_with(_img, '/')) {
        _img = _img.substring(1, _img.length);
    }
    
    if (this.base_url === null) {
        return _img;
    }
        
    var _img_url = this.get_base_url();
    var _pos = _img_url.lastIndexOf('/web_apps');
    if (_pos === -1) {
        return _img;
    }
    
    _img_url = _img_url.substring(0, _pos + 1);
    _img_url = _img_url + 'images/' + _img;
    
    if (_img === '') {
        return _img_url;
    }
    else {
        return $('<img src="' + _img_url + '" border="0" />');
    }
};

/**
 * 回傳libraries網址
 * @param {string} _file 檔案名稱
 * @type {string} 檔案的完整網址
 */
URL_dispatcher.prototype.get_library_url = function (_file) {
    
    var _img = _file;
    if ($.is_null(_img)) {
        _img = '';
    }
    
    if ($.is_string(_img) && $.starts_with(_img, '/')) {
        _img = _img.substring(1, _img.length);
    }
    
    if (this.base_url === null) {
        return _img;
    }
        
    var _img_url = this.get_base_url();
    var _pos = _img_url.lastIndexOf('/web_apps');
    if (_pos === -1) {
        return _img;
    }
    
    _img_url = _img_url.substring(0, _pos + 1);
    _img_url = _img_url + 'libraries/' + _img;
    
    return _img_url;
};

/**
 * 重新引導網頁到其他地方
 * @param {String} _url
 * @param {Boolean} _from_root
 * @returns {URL_dispatcher}
 */
URL_dispatcher.prototype.redirect = function (_url, _from_root) {
    _url = this.get_base_url(_url, _from_root);
    
    location.href = _url;
    return this;
};

/* End of file URL_dispatcher */
/* Location: ./system/application/views/web_apps/URL_dispatcher.js *//**
 * Context_loader
 *
 * 分擔KALS_context中關於網址部分的工作
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2014/5/19 下午 03:36:17
 * @extends {Multi_event_dispatcher}
 */
function Context_loader(){
   
   Event_dispatcher.call(this);
   
}

Context_loader.prototype = new Multi_event_dispatcher(); 

/**
 * 讀取模組設定資料的位置
 * @type {string}
 */
Context_loader.prototype._modules_config_url = 'generic/modules_config';


/**
 * 讀取模組會用到的資料
 * @param {Function} _callback
 * @returns {KALS_context}
 */
Context_loader.prototype.load_modules_config = function (_callback) {
    
    var _this = this;
    var _loaded_callback = function (_data) {
        
        if (typeof(_data.KALS_view_manager) !== 'undefined') {
            KALS_context.view_manager.set_data(_data.KALS_view_manager);
        }
        
        $.trigger_callback(_callback);
    };
    
    var _config = {
        "url": this._modules_config_url,
        "callback": _loaded_callback,
        "fixed_callback": true,
        "retry_wait": 3 * 1000
    };
    
    KALS_util.ajax_get(_config);
    
    return this;
};

/**
 * 讀取網頁設定資料的位置
 * @type {string}
 */
Context_loader.prototype._webpage_info_url = 'generic/webpage_info';

/**
 * 讀取網頁設定資料
 * @param {Function} _callback
 * @returns {KALS_context}
 */
Context_loader.prototype.load_webpage_info = function (_callback) {
    
    var _this = this;
    var _loaded_callback = function (_data) {
        
        if (typeof(_data.webpage_id) !== 'undefined') {
            _this.webpage_id = _data.webpage_id;
        }
        
        $.trigger_callback(_callback);
    };
    
    var _config = {
        "url": this._webpage_info_url,
        "callback": _loaded_callback
    };
    
    KALS_util.ajax_get(_config);
    
    return this;
};

/* End of file Context_loader */
/* Location: ./system/application/views/web_apps/Context_loader.js *//**
 * Style_manager
 * 管理CSS，動態地新增、刪除、載入外部CSS
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/16 下午 03:38:58
 */
function Style_manager() {
}

Style_manager.prototype.create_style = function (_style_name) {
    var _style;
    
    if (this._use_style_sheet() === false) {
        if ($.isset(_style_name)) {
            _style = $('head style[name="'+_style_name+'"]');
        
            if (_style.length === 0) {
                _style = $('<style type="text/css" name="'+_style_name+'"></style>')
                    .appendTo($('head'));
            }
            
            return _style;    
        }
        else {
            _style = $('<style type="text/css"></style>')
                .appendTo($('head'));
            return _style;
        }    
    }
    else {
        _style = document.createStyleSheet();
        _style.title = _style_name;
        return _style;
    }
};

Style_manager.prototype.get_style = function (_style_name) {
    var _style;
    if ($.is_null(_style_name)) {
		return null;
	}
	else 
		if (this._use_style_sheet() === false) {
			_style = $('head style[name="' + _style_name + '"]');
			if (_style.length > 0) {
				return _style;
			}
			else {
				return this.create_style(_style);
			}
		}
		else {
			for (var _i in document.styleSheets) {
				_style = document.styleSheets[_i];
				if (_style.title == _style_name) {
					return _style;
				}
			}
			return this.create_style(_style_name);
		} 
};

Style_manager.prototype.remove_style = function (_style_name) {
    if ($.is_null(_style_name)) {
		return this;
	}
    
    if (this._use_style_sheet() === false) {
        this.get_style(_style_name).remove();    
    }
    else {
        this.clear_style(_style_name);
    }
    return this;
};

Style_manager.prototype.clear_style = function (_style_name) {
    if ($.is_null(_style_name)) {
		return this;
	}
    
    var _style_sheet = this.get_style(_style_name); 
    if (this._use_style_sheet() === false) {
        _style_sheet.empty();    
    }
    else {
        var _rules = _style_sheet.rules;
        if (_rules === null) {
			return this;
		}
        
        var _length = _rules.length;
        if (_length === null || _length === 0) {
			return this;
		}
            
        //for (var _i = 1; _i < _length + 1 ;_i++)
        //    _style_sheet.removeRule(_i);    //12597
        //_style_sheet.removeRule();
        while (true) {
            try {
                _style_sheet.removeRule();
            }
            catch (e) {
                break;
            }
        }
    }
    return this;
};

Style_manager.prototype.add_style = function (_style_name, _selector, _style) {
    
    var _style_tag = this.get_style(_style_name);
    
    if (this._use_style_sheet() === false) {
        var _rule = this.create_rule(_selector, _style);
    
        var _style_text = _style_tag.html();
        _style_text = _style_text + _rule;
        _style_tag.html(_style_text);
        return this;    
    }
    else {
        _selector = this._combine_selector(_selector);
        _style = this._combine_rule(_style);
        _style_tag.addRule(_selector, _style);
    }
    
};
Style_manager.prototype._combine_selector = function (_selector) {
    if ($.is_array(_selector)) {
        var _temp = '';
        for (var _i in _selector) {
            if (_i > 0) {
				_temp = _temp + ', ';
			}
            _temp = _temp + _selector[_i];
        }
        _selector = _temp;
    }
    return _selector;
};

Style_manager.prototype._combine_rule = function (_style) {
        
    if ($.is_object(_style)) {
        var _style_temp = '';
        var _first = true;
        for (var _field in _style) {
            var _value = _style[_field];
            
            var _formal_field = $.str_replace('_', '-', _field);
            var _r = _formal_field + ':' + _value;
            
            if (_first === false) {
				_style_temp = _style_temp + '; ';
			}
            _style_temp = _style_temp + _r;
            _first = false;
        }
        _style = _style_temp;
    }
    else if ($.is_string(_style)) {
        _style = $.trim(_style);
        if (_style.substr(0, 1) == '{') {
			_style = _style.substr(1, _style.length);
		}
        
        if (_style.substr(_style.length - 1, _style.length) == '}') {
			_style = _style.substr(0, _style.length - 1);
		}
    }
    
    return _style;
    
}; 

Style_manager.prototype.create_rule = function (_selector, _style) {
    _selector = this._combine_selector(_selector);
    _style = this._combine_rule(_style);
    
    var _rule = _selector + '{' + _style + '}';
    return _rule;
};

Style_manager.prototype.set_style = function (_style_name, _selector, _style) {
    this.clear_style(_style_name);
    return this.add_style(_style_name, _selector, _style);
};

Style_manager.prototype.load_style = function (_title, _path, _config) {
    
    if ($.is_null(_config) && $.is_object(_path)) {
        _config = _path;
        _path = 'custom';
    }
    
    _path = KALS_context.get_base_url(['style/', _path]);
    
    if ($.isset(_config)) {
        var _data = $.json_encode(_config);
        _data = encodeURIComponent(_data);
        _data = escape(_data);
        _path = _path + '/' + _data;
    }
    
    //var _link = $('head link[href="'+_path+'"]');
    
    
    if (document.createStyleSheet) {
        var _found = false;
        for (var _i in document.styleSheets) {
            var _style = document.styleSheets[_i];
            if (_style.title == _title) {
                //_style.disabled = true;
                _style.href = _path;
                _style.disabled = false;
                _found = true;
                break;
            }
        }
        
        if (_found === false) {
			document.createStyleSheet(_path).title = _title;
		}
    }
    else {
        var _link = $('head link[title="'+_title+'"]');
        $.test_msg('Style_manager.load_style()', _link.length);
        if (_link.length > 0) {
			_link.remove();
		}
            
        _link = $('<link type="text/css" rel="stylesheet" href="'+_path+'" title="'+_title+'" />')
            .appendTo($('head'));    
    }
    
    return this;
};

Style_manager.prototype._use_style_sheet = function () {
	//$.test_msg("[Style_manager] document.createStyleSheet: " + typeof(document.createStyleSheet));
    return (document.createStyleSheet !== null 
		&& document.createStyleSheet !== undefined);
};

Style_manager.prototype.unload_style = function (_path) {
    
    _path = KALS_context.get_base_url(['style/', _path]);
    if (document.createStyleSheet) {
        for (var _i in document.styleSheets) {
            var _style = document.styleSheets[_i];
            if (_style.title == _path || _style.href == _path) {
                _style.disabled = true;
            }
        }
    }
    else {        
        $('head link[href="'+_path+'"]').remove();
        $('head link[title="'+_path+'"]').remove();    
    }
    
};

/* End of file Style_manager */
/* Location: ./system/application/views/web_apps/Style_manager.js *//**
 * Overlay_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/6 下午 08:39:15
 */
function Overlay_manager () {

    this._opened_modals = [];
    
    var _this = this;
    //跟URL_hash_dispatcher註冊
    if (typeof(KALS_context) == 'object'
        && typeof(KALS_context.hash) == 'object') {
        KALS_context.hash.add_listener(function (_dispatcher, _data) {
            if (typeof(_data.backward) == 'boolean'
                && _data.backward === true) {
                //$.test_msg('modal listener', _data);
                _this.close_all();
            }
        });
    }   
    
    //跟onviewportmove註冊mash的fit事件
    if (typeof($.mask) != 'undefined') {
        KALS_context.view.add_listener(function () {
            if ($.mask.isLoaded()) {
                $.mask.fit();
            } 
        });    
    }
}

/**
 * 已經開啟的Modal。
 * @type {Array|KALS_Modal}
 */
Overlay_manager.prototype._opened_modals = [];

/**
 * 關閉所有Modal
 * @param {null|string|array} _except_name = []: 排除的名稱
 */    
Overlay_manager.prototype.close_all = function (_except_name) {
    
    if ($.is_null(_except_name)) {
		_except_name = [];
	}
	else 
		if ($.is_string(_except_name)) {
			_except_name = [_except_name];
		}
    
    var _this = this;
    var _loopy = function (_callback) {
        
        //$.test_msg('call loopy');
        
        var _index = null;
        for (_i in _this._opened_modals) {
			_index = _i;
		}
        
        //if (_index < _this._opened_modals.length)
        if (_index !== null) {
            var _modal = _this._opened_modals[_index];
            var _name = _modal.get_modal_name();
            
            //$.test_msg('call loopy', [_index, _modal.get_modal_name()]);
            
            _modal.close(function () {
                //$.test_msg('loopy after close, call next...');
                _loopy(_callback);    
            });
        }
        else {
            _callback();
        }
    };
    
    _loopy(function () {
        //跟URL_hash_dispatcher註冊
        if (typeof(KALS_context) == 'object'
            && typeof(KALS_context.hash) == 'object') {
            KALS_context.hash.delete_field('modal');
        }  
        
        _this.check_mask(true);    
    });
    
    return this;
};

/**
 * 關閉指定的Modal
 * @param {null|string|array} _target_name = []: 指定的名稱
 */
Overlay_manager.prototype.close = function (_target_name) {
    
    if ($.is_null(_target_name)) {
		_target_name = [];
	}
	else 
		if ($.is_string(_target_name)) {
			_target_name = [_target_name];
		}
    
    for (var _i in this._opened_modals) {
        var _modal = this._opened_modals[_i];
        var _name = _modal.get_modal_name();
        
        if ($.inArray(_name, _target_name) > -1) {
            _modal.close();
        }
    }
    
    this.check_mask(true);
    return this;
};

Overlay_manager.prototype._check_mask_timer = null;
Overlay_manager.prototype.check_mask = function (_is_close) {
    
    if ($.isset(this._check_mask_timer)) {
		clearTimeout(this._check_mask_timer);
	}
    
    //$.test_msg('Overlay_manager.check_mask()', _is_close);
    
    if (_is_close === true && this._mask_locker === true) {
        this._mask_locker = false;
        //$.test_msg('Overlay_manager.check_mask() unlock mask');
        return this;
    }
    else {
        this._mask_locker = false;
    }
        
    var _this = this;
    
    this._check_mask_timer = setTimeout(function () {
        
        var _need_expose = false;
        
        //$.test_msg('Overlay_manager.check_mask()', [_this._opened_modals.length]);
        
        for (var _i in _this._opened_modals) {
            var _modal = _this._opened_modals[_i];
            
            //$.test_msg('Overlay_manager.check_mask() for', [_modal.get_modal_name(), _modal.is_exposable()]);
            
            if (_modal.is_exposable()) {
                _need_expose = true;
                break;
            }
        }
        
        if (_need_expose === false) {
            $.mask.close();
        } 
    }, 200);
    
    return this;
};

Overlay_manager.prototype._mask_locker = false;

/**
 * 鎖定黑幕
 */
Overlay_manager.prototype.lock_mask = function () {
    $.test_msg('Overlay_manager.lock_mask()');
    this._mask_locker = true;
    return this;
};

/**
 * 取消鎖定黑幕
 */
Overlay_manager.prototype.unlock_mask = function () {
    $.test_msg('Overlay_manager.unlock_mask()');
    this._mask_locker = false;
    return this;
};

/**
 * 註冊說已經開啟
 * @param {KALS_modal} _modal
 */
Overlay_manager.prototype.add_opened = function (_modal) {
    
    if (_modal._$exposable === false) {
		return this;
	}
    
    if (_modal === null || typeof(_modal.is_closable) != 'function') {
		return this;
	}
    
    if ($.inArray(_modal, this._opened_modals) == -1
        && _modal.is_closable()) {
        
        //$.test_msg('add_opened', [_modal.get_modal_name(), _modal.is_exposable()]);
        
        this._opened_modals.push(_modal);
        
        if (_modal.is_exposable()) {
            //先將已經開啟的modal移至mask之後
            for (var _i in this._opened_modals) {
                var _opened_modal = this._opened_modals[_i];
                if (_opened_modal.is_exposable()) {
					_opened_modal.cover();
				}
            } 
			if (typeof(_modal.expose) == "function") {
				_modal.expose();
			}
        }
        
        //跟URL_hash_dispatcher註冊
        if (typeof(KALS_context) == 'object'
            && typeof(KALS_context.hash) == 'object') {
            KALS_context.hash.set_field('modal', _modal.get_modal_name());
        }   
    }   
    return this;
};

/**
 * 是否還有未關閉的Modal
 * @type {boolean}
 */
Overlay_manager.prototype.has_opened = function () {
    return (this._opened_modals.length > 0);
};

/**
 * 移除註冊
 * @param {KALS_modal} _modal
 */
Overlay_manager.prototype.delete_opened = function (_modal) {
    
    if (_modal._$exposable === false) {
		return this;
	}
    
	//$.test_msg("Overlay_manager delete_opended", "check point 1");
	
    var _deleted = $.inArray(_modal, this._opened_modals);
    if (_deleted > -1) {
        //delete this._opened_modals[_i];
        //this._opened_modals[_i].pop();
        //this._opened_modals.length -= 1;
        
        var _new_opened = [];
        for (var _i = 0; _i < this._opened_modals.length; _i++) {
            if (_i == _deleted) {
				continue;
			}
			else {
				_new_opened.push(this._opened_modals[_i]);
			}
        }
        this._opened_modals = _new_opened;
        
		//$.test_msg("Overlay_manager delete_opended", "check point 2");
		
        //將未關閉的modal最後一個移至mask之前
        var _last_modal;
        
        for (_i in this._opened_modals) {
            //不做任何事情，只是取得modal
            _last_modal = this._opened_modals[_i];
        }
        //迴圈最後就會取得最後一個modal
        
        //$.test_msg('delete_opened', [_modal.get_modal_name(), this._opened_modals.length]);
        //if (_last_modal != null)
        //    $.test_msg('delete_opened', [_last_modal.get_modal_name()]);
        
		//$.test_msg("Overlay_manager delete_opended", "check point 3");
		
        if (_last_modal !== null && _last_modal !== undefined) {
			//$.test_msg("Overlay_manager delete_opended", "check point 3.1 " + typeof(_last_modal.expose));
            //_last_modal.get_ui().css('z-index', 9999);
			if (typeof(_last_modal.expose) != "undefined") {
				$.test_msg("Overlay_manager", "before last_modal expose");
				_last_modal.expose();	
			}
            
            //_last_modal.focus_option();
            
            //跟URL_hash_dispatcher註冊
            if (typeof(KALS_context) == 'object'
                && typeof(KALS_context.hash) == 'object') {
                KALS_context.hash.set_field('modal', _modal.get_modal_name());
            } 
			//$.test_msg("Overlay_manager delete_opended", "check point 3.1.1");
        }
        else {
			//$.test_msg("Overlay_manager delete_opended", "check point 3.2");
            //跟URL_hash_dispatcher註冊
            if (typeof(KALS_context) == 'object'
                && typeof(KALS_context.hash) == 'object') {
                KALS_context.hash.delete_field('modal');
            }
			//$.test_msg("Overlay_manager delete_opended", "check point 3.2.1");
        }
		
		//$.test_msg("Overlay_manager delete_opended", "check point 4");
    }
    
    //$.test_msg('deleted_opended length', this._opened_modals.length);
    this.check_mask(true);
    
	//$.test_msg("Overlay_manager delete_opended", "check point 5");
	
    return this;
};

/* End of file Overlay_manager */
/* Location: ./system/application/views/web_apps/Overlay_manager.js *//**
 * KALS_storage
 * 本地端儲存空間
 * 
 * HTML5的特殊功能
 * http://www.dotblogs.com.tw/jimmyyu/archive/2011/03/27/html5-client-storage.aspx
 * 
 * 基本上是使用jQuery-Storage-API來操作
 * https://github.com/julien-maurel/jQuery-Storage-API
 * 我下載了 jquery.storageapi.min.js (https://github.com/julien-maurel/jQuery-Storage-API/blob/master/jquery.storageapi.min.js)
 * 放到[VIEW]/libraries/min/jquery.storageapi.min.js
 *
 * 加上字串壓縮
 * http://pieroxy.net/blog/pages/lz-string/index.html
 * 
 * @package     KALS
 * @category    JavaScript Libraries
 * @author      Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) 2014, Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        http://github.com/pulipulichen/kals
 * @version     1.0 2014/3/23 下午 06:47:21
 * @extends {Event_dispatcher}
 */
function KALS_storage() {
    
    Event_dispatcher.call(this);
    
    var _this = this;
    //$(function () {
    //KALS_context.add_listener(function () {
        _this._init();
    //});
    //});
    
    //$.localStorage.removeAll(true);
}

KALS_storage.prototype = new Event_dispatcher();

/**
 * 本地端資料庫
 * @type Object
 */
KALS_storage.prototype._storage;

/**
 * 初始化可以用的參數
 * @returns {KALS_storage.prototype}
 */
KALS_storage.prototype._init = function () {
    if (localStorage !== undefined) {
        
        var _this = this;
        /*
        // Request Quota (only for File System API)  
        if (navigator.webkitPersistentStorage !== undefined) {
            navigator.webkitPersistentStorage.requestQuota(PERSISTENT, 1024*1024, function(_grantedBytes) {
                _this.quota = _grantedBytes;
                var _on_init_fs = function () {
                    
                };
                var _error_handler = function () {
                    
                };
                window.webkitRequestFileSystem(PERSISTENT, _grantedBytes, _on_init_fs, _error_handler); 
            }, function(e) {
                console.log('Error', e); 
            });
        }
        */
        this._storage = $.localStorage;
        
        
    }
    else if ($.sessionStorage !== undefined) {
        this._storage = $.sessionStorage;
    }
    else {
        this._storage = $.cookieStorage;
    }
    return this;
};

/**
 * 確認是否可以使用
 * @returns {Boolean}
 */
KALS_storage.prototype._is_enable = function () {
    return (this._storage !== undefined);
};

/**
 * 幫key加上namespace
 * @param {String} _key
 * @returns {String}
 */
KALS_storage.prototype._append_namespace = function (_key) {
    var _namespace = KALS_context.create_namespace();
    _key = _namespace + _key;
    return _key;
};

/**
 * 取得資料
 * @param {String} _key
 * @param {function } _callback
 * @returns {KALS_storage.prototype}
 */
KALS_storage.prototype.get = function (_key, _callback) {
    if (this._is_enable() === false) {
        $.trigger_callback(_callback);
        return undefined;
    }
    else {
        //$.test_msg('storage get', _key);
        _key = this._append_namespace(_key);
        
        //var _compressed;
        //$.test_msg('storage get isSet :' + _key, this._storage.isSet(_key));
        if (this._storage.isSet(_key)) {
            var _value = this._storage.get(_key);
            
            _value = LZString.decompress(_value);

            if ($.is_function(_callback)) {
                _callback(_value);
            }
            return _value;
        }
        else {
            this._merge_get(_key, function (_value) {
                _value = LZString.decompress(_value);

                if ($.is_function(_callback)) {
                    _callback(_value);
                }
            });
            //$.test_msg('storage get isSet get from _compressed:', _value.length);
        }
    }
};

/**
 * 設定資料
 * @param {String} _key
 * @param {Object} _value
 * @param {function} _callback
 * @returns {KALS_storage.prototype}
 */
KALS_storage.prototype.set = function (_key, _value, _callback) {
    if (this._is_enable() === false
            || _value === undefined) {
        $.trigger_callback(_callback);
        return this;
    }
    else {
        
        if ($.is_object(_value)) {
            _value = $.json_encode(_value);
        }
        
        _key = this._append_namespace(_key);
        
        var _orig_size = _value.length;
        
        if (_orig_size === undefined) {
            $.trigger_callback(_callback);
            return this;
        }
        
        _value = LZString.compress(_value);
        var _compressed_size = _value.length;
        
        var _percent = parseInt(((_orig_size - _compressed_size) / _orig_size)*100 , 10);
        
        //$.test_msg('stroage set (' + _key +  ')', _orig_size + ' > ' + _compressed_size 
        //        + ' (壓縮率: ' + _percent  + '%) ');
        
        if (_compressed_size < this._quota_pre_item) {
            this._storage.set(_key, _value);
        }
        else {
            var _parts = this._value_split(_value);
            this._split_set(_key, _parts);
        }
        /*
        else if (_compressed_size < this._quota_max) {
            var _parts = this._value_split(_value);
            this._split_set(_key, _parts);
        }
        else {
            var _parts = this._value_split(_value);
            this._chrome_split_set(_key, _parts);
        }*/
        
        //this._storage.set(_key, _value);
        //try {
            
        //}
        //catch (_e) {
            
        //}
        
        $.trigger_callback(_callback);
        return this;
    }
};

/**
 * 取得JSON
 * @param {String} _key
 * @param {Function} _callback
 * @returns {JSON}
 */
KALS_storage.prototype.get_json = function (_key, _callback) {
    _key = this._append_namespace(_key);
    /*var _value = this.get(_key);
    if (_value !== undefined) {
        _value = $.json_decode(_value);
    }
    */
    this.get(_key, function (_value) {
        if (_value !== undefined) {
            _value = $.json_decode(_value);
        }
        if ($.is_function(_callback)) {
            _callback(_value);
        }
    });
    //return _value;
    return this;
};

/**
 * 設置JSON
 * @param {String} _key
 * @param {JSON} _value
 * @param {funciton} _callback
 * @returns {KALS_storage}
 */
KALS_storage.prototype.set_json = function (_key, _value, _callback) {
    _key = this._append_namespace(_key);
    return this.set(_key, _value, _callback);
};

/**
 * 是否設定此key
 * @param {String} _key
 * @param {Funciton} _callback
 * @returns {Boolean}
 */
KALS_storage.prototype.is_set = function (_key, _callback) {
    if (this._is_enable() === false) {
        $.trigger_callback(_callback);
        return false;
    }
    else {
        _key = this._append_namespace(_key);
        //$.test_msg('storage is set', _key);
        var _isset = false;
        _isset = this._storage.isSet(_key);
        if (_isset === false) {
            _isset = this._storage.isSet(_key + '0');
        } 
        
        if ($.is_function(_callback)) {
            _callback(_isset);
        }
        return _isset;
    }
};

/**
 * 建立隨機字串
 * @param {String} _prefix 前置詞
 * @returns {String}
 */
KALS_storage.prototype.create_id = function (_prefix) {
    return $.create_id(_prefix);
};

KALS_storage.prototype._quota_max = 10000;

KALS_storage.prototype._quota_pre_item = 10000;
//KALS_storage.prototype._quota_pre_item = 1000;

KALS_storage.prototype._value_split = function (_value) {
    var _parts = [];
    
    var _split_unit = this._quota_pre_item;
    while (_value.length > _split_unit) {
        var _part = _value.substr(0, _split_unit);
        _parts.push(_part);
        _value = _value.substring(_split_unit, _value.length);
    }
    
    _parts.push(_value);
    
    //$.test_msg('storage value split', _parts.length);
    
    return _parts;
};

KALS_storage.prototype._split_set = function (_key, _parts, _callback) {
    
    $.test_msg('storage split set', _parts.length);
    
    var _this = this;
    var _loop = function (_i, _parts) {
        if (_i === _parts.length) {
            $.trigger_callback(_callback);
            return;
        }
        else {
            var _part_key = _key + _i;
            $.test_msg('storage split set key', _part_key);
            var _part_value = _parts[_i];

            _this._check_quota();

            _this._storage.set(_part_key, _part_value, function () {
                _i++;
                _loop(_i, _parts);
            });
        }
    }
    _loop(0, _parts);
    /*
    for (var _i in _parts) {
        var _part_key = _key + _i;
        $.test_msg('storage split set key', _part_key);
        var _part_value = _parts[_i];
        
        this._check_quota();
        
        this._storage.set(_part_key, _part_value);
    }
    */
    return this;
};

KALS_storage.prototype._check_quota = function () {
    
    // Request storage usage and capacity left
    /*
    window.webkitStorageInfo.queryUsageAndQuota(webkitStorageInfo.TEMPORARY, 
    //the type can be either TEMPORARY or PERSISTENT
        
        function(used, remaining) {
            //console.log("Used quota: " + used + ", remaining quota: " + remaining);
        }, function(e) {
            //console.log('Error', e); 
        }
    );
    */
};
KALS_storage.prototype._value_merge = function (_parts) {
    var _value = '';
    
    for (var _i in _parts) {
        _value = _value + _parts[_i];
    }
    
    return _value;
};

KALS_storage.prototype._merge_get = function (_key, _callback) {
    
    var _value = '';
    var _index = 0;
    var _part_key = _key + _index;
    
    var _this = this;
    var _loop = function (_index) {
        if (_this._storage.isSet(_part_key)) {
            _this._storage.get(_part_key, function (_part_value) {
                _value = _value + _part_value;
                _index++;
                _part_key = _key + _index;
                _loop(_index);
            });
        }
        else {
            if ($.is_function((_callback))) {
                _callback(_value);
            }
        }
    };
    _loop(0);
    /*
    while (this._storage.isSet(_part_key)) {
        //$.test_msg('storage merge get key', _part_key);
        var _part_value = this._storage.get(_part_key);
        _value = _value + _part_value;
        _index++;
        _part_key = _key + _index;
    }
    //$.test_msg('storage merge get', _index);
    
    return _value;
    */
};

/* End of file KALS_storage */
/* Location: ./system/application/views/web_apps/core/KALS_storage.js *//**
 * Site_reform
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2013/12/27 下午 08:10:10
 * @extends {Event_dispatcher}
 */
function Site_reform() {
    
    Event_dispatcher.call(this);
    
}

/**
 * 繼承自Task_event_dispatcher
 */
Site_reform.prototype = new Event_dispatcher();

/**
 * 判斷是不是這個網站
 * @param {String} _site_feature
 * @returns {Boolean}
 */
Site_reform.prototype.match = function (_site_feature) {
    
    if (_site_feature === undefined
        || ($.is_string(_site_feature) && _site_feature === "" )
        || ($.is_array(_site_feature) && _site_feature.length === 0 )) {
        return false;
    }
    
    var _result = false;
    
    if ($.is_string(_site_feature)) {
        _result = ($("body").find(_site_feature).length > 0);
    }
    else if ($.is_array(_site_feature)) {
        
        //必須滿足全部條件
        var _condition_count = _site_feature.length;
        
        var _match_count = 0;
        for (var _i in _site_feature) {
            var _single_feature = _site_feature[_i];
            var _single_result = ($("body").find(_single_feature).length > 0);
            
            if (_single_result === false) {
                break;
            }
            else {
                _match_count++;
            }
        }
        
        if (_match_count === _condition_count) {
            _result = true;
        }
    }
    
    //var _feature_node = $("body").find(_site_feature).length;
    /*
    if (_feature_node > 0) {
        return true;
    }
    else {
        return false;
    }
    */
   
    return _result;
};

/**
 * 開始調整網站
 * @param {function} _callback 回呼函數
 * @returns {Site_reform}
 */
Site_reform.prototype.reform = function (_callback) {
    
    var _config = KALS_SITE_REFORM_CONFIG;
    
    var _i = 0;
    var _this;
    
    var _site_callback = function () {
        _i++;
        
        if (_i < _config.length) {
            setTimeout(function () {
                _this._reform_loop(_i, _config, _site_callback)
            }, 1);
        }
        else {
            $.trigger_callback(_callback);
        }
    };
    
    this._reform_loop(_i, _config, _site_callback);
    
    return this;
};

/**
 * 進行迴圈
 * @param {number} _i 現在進行的索引
 * @param {JSON} _config 設定檔案
 * @param {function} _callback 前往下一個迴圈的回呼函數
 */
Site_reform.prototype._reform_loop = function (_i, _config, _callback) {
    var _site = _config[_i];
        
    var _matched = this.match(_site.feature);
    if (_matched === true) {
        
        $.test_msg("Site_reform: match!", _site.title);
        
        if ($.is_function(_site.reform)) {
            _site.reform(function () {
                _callback();
            });
        }
        else if ($.is_object(_site.reform)) {
            
            if ($.is_function(_site.reform.before_init)) {
                _site.reform.before_init(function () {
                    _callback();
                });
            }
            
            if ($.is_function(_site.reform.after_init)) {
                //$.test_msg("完成？");
                KALS_context.init_profile.add_listener(function () {
                    //$.test_msg("完成？111");
                    _site.reform.after_init();
                });
            }
        }
    }
    else {
        _callback();
    }
};

/* End of file Site_reform */
/* Location: ./system/application/views/web_apps/Site_reform.js *//**
 * Context_user
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/11 下午 10:40:29
 * @extends {Attribute_event_dispatcher}
 */
function Context_user(){
    
    Attribute_event_dispatcher.call(this);
    
    //$.test_msg('Context_user() 確認KALS_context.auth', $.object_isset('KALS_context.auth.add_listener'));
    
    //if ($.object_isset('KALS_context.auth.add_listener'))
    //{        
        KALS_context.auth.add_listener(this);
    //}
    
    var _this = this;
    setTimeout(function () {
        _this.set_anchor_navigation_type(KALS_CONFIG.anchor_navigation_type);
    }, 0);
}

Context_user.prototype = new Attribute_event_dispatcher();

Context_user.prototype._$data_key = 'user';
    
Context_user.prototype.set_email = function (_value) {
    this.set_attr('email', _value);
};

Context_user.prototype.set_name = function (_name) {
    this.set_attr('name', _name);
};

Context_user.prototype.set_id = function (_value) {
    this.set_attr('id', _value);
};

Context_user.prototype.set_photo = function (_value) {
    this.set_attr('has_photo', _value);
};

Context_user.prototype.set_locale = function (_value) {
    this.set_attr('locale', _value);
};

Context_user.prototype.set_sex = function (_value) {
    this.set_attr('sex', _value);
};

Context_user.prototype.get_name = function (_length) {
    return this.get_attr('name', null, _length);
};

Context_user.prototype.get_id = function () {
    return this.get_attr('id');
};

Context_user.prototype.get_locale = function () {
    return this.get_attr('locale');
};

Context_user.prototype.get_sex = function () {
    return this.get_attr('sex');
};

/**
 * 設定標註指引類型
 * 有all、recommend、none三種
 * @param {String} _type 標註指引類型
 * @version 20111106 Pudding Chen
 */
Context_user.prototype.set_anchor_navigation_type = function (_type) {
    return this.set_attr('anchor_navigation_type', _type);
};

/**
 * 取得標註指引類型
 * 預設存放在KALS_CONFIG.anchor_navigation_type當中
 * 有all、recommend、none三種
 * @type {String}
 * @version 20111106 Pudding Chen
 */
Context_user.prototype.get_anchor_navigation_type = function () {
    return this.get_attr('anchor_navigation_type', KALS_CONFIG.anchor_navigation_type);
};

/**
 * 是否擁有照片
 * @type {boolean}
 * @memberOf {Context_user}
 */
Context_user.prototype.has_photo = function () {
    var _has_photo = this.get_attr('has_photo');
    if ($.is_null(_has_photo)) {
        return false;
    }
    else {
        return _has_photo;
    }
};

Context_user.prototype.get_email = function () {
    return this.get_attr('email');
};

Context_user.prototype.has_login = function () {
    var _id = this.get_id();
    return ($.isset(_id));
};

/**
 * 取得目前使用者的User_param
 * @type {User_param}
 */
Context_user.prototype.get_data = function () {
    if (KALS_context.auth.is_login() === false) {
        return null;
    }
    
    var _id = this.get_id();
    var _name = this.get_name();
    
    if (_id === null) {
        return null;
    }
    
    var _param = new User_param(_id, _name);
    return _param;
};

/**
 * 取得使用者參數
 * @returns {User_param}
 */
Context_user.prototype.get_user_param = function () {
    if (this.has_login()) {
        return new User_param(this.get_id(), this.get_name());
    }
    else {
        return null;
    }
};

// --------------------------------------
// 統計資訊
// --------------------------------------

/**
 * 標註記錄
 * @type JSON
 */
Context_user.prototype._annotation_count = {
    /**
     * 主題標註
     * @type {JSON} = {
     *    importanct: 1,
     *    question: 2
     * }
     */
    "topic_annotation_count": {},
    /**
     * 回應到自己的標註
     * @type {JSON} = {
     *    importanct: 1,
     *    question: 2
     * }
     */
    "respond_to_my_annotation_count": {},
    /**
     * 回應到別人的標註
     * @type {JSON} = {
     *    importanct: 1,
     *    question: 2
     * }
     */
    "respond_to_other_annotation_count": {}
};

/**
 * 設定標註次數
 * 
 * @param {String} _wrtie_type "topic", "respond_to_my", "respond_to_other"
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count = function (_write_type, _annotation_type, _count) {
    if ($.is_string(_write_type) === false 
            || $.is_class(_annotation_type, "Annotation_type_param") === false 
            || $.is_number(_count) === false) {
        KALS_util.show_exception("Context_user.set_annotation_count() parameters error: " 
                + [($.is_string(_write_type) === false), ($.is_class(_annotation_type, "Annotation_type_param") === false), ($.is_number(_count) === false)]);
        return this;
    }
    
    if (_count < 0) {
        _count = 0;
    }
    
    var _type_name = _annotation_type.get_name();
    this._annotation_count[_write_type][_type_name] = _count;
    
    var _write_type_count = this.get_annotation_count(_write_type);
    this.set_attr(_write_type, _write_type_count);
    //$.test_msg("Context_user.set_annotation_count", [_write_type, _type_name, _count, _write_type_count]);
    
    return this;
};

/**
 * 設定標註次數依照_count調整
 * 
 * @param {String} _wrtie_type "topic", "respond_to_my", "respond_to_other"
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_modify = function (_write_type, _annotation_type, _count) {
    if ($.is_string(_write_type) === false 
            || $.is_class(_annotation_type, "Annotation_type_param") === false 
            || $.is_number(_count) === false) {
        KALS_util.show_exception("Context_user.set_annotation_count_modify() parameters error: " 
                + [($.is_string(_write_type) === false), _write_type, ($.is_class(_annotation_type, "Annotation_type_param") === false), ($.is_number(_count) === false), _count]);
        return this;
    }
    
    var _original_count = this.get_annotation_count(_write_type, _annotation_type);
    var _modified_count = _original_count + _count;
    
    //$.test_msg("Context_user.set_annotation_count_modify", [_write_type, _count, _original_count, _modified_count]);
    
    return this.set_annotation_count(_write_type, _annotation_type, _modified_count);
};

/**
 * 設定標註次數增加
 * 
 * @param {String} _wrtie_type "topic", "respond_to_my", "respond_to_other"
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_add = function (_write_type, _annotation_type, _count) {
    if (_count === undefined) {
        _count = 1;
    }
    return this.set_annotation_count_modify(_write_type, _annotation_type, _count);
};

/**
 * 設定標註次數減少
 * 
 * @param {String} _wrtie_type "topic", "respond_to_my", "respond_to_other"
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_reduce = function (_write_type, _annotation_type, _count) {
    //$.test_msg("set_annotation_count_reduce", [_write_type, _annotation_type.get_name(), _count, typeof(_count), (_count === null)]);
    
    if (_count === undefined) {
        _count = 1;
    }
    
    if ($.is_number(_count)) {
        _count = -1 * _count;
        this.set_annotation_count_modify(_write_type, _annotation_type, _count)
    }
    return this;
};

/**
 * 設定標註次數修改
 * 
 * @param {String} _wrtie_type "topic", "respond_to_my", "respond_to_other"
 * @param {Annotation_type_param} _original_type 原本的標註類型
 * @param {Annotation_type_param} _annotation_type 修改後的標註類型
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_change = function (_write_type, _original_type, _annotation_type) {
    if (_original_type.equals(_annotation_type) === false) {
        //$.test_msg("set_annotation_count_change", [_write_type, _original_type.get_name(), _annotation_type.get_name()]);
        this.set_annotation_count_reduce(_write_type, _original_type);
        this.set_annotation_count_add(_write_type, _annotation_type);
    }
    return this;
};

/**
 * 取得標註次數
 * 
 * @param {String} _write_type "topic", "respond_to_my", "respond_to_other"，可省略
 * @param {Annotation_type_param} _annotation_type 標註類型，可省略
 * @returns {Int}
 */
Context_user.prototype.get_annotation_count = function (_write_type, _annotation_type) {
    
    var _count = 0;
    var _type_name;
    if ($.is_string(_write_type)) {
        if ($.is_class(_annotation_type, "Annotation_type_param")) {
            // 限定類型
            _type_name = _annotation_type.get_name();
            if (typeof(this._annotation_count[_write_type][_type_name]) !== "undefined") {
                _count = this._annotation_count[_write_type][_type_name];
            }
            else {
                _count = 0;
            }
            return _count;
        }
        else {
            // 不限定類型
            var _annotation_count_collection = this._annotation_count[_write_type];
            for (_type_name in _annotation_count_collection) {
                var _type_count = _annotation_count_collection[_type_name];
                _count = _count + _type_count;
            }
            return _count;
        }
    }
    else {
        var _write_annotation_count_collection = this._annotation_count;
        for (_write_type in _write_annotation_count_collection) {
            var _annotation_count_collection = this._annotation_count[_write_type];
            if ($.is_class(_annotation_type, "Annotation_type_param")) {
                // 限定類型
                _type_name = _annotation_type.get_name();
                _count = _count + _annotation_count_collection[_type_name];
            }
            else {
                // 不限定類型
                for (_type_name in _annotation_count_collection) {
                    var _type_count = _annotation_count_collection[_type_name];
                    _count = _count + _type_count;
                }
            }
        }
        return _count;
    }
};

// -------------------------------
// parse write type

/**
 * 設定標註次數
 * 
 * @param {Annotation_param} _annotation_param 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_by_param = function (_annotation_param, _count) {
    if ($.is_class(_annotation_param, "Annotation_param") === false 
            || $.is_number(_count) === false) {
        KALS_util.show_exception("Context_user.set_annotation_count() parameters error");
        return this;
    }
    
    if (_count < 0) {
        _count = 0;
    }
    
    // ------------------------
    // 加入Context_user的計數
    
    var _annotation_type_param = _annotation_param.type;
    var _write_type = this.parse_anntation_param_write_type(_annotation_param);
    
    return this.set_annotation_count(_write_type, _annotation_type_param, _count);
};

/**
 * 分析新增標註的形態
 * 
 * @param {Annotation_param} _annotation_param
 * @returns {String}
 */
Context_user.prototype.parse_anntation_param_write_type = function (_annotation_param) {
    
    var _is_respond = _annotation_param.is_respond();
    var _write_type;
    if (_is_respond === false) {
        //$.test_msg("create callback", _annotation_type_param);
        _write_type = "topic_annotation_count";
    } 
    else {
        var _topic_annotation_param = _annotation_param.topic;
        var _is_my_topic = _topic_annotation_param.is_my_annotation();
        
        if (_is_my_topic) {
            //KALS_context.user.set_respond_to_my_annotation_count_add(_annotation_type_param);
            _write_type = "respond_to_my_annotation_count";
        }
        else {
            //KALS_context.user.set_respond_to_other_annotation_count_add(_annotation_type_param);
            _write_type = "respond_to_other_annotation_count";
        }
    }
    
    return _write_type;
};

/**
 * 設定標註次數
 * 
 * @param {Annotation_param} _annotation_param 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.get_annotation_count_by_param = function (_annotation_param) {
    if ($.is_class(_annotation_param, "Annotation_param") === false) {
        KALS_util.show_exception("Context_user.get_annotation_count() parameters error");
        return this;
    }
    
    var _annotation_type_param = _annotation_param.type;
    var _write_type = this.parse_anntation_param_write_type(_annotation_param);
    
    return this.get_annotation_count(_write_type, _annotation_type_param);
};

/**
 * 設定標註次數
 * 
 * @param {Annotation_param} _annotation_param 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_modify_by_param = function (_annotation_param, _count) {
    if ($.is_class(_annotation_param, "Annotation_param") === false 
            || $.is_number(_count) === false) {
        KALS_util.show_exception("Context_user.set_annotation_count() parameters error");
        return this;
    }
    
    var _annotation_type_param = _annotation_param.type;
    var _write_type = this.parse_anntation_param_write_type(_annotation_param);
    
    return this.set_annotation_count_modify(_write_type, _annotation_type_param, _count);
};

/**
 * 依據標註參數，增加標註的次數
 * 
 * @param {Annotation_param} _annotation_param 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_add_by_param = function (_annotation_param, _count) {
    if (_count === undefined) {
        _count = 1;
    }
    return this.set_annotation_count_modify_by_param(_annotation_param, _count);
};

/**
 * 依據標註參數，降低標註的次數
 * 
 * @param {Annotation_param} _annotation_param 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_reduce_by_param = function (_annotation_param, _count) {
    if (_count === undefined) {
        _count = 1;
    }
    if ($.is_number(_count)) {
        _count = -1 * _count;
    }
    return this.set_annotation_count_modify_by_param(_annotation_param, _count);
};

/**
 * 依據標註參數，降低標註的次數
 * 
 * @param {Annotation_param} _original_param 原本的標註類型
 * @param {Annotation_param} _annotation_param 變更的標註類型
 * @returns {Context_user}
 */
Context_user.prototype.set_annotation_count_change_by_param = function (_original_param, _annotation_param) {
    var _original_type = _original_param.type;
    var _annotation_type = _annotation_param.type;
    if (_original_type.equals(_annotation_type) === false) {
        this.set_annotation_count_reduce_by_param(_original_param);
        this.set_annotation_count_add_by_param(_annotation_param);
    }
    return this;
};

// ------------------------------
// topic_annotation_count

/**
 * 設定主題標註次數
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_topic_annotation_count = function (_annotation_type, _count) {
    return this.set_annotation_count("topic_annotation_count", _annotation_type, _count);
};

/**
 * 設定主題標註次數增加
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1次
 * @returns {Context_user}
 */
Context_user.prototype.set_topic_annotation_count_add = function (_annotation_type, _count) {
    return this.set_annotation_count_add("topic_annotation_count", _annotation_type, _count);
};

/**
 * 設定主題標註次數減少
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1次
 * @returns {Context_user}
 */
Context_user.prototype.set_topic_annotation_count_reduce = function (_annotation_type, _count) {
    return this.set_annotation_count_reduce("topic_annotation_count", _annotation_type, _count);
};

/**
 * 設定主題標註次數改變
 * 
 * @param {Annotation_type_param} _original_type 標註類型
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @returns {Context_user}
 */
Context_user.prototype.set_topic_annotation_count_change = function (_original_type, _annotation_type) {
    //$.test_msg("set_topic_annotation_count_change", [_original_type.get_name(), _annotation_type.get_name()]);
    return this.set_annotation_count_change("topic_annotation_count", _original_type, _annotation_type);
};

/**
 * 取得主題標註次數
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型，可省略
 * @returns {Int}
 */
Context_user.prototype.get_topic_annotation_count = function (_annotation_type) {
    return this.get_annotation_count("topic_annotation_count", _annotation_type);
};

// ------------------------------
// respond_to_my_annotation_count

/**
 * 設定回應到自己的標註次數
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_my_annotation_count = function (_annotation_type, _count) {
    return this.set_annotation_count("respond_to_my_annotation_count", _annotation_type, _count);
};

/**
 * 設定回應到自己的標註次數增加
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1次
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_my_annotation_count_add = function (_annotation_type, _count) {
    return this.set_annotation_count_add("respond_to_my_annotation_count", _annotation_type, _count);
};

/**
 * 設定回應到自己的標註次數減少
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1次
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_my_annotation_count_reduce = function (_annotation_type, _count) {
    return this.set_annotation_count_reduce("respond_to_my_annotation_count", _annotation_type, _count);
};


/**
 * 設定回應到自己的標註次數改變
 * 
 * @param {Annotation_type_param} _original_type 標註類型
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_my_annotation_count_change = function (_original_type, _annotation_type) {
    return this.set_annotation_count_change("respond_to_my_annotation_count", _original_type, _annotation_type);
};

/**
 * 取得回應到自己的標註次數
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型，可省略
 * @returns {Int}
 */
Context_user.prototype.get_respond_to_my_annotation_count = function (_annotation_type) {
    return this.get_annotation_count("respond_to_my_annotation_count", _annotation_type);
};

// ------------------------------
// respond_to_other_annotation_count

/**
 * 設定回應到別人的標註次數
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_other_annotation_count = function (_annotation_type, _count) {
    return this.set_annotation_count("respond_to_other_annotation_count", _annotation_type, _count);
};

/**
 * 設定回應到別人的標註次數增加
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1次
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_other_annotation_count_add = function (_annotation_type, _count) {
    return this.set_annotation_count_add("respond_to_other_annotation_count", _annotation_type, _count);
};

/**
 * 設定回應到別人的標註次數減少
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @param {Int} _count 次數，可省略，預設是1次
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_other_annotation_count_reduce = function (_annotation_type, _count) {
    return this.set_annotation_count_reduce("respond_to_other_annotation_count", _annotation_type, _count);
};

/**
 * 設定回應到別人的標註次數改變
 * 
 * @param {Annotation_type_param} _original_type 標註類型
 * @param {Annotation_type_param} _annotation_type 標註類型
 * @returns {Context_user}
 */
Context_user.prototype.set_respond_to_other_annotation_count_change = function (_original_type, _annotation_type) {
    return this.set_annotation_count_change("respond_to_other_annotation_count", _original_type, _annotation_type);
};

/**
 * 取得回應到別人的標註次數
 * 
 * @param {Annotation_type_param} _annotation_type 標註類型，可省略
 * @returns {Int}
 */
Context_user.prototype.get_respond_to_other_annotation_count = function (_annotation_type) {
    return this.get_annotation_count("respond_to_other_annotation_count", _annotation_type);
};

// ------------------------------
// responded_annotation_count

/**
 * 設定被別人回應的標註次數
 * 
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_responded_annotation_count = function (_count) {
    return this.set_attr("responded_annotation_count", _count);
};

/**
 * 取得被別人回應的標註次數
 * 
 * @returns {Int}
 */
Context_user.prototype.get_responded_annotation_count = function () {
    return this.get_attr("responded_annotation_count", 0);
};

// ------------------------------
// like_to_count

/**
 * 設定喜愛別人的次數
 * 
 * @todo 20140515 初始化尚未設定 Pulipuli Chen
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_like_to_count = function (_count) {
    return this.set_attr("like_to_count", _count);
};

/**
 * 增加喜愛別人的次數
 * 
 * @todo 20140515 來源尚未設定 Pulipuli Chen
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_like_to_count_add = function (_count) {
    return this.set_attr_add("like_to_count", _count);
};


/**
 * 減少喜愛別人的次數
 * 
 * @todo 20140515 來源尚未設定 Pulipuli Chen
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_like_to_count_reduce = function (_count) {
    return this.set_attr_reduce("like_to_count", _count);
};

/**
 * 取得喜愛別人的次數
 * 
 * @returns {Int}
 */
Context_user.prototype.get_like_to_count = function () {
    return this.get_attr("like_to_count", 0);
};


// ------------------------------
// liked_count

/**
 * 設定被喜愛別人的次數
 * 
 * @todo 20140515 初始化尚未設定 Pulipuli Chen
 * @todo 20140515 來源尚未設定 Pulipuli Chen
 * @param {Int} _count 次數
 * @returns {Context_user}
 */
Context_user.prototype.set_liked_count = function (_count) {
    return this.set_attr("liked_count", _count);
};

/**
 * 取得被喜愛別人的次數
 * 
 * @returns {Int}
 */
Context_user.prototype.get_liked_count = function () {
    return this.get_attr("liked_count", 0);
};

// ---------------------------------

/**
 * 接收來自他人的資料
 * 
 * 通常其他人利用JSONP_dispatcher.add_listener來訂閱資料
 * @param {JSONP_dispatcher} _dispatcher
 * @param {Object} _data 從伺服器回傳的JSON資料
 */
Context_user.prototype.update = function (_dispatcher, _data) {
    
    var _data_key = this._$data_key;
    if (_data_key === null) {
        return this;
    }
    
    if (typeof(_data[_data_key]) !== 'undefined') {
        for (var _key in _data[_data_key]) {
            this._pre_update(_key, _data[_data_key][_key]);
            this.set_attr(_key, _data[_data_key][_key]);
        }
    }
    else {
        this.reset();
    }
    
    //$.test_msg('attr name' , this.get_attr('name', 'NULL'));
    return this;
};

/**
 * 檢查資料並更新
 * @param {String} _key
 * @param {Object} _value
 * @returns {Context_user}
 */
Context_user.prototype._pre_update = function (_key, _value) {
    
    var _type_name, _count, _write_type, _type_param;
    if (_key === "topic_annotation_count" 
            || _key === "respond_to_my_annotation_count"
            || _key === "respond_to_other_annotation_count") {
        
        _write_type =  _key;
        
        var _count_collection = _value;
        
        for (_type_name in _count_collection) {
            _count = _count_collection[_type_name];
            _type_param = new Annotation_type_param(_type_name);
            this.set_annotation_count(_write_type, _type_param, _count);
        }
    }
    
    return this;
};

/* End of file Context_user */
/* Location: ./system/application/views/web_apps/Context_user.js *//**
 * Context_policy
 * 控制權限
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/12 上午 10:45:43
 * @extends {Attribute_event_dispatcher}
 */
function Context_policy(){
    Attribute_event_dispatcher.call(this);
    
    //if ($.object_isset('KALS_context.auth.add_listener()'))
    //{
        //KALS_context.auth.add_listener(this);
            var _this = this;
            KALS_context.auth.add_listener(function (_auth) {
                //$.test_msg("Context_policy", _auth._data.policy);
                if (typeof (_auth.get_data().policy) !== "undefined") {
                    if (_auth.is_login()) {
                        _this.set_attr(_auth.get_data().policy);
                    }
                    else {
                        if (typeof(_auth.get_data().navigation_data) !== "undefined") {
                                _this.set_attr("navigation_data", _auth.get_data().policy.navigation_data);
                        }
                        _this.reset();
                    }	
            }

            });
    //}
	
    _this.reset();
}

Context_policy.prototype = new Attribute_event_dispatcher();

Context_policy.prototype._$data_key = 'policy';

/**
 * 是否可讀取
 * @returns Boolean
 */
Context_policy.prototype.readable = function () {		
    if (KALS_CONFIG.isolation_mode === true) {
        //$.test_msg("policy.readable()", this.get_attr('read'));
        return this.get_attr('read', false);
    }
    return this.get_attr('read', true);
};

/**
 * 是否可讀入
 * @returns {Boolean}
 */
Context_policy.prototype.writable = function () {
    if (KALS_CONFIG.isolation_mode === true 
            && KALS_context.auth.is_login() === false) {
        return false;
    }
    return this.get_attr('write', false);
};

/**
 * 是否允許顯示別人的標註
 */
Context_policy.prototype.allow_show_navigation = function () {
    if (KALS_CONFIG.isolation_mode === true) {
        return false;
    }

    var _allow_show = this.get_attr('show_navigation', true);
    //$.test_msg("policy show_navigation", _allow_show);
    return _allow_show; 
	
    //實驗中，預設是不顯示推薦標註
    //return this.get_attr('show_navigation', false);
    
    //正式使用時，預設是顯示推薦標註
    //return this.get_attr('recommend', true);
};

Context_policy.prototype.get_navigation_data = function () {
    return this.get_attr('navigation_data');
};

/**
 * 我的標註的範圍資料
 */
Context_policy.prototype.get_my_basic = function () {
    return this.get_attr('my_basic');
};

/**
 * 我的自訂標註的範圍資料
 */
Context_policy.prototype.get_my_custom = function () {
    return this.get_attr('my_custom');
};

Context_policy.prototype.set_readable = function (_boolean) {
    return this.set_attr('read', _boolean);
};

Context_policy.prototype.set_writable = function (_boolean) {
    return this.set_attr('write', _boolean);
};

Context_policy.prototype.set_show_navigation = function (_boolean) {
    return this.set_attr('show_navigation', _boolean);
};

/**
 * 重新設定權限
 * @returns {Context_policy}
 */
Context_policy.prototype.reset = function () {
    if (KALS_CONFIG.isolation_mode === true) {
        this.set_attr("read", true);
        this.set_attr("write", KALS_context.auth.is_login());
        this.set_attr("show_navigation", false);		
        this.unset_attr("my_basic");
        
        this.set_attr("other_topic_readable", true);
        this.set_attr("respond_other_topic_wrtiable", true);
        this.set_attr("respond_my_topic_wrtiable", true);
        this.set_attr("other_respond_readable", true);
        this.set_attr("my_respond_readable", true);
        this.set_attr("able_like_topic", true);
        this.set_attr("able_like_respond", true);
        
        return this;
    }

    this.set_attr("read", true);
    this.set_attr("write", KALS_context.auth.is_login());
    this.set_attr("show_navigation", true);
    this.unset_attr("my_basic");
    
    this.set_attr("other_topic_readable", true);
    this.set_attr("respond_other_topic_wrtiable", true);
    this.set_attr("respond_my_topic_wrtiable", true);
    this.set_attr("other_respond_readable", true);
    this.set_attr("my_respond_readable", true);
    this.set_attr("able_like_topic", true);
    this.set_attr("able_like_respond", true);
    
    return this;
};

/**
 * 是否可以讀取其他人的主題標註
 * 
 * @todo 20140511 對應功能未設定
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.other_topic_readable = function () {
    //return false;
    return this.get_attr('other_topic_readable', true);
};

/**
 * 設定是否可以讀取其他人的主題標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_other_topic_readable = function (_boolean) {
    return this.set_attr('other_topic_readable', _boolean);
};

/**
 * 是否可以回應其他人的主題標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.respond_other_topic_wrtiable = function () {
    //return false;
    return this.get_attr('respond_other_topic_wrtiable', true);
};

/**
 * 設定是否可以回應其他人的主題標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_respond_other_topic_wrtiable = function (_boolean) {
    return this.set_attr('respond_other_topic_wrtiable', _boolean);
};

/**
 * 自己是否可以撰寫主題標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.topic_writable = function () {
    //return false;
    return this.writable();
};

/**
 * 設定自己是否可以撰寫主題標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_topic_wrtiable = function (_boolean) {
    return this.set_writable(_boolean);
};

/**
 * 是否可以回應自己的主題標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.respond_my_topic_wrtiable = function () {
    //return false;
    return this.get_attr('respond_my_topic_wrtiable', true);
};

/**
 * 設定是否可以回應自己的主題標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_respond_my_topic_wrtiable = function (_boolean) {
    return this.set_attr('respond_my_topic_wrtiable', _boolean);
};

/**
 * 是否可以讀取其他人的回應標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.other_respond_readable = function () {
    //return false;
    return this.get_attr('other_respond_readable', true);
};

/**
 * 設定是否可以讀取其他人的回應標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_other_respond_readable = function (_boolean) {
    return this.set_attr('other_respond_readable', _boolean);
};

/**
 * 是否可以讀取自己的回應標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.my_respond_readable = function () {
    //return false;
    return this.get_attr('my_respond_readable', true);
};

/**
 * 設定是否可以讀取自己的回應標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_my_respond_readable = function (_boolean) {
    return this.set_attr('my_respond_readable', _boolean);
};

// -------------------------

/**
 * 是否可以喜愛主題標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen 已經設定完畢
 */
Context_policy.prototype.able_like_topic = function () {
    //return false;
    return this.get_attr('able_like_topic', true);
};

/**
 * 設定是否可以喜愛主題標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_able_like_topic = function (_boolean) {
    return this.set_attr('able_like_topic', _boolean);
};

/**
 * 是否可以喜愛回應標註
 * 
 * @returns {Boolean}
 * @version 20140511 Pulipuli Chen 已經設定完畢
 */
Context_policy.prototype.able_like_respond = function () {
    //return false;
    return this.get_attr('able_like_respond', true);
};

/**
 * 設定是否可以喜愛回應標註
 * 
 * @param {Boolean} _boolean 設定條件
 * @version 20140511 Pulipuli Chen
 */
Context_policy.prototype.set_able_like_respond = function (_boolean) {
    return this.set_attr('able_like_respond', _boolean);
};

/* End of file Context_policy */
/* Location: ./system/application/views/web_apps/Context_policy.js *//**
 * Context_search
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/12 上午 10:45:51
 * @extends {Attribute_event_dispatcher}
 */
function Context_search (){
    
    Attribute_event_dispatcher.call(this);
    
}

Context_search.prototype = new Attribute_event_dispatcher(); 

Context_search.prototype.set_field = function(_value) { //設定search_range
    return this.set_attr('search_range', _value);
};

Context_search.prototype.get_field = function() {  //取得search_range
    return this.get_attr('search_range');
};

Context_search.prototype.set_keyword = function(_value) { //設定keyword
    return this.set_attr('keyword', _value);
};

Context_search.prototype.get_keyword = function() {  //取得keyword
    return this.get_attr('keyword');
};

//===頁數===
/*Context_search.prototype.set_page = function(_value) {
    return this.set_attr('page', _value);
};

Context_search.prototype.set_page_limit = function(_value) {
    return this.set_attr('page_limit', _value);
};
*/

/**
 * 送出查詢時的參數
 */
Context_search.prototype.get_search_option = function () {
    return {
        search_range: this.get_attr('search_range'),
        keyword: this.get_attr('keyword')
		
        //page: this.get_attr('page', 0),
        //page_limit: this.get_attr('page_litmit', 10)
    };
};

/**
 * 取得搜尋結果的路徑
 */
Context_search.prototype.ajax_get_search_result_path = function() {
    
    // TODO Context_search.ajax_get_search_result_path() 
    
    return this;
};

/**
 * 取得搜尋結果之後……
 */
Context_search.prototype.ajax_get_search_result_callback = function() {
    
    // TODO Context_search.ajax_get_search_result_callback()
    
    return this;
};

/**
 * 將搜尋範圍中的標註標示出來
 */
Context_search.prototype.locate_annotation = function() {
    
    // TODO Context_search.locate_annotation()
    
    return this;
};

/* End of file Context_search */
/* Location: ./system/application/views/web_apps/Context_search.js *//**
 * Context_basic_type
 * 控制自訂標註類別的管理器
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2014/5/5 下午 3:59:43
 * @extends {Attribute_event_dispatcher}
 */
function Context_basic_type(){
    
    Attribute_event_dispatcher.call(this);
    
    var _this = this;
    //setTimeout(function () {
        _this.initialize();  
    //}, 0);
}

Context_basic_type.prototype = new Attribute_event_dispatcher();

Context_basic_type.prototype._$data_key = 'basic_type';

/**
 * 擺放標註類型資料
 * @type {JSON} 注意資料格式
 *     _type_list = {
 *         "標註類型一": new Annotation_type_paray(),
 *         "標註類型二": new Annotation_type_paray(),
 *         "標註類型三": new Annotation_type_paray()
 *     }
 */
Context_basic_type.prototype._type_list = {};

//-----------------------------------------------

/**
 * 初始化，從KALS_CONFIG載入資料
 */
Context_basic_type.prototype.initialize = function () {
    
    var _basic_type = null;
    if (typeof(KALS_CONFIG.annotation_type_basic) !== "undefined") {
        _basic_type = KALS_CONFIG.annotation_type_basic;
    }
    else if (typeof(KALS_CONFIG.annotation_type_option) !== "undefined") {
        _basic_type = KALS_CONFIG.annotation_type_option;
    }
    
    if (_basic_type !== null) {
        var _type_list = {};
        
        for (var _type_name in _basic_type) {
            var _type_config = _basic_type[_type_name];
            
            var _type_param = this._initialize_type(_type_name, _type_config);
            
            //$.test_msg("Context_basic_type._initialize_type 3: " + _type_name, _type_param.is_enable("topic"));
            _type_list[_type_name] = _type_param;
            
            //$.test_msg("Context_basic_type._initialize_type 4: " + _type_name, _type_list[_type_name].is_enable("topic"));
            //$.test_msg("Context_basic_type._initialize_type 4.4: ", _type_list["importance"]._enable_config);
        }
        //$.test_msg("Context_basic_type._initialize_type 4.4: ", _type_list["importance"]);
        // $.test_msg("Context_basic_type._initialize_type 4.5: ", _type_list["importance"].is_enable("topic"));
        this._type_list = _type_list;
    }
    //this.get_type_list("topic");
    
    return this;
};

/**
 * 初始化個別的標註
 * @param {String} _type_name
 * @param {JSON} _type_config
 * @returns {Annotation_type_param}
 */
Context_basic_type.prototype._initialize_type = function (_type_name, _type_config) {
    
    var _type_param = new Annotation_type_param(_type_name);

    if (typeof(_type_config["enable"]) === 'object') {
        //$.test_msg("Context_basic_type._initialize_type: " + _type_name, _enable_config);
        var _enable_config = _type_config["enable"];
        
        //$.test_msg("Context_basic_type._initialize_type 2: " + _type_name, _type_param.is_enable("topic"));
        _type_param.set_enable_config(_enable_config);
    }
    
    if (typeof(_type_config["order"]) === "number") {
        var _order = _type_config["order"];
        _type_param.set_order(_order);
    }
    return _type_param;
};

/**
 * 取得自訂標註類型的名稱清單
 * @return {string[]}
 */
Context_basic_type.prototype.get_type_name_list = function (_enable_type) {
    
    var _type_name_list = [];
    for (var _type_name in this._type_list) {
        
        var _type_param = this._type_list[_type_name];
        // 檢查啟用類型
        if (typeof(_enable_type) === "string"
            && _type_param.is_enable(_enable_type) === false) {
            continue;
        }
        
        _type_name_list.push(_type_name);
    }
    return _type_name_list;
    
};

/**
 * 取得自訂標註的資料
 * @param {String} _enable_type 要啟用的類型
 * @return {Annotation_type_param[]}
 */
Context_basic_type.prototype.get_type_list = function (_enable_type) {
    
    //var _type_name = "importance";
    //$.test_msg("Context_basic_type._initialize_type 5: " + _type_name, this._type_list[_type_name].is_enable("topic"));
    
    var _type_list = [];
    for (var _type_name in this._type_list) {
        var _type_param = this._type_list[_type_name];
        
        //$.test_msg("Context_basic_type.get_type_list: " + _type_name, [_enable_type, this._type_list[_type_name].is_enable(_enable_type)]);
        
        // 檢查啟用類型
        if (typeof(_enable_type) === "string"
            && _type_param.is_enable(_enable_type) === false) {
            continue;
        }
        
        _type_list.push(_type_param);
    }
    return _type_list;
};

/**
 * 從標註類型名稱取得type_id
 * @param {string} _type_name 標註類型的名稱，也可以直接就是數字
 * @param {number}
 */
Context_basic_type.prototype.filter_id = function (_type_name) {
    var _type_id = null;
    
    if ($.is_number(_type_name)) {
        _type_id = _type_name;
    }
    else {
        var _type = this._type_list[_type_name];
        _type_id = _type.get_id();
    }
    
    return _type_id;
};

/**
 * 得知現在自訂標註類型的數量
 * @return {number}
 */
Context_basic_type.prototype.length = function () {
    var _number = 0;
    for (var _i in this._type_list) {
        _number++;
    }
    return _number;
};

/**
 * 從標註類別名稱找到標註類別變數
 * @param {String|number} _type_name
 * @return {Annotation_type_param}
 */
Context_basic_type.prototype.find_type = function (_type_name) {
    var _output_type = null;
    
    var _test_number = parseInt(_type_name,10);
    if (_type_name === _test_number + '') {
        _type_name = _test_number;
    }
    
    var _basic_id = Annotation_type_param.filter_basic_id(_type_name);
    
    if ($.is_number(_basic_id)) {
        //$.test_msg("custom.find_type()", "基本資料");
		
        //表示是基本資料
        _output_type = new Annotation_type_param(_basic_id);
    }
    else if ($.is_number(_type_name)) {
        //$.test_msg("custom.find_type()", "數字");
		
        var _target_type_id = _type_name;
        //$.test_msg('Context_basic_type.find_type ready search', this._type_list);
        for (var _t in this._type_list) {
            var _type = this._type_list[_t];
            var _type_id = _type.get_id();
            //$.test_msg('Context_basic_type.find_type search', [_type_name, _type_id]);
            if (_type_id === _target_type_id) {
                _output_type = _type;
                break;
            }
        }
        
        if (_output_type === null) {
            _output_type = new Annotation_type_param(_target_type_id);
        }
    }
    else {
        //$.test_msg("custom.find_type()", "其他" + typeof(this._type_list[_type_name]));
		
        if (typeof(this._type_list[_type_name]) !== 'undefined') {
            _output_type = this._type_list[_type_name];
        }
    }
    
    //$.test_msg('Context_basic_type.find_type', [_type_name, (_output_type === null)]);
    
    return _output_type;
};

/**
 * find_type的交接口
 * @param {String} _json
 */
Context_basic_type.prototype.import_json = function (_json) {
    var _type_param = this.find_type(_json);
    if ($.is_null(_type_param)) {
        _type_param = this.add_predefined_type(_json);
    } 
    return _type_param;
};

/**
 * 取得type選項的按鈕
 * @param {Annotation_type_param|string|number} _type_data
 * @return {Annotation_type_param}
 */
Context_basic_type.prototype.get_type_option = function (_type_data) {
    return _type_data.get_option_ui();
    /*
    var _option = $('<span></span>')
        .addClass('type-option');
    
    //取得參數    
    var _type_param = null;
    
    //$.test_msg('Context_basic_type.get_type_option [_type_data]', _type_data);
    
    if ($.is_class(_type_data, 'Annotation_type_param')) {
        _type_param = _type_data;
    }
    else {
        _type_param = this.find_type(_type_data);
    }
    
    if (_type_param === null) {
        _type_param = this.add_custom_type(_type_data);
    }
    
    //$.test_msg('Context_basic_type.get_type_option [_type_name]', [_type_param.get_name(), _type_param.is_basic(), _type_param.get_option_style()]);
    
    //設置外觀
    _option.addClass(_type_param.get_classname());
    if (_type_param.is_basic() === false) {
        _option.attr('style', _type_param.get_option_style());
    }
    
    //接下來是內文的部份
    var _type_name = _type_param.get_type_name();
    _option.html(_type_name);
    
    if (_type_param.is_basic()) {
        var _type_lang_header = Type_menu.prototype._type_lang_header;
        var _lang = new KALS_language_param(
            _type_name,
            _type_lang_header + _type_name
        );
        
        KALS_context.lang.add_listener(_option, _lang);
    }
    
    //額外的參數
    _type_name = _type_param.get_type_name();
    _option.attr('annotation_type', _type_name);
    
    return _option;
    */
};

/* End of file Context_basic_type */
/* Location: ./system/application/views/web_apps/core/Context_basic_type.js *//**
 * Context_predefined_type
 * 控制自訂標註類別的管理器
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2011, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2011/11/5 下午 3:59:43
 * @extends {Attribute_event_dispatcher}
 */
function Context_predefined_type(){
    
    Attribute_event_dispatcher.call(this);
    
    var _this = this;
    //setTimeout(function () {
        _this.initialize();  
        _this.setup_css();  
    //}, 0);
}

Context_predefined_type.prototype = new Attribute_event_dispatcher();

Context_predefined_type.prototype._$data_key = 'custom_type';

/**
 * 擺放標註類型資料
 * @type {JSON} 注意資料格式
 *     _type_list = {
 *         "標註類型一": new Annotation_type_paray(),
 *         "標註類型二": new Annotation_type_paray(),
 *         "標註類型三": new Annotation_type_paray()
 *     }
 */
Context_predefined_type.prototype._type_list = {};

//-----------------------------------------------

/**
 * 初始化，從KALS_CONFIG載入資料
 */
Context_predefined_type.prototype.initialize = function () {
    
    var _prefined_type = null;
    if (typeof(KALS_CONFIG.annotation_type_predefined) !== 'undefined') {
        _prefined_type = KALS_CONFIG.annotation_type_predefined;
    }
    else if (typeof(KALS_CONFIG.annotation_custom_type) !== 'undefined') {
        _prefined_type = KALS_CONFIG.annotation_custom_type;
    }
    
    if (_prefined_type !== null) {
        var _type_list = {};
        for (var _type_name in _prefined_type) {
            var _type_config = _prefined_type[_type_name];
            
            var _type_param = this._initialize_type(_type_name, _type_config);
            
            _type_list[_type_name] = _type_param;
        }   //for (var _type_name in _prefined_type) {
        
        this._type_list = _type_list;
    }   //if (_prefined_type !== null) {
    
    return this;
};

/**
 * 初始化個別的標註
 * @param {String} _type_name
 * @param {JSON} _type_config
 * @returns {Annotation_type_param}
 */
Context_predefined_type.prototype._initialize_type = function (_type_name, _type_config) {
    
    var _type_param = new Annotation_type_param(_type_name);
    _type_param.set_custom();

    //檢查是否有id
    //if (typeof(_type_data.type_id) == 'number')
    //    _type_param.set_id(_type_data.type_id);

    //檢查是否有hint
    if (typeof(_type_config.hint) === 'string') {
        _type_param.set_hint(_type_config.hint);
    }

    if (typeof(_type_config.option) !== 'undefined') {
        //檢查是否有background_color
        if (typeof(_type_config.option.background_color) === 'string') {
            _type_param.set_option_background_color(_type_config.option.background_color);
        }

        //檢查是否有font_color
        if (typeof(_type_config.option.font_color) === 'string') {
            _type_param.set_option_font_color(_type_config.option.font_color);
        }
    }

    if (typeof(_type_config.anchor) !== 'undefined') {
        //檢查是否有style
        if (typeof(_type_config.anchor.style) === 'string') {
            _type_param.set_anchor_style(_type_config.anchor.style);
        }

        //檢查是否有color
        if (typeof(_type_config.anchor.color) === 'string') {
            _type_param.set_anchor_color(_type_config.anchor.color);
        }

        //檢查是否有font_color
        if (typeof(_type_config.anchor.font_color) === 'string') {
            _type_param.set_anchor_font_color(_type_config.anchor.font_color);
        }
    }

    // 設定啟用選項
    if (typeof(_type_config.enable) !== "undefined") {
        _type_param.set_enable_config(_type_config.enable);
        //$.test_msg("是否啟用", [_type_data.enable, _type_param.is_enable("respond")]);
    }
    
    if (typeof(_type_config["order"]) === "number") {
        var _order = _type_config["order"];
        _type_param.set_order(_order);
    }
            
    return _type_param;
};

/**
 * 從伺服器讀取資料
 * 問題是還不知道要怎麼做…
 * @version 20111105 Pudding Chen
 */
Context_predefined_type.prototype.load_id = function () {
    
};

/**
 * 將伺服器回傳的資料設定進入資料庫中
 * @param {JSON} _type_id_data
 *     _type_id_data = {
 *         "標註類型一": 19,
 *         "標註類型二": 20,
 *         "標註類型三": 21,
 *     }
 */
Context_predefined_type.prototype.set_type_id = function (_type_id_data) {
    
    if (typeof(_type_id_data) === 'object'
        && _type_id_data !== null) {
        for (var _type_name in _type_id_data) {
            if (typeof(this._type_list[_type_name]) === 'undefined') {
                continue;
            }
            
            var _type_id = _type_id_data[_type_name];
            this._type_list[_type_name].set_id(_type_id);
        }
    }    
    return this;
};

/**
 * 取得自訂標註類型的名稱清單
 * @return {string[]}
 */
Context_predefined_type.prototype.get_type_name_list = function () {
    
    var _type_name_list = [];
    for (var _type_name in this._type_list) {
        _type_name_list.push(_type_name);
    }
    return _type_name_list;
    
};

/**
 * 取得自訂標註的資料
 * @param {String} _enable_type 要啟用的類型
 * @return {Annotation_type_param[]}
 */
Context_predefined_type.prototype.get_type_list = function (_enable_type) {
    var _type_list = [];
    for (var _type_name in this._type_list) {
        var _type_param = this._type_list[_type_name];
        
        //$.test_msg("Context_predefined_type.get_type_list: " + _type_name, [_enable_type, this._type_list[_type_name].is_enable(_enable_type)]);
        
        // 檢查啟用類型
        if (typeof(_enable_type) === "string"
            && _type_param.is_enable(_enable_type) === false) {
            continue;
        }
        
        _type_list.push(_type_param);
    }
    return _type_list;
};

/**
 * 從標註類型名稱取得type_id
 * @param {string} _type_name 標註類型的名稱，也可以直接就是數字
 * @param {number}
 */
Context_predefined_type.prototype.filter_id = function (_type_name) {
    var _type_id = null;
    
    if ($.is_number(_type_name)) {
        _type_id = _type_name;
    }
    else {
        var _type = this._type_list[_type_name];
        _type_id = _type.get_id();
    }
    
    return _type_id;
};

/**
 * 得知現在自訂標註類型的數量
 * @return {number}
 */
Context_predefined_type.prototype.length = function () {
    var _number = 0;
    for (var _i in this._type_list) {
		_number++;
	}
    return _number;
};

/**
 * 從目前的自訂標註中，設定CSS資料
 */
Context_predefined_type.prototype.setup_css = function () {
    
    //如果沒有要自訂的標註，那就免啦
    if (this.length() === 0) {
        return this;
    }
    
    var _style_manager = KALS_context.style;
    
    var _style_name = 'custom_type_stylesheet';
    
    _style_manager.create_style(_style_name);
    
    for (var _type_name in this._type_list) {
        var _type_param = this._type_list[_type_name];
        
        var _selector = '.' + _type_param.get_my_classname();
        var _style = _type_param.get_anchor_css();
        //$.test_msg('Context_predefined_type.setup_css', [_type_name, _style]);
        _style_manager.add_style(_style_name, _selector, _style);
    }
    
    return this;
};

/**
 * 從標註類別名稱找到標註類別變數
 * @param {String|number} _type_name
 * @return {Annotation_type_param}
 */
Context_predefined_type.prototype.find_type = function (_type_name) {
    var _output_type = null;
    
    var _test_number = parseInt(_type_name,10);
    if (_type_name === _test_number + '') {
        _type_name = _test_number;
    }
    
    var _basic_id = Annotation_type_param.filter_basic_id(_type_name);
    
    if ($.is_number(_basic_id)) {
        //$.test_msg("custom.find_type()", "基本資料");
		
        //表示是基本資料
        _output_type = new Annotation_type_param(_basic_id);
    }
    else if ($.is_number(_type_name)) {
        //$.test_msg("custom.find_type()", "數字");
		
        var _target_type_id = _type_name;
        //$.test_msg('Context_predefined_type.find_type ready search', this._type_list);
        for (var _t in this._type_list) {
            var _type = this._type_list[_t];
            var _type_id = _type.get_id();
            //$.test_msg('Context_predefined_type.find_type search', [_type_name, _type_id]);
            if (_type_id === _target_type_id) {
                _output_type = _type;
                break;
            }
        }
        
        if (_output_type === null) {
            _output_type = new Annotation_type_param(_target_type_id);
        }
    }
    else {
		//$.test_msg("custom.find_type()", "其他" + typeof(this._type_list[_type_name]));
		
        if (typeof(this._type_list[_type_name]) !== 'undefined') {
            _output_type = this._type_list[_type_name];
        }
    }
    
    //$.test_msg('Context_predefined_type.find_type', [_type_name, (_output_type === null)]);
    
    return _output_type;
};

/**
 * 新增自訂標註
 * @param {string} _type_data
 * @type {Annotation_type_param}
 */
Context_predefined_type.prototype.add_custom_type = function (_type_data) {
    var _type_param = new Annotation_type_param(_type_data);
    var _type_name = _type_param.get_type_name();
    this._type_list[_type_name] = _type_param;
    _type_param.set_predefined(false);
    return _type_param;
};

/**
 * 新增預設標註
 * @param {string} _type_data
 * @type {Annotation_type_param}
 */
Context_predefined_type.prototype.add_predefined_type = function (_type_data) {
    var _type_param = new Annotation_type_param(_type_data);
    var _type_name = _type_param.get_type_name();
    this._type_list[_type_name] = _type_param;
    _type_param.set_predefined(true);
    return _type_param;
};

/**
 * find_type的交接口
 * @param {String} _json
 */
Context_predefined_type.prototype.import_json = function (_json) {
    var _type_param = this.find_type(_json);
    if ($.is_null(_type_param)) {
        _type_param = this.add_predefined_type(_json);
    } 
    return _type_param;
};

/**
 * 取得type選項的按鈕
 * @param {Annotation_type_param|string|number} _type_data
 * @return {Annotation_type_param}
 */
Context_predefined_type.prototype.get_type_option = function (_type_data) {
    return _type_data.get_option_ui();
    /*
    var _option = $('<span></span>')
        .addClass('type-option');
    
    //取得參數    
    var _type_param = null;
    
    //$.test_msg('Context_predefined_type.get_type_option [_type_data]', _type_data);
    
    if ($.is_class(_type_data, 'Annotation_type_param')) {
        _type_param = _type_data;
    }
    else {
        _type_param = this.find_type(_type_data);
    }
    
    if (_type_param === null) {
        _type_param = this.add_custom_type(_type_data);
    }
    
    //$.test_msg('Context_predefined_type.get_type_option [_type_name]', [_type_param.get_name(), _type_param.is_basic(), _type_param.get_option_style()]);
    
    //設置外觀
    _option.addClass(_type_param.get_classname());
    if (_type_param.is_basic() === false) {
        _option.attr('style', _type_param.get_option_style());
    }
    
    //接下來是內文的部份
    var _type_name = _type_param.get_type_name();
    _option.html(_type_name);
    
    if (_type_param.is_basic()) {
        var _type_lang_header = Type_menu.prototype._type_lang_header;
        var _lang = new KALS_language_param(
            _type_name,
            _type_lang_header + _type_name
        );
        
        KALS_context.lang.add_listener(_option, _lang);
    }
    
    //額外的參數
    _type_name = _type_param.get_type_name();
    _option.attr('annotation_type', _type_name);
    
    return _option;
    */
};

/* End of file Context_predefined_type */
/* Location: ./system/application/views/web_apps/Context_predefined_type.js *//**
 * KALS_module_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2014/4/28 下午 02:28:30
 * @extends {Multi_event_dispatcher}
 */
function KALS_module_manager(){
   
   Multi_event_dispatcher.call(this);
   
}

/**
 * 繼承自Multi_event_dispatcher
 */
KALS_module_manager.prototype = new Multi_event_dispatcher(); 

/**
 * 已經讀取過的模組
 * @type Array
 */
KALS_module_manager.prototype._loaded_modules = {};

/**
 * 預先載入模組
 */
KALS_module_manager.prototype.init = function() {
    if (typeof(KALS_CONFIG) === "object"
            && typeof(KALS_CONFIG.modules) === "object") {
        
        var _modules = KALS_CONFIG.modules;
        
        for (var _name in _modules) {
            //$.test_msg("KALS_module 載入", _name);
            this.load(_name);
            //$.test_msg("KALS_module 載入後", typeof(this._loaded_modules[_name]));
        }
        
        // 載入完之後，登錄到KALS_context當中？
        //$.test_msg("KALS_module.init()", typeof(KALS_context));
        
        //$.test_msg("KALS_module. loaded count", this._loaded_modules.length);
        
        /*
        for (var _i in this._loaded_modules) {
            var _item = this._loaded_modules[_i];
            //$.test_msg("prepare register_item", [_i, typeof(_item)]);
            KALS_context.navigation.register_item(_item);
        }
        */
    }
    
    return this._loaded_modules;
};

/**
 * 載入模組
 * @param {String} _name 模組的名稱，注意要用字串
 * @param {Object} _param 搭配模組載入的參數
 * @param {Function} _callback 回呼函式
 * @returns {Object|Boolean} 回傳載入的模組的物件。如果是False，則表示載入失敗。
 */
KALS_module_manager.prototype.load = function (_name, _param, _callback) {
    
    // 參數調整
    if (typeof(_param) === "function" 
            && typeof(_callback) === "undefined") {
        _callback = _param;
        _param = undefined; 
    }
    
    var _module = false;
    
    // 先讀取已經載入的模組
    _module = this._get_loaded_module(_name);
    if (typeof(_module) === "object") {
        return _module;
    }
    
    // 讀取KALS_CONFIG
    var _config = this._load_config(_name);
    if (typeof(_config.enable) === "boolean"
            && _config.enable === false) {
        //$.test_msg("enable false", _name);
        return false;
    }
    
    if (_name === undefined) {
        return false;
    }
    else if (typeof _name === "function") {
        // @TODO 尚未確定功能是否可以運作
        _name = _name.toString();
    }
    
    // 有一些整合在核心功能中，非獨立運作的模組，透過這個方式來變成模組化
    _module = this._get_core_module(_name);
    
    if (typeof(_module) !== "object") {
        try {
            var _command = '_module = new ' + _name + "(_param)";
            
            //$.test_msg("準備eval", _command);
            
            eval(_command);

            //$.test_msg("eval過後", [_name, typeof(_module)]);
        }
        catch (_e) {
            
            //$.test_msg("eval失敗", [_e.name, _e.message]);
            // do nothing
        }    
    }
    
    // 如果eval有成功讀取的話
    if (typeof(_module) === "object") {
        
        this._loaded_modules_config[_name] = _config;

        _module = this._add_loaded_module(_name, _module);

        _module = this._init_module_config(_module, _config);

        //$.test_msg("init config過後", [_name, typeof(_module)]);

        if (typeof(_callback) === "function") {
            _callback(_module);
        }

        return _module;
    }
    
    return false;
};

/**
 * 檢查模組是否存在
 * @param {String} _name 模組名稱
 * @returns {Boolean} 是否存在
 */
KALS_module_manager.prototype.has_module = function (_name) {
    var _exist = false;
    
    // 讀取已經載入的模組看看
    _exist = this._get_loaded_module(_name);
    if (typeof(_exist) === "object") {
        //$.test_msg("讀取已經載入的模組看看", typeof(_exist));
        return true;
    }
    
    if (_name === undefined) {
        return false;
    }
    else if (typeof(_name) === "function") {
        return true;
    }
    else {
        try {
            var _module = false;
            var _command = '_module = new ' + _name + "(_param)";
            eval(_command);
            //$.test_msg("eval過後", typeof(_module));
            if (typeof(_module) === "object") {
                this._add_loaded_module(_name, _module);
                return true;
            }
        }
        catch (_e) {
            return false;
        }
    }
    return _exist;
};

/**
 * 加入已經儲存的模組
 * @param {String} _name
 * @param {Object} _module
 */
KALS_module_manager.prototype._add_loaded_module = function (_name, _module) {
    if (typeof(this._loaded_modules[_name]) === "undefined") {
        //$.test_msg("加入已經儲存的模組", typeof(_module));
        this._loaded_modules[_name] = _module;
    }
    return _module;
};

/**
 * 取得已經儲存的模組
 * @param {String} _name
 * @returns {Object}
 */
KALS_module_manager.prototype._get_loaded_module = function (_name) {
    if (typeof(this._loaded_modules[_name]) === "undefined") {
        return false;
    }
    else {
        return this._loaded_modules[_name];
    }
};

/**
 * 從KALS_CONFIG中取得模組參數 
 * @param {String|Function} _name
 * @returns {JSON}
 */
KALS_module_manager.prototype._load_config = function (_name) {
    
    //$.test_msg("module load_config", [typeof(KALS_CONFIG), typeof(KALS_CONFIG.modules), typeof(KALS_CONFIG.modules[_name])]);
    if (typeof(KALS_CONFIG) === "object"
            && typeof(KALS_CONFIG.modules) === "object"
            && typeof(KALS_CONFIG.modules[_name]) === "object") {
        return KALS_CONFIG.modules[_name];
    }
    
    return false;
};

/**
 * 將讀取的設定初始化到模組中
 * @param {KALS_controller_window} _module 各種載入的模組
 * @param {JSON} _config
 * @returns {Ojbect}
 */
KALS_module_manager.prototype._init_module_config = function (_module, _config) {
    //$.test_msg("init module config", [typeof(_module), typeof(_config)]);
    if (typeof(_module) !== "object" 
            || typeof(_config) !== "object") {
        return _module;
    }
    
    for (var _key in _config) {
        //$.test_msg("init module config key", [_key, _config[_key]]);
        _module[_key] = _config[_key];
    }
    
    //$.test_msg("init module ", [_module.name, _module.nav_config.display]);
    
    return _module;
};

/**
 * 模組的設定檔，來自於KALS_CONFIG
 * @type JSON = {
 *  module_name: {
 *      config1: true,
 *      config2: false
 *  }
 * }
 */
KALS_module_manager.prototype._loaded_modules_config = {};

/**
 * 取得模組設定
 * 
 * @param {String} _name 模組名稱
 * @param {String} _key 設定名稱
 * @returns {JSON|undefined}
 */
KALS_module_manager.prototype.get_module_config = function (_name, _key) {
    if ($.is_string(_name) 
            && typeof(this._loaded_modules_config[_name]) !== "undefined") {
        var _config = this._loaded_modules_config[_name];
        if ($.is_string(_key) 
                && typeof(_config[_key]) !== "undefined") {
            return _config[_key];
        }
        else {
            return _config[_key];
        }
    }
    else {
        return;
    }
};

/**
 * 取得模組設定是否啟用的設定
 * 
 * @param {String} _name 模組名稱
 * @returns {boolean}
 */
KALS_module_manager.prototype.get_module_enable = function (_name) {
    if ($.is_string(_name) 
            && typeof(this._loaded_modules_config[_name]) !== "undefined") {
        var _config = this._loaded_modules_config[_name];
        var _key = "enable";
        if ($.is_string(_key) 
                && typeof(_config[_key]) !== "undefined") {
            return _config[_key];
        }
        else {
            return _config[_key];
        }
    }
    else {
        return false;
    }
};

/**
 * 取得已經讀取的模組
 * @returns {Object} = {
 *  "Dashboard": [Object]
 * }
 */
KALS_module_manager.prototype.get_loaded_modules = function () {
    return this._loaded_modules;
};

/**
 * 取得核心模組
 * 
 * 核心模組通常會依附在KALS_context底下
 * 
 * 如果找不到的話，就回傳false
 * @param {String} _name
 * @returns {KALS_user_interface|Boolean}
 */
KALS_module_manager.prototype._get_core_module = function (_name) {
    var _module = false;
    
    if (_name === "Window_search") {
        return KALS_context.search;
    }
    else if (_name === "Reading_guide") {
        return KALS_text.guide;
    }
    else if (_name === "Feedback_manager") {
        return KALS_context.feedback;
    }
    
    return _module;
};

/* End of file KALS_module_manager */
/* Location: ./system/application/views/web_apps/core/KALS_module_manager.js *//**
 * KALS_navigation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2014/4/28 下午 02:28:30
 * @extends {Multi_event_dispatcher}
 */
function KALS_navigation(){
   
   Multi_event_dispatcher.call(this);
   
}

/**
 * 繼承自Multi_event_dispatcher
 */
KALS_navigation.prototype = new Multi_event_dispatcher(); 

/**
 * 預先載入模組
 */
KALS_navigation.prototype.init = function(_loaded_modules) {
    
    for (var _item_name in _loaded_modules) {
        var _item = _loaded_modules[_item_name];
        //var _item = this._load(_item_name);
        //$.test_msg("KALS_navigaition. prepare register_item", [_item_name, typeof(_item), _item.nav_config.display]);
        this.register_item(_item);
    }
    
    return this;
};

/**
 * 載入模組
 * @param {String} _name 模組的名稱，注意要用字串
 * @param {Object} _param 搭配模組載入的參數
 * @param {Function} _callback 回呼函式
 * @returns {Object|Boolean} 回傳載入的模組的物件。如果是False，則表示載入失敗。
 */
//KALS_navigation.prototype._load = KALS_module_manager.prototype.load;

/**
 * list的原始資料
 * @type JSON
 */
KALS_navigation.prototype._list = {};

/**
 * 已經排序的list
 * @type JSON
 */
KALS_navigation.prototype._sorted_list = {};

/**
 * 已經註冊的名字
 * @type Array
 */
KALS_navigation.prototype._registered_name = [];

/**
 * 註冊到導覽列
 * @param {KALS_controller_window} _item
 */
KALS_navigation.prototype.register_item = function (_item) {
    
    if (_item === undefined) {
        return this;
    }
    
    if (typeof(_item.nav_config) === "object") {
        var _display = _item.nav_config.display;
        
        if (_display === false) {
            return this;
        }
        
        var _nav_type = _item.nav_config.nav_type;
        var _order = _item.nav_config.order;
        
        // 避免重複註冊
        var _name = _item.name;
        if ($.inArray(_name, this._registered_name) !== -1) {
            // 已經註冊過了
            return this;
        }
        this._registered_name.push(_name);
        //$.test_msg("KALS_navigation.register_item", [_name, _nav_type, _order]);
        
        this._push_list(_item, _nav_type, _order);
    }
    
    return this;
};

/**
 * 取得指定nav_type的list
 * @param {String} _nav_type
 * @returns {JSON}
 */
KALS_navigation.prototype._push_list = function (_item, _nav_type, _order) {
    if (typeof(this._list[_nav_type]) === "undefined") {
        this._list[_nav_type] = {};
        //$.test_msg("缺乏nav_type", _nav_type);
    }
    
    if (typeof(this._list[_nav_type][_order]) === "undefined") {
        this._list[_nav_type][_order] = [];
        //$.test_msg("缺乏order", [_nav_type, _order]);
    }
    
    this._list[_nav_type][_order].push(_item);
    
    return this;
};

/**
 * 取得列表
 * 
 * 依照order排序來取出，由大到小(顯示時是從左到右)
 * @param {String|Array<String>} _nav_type
 * @returns {Array}
 */
KALS_navigation.prototype.get_list = function (_nav_type) {
    
    var _cache_key = _nav_type;
    if ($.is_array(_nav_type)) {
        _cache_key = _nav_type.join(",");
    }
    
    //$.test_msg("nav get_list", _cache_key);
    
    // 取得快取
    if (typeof(this._sorted_list[_cache_key]) === "object") {
        return this._sorted_list[_cache_key];
    }
    
    var _list = [], _order, _item, _item_list, _disorder_list = {};
    
    //$.test_msg("get_list nav_type", [_nav_type, typeof(this._list[_nav_type])]);
    
    if ($.is_string(_nav_type)) {
        _nav_type = [_nav_type];
    }
    
    for (var _index in _nav_type) {
        var _nav_type_name = _nav_type[_index];
        
        if (typeof(this._list[_nav_type_name]) === "object") {
            var _disorder_list_part = this._list[_nav_type_name];
            for (var _order in _disorder_list_part) {
                var _order_array = _disorder_list_part[_order];
                //_disorder_list.push(_part_item);
                //$.test_msg("nav " + _order, [$.is_array(_order_array), typeof(_disorder_list[_order])]);
                if (typeof(_disorder_list[_order]) === "undefined") {
                    _disorder_list[_order] = _order_array;
                }
                else {
                    for (var _part_index in _order_array) {
                        var _part_item = _order_array[_part_index];
                        _disorder_list[_order].push(_part_item);
                        
                        //$.test_msg("nav " + _part_index, [_order, _disorder_list[_order].length]);
                    }
                }
            }
        }
    }
    
    //if (_disorder_list.length > 0) {
        
        //$.test_msg("get_list get!");
        
        //_disorder_list = this._list[_nav_type];
        //$.test_msg("_disorder_list", _disorder_list);
        var _order_key = [];
        for (_order in _disorder_list) {
            //$.test_msg("order", [_order, _nav_type]);
            _order_key.push(_order);
        }
        
        // 把order的順序由大到小顯示
        _order_key.sort(function(a,b){return b-a});
        
        for (var _i in _order_key) {
            _order = _order_key[_i];
            _item_list = _disorder_list[_order];
            
            for (var _j in _item_list) {
                _item = _item_list[_j];
                
                _list.push(_item);
            }
        }
    //}
    
    // 儲存快取
    if (_list.length > 0) {
        this._sorted_list[_cache_key] = _list;
    }
    
    return _list;
};

/* End of file KALS_navigation */
/* Location: ./system/application/views/web_apps/core/KALS_navigation.js *//**
 * Init_context
 * 
 * 初始化第一步驟
 * 
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/3 下午 07:08:28
 * @extends {Task_event_dispatcher}
 * @param {function|null} _onstart 開始動作 
 * @param {function|null} _oncomplete 所有任務都完成之後的動作
 */
function Init_context() {
    
    Task_event_dispatcher.call(this);
    
    //this._$schedule_task = ['selector', 'load', "modules", "check_css_loaded"];
    this._$schedule_task = ['load', "modules", "check_css_loaded"];
    
}

Init_context.prototype = new Task_event_dispatcher();

Init_context.prototype._$onstart = function () {
    //KALS_context資料的讀取
    
    //$.test_msg('Init_context._$onstart()');
    
    //準備基本資料
    KALS_context.load_info(function () {
        
        // 讀取模組，載入導覽列
        var _loaded_modules = KALS_context.module.init();
        KALS_context.navigation.init(_loaded_modules);
        KALS_context.init_context.complete('modules');
        
        KALS_context.init_context.complete('load');
    });
    
    var _this = this;
    $(function () {
       _this._check_css_setup();	
    });
};

Init_context.prototype._$oncomplete = function () {
    
    KALS_context.init_component.start();
    
    // 20131115 Pulipuli Chen 測試用
    //this._test_exception();
};

/**
 * 測試錯誤訊息
 * 沒用的話就可以關閉
 */
Init_context.prototype._test_exception = function () {
	$.test_msg("初始化完成");
    KALS_util.ajax_get({
        url: "log/error",
        data: {},
        retry: 1,
        retry_wait: 1000
    });
};

Init_context.prototype._check_css_setup = function () {
	$("<span class='KALS check-css'>KALS check css indicator<span>")
	   .hide()
	   .appendTo($("body"));
   
   this._check_css_loaded();
};

/**
 * 檢測CSS是否有正常讀取
 */
Init_context.prototype._check_css_loaded = function () {
    
    var _ui = $(".KALS.check-css");
    var _color = _ui.css("color");
    var _normal_color = "rgb(128, 128, 128)";
    var _assert = (_color === _normal_color);
	
	//$.test_msg("check css load", [_color, _normal_color, _assert]);
	
    
    if (_assert === false) {
    
        if (this._retry_check_css_count > 3) {
            var _message = KALS_context.lang.line("exception.css_not_load_complete");
            
            if (window.confirm(_message)) {
                location.reload();
            }
        }
        else {
            $.test_msg("css check faild, retry", this._retry_check_css_count);
            
            var _prefix = "generic/";
            var _style_list = _prefix+'style|generic';
            
            var _this = this;
            var _KALS_loader = KALS_loader_class();
            setTimeout(function () {
                $("head link[title='generic']").remove();
                _KALS_loader.load_styles(_style_list, function () {
                    _this._check_css_loaded();
                });
            }, 3000);
                
            
            this._retry_check_css_count = this._retry_check_css_count + 1;
            
            return;
        }
    }
    else {
		/*
        if (this._retry_check_css_count > 0) {
            //location.reload();
            //$(window).trigger('resize');
            KALS_toolbar._$onviewportmove();
        }
        */
        KALS_context.init_context.complete('check_css_loaded');
    }
    
    return _assert;
};

/**
 * 確認CSS正常讀取的次數
 */
Init_context.prototype._retry_check_css_count = 0;   


/* End of file Init_context */
/* Location: ./system/application/views/web_apps/Init_context.js *//**
 * Init_component
 *
 * 初始化第二步驟
 * 
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/12 下午 08:10:10
 * @extends {Task_event_dispatcher}
 * @param {function|null} _onstart 開始動作 
 * @param {function|null} _oncomplete 所有任務都完成之後的動作
 */
function Init_component (_onstart, _oncomplete) {
    
    Task_event_dispatcher.call(this, _onstart, _oncomplete);
    
    this._$schedule_task = [
        'KALS_toolbar', 
        'KALS_text', 
        'KALS_window', 
        'site_reform',
        'modules_config',
        "webpage_info"
    ];
}

Init_component.prototype = new Task_event_dispatcher();

/**
 * 初始化所有元件，包括KALS_window、KALS_toolbar、KALS_text等，並以全域變數型態設置。
 */
Init_component.prototype._$onstart = function () {
    
    if (this._is_ie6) {
        /*
        var _line = new KALS_language_param(
            'This browser cannot use KALS, but you still can read this page.',
            'init_component.excute_confirm.deny_ie6'
        );
        var _msg = KALS_context.lang.line(_line);
        alert(_msg);
        return;
        */
        return this.deny_ie6();
    }
    
    var _this = this;
    
    // 執行Site_reform
    KALS_context.site_reform.reform(function () {
        _this.complete('site_reform');
    });
        
    //初始化時大概是這項這樣子的
    //KALS_toolbar = new KALS_toolbar(); 
    KALS_window = new KALS_window(); 
    //KALS_context.init_component.complete('KALS_window');
    
    KALS_toolbar = new KALS_toolbar();    
    //KALS_context.init_component.complete('KALS_toolbar');
        
    //KALS_text = new KALS_text();
    
    //$.test_msg('Init_component.$onstart()');
    if ($.browser.msie) {
        //this.excute_confirm();
    }
    
    KALS_context.loader.load_modules_config(function () {
        _this.complete("modules_config");
    });
    
    /**
     * @version 20140519 Pulipuli Chen
     */ 
    KALS_context.loader.load_webpage_info(function () {
        _this.complete("webpage_info");
        KALS_text = new KALS_text();
    });
    
    $(function() {
        KALS_context.feedback.init();
    });
    
};

Init_component.prototype._is_ie6 = ($.browser.msie && $.browser.version.substr(0,1) < 7);

Init_component.prototype._$oncomplete = function () {
    //$.test_msg('Init_component.$oncomplete()');
    
    /**
     * 根據頁面條件，強制調整網頁的樣式
     * 
     * 但是應該寫成獨立物件
     * @20131113 Pulipuli Chen
     * @deprecated 20131227 寫成了Site_reform，所以不使用這個了
     */
    //KALS_text.style_adapter();

    //this._check_css_loaded();

    KALS_context.init_profile.start();
};

Init_component.prototype.excute_confirm = function (_excute_callback) {
    
    
    var _heading = new KALS_language_param(
        'Browser Information',
        'init_component.excute_confirm.heading'
    );
    
    var _content = $('<div></div>')
        .addClass('init-component')
        .addClass('excute-confirm');
    
    var _browser_detect = $('<div></div>')
        .appendTo(_content);
        
    KALS_context.lang.create_listener(new KALS_language_param(
        'Your browser is ',
        'init_component.excute_confirm.browser_detect.1'
    )).appendTo(_browser_detect);
    
    var _browser = $('<span></span>')
        .addClass('browser')
        .html(navigator.appName + ' ' + $.browser.version)
        .appendTo(_browser_detect);
    
    KALS_context.lang.create_listener(new KALS_language_param(
        '.',
        'init_component.excute_confirm.browser_detect.2'
    )).appendTo(_browser_detect);
    
        var _hint = $('<div></div>')
            .appendTo(_content);
        
        KALS_context.lang.add_listener(_hint, new KALS_language_param(
            'This browser cannot get well performance on KALS. It will loading with very long time.',
            'init_component.excute_confirm.deny'
        ));
    
    var _recommend_browser = $('<div></div>')
        .appendTo(_content);
    
    KALS_context.lang.create_listener(new KALS_language_param(
        'If you want to use KALS with high performance, we recommend you use ',
        'init_component.excute_confirm.recommend_browser.1'
    )).appendTo(_recommend_browser);
    
    var _browser_name = $('<a href="http://www.google.com/chrome/" target="chrome"></a>')
        .addClass('recommend-browser')
        .appendTo(_recommend_browser);
        
    KALS_context.lang.add_listener(_browser_name, new KALS_language_param(
        'Google Chrome',
        'init_component.excute_confirm.recommend_browser.google_chrome'
    ));
    
    KALS_context.lang.create_listener(new KALS_language_param(
        '.',
        'init_component.excute_confirm.recommend_browser.2'
    )).appendTo(_recommend_browser);
    
    var _options_list = [];
    
    
    
        var _option_excute = new Dialog_close_option(new KALS_language_param(
            'I still want to use KALS with this browser.',
            'init_component.excute_confirm.excute'
        ), _excute_callback);
        
        var _option_exit = new Dialog_close_option(new KALS_language_param(
            'I don\'t want to use KALS, just read this page.',
            'init_component.excute_confirm.exit'
        ), function () {
            
            //隱藏KALS_toolbar
            KALS_toolbar.disable();
            KALS_text.selection.text.stop_initialize();
            
        });
        
        _options_list.push(_option_excute);
        _options_list.push(_option_exit);
    
    var _alert = KALS_util.select_menu({
        heading: _heading,
        content: _content,
        options: _options_list,
        heading_close: false
    });
    
    KALS_context.init_profile.add_listener(function () {
        _alert.close();
    });
};

Init_component.prototype.deny_ie6 = function () {
    
    var _heading = new KALS_language_param(
        'Browser Information',
        'init_component.excute_confirm.heading'
    );
    
    var _content = $('<div></div>')
        .addClass('init-component')
        .addClass('excute-confirm');
    
    var _browser_detect = $('<div></div>')
        .appendTo(_content);
        
    KALS_context.lang.create_listener(new KALS_language_param(
        'Your browser is ',
        'init_component.excute_confirm.browser_detect.1'
    )).appendTo(_browser_detect);
    
    var _browser = $('<span></span>')
        .addClass('browser')
        .html(navigator.appName + ' ' + $.browser.version)
        .appendTo(_browser_detect);
    
    KALS_context.lang.create_listener(new KALS_language_param(
        '.',
        'init_component.excute_confirm.browser_detect.2'
    )).appendTo(_browser_detect);
    
    
        var _hint = $('<div></div>')
            .appendTo(_content);
        
        KALS_context.lang.add_listener(_hint, new KALS_language_param(
            'This browser cannot use KALS, but you still can read this page.',
            'init_component.excute_confirm.deny_ie6'
        ));
    
    var _recommend_browser = $('<div></div>')
        .appendTo(_content);
    
    KALS_context.lang.create_listener(new KALS_language_param(
        'If you want to use KALS with high performance, we recommend you use ',
        'init_component.excute_confirm.recommend_browser.1'
    )).appendTo(_recommend_browser);
    
    var _browser_name = $('<a href="http://www.google.com/chrome/" target="chrome"></a>')
        .addClass('recommend-browser')
        .appendTo(_recommend_browser);
        
    KALS_context.lang.add_listener(_browser_name, new KALS_language_param(
        'Google Chrome',
        'init_component.excute_confirm.recommend_browser.google_chrome'
    ));
    
    KALS_context.lang.create_listener(new KALS_language_param(
        '.',
        'init_component.excute_confirm.recommend_browser.2'
    )).appendTo(_recommend_browser);
    
    var _options_list = [];
    
        
        var _option_exit = new Dialog_close_option(new KALS_language_param(
            'OK',
            'window.ok'
        ));
        
        _options_list.push(_option_exit);
    
    var _alert = KALS_util.select_menu({
        heading: _heading,
        content: _content,
        options: _options_list
    });
    
};

/* End of file Init_component */
/* Location: ./system/application/views/web_apps/Init_component.js *//**
 * Init_profile
 *
 * 初始化最終步驟
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/12 下午 08:10:10
 * @extends {Task_event_dispatcher}
 * @param {function|null} _onstart 開始動作 
 * @param {function|null} _oncomplete 所有任務都完成之後的動作
 */
function Init_profile(_onstart, _oncomplete) {
    
    Task_event_dispatcher.call(this, _onstart, _oncomplete);
    
    this._$schedule_task = [
        'check_login', 
        'notification', 
        'navigation_annotation', 
        'my_style', 
        'hash'
    ];
}

Init_profile.prototype = new Task_event_dispatcher();

Init_profile.prototype._$onstart = function () {
    //KALS_context資料初始化之後，才能進行其他資料的讀取
    
    //$.test_msg('Init_profile._$onstart()');
    
    KALS_context.init_profile.complete('notification');
    
    //KALS_text.load_my_basic.initialize();
    //KALS_text.load_my_custom.initialize();
    KALS_text.load_my.initialize();
    
    //KALS_context.init_profile.complete('my_annotation');
    
    KALS_text.load_navigation.initialize();
    //KALS_context.init_profile.complete('navigation_annotation');
    
    // 因為My_style尚未實作，所以my_style直接算是完成
    KALS_context.init_profile.complete('my_style');
    
    
    //check_login是指去確認遠端伺服器上是否已經有登入的資料，如果有的話，則將現在狀況設為登入的狀況
    //KALS_context.init_profile.complete('check_login');
    //KALS_context.init_profile.complete('my_basic_annotation');    //因為登入之後就會自動讀取，所以此處不用去確認
    
    //$.test_msg('Init_profile.prototype._$onstart()');
    
    KALS_context.auth.check_login(function() {
        KALS_context.init_profile.complete('check_login');
        
        //$.test_msg('KALS_context.auth.check_login() callback');
        
        setTimeout(function () {
			
            KALS_context.hash.check_hash(function () {
                KALS_context.init_profile.complete('hash');
            });

            //@TODO 暫時先關掉
            //KALS_context.init_profile.complete('hash');
        }, 50);
            
    });
    
};

/**
 * 所有工作都讀取完成了
 * 最後只剩下測試而已了
 */
Init_profile.prototype._$oncomplete = function () {
    
    //2010.10.21 在Init_component時已經load了
    //KALS_context.load(function () {
        //KALS_context.completed = true;
        //$.test_msg('KALS_context.completed = true;');
    //});
    
    KALS_context.completed = true;

    // 以下啟動測試區
    var _this = this;
    setTimeout(function () {
        for (var _t in _this._test) {
            _this._test[_t]();
        }	
    }, 1000);
        
};

// --------------------------------
// 以下是讀取完成之後的測試區


/*
Init_profile.prototype._test_sentence_index = ;
*/

/**
 * 測試功能保存區
 * 
 * 不使用的時候就註解起來吧
 */
Init_profile.prototype._test = [
    /**
     * 第一個，不使用
     */
    function () {}
    /**
     * 測試網頁暫存功能
     * @author Pulipuli Chen 20140517
     */
    /*
    , function () {
        //var _cache = KALS_context.module.load("Webpage_cache");
        var _cache = new Webpage_cache();
        
        var _select_text = "測試看看資料有沒有存進去";
        
        _cache.load(function (_data) {
            if (_data !== false) {
                $.test_msg("取得了資料：[" + _data + "]");
            }
            else {
                _cache.save(_select_text, function () {
                    $.test_msg("儲存完畢");
                    
                    setTimeout(function () {
                        location.reload();
                    }, 100);
                });
            }
        });
    }
    */
    /**
     * 測試網頁暫存功能草稿
     * @author Pulipuli Chen 20140517
     */
    /*
    , function () {
        
        var _save = function () {
            var _webpage_cache_save_url = "webpage_cache/save";
            var _cache_json = "<div>測試看看能不能正常儲存2</div>";
            var _callback = function () {
                $.test_msg("儲存完成，接著開始讀取");
                
                _load();
            };

            var _post_config = {
                url: _webpage_cache_save_url,
                data: _cache_json,
                callback: _callback
            };

            KALS_util.ajax_post(_post_config);
        };
        
        var _load = function () {
            var _webpage_cache_save_url = "webpage_cache/load/" + KALS_context.get_webpage_id();
            _webpage_cache_save_url = KALS_context.get_base_url(_webpage_cache_save_url);
            var _callback = function (_data) {
                _data = _remove_cache_prefix(_data);
                $.test_msg("讀取完成，資料：" + _data);
            };
            $.get(_webpage_cache_save_url, _callback);
        };
        
        var _remove_cache_prefix = function (_data) {
            // /*Content-type: text/html
            _data = $.substr(_data, 27);
            return _data;
        }
        
        //_save();
        _load();
    }
    */
    /**
     * 測試開啟獎章功能
     * @author Pulipuli Chen 20140516
     */
    /*
    , function () {
        var _module = KALS_context.module.load("KALS_stamp");
        _module.open();
    }
    */
    /**
     * 測試開啟標註地圖
     * @author Pulipuli Chen 20140428
     */
    /*
    , function () {
        var _map = KALS_context.module.load("Annotation_navigation_map");
        _map.open();
    }
    */
    /**
     * 測試KALS_moudle_manager的功能
     * @author Pulipuli Chen 20140428
     */
    /*
    , function () {
        var _module_manager = KALS_context.module;
        var _module = _module_manager.load("Annotation_navigation_map");
        
        $.test_msg("module", [typeof(_module), _module.enable, _module.ok]);
    }
    */
    /**
     * 測試導讀功能
     * @author Pulipuli Chen 20131230
     */
    /*
    , function () {
        //$.test_msg("如何？");
        //KALS_context.search.open_recent_annotation(function () {
        //    $(".button.dialog-option.guide-button").click();
        //});
        
        //KALS_text.guide.open_whole_annotations();
        //KALS_text.guide.open_whole_annotations_by_sentence();
        //KALS_text.guide.open_apriori_all();
        KALS_text.guide.open();
    }
    */
    /**
     * 測試樣板功能
     * @author Pulipuli Chen 20131117
     */
    /*
    , function () {
            //var _template = KALS_context.template.get_template('helpers/test');
            //$.test_msg('KALS_template', _template);

            //var _logout = new Window_logout();
            //_logout.open_window();

            var _window = new Dashboard();
            _window.open();
    }
    */
    /**
     * 測試意見回饋功能
     * @20131116 Pulipuli Chen
     */
    /*
    , function () {
            KALS_context.feedback.open();
    }
    */
    /**
     * 測試通知功能
     * @20131115 Pulipuli Chen
     */
	/*
	,function () {
		KALS_util.notify("要通知什麼好呢？", 3000);
		
		setTimeout(function () {
			KALS_util.notify("第二次要通知什麼好呢？", 10000);
		}, 1000);
		
		setTimeout(function () {
            KALS_util.notify("第三次通知！", 3000);
        }, 1500);
		
		setTimeout(function () {
            KALS_util.notify("隔很久的通知！", 1000);
        }, 6000);
	}
	*/
	/**
	 * @version 20130224 布丁測試用
	 */
	/*
    function () {
	    var _sentence_list = KALS_text.selection.text.get_sentence_index();
	    
	    var _php_array = 'new Array(';
	    for (var _i = 0; _i < _sentence_list.length; _i++)
	    {
	        if (_i != 0)
	            _php_array = _php_array + ',';
	        _php_array = _php_array + _sentence_list[_i];
	    }
	    _php_array = _php_array + ');';
	    
	    $.test_msg('count .kals-sentence-punctuation', $('.kals-sentence-punctuation').length);
	    $.test_msg('list .kals-sentence-punctuation', _sentence_list);
	    $.test_msg('list php array .kals-sentence-punctuation', _php_array);
	}
	*/
];


/* End of file Init_profile */
/* Location: ./system/application/views/web_apps/Init_profile.js *//**
 * KALS_context
 * 情境物件
 * 
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/7/28 下午 04:42:00
 * @extends {JSONP_dispatcher}
 */
KALS_context = new JSONP_dispatcher();

/**
 * 初始化KALS_context
 */
KALS_context.initialize = function () {
    
    if (KALS_CONFIG.enable_kals === false) {
        return this;
    }
    
    //$.test_msg('KALS_context() base url', this.base_url);
    
    //基礎元件 Basic Components
    this.view = new Viewportmove_dispatcher();
    this.auth = new KALS_authentication();
    this.hash = new URL_hash_dispatcher();
    this.hotkey = new KALS_hotkey_manager();
    this.style = new Style_manager();
    this.url = new URL_dispatcher();
    this.loader = new Context_loader();
    
    this.basic_type = new Context_basic_type();
    this.predefined_type = new Context_predefined_type();
    this.custom_type = this.predefined_type;
    
    this.feedback = new Feedback_manager();
    this.view_manager = new KALS_view_manager();
    this.progress = new Initialization_progress();
    this.site_reform = new Site_reform();
    this.storage = new KALS_storage();
    this.module = new KALS_module_manager();
    this.navigation = new KALS_navigation();
    
    //初始化元件 Initialize Component
    this.init_context = new Init_context();
    this.init_component = new Init_component();
    this.init_profile = new Init_profile();
    
    //以下會牽涉到登入相關的，要記得先設定auth喔☆
    var _this = this;
    
    //確保選取位置。必須要在所有元件加入body之前確保完畢
    setTimeout(function () {
        //_this.check_text_selector(function () {
            
            //資料元件 Data Components
            _this.lang = new KALS_language();
            _this.user = new Context_user();
            _this.policy = new Context_policy();
            
            //_this.search = new Context_search();
            _this.search = new Window_search();
			
            _this.overlay = new Overlay_manager();
            
            //var _loaded_modules = _this.module.init();
            //_this.navigation.init(_loaded_modules);
            
            if (_this._is_kals_context_disable() === false) {
                _this.init_context.start();
            }
        //});    
    }, 0);
};

/**
 * 是否阻止啟用
 * @returns {Boolean}
 */
KALS_context._is_kals_context_disable = function () {
    
    // 阻止啟用
    if (typeof(KALS_CONFIG.debug) === "object"
        && typeof(KALS_CONFIG.debug.kals_context_disable) === "boolean"
        && KALS_CONFIG.debug.kals_context_disable === true) {

        if (typeof(QUNIT) === "function") {
            $.test_msg("QUNIT");
            QUNIT();
        }
        return true;
    }
    else {
        return false;
    }
};

/**
 * 讀取基本資料的位置
 * @type {string}
 * @property [_$load_url]
 * @private
 */
KALS_context._$load_url = 'generic/info';

/**
 * 測試時使用限定
 * 偵測基本網址的用法
 * 
 * @type {string} base_url
 */
KALS_context.setup_base_url = function () {
    return this.url.setup_base_url();
};

/**
 * 供其他物件取用基礎網址
 * @param {string|array} _file
 * @param {Boolean} _from_root = false 是否從根目錄開始(/kals)，而非從/kals/web_apps開始
 * @type {string}
 */
KALS_context.get_base_url = function (_file, _from_root) {
    return this.url.get_base_url(_file, _from_root);
};

/**
 * 回傳圖片網址
 * @param {string} _img 圖片的檔案名稱
 * @type {string} 圖片的完整網址
 */
KALS_context.get_image_url = function (_img) {
    return this.url.get_image_url(_img);
};


/**
 * 回傳libraries網址
 * @param {string} _file 檔案名稱
 * @type {string} 檔案的完整網址
 */
KALS_context.get_library_url = function (_file) {
    return this.url.get_library_url();
};

/**
 * 將KALS_context.load()讀取進來的資料清空
 * @param {function} _callback
 */
KALS_context.reset = function (_callback) {
    
    this.set_data({
        KALS_language: {}
    });
    
    setTimeout(function () {
        $.trigger_callback(_callback);
    }, 100);
    
    return this;
};

/**
 * 語系檔
 * @type {KALS_language}
 */
KALS_context.lang = null;

/** 
 * 使用者資訊
 * @type {Context_user} user
 */
KALS_context.user = null;

/**
 * @type {Context_policy}
 */
KALS_context.policy = null;

/**
 * @type {Context_search}
 */
KALS_context.search = null;

/**
 * @type {Overlay_manager}
 */
KALS_context.overlay = null;

/**
 * @type {KALS_authentication}
 */
KALS_context.auth = null;

/**
 * @type {URL_hash_dispatcher}
 */
KALS_context.hash = null;

/**
 * @type {Style_manager}
 */
KALS_context.style = null;

/**
 * @type {Viewportmove_dispatcher}
 */
KALS_context.view = null;

/**
 * @type {Context_basic_type}
 */
KALS_context.basic_type = null;

/**
 * @type {Context_predefined_type}
 */
KALS_context.predefined_type = null;

/**
 * @type {Context_predefined_type}
 * @deprecated Pulipuli Chen 20130502 盡量不要使用
 */
KALS_context.custom_type = null;

/**
 * @type Feedback_manager
 */
KALS_context.feedback = null;

/**
 * @type {KALS_view_manager}
 */
KALS_context.view_manager = null;

/**
 * @type {Initialization_progress}
 */
KALS_context.progress = null;

/**
 * @type {Site_reform}
 */
KALS_context.site_reform = null;

/**
 * @type {KALS_storage}
 */
KALS_context.storage = null;

/**
 * @type {KALS_module_manager}
 */
KALS_context.module = null;

/**
 * @type {KALS_navigation}
 */
KALS_context.navigation = null;

/**
 * @type {Init_context}
 */
KALS_context.init_context = null;

/**
 * @type {Init_component}
 */
KALS_context.init_component = null;

/**
 * @type {Init_profile}
 */
KALS_context.init_profile = null;

/**
 * 確認所有任務是否完成。此屬性會在Init_component跟Init_profile完成時變成true。
 * @type {boolean}
 * @property
 */
KALS_context.completed = false;

/**
 * 讀取模組設定資料的位置
 * @type {string}
 */
//KALS_context._modules_config_url = 'generic/modules_config';

/**
 * 讀取模組會用到的資料
 * @param {Function} _callback
 * @returns {KALS_context}
 */
//KALS_context.load_modules_config = function (_callback) {
//    
//    var _this = this;
//    var _loaded_callback = function (_data) {
//        
//        if (typeof(_data.KALS_view_manager) !== 'undefined') {
//            _this.view_manager.set_data(_data.KALS_view_manager);
//        }
//        
//        $.trigger_callback(_callback);
//    };
//    
//    var _config = {
//        "url": this._modules_config_url,
//        "callback": _loaded_callback,
//        "fixed_callback": true,
//        "retry_wait": 3 * 1000
//    };
//    
//    KALS_util.ajax_get(_config);
//    
//    return this;
//};

/**
 * 讀取網頁設定資料的位置
 * @type {string}
 */
//KALS_context._webpage_info_url = 'generic/webpage_info';


/**
 * 讀取網頁設定資料
 * @param {Function} _callback
 * @returns {KALS_context}
 */
//KALS_context.load_webpage_info = function (_callback) {
//    
//    var _this = this;
//    var _loaded_callback = function (_data) {
//        
//        if (typeof(_data.webpage_id) !== 'undefined') {
//            _this.webpage_id = _data.webpage_id;
//        }
//        
//        $.trigger_callback(_callback);
//    };
//    
//    var _config = {
//        "url": this._webpage_info_url,
//        "callback": _loaded_callback
//    };
//    
//    KALS_util.ajax_get(_config);
//    
//    return this;
//};

KALS_context.load_info = function (_callback) {
    
    //2009 不準備資料的版本
    //this.load(_callback);
    
    //------------------------------
    //20111106 Pudding Chen 準備資料的版本
    
    //先準備資料
    var _data = {};
        
    //指引預設
    _data.anchor_navigation_type = KALS_CONFIG.anchor_navigation_type;
    
    this.load(_data, _callback);
};

/**
 * 記住最後選擇的標註類型
 * @type {Annotation_type_param}
 */
KALS_context.last_select_annotation_type = null;

/**
 * 取得標註類型列表
 * @param {String} _enable_type 啟用的標註類型
 * topic: 只有主題標註使用
 * respond: 只有回覆時使用
 * 預設：全部啟用
 * @return {Array} 包含標註類型的陣列
 */
KALS_context.create_type_param_list = function(_enable_type) {
    var _list = {};
    var _order_list = {};
    
    var _add_order = function (_order, _type_param) {
        if (typeof(_order_list[_order]) !== "object") {
            _order_list[_order] = [];
        }
        _order_list[_order].push(_type_param);
    };
    
    var _get_ordered_list = function () {
        
        // 先取得order_index
        var _order_index_array = [];
        for (var _order in _order_list) {
            _order_index_array.push(_order);
        }
        _order_index_array.sort(function(_a, _b){return _b-_a});
        
        var _list = {};
        for (var _order_index in _order_index_array) {
            var _order = _order_index_array[_order_index];
            var _ordered_array = _order_list[_order];
            for (var _index in _ordered_array) {
                var _type_param = _ordered_array[_index];
                var _type_name = _type_param.get_name();
                _list[_type_name] = _type_param;
            }
        }
        return _list;
    };
    
    //var _type_options = KALS_CONFIG.annotation_type_option;
    /**
     * 標註選項。注意此選項會影響順序。
     * @type {String[]}
     */
    //var _type_options = this.get_basic_type_options();
    var _type_options = this.basic_type.get_type_list(_enable_type);
    
    
    
    for (var _i in _type_options) {
        //var _type_string = _type_options[_i];
        //var _type_param = new Annotation_type_param(_type_string);
        var _type_param = _type_options[_i];
        var _order = _type_param.get_order();
        _add_order(_order, _type_param);
    }
    /*
    for (var _type_name in _type_options) {
        var _type_config = _type_options[_type_name];
        if (typeof(_enable_type) === "string"
                && typeof(_type_config[_enable_type]) === "boolean"
                && _type_config[_enable_type] === false) {
            continue;
        }
        var _type_param = new Annotation_type_param(_type_name);
        //_list[_type_name] = _type_param;
    }
    */
    //$.test_msg('Type_menu.create_type_option_list _list.length', _length);
    
    /**
     * 20130603 Pudding Chen 
     * 加入自訂的標註類型
     */
    var _custom_type_list = KALS_context.predefined_type.get_type_list();
    for (var _j in _custom_type_list) {
        var _type_param = _custom_type_list[_j];
        var _order = _type_param.get_order();
        //var _type_name = _type.get_name();
        //_list[_type_name] = _type;
        _add_order(_order, _type_param);
    }
    
    _list = _get_ordered_list();
    
    return _list;
};

/**
 * 取得基本的標註類型
 * @returns 基本的標註類型
 */
/*
KALS_context.get_basic_type_options = function () {
    var _type_options;
    if (typeof(KALS_CONFIG.annotation_type_basic) !== "undefined") {
        _type_options = KALS_CONFIG.annotation_type_basic;
    }
    else if (typeof(KALS_CONFIG.annotation_type_option) !== "undefined") {
        _type_options = KALS_CONFIG.annotation_type_option;
    }
    return _type_options;
};
*/

/**
 * 取得根據網址建立的Domain
 * @returns {String}
 */
KALS_context.create_namespace = function () {
    return $.create_namespace();
};

/**
 * 重新引導網頁到其他地方
 * @param {String} _url
 * @param {Boolean} _from_root
 * @returns {KALS_context}
 */
KALS_context.redirect = function (_url, _from_root) {
    this.url.redirect(_url, _from_root);
    return this;
};

// ----------------
// Webpage_id
// ----------------

/**
 * Webpage ID
 * @type Number
 */
KALS_context.webpage_id = null;

KALS_context.get_webpage_id = function () {
    return this.webpage_id;
};

// ------------------------------------------------

/**
 * 網頁讀完之後就開始執行初始化的動作。他會先讀取generic/info網址喔。
 * @version 20111105 Pudding Chen
 */
$(function() {
    KALS_context.initialize();
});

/* End of file KALS_context */
/* Location: ./system/application/views/web_apps/core/KALS_context.js */