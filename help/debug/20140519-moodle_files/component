/**
 * KALS_window
 * 由KALS_context來執行實體化的動作
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version	   1.0 2010/9/8 下午 10:57:44
 * @extends {Dialog_modal}
 */
function KALS_window() {
    
    Dialog_modal.call(this);

    this._default_onopen = this._$onopen;
    this._default_onclose = this._$onclose;
    this._default_onviewportmove = this._$onviewportmove;
    
    this.child('loading', new Window_loading_component());
    this.child('ui', new Window_user_interface());
    
    //記得要是要在物件建立完成之後再呼叫完成事件
    KALS_context.init_component.complete('KALS_window');
    
    //$.test_msg('KALS_window.constructor', this._$modal_name);
    
}

KALS_window.prototype = new Dialog_modal();
KALS_window.prototype.base = Dialog_modal; 

KALS_window.prototype._$modal_name = 'KALS_window';
KALS_window.prototype._default_modal_name = 'KALS_window';

/**
 * 內容
 * @type {Window_content}
 */
KALS_window.prototype._content = null;

/**
 * 讀取中顯示的元件
 * @type {Window_loading_component}
 * @memberOf {KALS_window}
 * @property
 */
KALS_window.prototype.loading = null;

/**
 * 建立視窗中元件的工廠
 * @type {Window_user_interface}
 * @property
 * @memberOf {KALS_window}
 */
KALS_window.prototype.ui = null;

/**
 * 標頭
 * @type {KALS_language_param}
 */
KALS_window.prototype._default_heading = new KALS_language_param(
    'INFORMATION', 'web_apps.window.noheading'
);

/**
 * 預設寬度
 * @type {string|number} = null: 如果是數字，則單位預設為px
 */
KALS_window.prototype._default_width = null;

/**
 * 寬度
 * @type {string|number} = null: 如果是數字，則單位預設為px
 */
KALS_window.prototype._width = null;

/**
 * 預設高度
 * @type {string|number} = 'inherit': 如果是數字，則單位預設為px
 */
KALS_window.prototype._default_height = 'inherit';

/**
 * 高度
 * @type {string|number} = null: 如果是數字，則單位預設為px
 */
KALS_window.prototype._height = null;

/**
 * 溢版設定
 * @type {string} = 'inherit': 請參考CSS的overflow設定
 */
KALS_window.prototype._default_overflow = 'inherit';

/**
 * 需要背景遮罩
 */
KALS_window.prototype._$exposable = true;

// ---------

KALS_window.prototype._$get_config = function () {
    var _config = this.base.prototype._$get_config.call(this);
    
    //$.test_msg('KALS_window._$get_config()', [ this._$modal_name , _config.onLoad]);
    
    var _parent_onbeforeload;
    if (typeof(_config.onBeforeLoad) !== 'undefined') {
        _parent_onbeforeload = _config.onBeforeLoad;
    }
    
    var _this = this;
    _config.onBeforeLoad = function () {
        
        var _ui = _this.get_ui();
    
        if ($.is_small_width() === false) {
            _ui.css('width', _this._width);
        }
        else {
            _ui.css('width', $.get_viewport_width());
            
            var _content_max_width = $.get_viewport_width();
            /*
            _content_max_width -= $.strip_unit(_ui.css('padding-left'));
            _content_max_width -= $.strip_unit(_ui.css('padding-right')); 
            _content_max_width -= $.strip_unit(_ui.css('margin-left'));
            _content_max_width -= $.strip_unit(_ui.css('margin-right'));
            */
            _content_max_width -= 60;
            //$.test_msg(_content_max_width);
            _ui.find('.dialog-content').css('max-width', _content_max_width);
        }
        
        /*
        if ($.is_small_height() === false) {
            _ui.css('height', _this._height);    
        }
        else {
            _ui.css('height', $.get_viewport_height());
        }
        */
        _ui.css('height', _this._height);
        
        if ($.is_function(_parent_onbeforeload)) {
			_parent_onbeforeload();
		}
    };
    
    return _config;
};

KALS_window.prototype._setup_ui = function (_callback) {
    
    Dialog_modal.prototype._setup_ui.call(this, _callback);
    
    //$.test_msg('KALS_window._setup_ui()', this._$modal_name);
    
    var _close_option = new Dialog_close_option();
    this.set_forward_option(_close_option);
        
    return this;    
};

//KALS_window.prototype._parent_create_ui = KALS_window.prototype._$create_ui;

KALS_window.prototype._$create_ui = function () {
    
    var _ui = this.base.prototype._$create_ui.call(this);
    
    _ui.addClass('window')
		.addClass("KALS");
    
    var _content_tr = _ui.find('.dialog-content-tr:first');
    var _loading_tr = $('<tr class="window-loading-tr"><td></td></tr>')
        .insertBefore(_content_tr);
    
    var _loading_ui = this.loading.get_ui();
    
    _loading_tr.find('td:first').append(_loading_ui);
    
    //$.test_msg('KALS_window._$create_ui()', this._$modal_name);
    
    return _ui;
    
};

KALS_window.prototype._default_onopen = null;
KALS_window.prototype._default_onclose = null;
KALS_window.prototype._default_onviewportmove = null;
 
/**
 * 將Window_content輸入KALS_window中
 * @param {Window_content} _content
 * @param {function} _callback
 */
KALS_window.prototype.setup_window = function (_content, _callback) {
    
    if (typeof(_content) === 'string') {
        eval('_content = new ' + _content + '();');
    }
    
    //$.test_msg('KALS_window.setup_window() ready to reset_window');
    
    var _this = this;    
    
    this._reset_window(function () {
        
        //$.test_msg('KALS_window.setup_window() ready to set window');
        
        _this._content = _content;
        _content._window = _this;
        
        if ($.is_string(_content.name)) {
            _this.set_modal_name(_content.name);
        }
        if ($.isset(_content.width)) {
            _this.set_width(_content.width);
        }
        if ($.isset(_content.height)) {
            _this.set_height(_content.height);
        }
        //if ($.isset(_content.overflow))
        //    _this.set_overflow(_content.overflow);
        
        if ($.isset(_content.heading)) {
            _this.set_heading(_content.heading);
        }
        // -------------
        // 加上_$的參數
        if ($.is_string(_content._$name)) {
            _this.set_modal_name(_content._$name);
        }
        if ($.isset(_content._$width)) {
            _this.set_width(_content._$width);
        }
        if ($.isset(_content._$height)) {
            _this.set_height(_content._$height);
        }
        //if ($.isset(_content.overflow))
        //    _this.set_overflow(_content.overflow);
        
        if ($.isset(_content._$heading)) {
            _this.set_heading(_content._$heading);
        }
            
        
        
        // -------------
        
        //$.test_msg('KALS_window.setup_window() setting window 1');
        
        if ($.is_object(_content.submit)) {
            /*
            var _submit_option = new Dialog_option(_content.submit.heading
                , function () {
                    _content.submit.submit();
                });
            
            _this.set_options(_submit_option);
            */
            //$.test_msg('set submit', typeof(_content.submit.get_ui));
            
            _this.set_options(_content.submit);
            _this.toggle_options(false);
            
            //_content.submit.get_ui().hide();
        }
        
        //$.test_msg('KALS_window.setup_window() setting window 2');
        
        var _content_ui = _content.get_ui();
        _this.set_content(_content_ui);
        
        _this.get_ui().find('.dialog-content').hide();
        
        if ($.is_function(_content.onopen)) {
            _this.set_onopen(function () {
                _content.onopen();
            });
        }   
            
        if ($.is_function(_content.onclose)) {
            _this.set_onclose(function () {
                _content.onclose();
            });
        }
            
            
        if ($.is_function(_content.onviewportmove)) {
            _this.set_onviewportmove(_content.onviewportmove);
        }
        
        //$.test_msg('準備檢查window open之後的callback', _this._$modal_name);
        
        // 準備開啟囉！
        _this.open(function () {
            
            //$.test_msg('檢查window open之後的callback', $.is_function(_content.setup_content));
            
            if ($.is_function(_content.setup_content)) {
                
                // 開始設定內容囉
                _content.setup_content(function () {
                    
                    // 設定完成囉
                    $.trigger_callback(_callback);
                });
            }   
            else {
                $.trigger_callback(100, _callback);
            }
            
        });
        
        //$.test_msg('KALS_window.setup_window() set window complete');
            
    });
        
    return this;
};

/**
 * 重新設置KALS_window
 * @private
 * @param {function} _callback
 */
KALS_window.prototype._reset_window = function (_callback) {
    
    var _this = this;
    var _setup = function () {
        
        _this._content = null;
        _this.set_modal_name(_this._default_modal_name);
        
        
        _this.set_width(_this._default_width);
        _this.set_height(_this._default_height);
        /*
        _this.set_overflow(_this._default_overflow);
        */
        _this.set_heading(_this._default_heading);
        _this.set_options();    //傳入空資料，就會刪除既有按鈕
        //_this.set_content();    //傳入空資料，就會隱藏content欄位
        _this.set_content_temp();
        
        _this.set_onopen(_this._default_onopen);
        _this.set_onclose(_this._default_onclose);
        _this.set_onviewportmove(_this._default_onviewportmove);
        
        _this.toggle_toolbar_option(false);
        
        _this.toggle_loading(true, function () {
            $.trigger_callback(_callback);
        });
    };
    
    
    if (this.is_opened()) {
        this.close(function () {
            _setup();
        });    
    }
    else {
        _setup();
    }
    
    return this;
};

/**
 * 設置寬度
 * @param {string|number} _width = 'auto': 如果是number，則預設單位為px
 */
KALS_window.prototype.set_width = function(_width) {
    if ($.is_null(_width)) {
		_width = this._default_width;
	}
	else 
		if ($.is_number(_width)) {
			_width = _width + 'px';
		}
   
    this._width = _width;
   
    return this;
};

/**
 * 設置高度
 * @param {string|number} _height = 'auto': 如果是number，則預設單位為px
 */
KALS_window.prototype.set_height = function(_height) {
    if ($.is_null(_height)) {
		_height = this._default_height;
	}
	else 
		if ($.is_number(_height)) {
			_height = _height + 'px';
		}
   
    this._height = _height;
    return this;
};

/**
 * 設置溢版設定
 * @param {string} _overflow = 'auto': 請參考CSS的overflow設定
 */
/*
KALS_window.prototype.set_overflow = function(_overflow) {
    
    //2010.9.28
    //不使用此功能
    return;
    
    if ($.is_null(_overflow))
        _overflow = this._default_overflow;
        
    var _ui = this.get_ui();
    
    //var _this = this;
    var _content_td = _ui.find('.dialog-content-td:first');
    if (_content_td.css('overflow') != _overflow) {
        _content_td.css('overflow', _overflow);
        
        //setTimeout(function () {
        //    if ($.is_function(_this._$onviewportmove))
        //        _this._$onviewportmove(_ui);    
        //});    
    }
    
    return this;
};
*/

// --------

/**
 * 設置是否為loading中
 * @param {null|boolean} _is_loading 如果是null，則會切換到另一種狀態 
 * @param {function} _callback
 */
KALS_window.prototype.toggle_loading = function (_is_loading, _callback) {
    
    var _this = this;
    
    if ($.is_function(_is_loading) && $.is_null(_callback)) {
        _callback = _is_loading;
        _is_loading = null;
    }
    
    if (_is_loading !== null
       && this.is_loading() === _is_loading) {
        $.trigger_callback(_callback);
        return;
    }
    var _ui = this.get_ui();
    
    var _loading = _ui.find('.window-loading:first');
    var _content = _ui.find('.dialog-content:first');
    var _submit = _ui.find('.window-content-submit:first');
    
    var _close_loading = function () {
        _loading.slideUp(_speed, function () { _loading.hide(); });
        _content.slideDown(_speed);
        //if (_submit.length > 0)
        //{
            //_submit.slideDown(_speed);
        //    _submit.fade();
        //}
        _this.toggle_options(true);
        _this.toggle_toolbar_option(true);
    };
    
    var _open_loading = function () {
        _loading.slideDown(_speed);
        _content.slideUp(_speed, function () { _content.hide(); });
        //if (_submit.length > 0)
        //{
            //_submit.slideUp(_speed, function () { _submit.hide(); });
        //    _submit.hide();
        //}
        _this.toggle_options(false);
        _this.toggle_toolbar_option(false);   
    };
    
    //var _speed = 1000;
    var _speed = 0;    //2010.9.10 取消動畫
    
    if (_is_loading === null) {
        if (this.is_loading()) {
            _close_loading();
        }
        else {
            _open_loading();
        }
    }
    
    if (_is_loading === true) {
        _open_loading();
    }
    else {
        _close_loading();
    }
    
    if ($.is_function(this._$onviewportmove)) {
        this._$onviewportmove(_ui);
    }
    
    setTimeout(function () {
        
        _this.focus_input();
        
        if ($.is_function(_this._$onviewportmove)) {
            _this._$onviewportmove(_ui);
            _ui.animate({}, {
                complete: function () {
                    //_this._$onviewportmove(_ui);
                    //_ui.animate({}, {
                    //    complete: function () {
                            setTimeout(function () {
                                $.trigger_callback(_callback);        
                            }, 0);        
                        //}
                    //});
                }
            }); 
        }
        else {
            $.trigger_callback(_callback);
        }
        
    }, (_speed * 1.2));
    
    return this;
};

/**
 * 讀取完成，將Loading狀態關閉。
 * @param {function} _callback
 */
KALS_window.prototype.loading_complete = function (_callback) {
    return this.toggle_loading(false, _callback);
};

KALS_window.prototype.is_loading = function () {
    var _ui = this.get_ui();
    var _loading = _ui.find('.window-loading:first');
    
    return (!(_loading.css('display') === 'none'));
};

// ------------------------------------------------------------
// 聚焦 focus
// ------------------------------------------------------------

KALS_window.prototype.focus_option = function (_offset) {
    //覆寫原本的動作
    //變成不做任何事情
};

/**
 * 當讀取結束之後，跳到content中的第一個可輸入欄位吧
 */
KALS_window.prototype.focus_input = function () {
    var _ui = this.get_ui();
	
	var _content = this._content;
	if (_content === null) {
            return;
	}
	
    var _first_input = _ui.find(_content.default_focus_input);
    var _first_submit = _ui.find(_content.default_focus_submit);
    
    //$.test_msg('KALS_window.toggle_loading() focus', [_first_input.length, _first_submit.length]);
    
    if (_first_input.length > 0) {
        _first_submit.blur();
        _first_input.eq(0).focus();
    }
    else {
        _first_submit.focus();
    }
	
	return this;
};
/* End of file KALS_window */
/* Location: ./system/application/views/web_apps/KALS_window.js *//**
 * Window_loading_component
 * Window中顯示讀取畫面的元件
 * 
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/9 下午 01:27:02
 * @extends {KALS_user_interface}
 */
function Window_loading_component() {
    
    this.base();
    
}

Window_loading_component.prototype = new KALS_user_interface();
Window_loading_component.prototype.base = KALS_user_interface;

Window_loading_component.prototype._$create_ui = function () {
        
    var _loading_img = KALS_context.get_image_url('ajax-loader.gif');
    var _ui = $('<div class="window-loading"></div>')
        .append(_loading_img);
    
    var _loading_span = $('<span></span>').prependTo(_ui);
    var _loading_lang = new KALS_language_param(
        'NOW LOADING...',
        'window.loading'
    );
    KALS_context.lang.add_listener(_loading_span, _loading_lang);
    
    return _ui;
};    //Window_loading_component = KALS_user_interface.extend({

/* End of file Window_loading_component */
/* Location: ./system/application/views/web_apps/Window_loading_component.js *//**
 * Window_content
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/9 下午 01:27:09
 * @extends {JSONP_dispatcher}
 */
function Window_content(){
    
    JSONP_dispatcher.call(this);
    
    this._window = null;
    this.submit = null;
    
    // TODO 2010.9.21 這個是幹嘛用的？
    //this._$setup_content = null;
    if ($.isset(this._$load_config)) {
        var _this = this;
        KALS_context.add_listener(function (_context) {
            _data = _context._data;
            
            //$.test_msg('Window_content load context data', _data);
            
            if (_data !== null
                && typeof(_data[_this._$load_config]) !== 'undefined') {
                _this.set_config(_data[_this._$load_config]);
                _this.set_config_loaded();
            }
        }, true);
    }
}

/**
 * 改為繼承自JSONP_dispatcher
 */
Window_content.prototype = new JSONP_dispatcher();

/**
 * 顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type {null|string}
 */
Window_content.prototype.name = 'Content';

/**
 * 標頭
 * @type {KALS_language_param}
 */
Window_content.prototype.heading = new KALS_language_param(
    '-',
    'window.noheading'
);

Window_content.prototype.nav_heading = new KALS_language_param(
    'Option',
    'window.noheading'
);

/**
 * 寬度
 * @type {string|number} = 'auto': 如果是數字，則單位預設為px
 */
Window_content.prototype.width = null;

/**
 * 高度
 * @type {string|number} = 'auto': 如果是數字，則單位預設為px
 */
Window_content.prototype.height = null;

/**
 * 溢版設定
 * @deprecated 2010.9.28 後來KALS_window統一overflow設定，不允許content來修改，故此設定廢除
 * @type {string} = 'auto': 請參考CSS的overflow設定
 */
//Window_content.prototype.overflow = null;

// --------

Window_content.prototype.open = function (_callback) {
	this.open_window(_callback);
};

Window_content.prototype.close = function (_callback) {
    KALS_window.close(_callback);
};

/**
 * KALS_window的保存位置
 * @type {KALS_window}
 */
Window_content.prototype._window = null;

/**
 * Window_content_submit的保存位置
 * @type {Window_content_submit}
 */
Window_content.prototype.submit = null;

// --------

/**
 * 建立KALS_window中content處的UI。請覆寫此方法。
 */
/*
Window_content.prototype._$create_ui = function () {
    return null;
};
*/

/**
 * 設定KALS_window的內容，預設是在設置完成之後直接完成loading。請覆寫此方法。
 * @param {function} _callback
 */
Window_content.prototype.setup_content = function (_callback) {
    
    //2010.9.9 觀察loading狀態測試用
    //return;
    
    var _this = this;
    KALS_window.loading_complete(function () {
        // 調整內部的物件
        _this.adjust_note();
        
        $.trigger_callback(_callback);
    });
    return this;
};



/**
 * 調整視窗內部的note大小
 * @returns {KALS_window.prototype}
 */
Window_content.prototype.adjust_note = function () {
    
    var _ui = this.get_ui();
    
    //$.test_msg("有嗎？", _ui.find(".note-container").length);
    var _this = this;
    _ui.find(".note-container").each(function (_index, _value) {
        var _node_container = $(_value);
        //_node_container.css("border", "1px solid red");
        List_note_component.prototype.adjust_note.call(_this, _node_container);
    });
    
    return this;
};

/**
 * 設定KALS_window開啟時的動作。請覆寫此方法。
 */
Window_content.prototype.onopen = null;

/**
 * 設定KALS_window關閉時的動作。請覆寫此方法。
 */
Window_content.prototype.onclose = null;

/**
 * 設定KALS_window移動時的動作。請覆寫此方法。
 */
Window_content.prototype.onviewportmove = null;

/**
 * 設定遞交按鈕
 * @param {Window_content_submit} _submit
 */
Window_content.prototype._setup_submit = function (_submit) {
    this.submit = _submit;
    this.submit._content = this;
    return this;
};

// --------
// 表單設定相關
// --------

/**
 * 取得指定_name的值
 * @param {String} _name
 */
Window_content.prototype.get_input_value = function (_name) {
    
    if ($.is_null(_name)) {
		return _name;
	}
    
    var _ui = this.get_ui('[name="'+_name+'"]');
    
    if (_ui.length === 1) {
		return _ui.attr('value');
	}
	else {
		var _type = _ui.eq(0).attr('type').toLowerCase();
		var _checked = _ui.filter(':checked');
		if (_type === 'radio') {
			if (_checked.length === 1) {
				return _checked.val();
			}
			else {
				return null;
			}
		}
		else 
			if (_type === 'checkbox') {
				var _result = [];
				for (var _i = 0; _i < _checked.length; _i++) {
					_result.push(_checked.eq(_i).val());
				}
				return _result;
			}
	}
};

/**
 * 設定name對應的值
 * @param {Object} _json 格式是 {name1: value1, name2: value2}
 */
Window_content.prototype.set_input_value = function (_json) {
	
	if (typeof(_json) !== "object") {
		return this;
	}
	
	var _ui = this.get_ui();
	for (var _name in _json) {
		var _value = _json[_name];
		
		var _input = _ui.find("[name='"+_name+"']");
		
		if (_input.length == 1) {
			_input.attr("value", _value);
		}
		else if (_input.length > 1) {
			_input.attr("checked", false);
			_input.filter("[value='"+_value+"']").attr("checked", true);
		}
	}
	
	return this;
};


/**
 * 取得指定的input
 * @param {String} _name
 * @type {jQuery}
 */
Window_content.prototype.get_input = function (_name) {
    if ($.is_null(_name)) {
		return _name;
	}
    
    var _ui = this.get_ui('[name="'+_name+'"]');
    return _ui;
};

/**
 * 取得第一個input
 * @param {String} _name
 * @type {jQuery}
 */
Window_content.prototype.get_first_input = function (_name) {
	return this.get_input(_name).eq(0);
};

// --------
// 選項設定
// --------

/**
 * 向Context訂閱設定 
 */
Window_content.prototype._$load_config = null;
Window_content.prototype._config_loaded = false;
Window_content.prototype._config_onload = null;

/**
 * 保存可用選項的資料
 */
Window_content.prototype._config = {};

Window_content.prototype.set_config = function (_config) {
    this._config = _config;
    return this;
};

Window_content.prototype.get_config = function (_index) {
    
    if ($.isset(_index) &&
	typeof(this._config[_index]) !== 'undefined') {
		return this._config[_index];
	}
	else {
		return this._config;
	}
};

Window_content.prototype.set_config_loaded = function () {
    if (this._config_loaded === false) {
        this._config_loaded = true;
        $.trigger_callback(this._config_onload);
        this._config_onload = null;
    }
    return this;
};

Window_content.prototype.set_config_onload = function (_callback) {
    
    this._config_onload = _callback;
    
    //$.test_msg('Window_content.set_config_onload()', this._config_loaded);
    
    if (this._config_loaded === true) {
        $.trigger_callback(this._config_onload);
        this._config_onload = null;
    }
    return this;
};

// --------
// 設置錯誤訊息
// --------

Window_content.prototype.set_error = function (_message) {
    
    var _ui = this.get_ui();
    
    var _error_row = _ui.find('.' + KALS_window.ui.error_row_classname + ':first');
    
    if (_error_row.length === 1) {
        _error_row.remove();
    }
    
    if ($.isset(_message)) {
        _error_row = KALS_window.ui.error_row(_message)
            .prependTo(_ui);
    }
    
    return this;
};

/**
 * 獨立視窗
 * 
 * 如果是false，則會依附在KALS_window底下
 * 如果是true，則會直接open
 */
Window_content.prototype._$absolute = false;

Window_content.prototype.is_absolute = function () {
	return this._$absolute;
};

/**
 * 獨立開啟視窗
 * @author Pulipuli Chen 20131113
 */
Window_content.prototype.open_window = function (_callback) {
	var _content = this;
            
	if (_content.is_absolute() === false) {
        KALS_window.setup_window(_content, function () {
			$.trigger_callback(_callback);
		});
	}
	else {
		_content.open(function() {
			$.trigger_callback(_callback);
		});
	}
};

/**
 * 開啟視窗後預設要聚焦的可輸入元件
 * @type {String} jQuery Selector
 */
Window_content.prototype.default_focus_input = '.dialog-content:first input:first';

/**
 * 開啟視窗後預設要聚焦的遞交元件
 * @type {String} jQuery Selector
 */
Window_content.prototype.default_focus_submit = '.dialog-options button.window-content-submit:first';


/* End of file Window_content */
/* Location: ./system/application/views/web_apps/Window_content.js *//**
 * KALS_controller_window
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pulipuli Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2013/11/21 下午 01:27:09
 * @extends {KALS_controller}
 */
function KALS_controller_window(){
    
    KALS_controller.call(this);
    
    this.child('loading', new Window_loading_component());
    
}

/**
 * 改為繼承自Window_content
 */
KALS_controller_window.prototype = new KALS_controller();

/**
 * 開啟
 * @param {function} _callback
 * @returns {KALS_controller_window}
 */
/*
KALS_controller_window.prototype.open = function (_callback) {
    $.test_msg('window, open');
    var _this = this;
    return KALS_controller.prototype.open.call(this, function () {
        _this.open_window(_callback);
    });
    
};
*/
/**
 * 使用Window_content的close功能
 * @param {Object} _callback
 */
/*
KALS_controller_window.prototype.close = function (_callback) {
    //$.test_msg('window, open');
    return KALS_controller.prototype.close.call(this, function () {
        KALS_window.close(_callback);
    });
};
*/

/**
 * 設定hash url
 * ※請覆寫
 * @type {String}
 */
KALS_controller_window.prototype._$hash_url = null;

/**
 * 設定hash url
 */
KALS_controller_window.prototype._setup_hash_url = function () {
	// @TODO
};

/**
 * 獨立視窗
 * 
 * 如果是false，則會依附在KALS_window底下
 * 如果是true，則會直接open
 */
KALS_controller_window.prototype._$absolute = false;
KALS_controller_window.prototype.is_absolute = function () {
	return this._$absolute;
};


/**
 * 指定Module的名稱
 * 
 * 也是顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type {null|string}
 */
KALS_controller_window.prototype.name = 'Content';

/**
 * 標頭
 * @type {KALS_language_param}
 */
KALS_controller_window.prototype._$heading = new KALS_language_param(
    '-',
    'window.noheading'
);

/**
 * 顯示在導覽列的位置
 * @type KALS_language_param
 */
KALS_controller_window.prototype._$nav_heading = new KALS_language_param(
    'Option',
    'window.noheading'
);

/**
 * 導覽列相關的設定
 * @type JSON
 */
KALS_controller_window.prototype.nav_config = {
    /**
     * 顯示資料
     * @type Boolean
     */
    display: false,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};


/**
 * 寬度
 * @type {string|number} = 'auto': 如果是數字，則單位預設為px
 */
KALS_controller_window.prototype.width = null;

/**
 * 高度
 * @type {string|number} = 'auto': 如果是數字，則單位預設為px
 */
KALS_controller_window.prototype.height = null;

/**
 * 開啟視窗
 * @param {function} _callback
 * @returns {KALS_controller_window}
 */
KALS_controller_window.prototype.open = function (_callback) {
     
    if (this._enable_controller_flag === false) {
        //this.debug('open', 'controller disabled');
        //return $.trigger_callback(_callback);
        return this;
    }
    
    var _this = this;
    //this.debug('win open', _callback);
    return KALS_controller.prototype.open.call(this, function () {
        
        if (_this.is_absolute() === false) {
            _this.open_kals_window(_callback);
        }
        else {
            _this.open_absolute_window(_callback);
        }
    });
};

/**
 * 關閉視窗
 * @param {function} _callback
 * @returns {KALS_controller_window}
 */
KALS_controller_window.prototype.close = function (_callback) {
    if (this._enable_controller_flag === false) {
        //this.debug('close', 'controller disabled');
        //return $.trigger_callback(_callback);
        return;
    }
    return KALS_controller.prototype.close.call(this, function () {
        KALS_window.close(_callback);
    });
};

/**
 * 覆寫KALS_controller的disable_controller，加入視窗關閉功能
 * @param {function} _callback
 * @returns {KALS_controller_window}
 */
KALS_controller_window.prototype.disable_controller = function (_callback) {
    
    if (typeof(KALS_window) === "object" 
            && typeof(KALS_window.is_opened) === "function"
            && KALS_window.is_opened()) {
        KALS_window.close(_callback);
    }
        
    return KALS_controller.prototype.disable_controller.call(this);
};

/**
 * KALS_window的保存位置
 * @type {KALS_window}
 */
KALS_controller_window.prototype._window = null;

/**
 * Window_content_submit的保存位置
 * @type {Window_content_submit}
 */
KALS_controller_window.prototype.submit = null;


/**
 * 設定KALS_window的內容，預設是在設置完成之後直接完成loading。請覆寫此方法。
 * @param {function} _callback
 */
KALS_controller_window.prototype.setup_content = function (_callback) {
    
    //2010.9.9 觀察loading狀態測試用
    //return;
    
    var _this = this;
    KALS_window.loading_complete(function () {
        // 調整內部的物件
        _this.adjust_note();
        
        $.trigger_callback(_callback);
    });
    return this;
};

/**
 * 調整視窗內部的note大小
 * @returns {KALS_window.prototype}
 */
KALS_controller_window.prototype.adjust_note = function () {
    
    var _ui = this.get_ui();
    
    //$.test_msg("有嗎？", _ui.find(".note-container").length);
    var _this = this;
    _ui.find(".note-container").each(function (_index, _value) {
        var _node_container = $(_value);
        //_node_container.css("border", "1px solid red");
        List_note_component.prototype.adjust_note.call(_this, _node_container);
    });
    
    return this;
};

/**
 * 設定KALS_window開啟時的動作。請覆寫此方法。
 */
KALS_controller_window.prototype.onopen = null;

/**
 * 設定KALS_window關閉時的動作。請覆寫此方法。
 */
KALS_controller_window.prototype.onclose = null;

/**
 * 設定KALS_window移動時的動作。請覆寫此方法。
 */
KALS_controller_window.prototype.onviewportmove = null;

/**
 * 設定遞交按鈕
 * @param {Window_content_submit} _submit
 */
KALS_controller_window.prototype._setup_submit = function (_submit) {
    this.submit = _submit;
    this.submit._content = this;
    return this;
};

// --------
// 表單設定相關
// --------

/**
 * 取得指定_name的值
 * @param {String} _name
 */
KALS_controller_window.prototype.get_input_value = function (_name) {
    
    if ($.is_null(_name)) {
        return _name;
    }
    
    var _ui = this.get_ui('[name="'+_name+'"]');
    
    if (_ui.length === 1) {
            return _ui.attr('value');
    }
    else {
        var _type = _ui.eq(0).attr('type').toLowerCase();
        var _checked = _ui.filter(':checked');
        if (_type === 'radio') {
            if (_checked.length === 1) {
                return _checked.val();
            }
            else {
                return null;
            }
        }
        else if (_type === 'checkbox') {
            var _result = [];
            for (var _i = 0; _i < _checked.length; _i++) {
                _result.push(_checked.eq(_i).val());
            }
            return _result;
        }
    }
};

/**
 * 設定name對應的值
 * @param {Object} _json 格式是 {name1: value1, name2: value2}
 * @return {KALS_controller_window}
 */
KALS_controller_window.prototype.set_input_value = function (_json) {
	
    if (typeof(_json) !== "object") {
        return this;
    }

    var _ui = this.get_ui();
    for (var _name in _json) {
        var _value = _json[_name];

        var _input = _ui.find("[name='"+_name+"']");

        if (_input.length === 1) {
                _input.attr("value", _value);
        }
        else if (_input.length > 1) {
                _input.attr("checked", false);
                _input.filter("[value='"+_value+"']").attr("checked", true);
        }
    }

    return this;
};

/**
 * 獨立開啟視窗
 * @author Pulipuli Chen 20131113
 * @return {KALS_controller_window}
 */
KALS_controller_window.prototype.open_kals_window = function (_callback) {
    var _content = this;
    
    //this.debug('open kals window');
    KALS_window.setup_window(_content, function () {
        $.trigger_callback(_callback);
    });
    
    return this;
};

/**
 * 取得指定的input
 * @param {String} _name
 * @type {jQuery}
 */
KALS_controller_window.prototype.get_input = function (_name) {
    if ($.is_null(_name)) {
        return _name;
    }
    
    var _ui = this.get_ui('[name="'+_name+'"]');
    return _ui;
};

/**
 * 取得第一個input
 * @param {String} _name
 * @type {jQuery}
 */
KALS_controller_window.prototype.get_first_input = function (_name) {
    return this.get_input(_name).eq(0);
};

// --------
// 選項設定
// --------

/**
 * 向Context訂閱設定 
 */
KALS_controller_window.prototype._$load_config = null;
KALS_controller_window.prototype._config_loaded = false;
KALS_controller_window.prototype._config_onload = null;

/**
 * 保存可用選項的資料
 */
KALS_controller_window.prototype._config = {};

/**
 * 增加設定值
 * @param {type} _config
 * @returns {KALS_controller_window.prototype}
 */
KALS_controller_window.prototype.set_config = function (_config) {
    this._config = _config;
    return this;
};

/**
 * 取得設定值
 * @param {type} _index
 * @returns {KALS_controller_window._config}
 */
KALS_controller_window.prototype.get_config = function (_index) {
    
    if ($.isset(_index) &&
	typeof(this._config[_index]) !== 'undefined') {
		return this._config[_index];
	}
	else {
		return this._config;
	}
};

/**
 * 
 * @returns {KALS_controller_window.prototype}
 */
KALS_controller_window.prototype.set_config_loaded = function () {
    if (this._config_loaded === false) {
        this._config_loaded = true;
        $.trigger_callback(this._config_onload);
        this._config_onload = null;
    }
    return this;
};

/**
 * 確定設定值已經讀取
 * @param {type} _callback
 * @returns {KALS_controller_window.prototype}
 */
KALS_controller_window.prototype.set_config_onload = function (_callback) {
    
    this._config_onload = _callback;
    
    //$.test_msg('Window_content.set_config_onload()', this._config_loaded);
    
    if (this._config_loaded === true) {
        $.trigger_callback(this._config_onload);
        this._config_onload = null;
    }
    return this;
};

// --------
// 設置錯誤訊息
// --------

/**
 * 設置錯誤資訊
 * @param {String} _message
 * @returns {KALS_controller_window.prototype}
 */
KALS_controller_window.prototype.set_error = function (_message) {
    
    var _ui = this.get_ui();
    
    var _error_row = _ui.find('.' + KALS_window.ui.error_row_classname + ':first');
    
    if (_error_row.length === 1) {
        _error_row.remove();
    }
    
    if ($.isset(_message)) {
        _error_row = KALS_window.ui.error_row(_message)
            .prependTo(_ui);
    }
    
    return this;
};

/**
 * 開啟視窗後預設要聚焦的可輸入元件
 * @type {String} jQuery Selector
 */
KALS_controller_window.prototype.default_focus_input = '.dialog-content:first input:first';

/**
 * 開啟視窗後預設要聚焦的遞交元件
 * @type {String} jQuery Selector
 */
KALS_controller_window.prototype.default_focus_submit = '.dialog-options button.window-content-submit:first';

KALS_controller_window.prototype._initialize_view_data = function (_view) {
    _view = KALS_controller.prototype._initialize_view_data.call(this, _view);
    
    this._lang_filter();
    
    if (this.is_absolute()) {
        _view = this._initialize_absolute_window(_view);
    }
    
    return _view;
};

KALS_controller_window.prototype._lang_filter_flag = false;

KALS_controller_window.prototype._lang_filter = function () {
    if (this._lang_filter_flag === false) {
        var _check_lang = ['_$heading', '_$nav_heading'];
        for (var _i in _check_lang) {
            var _attr = _check_lang[_i];
            var _lang = this[_attr];
            var _line = _lang;
            
            if ($.is_class(_lang, 'KALS_language_param')) {
                _line = _lang.line;
            }
            
            if (KALS_context.lang.has_line(_line) === false) {
                var _view_index = KALS_context.view_manager._get_view_classname(this._$view, '_');
                _line = 'view.' + _view_index + '.' + _line;
                //this.debug('_lang_filter', _line);
                //"view.kals_framework_example_view_dashboard.heading":"資訊版"
                if (KALS_context.lang.has_line(_line) === true) {
                    this[_attr] = new KALS_language_param(
                         _lang.msg,
                         _line
                    );
                }
            }
        }
    }
    return this;
};

/**
 * 建立小型視窗
 * @param {jQuery} _view
 * @returns {jQuery}
 */
KALS_controller_window.prototype._initialize_absolute_window = function (_view) {
    
    var _ui = this._$create_ui_prototype();
    
    _ui.addClass('dialog-modal')
		.addClass('KALS').addClass('window')
                .addClass('kals-controller-window')
                .addClass('absolute')
        .html('<div class="dialog-table container"><table align="center" class="dialog-table heading" width="100%" cellpadding="0" cellspacing="0" border="0"><tbody>'
        //+ "<tr><td class='resize-handler horizontal top' colspan='3'></td></tr>"
        + '<tr class="dialog-toolbar-tr">'
           // + '<td class="resize-handler vertical left"></td>'
            + '<th class="dialog-toolbar" valign="middle">'
            + '<table class="dialog-toolbar-table" width="100%" align="center" cellpadding="0" cellspacing="0" border="0"><tbody><tr>'
            //+ '<td class="toolbar-options toolbar-backward"></td>'
            + '<td class="dialog-heading"><span class="heading"></span></td>'
            //+ '<td class="toolbar-options toolbar-forward"></td>'
            //+ '<td class="resize-handler vertical right"></td>'
            + '</tr></tbody></table>'
        + '</th></tr>' 
        + "</tbody></tbable>"
        + '<table align="center" class="dialog-table content" width="100%" cellpadding="0" cellspacing="0" border="0"><tbody>'
        + '<tr class="dialog-content-tr"><td class="dialog-content-td">'
            + '<div class="dialog-content"></div>'
            + '</td></tr>'
        // @20140119 Pulipuli Chen
        // 加入讀取條的功能
        + '<tr class="window-loading-tr"><td></td></tr>'
        //+ "<tr><td class='resize-handler horizontal top' colspan='3'></td></tr>"
        + '</tbody></table></div>');
    
    
    if (this._$width !== null) {
        _ui.css('width', this._$width + 'px');
    }
    if (this._$height !== null) {
        _ui.css('height', this._$height + 'px');
    }
    
    if (this._$max_height !== null) {
        _ui.find(".dialog-content:first").css('max-height', this._$max_height + 'px');
    }
    
    if ($.browser.msie6) {
        _ui.css('width', '480px');
        //_ui.css('font-size', '1.5em');
    }
    
    //this.get_ui().after(_ui);
    //_ui.appendTo($('body'));
    //_ui.find('.dialog-content').append(this.get_ui());
    _ui.find('.dialog-content:first').append(_view);
    
    //$.test_msg('Dialog_modal._$create_ui()', this._$modal_name);
    
    var _container = _ui.find('.dialog-heading:first .heading');
    if (_container.length === 1) {
        if (this.heading !== undefined && this.heading !== null) {
            KALS_context.lang.add_listener(_container, this.heading);
        }
        else {
            KALS_context.lang.add_listener(_container, this._$heading);
        }
    }
    
    // 設置關閉按鈕
    var _option = new Dialog_close_option();
    var _close_ui = _option.get_ui();
    _close_ui.css("float", "right").prependTo(_ui.find(".dialog-heading:first"));
    _close_ui.clone()
            .css("float", "left")
            .css("visibility", "hidden")
            .prependTo(_ui.find(".dialog-heading:first"));
    
    
    //同時擁有.with-backward-option.with-forward-option的.dialog-modal，會改變min-width
    _ui.addClass('with-forward-option');
    
    // 設定overlay
    var _config = this._$get_config();
    
    //_config.load = true;
    this._setup_effect();
    _config.effect = 'fade';
    _ui.overlay(_config);	//jQuery TOOL Overlay
    
    //設定可拖曳
    var _draggable_config = {
        handle: _ui.find('.dialog-heading')	//TODO 請調整handle
        
    };
    
    //設定游標變成手指
    _ui.find('.dialog-heading').css( 'cursor', 'pointer' );
	
    if ($('body').height() > _ui.height() + 100) {
        _draggable_config.containment = 'parent';
    }
    
    _ui.draggable(_draggable_config);
    /*
    var _resizable_config = {
        containment: "body",
        minWidth: 300,
        minHeight: 300,
        resize:function (_event, _ui) {
            _ui = _ui.element;
            var _content = _ui.find('.dialog-table.container:first');
            _ui.resizable({minHeight: _content.height()});
            //if ()
        }
    };
    _ui.resizable(_resizable_config);
    */
    /*
    if ($.is_mobile_mode()) {
        _ui.addClass('mobile');
        //var _el = _ui.find('.dialog-content');  
        //this.enable_touch_scroll(_el);
        this.enable_touch_scroll(_ui);
    }
    */
   
    // 20140119 Pulipuli Chen
    // 加上Loading的功能
    var _loading_tr = _ui.find(".window-loading-tr:first");
    var _loading_ui = this.loading.get_ui();
    _loading_tr.find('td:first').append(_loading_ui);
    if (this._$default_status_loading) {
        _ui.addClass("loading");
    }
        
    return _ui;
};

/**
 * 預設狀態是讀取中
 * @type Boolean
 */
KALS_controller_window.prototype._$default_status_loading = false;

/**
 * 視窗寬度
 * @type Number|null null表示未設定，單位是px
 */
KALS_controller_window.prototype._$width = null;

/**
 * 視窗高度
 * @type Number|null null表示未設定，單位是px
 */
KALS_controller_window.prototype._$height = null;

/**
 * 視窗最大高度
 * @type Number|null null表示未設定，單位是px
 */
KALS_controller_window.prototype._$max_height = null;



/**
 * 開啟視窗
 * 
 * 加入一些設定，才能順利開啟視窗
 * @param {function} _callback
 */
KALS_controller_window.prototype.open_absolute_window = function (_callback) {
    //this.overlay_open(_callback);
    //this.debug('open absolute window', _config);
    this.get_ui().overlay().load();
    return this;
};


/**
 * 設定標頭
 * @param {string|KALS_language_param} _lang_param
 */
KALS_controller_window.prototype.set_heading = function (_lang_param) {
    var _container = this.get_heading();
    if (_container.length === 1) {
        if ($.is_string(_lang_param)) {
            _container.html(_lang_param);
        }
        else {
           KALS_context.lang.add_listener(_container, _lang_param);
        }
    }
    return this;
};

/**
 * 取得標頭
 * @type (jQuery)
 */
KALS_controller_window.prototype.get_heading = function () {
    var _ui = this.get_ui();
    var _container = _ui.find('.dialog-heading:first .heading');
    return _container;
};


/**
 * 設定toolbar上的右方按鈕
 * @param {Dialog_option} _option
 */
KALS_controller_window.prototype.set_forward_option = function (_option) {
    var _ui = this.get_ui();
    
    if (typeof(_option.get_ui) !== 'function') {
		return this;
	}
    
    var _option_ui = _option.get_ui();
    var _container = _ui.find('.toolbar-forward:first');
    
    _container
        .show()
        .append(_option_ui);
    
    /*
    _option_ui.ready(function() {
        
        setTimeout(function () {
            var _width = _option_ui.width();
            if (_width != 0)
                _ui.find('.toolbar-options').css('max-width', _width + 'px').show();    
        }, 100);
    });
    */
   
    this.set_backward_option(_option_ui.clone().css('visibility', 'hidden'));
    
    
    //同時擁有.with-backward-option.with-forward-option的.dialog-modal，會改變min-width
    _ui.addClass('with-forward-option');
    
    return this;
};


/**
 * 設定內文
 * @param {string|KALS_language_param|jQuery} _lang
 */
KALS_controller_window.prototype.set_content = function (_lang) {
    var _container = this.get_content();
    
    if (_container.length === 1) {
        this.toggle_content(true);
        this.get_ui().addClass('with-content');
        if ($.is_null(_lang)) {
            //如果是空物件，則隱藏
            _container.empty();
            this.toggle_content(false);
            this.get_ui().removeClass('with-content');  
        }
        else if ($.is_string(_lang)) {
            _container.html(_lang);
        }
        else if ($.is_class(_lang, 'KALS_language_param')) {
            if (typeof(KALS_context) !== 'undefined') {
                KALS_context.lang.add_listener(_container, _lang);
            }
        }
        else {
            _container.empty();
            
            if ($.isset(_lang)) {
                _container.append(_lang);
                _lang.show();
            }
        }
        
    }
    return this;
};


/**
 * 是否需要使用jQuery Tools中的expose功能
 */
KALS_controller_window.prototype._$need_expose = true;

/**
 * 此Overlay是否需要Mask的設定
 * @type {boolean}
 */
KALS_controller_window.prototype._$exposable = false;

/**
 * Overlay的共通輸入參數。實際上設定是在建構子時設定的。
 * @type {object}
 */
KALS_controller_window.prototype._$get_config = function () {
    
    //$.test_msg('Overlay_modal._$get_config()', this._$modal_name);
    
    var _this = this;
    
    var _config = {
        //top: '10%',
        left: "center",
        closeOnClick: false,
        load: false,
        onBeforeLoad: function() {
            //跟Modal_controller註冊開啟
            if (typeof(KALS_context) === 'object' 
                    && typeof(KALS_context.overlay) === 'object') {
                KALS_context.overlay.add_opened(_this);
            }
            
            //if (_this._adjust_position_checked === false) {
                if ($.is_function(_this._adjust_position_top)) {
                    _this._adjust_position_top();
                }
                if ($.is_function(_this._adjust_position_left)) {
                    _this._adjust_position_left();
                }
                var _ui = _this.get_ui();
                setTimeout(function () {
                    _ui.css("visibility", "visible");
                }, 1);
                
                //_this._adjust_position_checked = true;
            //}
                
            
            if ($.is_function(_this._$onviewportmove)) {
                var _ui = _this.get_ui();
                _this._$onviewportmove(_ui);
            }
        },
        onLoad: function () {
            
            //$.test_msg('Overlay_modal._$get_config() onLoad', [_this._$temp_callback, _this.call_temp_callback]);
            
            var _ui = _this.get_ui();
            
            //2010.10.16 將定位移至onBeforeLoad執行
            //if ($.is_function(_this._$onviewportmove))
            //    _this._$onviewportmove(_ui);
            
            /**
             * @version 20140516 Pulipuli Chen
             * 不知道為什麼還是有辦法執行_$onopen，所以這個功能暫時不使用
             */
            _ui.animate({});
            /*
            _ui.animate({}, {
                //$.test_msg("KALS_controller_window onLoad", []);
                complete: function () {
                    setTimeout(function () {
                        if ($.is_function(_this._$onopen)) {
                            _this._$onopen(_ui);
                        }
                        _this.call_temp_callback(_ui);    
                    }, 0);
                }
            });
            */
        },
        onBeforeClose: function () {
            //跟Modal_controller註冊關閉
            if (typeof(KALS_context) === 'object' 
                    && typeof(KALS_context.overlay) === 'object') {
                KALS_context.overlay.delete_opened(_this);
            }
        },
        onClose: function () {
            var _ui = _this.get_ui();
            if ($.is_function(_this._$onclose)) {
                _this._$onclose(_ui);
            }
            _this.call_temp_callback(_ui);
            
            
            //$.test_msg('Overlay_modal._$get_config() onClose 應該已經關閉了吧？');
            _ui.hide();
        },
        oneInstance: false
    };
    
    return _config; 
};

/**
 * 設定視窗的左右位置
 * 
 * 可用參數：
 *  null: 預設center
 *  left: 置左
 *  right: 置右
 *  center: 置中
 *  middle: 置中
 *  10px: 靠左距離10px
 *  -10px: 靠右距離10px
 *  10%: 靠左距離視窗寬度的10%
 *  -10%: 靠右距離視窗寬度的10%
 * @type String
 */
KALS_controller_window.prototype._$position_left = null;

/**
 * 設定視窗的上下位置
 * 
 * 可用參數：
 *  null: 預設10%
 *  top: 置頂
 *  bottom: 置底
 *  center: 置中
 *  middle: 置中
 *  10px: 靠頂距離10px
 *  -10px: 靠底距離10px
 *  10%: 靠頂距離視窗寬度的10%
 *  -10%: 靠底距離視窗寬度的10%
 * @type String
 */
KALS_controller_window.prototype._$position_top = null;

KALS_controller_window.prototype._adjust_position_checked = false;

/**
 * 調整視窗上下位置
 * 
 * 要看物件的this._$position_top參數來決定
 * @author Pulipuli Chen 20140118
 * @returns {KALS_controller_window}
 */
KALS_controller_window.prototype._adjust_position_top = function () {
    
    var _ui = this.get_ui();
    
    var _top = null;
    if ( $.isset(this._$position_top) ) {
        _top = this._$position_top;
        _top = $.trim(_top);
        
        var _window_height = $(window).height();
        var _ui_height = _ui.height();
        //var _ui_height = 300;
        
        if ($.ends_with(_top, "px")) {
            //相素類型
            _top = _top.substr(0, _top.length -2);
            _top = parseInt(_top, 10);
            
            if (_top < 0) {
                // 如果是負數的情況
                _top = _window_height - _ui_height + _top;
            }
            _top = _top + "px";
        }
        else if ($.ends_with(_top, "%") && $.starts_with(_top, "-")) {
            _top = _top.substr(1, _top.length-1);
            _top = parseInt(_top, 10);
            var _bottom_margin = _window_height / 100 * _top;
            _top = _window_height - _ui_height -_bottom_margin;
            _top = _top + "px";
        }
        else if ($.is_number(_top)) {
            if (_top < 0) {
               _top = _window_height - _ui_height + _top; 
            }
            _top = _top + "px";
        }
        
        
        if (_top === "top") {
            _top = "0px";
        }
        else if (_top === "bottom") {
            _top = _window_height - _ui_height;
            _top = _top + "px";
        }
        else if (_top === "middle" || _top === "center") {
            _top = (_window_height / 2) - (_ui_height / 2);
            _top = parseInt(_top, 10);
            _top = _top + "px";
        }
        
        //$.test_msg("最後算出來的top是：", _top);
        setTimeout(function () {
            if ($.isset(_top)) {
                _ui.css("top", _top);
            }
        }, 0);
    }
    
    
    return this;
};

/**
 * 調整視窗上下位置
 * 
 * 要看物件的this._$position_left參數來決定
 * @author Pulipuli Chen 20140118
 * @returns {KALS_controller_window}
 */
KALS_controller_window.prototype._adjust_position_left = function () {
    
    var _ui = this.get_ui();
    
    var _left = null;
    if ( $.isset(this._$position_left) ) {
        _left = this._$position_left;
        _left = $.trim(_left);
        
        var _window_width = $(window).width();
        var _ui_width = _ui.width();
        
        if ($.ends_with(_left, "px")) {
            //相素類型
            _left = _left.substr(0, _left.length -2);
            _left = parseInt(_left, 10);
            
            if (_left < 0) {
                // 如果是負數的情況
                _left = _window_width - _ui_width + _left;
            }
            _left = _left + "px";
        }
        else if ($.ends_with(_left, "%") && $.starts_with(_left, "-")) {
            _left = _left.substr(1, _left.length-1);
            _left = parseInt(_left, 10);
            var _bottom_margin = _window_width / 100 * _left;
            _left = _window_width - _ui_width -_bottom_margin;
            _left = _left + "px";
        }
        else if ($.is_number(_left)) {
            if (_left < 0) {
               _left = _window_width - _ui_width + _left; 
            }
            _left = _left + "px";
        }
        
        
        if (_left === "left") {
            _left = "0px";
        }
        else if (_left === "right") {
            _left = _window_width - _ui_width;
            _left = _left + "px";
        }
        else if (_left === "middle" || _left === "center") {
            _left = (_window_width / 2) - (_ui_width / 2);
            _left = parseInt(_left, 10);
            _left = _left + "px";
        }
        
        //$.test_msg("最後算出來的left是：", _left);
        setTimeout(function () {
            if ($.isset(_left)) {
                _ui.css("left", _left);
            }
        }, 0);

    }
    
    return this;
};

KALS_controller_window.prototype._setup_effect_flag = false;

/**
 * 設定好effect
 */
KALS_controller_window.prototype._setup_effect = function () {
    if (this._setup_effect_flag === false) {
	$.tools.overlay.addEffect("fade", function(position, done) {
	      this.getOverlay().css(position).fadeIn(this.getConf().speed, done);
	   },// close function
	   function(done) {
	      // fade out the overlay
	      this.getOverlay().fadeOut(this.getConf().closeSpeed, done);
	   }
	); 
    }
    return this;
};

/**
 * open的時候，focus在第一顆按鈕上
 * @param {Object} _callback
 */
KALS_controller_window.prototype.dialog_open = function (_callback) {
    
    var _this = this;
    this._setted_focus = false;
    var _open_callback = function (_ui) {
        
        //$.test_msg('Dialog_modal.open() _open_callback');
        
        _this.focus_option();
        
        if ($.is_function(_callback)) {
			_callback(_ui);
		}
    };
    
    //2010.10.1 不使用Base庫
    //return this.base(_open_callback);
    
    //$.test_msg('檢查Dialog_modal.open的_callback', [ this._$modal_name ,_open_callback]);
    return this.overlay_open(_open_callback);
};

/**
 * Overlay的開啟動作
 * @param {function|null} _callback
 */
KALS_controller_window.prototype.overlay_open = function (_callback) {
    
    if (this.is_opened() === false) {
        var _ui = this.get_ui();
        var _this = this;
        
        //$.test_msg('Overlay_modal.open() check _ui', [(_ui != null), (typeof(_ui.overlay) == 'function'), _callback]);
        
        if (_ui !== null) {
            if (typeof(_ui.overlay) === 'function') {
                //$.test_msg('Overlay_modal.open() 設置this._$temp_callback', _callback);
                this._$temp_callback = _callback;
                //$.test_msg('Overlay_modal.open() 設置了this._$temp_callback', this._$temp_callback);
                
                //此處的callback會在load的時候就呼叫了
                var _api = _ui.data("overlay");
				//$.test_msg('Overlay_modal.open() 有API嗎?', $.isset(_api));
				
                if ($.isset(_api)) {
                    _api.setOpened(false);
                    try {
                            _api.load();
                    }
                    catch (_e) {
                        _this._setup_effect();
                        try {
                                //再試著讀取一次
                                _api.load();
                        }
                        catch (_final_e) {
                                $.test_msg('open Overlay failed: ' , _final_e);
                        }
                    }
                      
                }
                _ui.show();
                
                if (this.is_exposable() && typeof(this.expose) === "function") {
                    this.expose();
                }
            }
            else {
                _ui.show();
                
                //$.test_msg('Overlay_modal.open() after show');
                
                if ($.is_function(_callback)) {
                    _callback(_ui);
                }
            }
        }
    }
    else {
        $.trigger_callback(_callback);
    }
    
    return this;
};


/**
 * Overlay的關閉動作
 * @param {function|null} _callback
 */
KALS_controller_window.prototype.overlay_close = function (_callback) {
    if (this._$closable && this.is_opened()) {
        var _ui = this.get_ui();
        
        var _this = this;
        
        if (_ui !== null) {
            if (typeof(_ui.overlay) === 'function') {
                //$.test_msg('close set temp callback', [this.get_modal_name(), typeof(_callback)]);
                //$.test_msg('close set temp callback', _ui.overlay().close);
                this._$temp_callback = _callback;
                
                //if (typeof(_ui.overlay().isOpened()) != 'undefined')
                var _api = _ui.data("overlay");
                if ($.isset(_api)) {
                    _api.setOpened(true);
                    _api.close();    
                }
                _ui.hide();
                //else
                //{
                    
                //}
            }
            else {
                _ui.hide();
                if ($.is_function(_callback)) {
					_callback(_ui);
				}
            }
        }
    }
    return this;
};


/**
 * 此Overlay是否需要Mask
 * @type {boolean}
 */
KALS_controller_window.prototype.is_exposable = function () {
    return this._$exposable;
};

/**
 * Mask的z-index
 * @type {number}
 * @property
 * @private
 */
KALS_controller_window.prototype._mask_z_index = 9998;

/**
 * 讓此Overlay背後顯示mask
 * @param {Object} _callback
 */
KALS_controller_window.prototype.expose = function (_callback) {
    if (this._$exposable === false) {
		return this;
	}
    
    var _ui = this.get_ui();
    
    if ($.isset(_ui) && typeof(_ui.expose) == "function") {
        _ui.expose({
            color: '#333333',
            loadSpeed: 200,
            opacity: 0.5,
            zIndex: this._mask_z_index,
            closeOnClick: false,
            closeOnEsc: false
        });
        _ui.css('z-index', (this._mask_z_index+1));
    }
    
    setTimeout(function () {
        $.trigger_callback(_callback);
    }, 200);
    return this;
};

/**
 * 讓此Overlay隱藏到Mask之後
 * @param {function} _callback
 */
KALS_controller_window.prototype.cover = function (_callback) {
    if (this._$exposable === false) {
		return this;
	}
    
    var _ui = this.get_ui();
    
    if ($.isset(_ui)) {
        _ui.css('z-index', (this._mask_z_index-1));
    }
    
    $.trigger_callback(_callback);
    
    return this;
};

// ------------------------------------------------------------
// 讀取狀態 loading
// ------------------------------------------------------------

/**
 * 設置是否為loading中
 * @param {null|boolean} _is_loading 如果是null，則會切換到另一種狀態 
 * @param {function} _callback
 */
KALS_controller_window.prototype.toggle_loading = function (_is_loading, _callback) {
    
    var _this = this;
    
    if ($.is_function(_is_loading) && $.is_null(_callback)) {
        _callback = _is_loading;
        _is_loading = null;
    }
    
    if (_is_loading !== null
       && this.is_loading() === _is_loading) {
        $.trigger_callback(_callback);
        return;
    }
    var _ui = this.get_ui();
    
    var _loading = _ui.find('.window-loading:first');
    var _content = _ui.find('.dialog-content:first');
    var _submit = _ui.find('.window-content-submit:first');
    
    var _close_loading = function () {
        _loading.slideUp(_speed, function () { _loading.hide(); });
        _content.slideDown(_speed);
        _ui.removeClass("loading");
        //_this.toggle_options(true);
        //_this.toggle_toolbar_option(true);
    };
    
    var _open_loading = function () {
        _loading.slideDown(_speed);
        _content.slideUp(_speed, function () { _content.hide(); });
        //_this.toggle_options(false);
        //_this.toggle_toolbar_option(false);   
        _ui.addClass("loading");
    };
    
    //var _speed = 1000;
    var _speed = 0;    //2010.9.10 取消動畫
    
    if (_is_loading === null) {
        if (this.is_loading()) {
            _close_loading();
        }
        else {
            _open_loading();
        }
    }
    
    if (_is_loading === true) {
        _open_loading();
    }
    else {
        _close_loading();
    }
    
    if ($.is_function(this._$onviewportmove)) {
        this._$onviewportmove(_ui);
    }
    
    setTimeout(function () {
        if ($.is_function(_this._$onviewportmove)) {
            _this._$onviewportmove(_ui);
            _ui.animate({}, {
                complete: function () {
                    setTimeout(function () {
                        $.trigger_callback(_callback);        
                    }, 0);
                }
            }); 
        }
        else {
            $.trigger_callback(_callback);
        }
        _this.focus_input();
    }, (_speed * 1.2));
    
    return this;
};

/**
 * 讀取完成，將Loading狀態關閉。
 * @param {function} _callback
 */
KALS_controller_window.prototype.loading_complete = function (_callback) {
    return this.toggle_loading(false, _callback);
};

KALS_controller_window.prototype.is_loading = function () {
    var _ui = this.get_ui();
    var _loading = _ui.find('.window-loading:first');
    
    return (!(_loading.css('display') === 'none'));
};

/**
 * 切換顯示工具列的按鈕
 * @param {boolean} _display
 * @returns {Dialog_modal}
 */
KALS_controller_window.prototype.toggle_toolbar_option = function(_display) {
    
    var _toolbar = this.get_ui('.dialog-toolbar:first');
    
    var _classname = 'hide-option';
    if ($.is_null(_display)) {
        _toolbar.toggleClass(_classname);
    }
    else if (_display) {
        _toolbar.removeClass(_classname);
    }
    else {
        _toolbar.addClass(_classname);
    }
        
    return this;
};

/**
 * 當讀取結束之後，跳到content中的第一個可輸入欄位吧
 * 
 * @todo 20140119 無法正常運作
 * @return {KALS_controller_window}
 */
KALS_controller_window.prototype.focus_input = function () {
    var _ui = this.get_ui();
    
    var _input = _ui.find(".default-focus:first");
    
    if (_input.length === 0) {
        _input = _ui.find("input:first");
    }
    if (_input.length === 0) {
        _input = _ui.find("button:first");
    }
    if (_input.length === 0) {
        _input = _ui.find("textarea:first");
    }
    
    //$.test_msg("focus_input", _input.length);
    if (_input.length > 0) {
        _input.css("border", "3px solid red");
        _input.css("color", "red");
        _input.focus();
        //_input.remove();
    }
    
    return this;
};

/**
 * 導覽列點一下去的動作
 * @type {Function}
 */
KALS_controller_window.prototype._$nav_click_callback = null;

/* End of file KALS_controller_window */
/* Location: ./system/application/views/web_apps/kals_framework/KALS_controller_window.js */
/**
 * Window_content_submit
 * 視窗內容中，遞交表單設定
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/9 下午 01:27:17
 * @extends {Dialog_option}
 */
function Window_content_submit(){
    
    Dialog_option.call(this);
    
}

Window_content_submit.prototype = new Dialog_option();

/**
 * 遞交按鈕的語系參數。
 * @type {KALS_language_param}
 */
Window_content_submit.prototype.lang = new KALS_language_param(
    'SUBMIT',
    'window.submit'
);

/**
 * 遞交目的的網址。請省略base_url。
 * @type {string}
 */
Window_content_submit.prototype.url = null;

/**
 * 遞交完成時顯示通知的語系參數。
 * @type {KASL_language_param}
 */
Window_content_submit.prototype.complete_notification = new KALS_language_param(
    'Submit successful!',
    'window.submit.success'
);

Window_content_submit.prototype.failed_notification = new KALS_language_param(
    'Submit failed.',
    'window.submit.failed'
);

/**
 * 將Window_content儲存在內部
 * @type {Window_content}
 */
Window_content_submit.prototype._content = null;

/**
 * 預設的表單
 */
Window_content_submit.prototype._$input_names = null;

/**
 * 從Window_content中蒐集資料，輸出成為JSON。
 * 他會參考this._$input_names取出資料。如果有想要取得的資料，請設定this._$input_names
 * @type {JSON}
 */
Window_content_submit.prototype.get_data = function () {
    var _data = {};
    
    //$.test_msg('Window_content_submit.get_data()', this._$input_names);
    
    if ($.is_null(this._$input_names)) {
        return _data;
    }
    else {
        for (var _i in this._$input_names) {
            var _name = this._$input_names[_i];
            var _value = this._content.get_input_value(_name);
            _value = $.trim(_value);
            _data[_name] = _value;
        }
        return _data;
    }
};

/**
 * 從Window_content中蒐集input，輸出成為JSON。
 * 他會參考this._$input_names取出資料。如果有想要取得的資料，請設定this._$input_names
 * @type {JSON}
 */
Window_content_submit.prototype.get_inputs = function () {
    var _inputs = {};
    if ($.is_null(this._$input_names)) {
        return _inputs;
    }
    else {
        for (var _i in this._$input_names) {
            //$.test_msg('Window_content_submit.get_inputs()', this._$input_names);

            var _name = this._$input_names[_i];
            var _input = this._content.get_input(_name);
            
            // 20140102 Pulipuli Chen
            // 先在這邊unlock所有empty
            KALS_window.ui.check_input(_input, false);
            
            _inputs[_name] = _input;
        }
        return _inputs;
    }
};

/**
 * 取得指定name的input的元件
 * @param {String} _name
 * @type {jQuery}
 */
Window_content_submit.prototype.get_input = function (_name) {
	return this._content.get_input(_name);
};

/**
 * 取得指定name第一個input的元件
 * @param {String} _name
 * @type {jQuery}
 */
Window_content_submit.prototype.get_first_input = function (_name) {
	return this._content.get_first_input(_name);
};

/**
 * 遞交完成時的處理動作。預設是顯示通知並關閉KALS_window。
 * @type {function}
 * @param {Object} _data 從KALS_util.ajax_get()回傳的資料
 */
Window_content_submit.prototype.complete_handle = function (_data) {
    
    //$.test_msg('Window_content_subumit.complete_handle()');
    
    if (_data === true) {
		KALS_util.notify(this.complete_notification);
	}
	else {
		KALS_util.notify(this.failed_notification);
	}
    
    var _this = this;
    KALS_window.close(function () {
        _this._unlock_submit();
    });
    
    return this;
};
/**
 * 遞交錯誤時的處理動作。如果為null，則預設使用KALS_util.show_exception()。
 * @type {null|function} = function (_data) {}: _data是從伺服器上回傳的資料。
 */
Window_content_submit.prototype.exception_handle = null;

/**
 * 處理遞交動作。
 */
Window_content_submit.prototype.submit = function () {
    
    var _data = this.get_data();
    var _inputs = this.get_inputs();
    
    //$.test_msg('Window_content_submit.submit() _data', _data);
    
    //先經過驗證
    if (this.validate(_inputs, _data) === false) {
        return this;
    }
    
    if (this._lock_submit() === false) {
		return this;
	}
    
    //如果沒有要遞交的資料，則回傳完成訊息
    if (this.url === null || this._content === null) {
        if ($.is_function(this.complete_handle)) {
			this.complete_handle(_inputs, _data);
		}
        return this;
    }
    
    //如果有要遞交的資料，則開始蒐集準備遞交的設定
    var _config = {};
    
    _config.url = this.url;
    _config.data = _data;
    
    var _this = this;
    _config.callback = function (_data) {
        _this.complete_handle(_data);    
    }; 
    //$.test_msg('Window_content_submit.submit()', _config['callback']);
    
    if (this.exception_handle !== null) {
        _config.exception_handle = this.exception_handle;
    }
    
    KALS_window.toggle_loading(true, function () {
        KALS_util.ajax_get(_config);
    });    
    
    return this;
};

Window_content_submit.prototype._lock_submit = function () {
    
    var _ui = this.get_ui();
    
    //$.test_msg(typeof(_ui.attr('disabled')), _ui.attr('disabled'));
    if (typeof(_ui.attr('disabled')) !== 'undefined'
        && _ui.attr('disabled') === true) {
        //不可以重複執行compelte_handle()！
        return false;
    }
    _ui.attr('disabled', true);
    
    return true;
    
};

Window_content_submit.prototype._unlock_submit = function () {
    
    var _ui = this.get_ui();
    _ui.removeAttr('disabled');
    
    return true;
};

Window_content_submit.prototype._$create_ui = function () {
    var _this = this;
    this.callback = function () {
        _this.submit();
    };
    
    var _ui = Dialog_option.prototype._$create_ui.call(this);
    _ui.addClass('window-content-submit');
    
    return _ui;
};

/**
 * 取得Window_content的UI
 * @param {String} _selector 選取子
 */
Window_content_submit.prototype._get_content_ui = function (_selector) {
    return this._content.get_ui(_selector);
};

/**
 * 檢查是否允許遞交
 * @param {Object} _inputs 通常是來自於this.get_inputs();
 * @param {Object} _data 通常是來自於this.get_data();
 */
Window_content_submit.prototype.validate = function (_inputs, _data) {
    
    //$.test_msg('Window_content_submit.validate() _data', _data);
    
    return true;
};

Window_content_submit.prototype.set_error = function (_message) {
    this._content.set_error(_message);
    return this;
};

/* End of file Window_content_submit */
/* Location: ./system/application/views/web_apps/Window_content_submit.js *//**
 * Window_user_interface
 * 以Factory的模式建立各種用於Window中的元件
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/6 上午 08:24:23
 * @extend {KALS_user_interface}
 */
function Window_user_interface() {
    KALS_user_interface.call(this);
}

Window_user_interface.prototype = new KALS_user_interface();

Window_user_interface.prototype.panel = function (_classname) {
    var _ui = $('<div class="window-panel"></div>');
    if ($.isset(_classname)) {
		_ui.addClass(_classname);
	}
    return _ui; 
};

Window_user_interface.prototype.subpanel = function (_classname) {
    var _ui = $('<div class="window-subpanel"></div>');
    if ($.isset(_classname)) {
		_ui.addClass(_classname);
	}
    return _ui; 
};

Window_user_interface.prototype._input_text_classname = 'text';

Window_user_interface.prototype.input = function (_name, _default_value) {
    var _ui = $('<input type="text" name="' + _name + '" />');
    return this._setup_text_input(_ui, _default_value);
};

Window_user_interface.prototype.password = function (_name, _default_value) {
    var _ui = $('<input type="password" name="' + _name + '" />');
    return this._setup_text_input(_ui, _default_value);
};

/**
 * 設定text型的表單
 * @param {jQuery} _input 要設定的表單
 * @param {Object} _default_value 預設值
 */
Window_user_interface.prototype._setup_text_input = function (_input, _default_value) {
    
    _input.addClass(this._input_text_classname);
    
    if ($.isset(_default_value)) {
		_input.val(_default_value);
	}
    
    _input.keypress(function (e) {
        
        //$.test_msg('Window ui._setup_text_input()', e.which);
        
        if (e.which == 13)    //13表示enter鍵
        {
            var _submit = _input.parents('.dialog-table:first')
                .find('.dialog-options .window-content-submit:first')
                .focus()
                .click();
        }
    });
    
    return _input;
};

Window_user_interface.prototype.check_input = function (_input, _force_empty) {
    
    //$.test_msg('win ui.check_input()', _input.length);
    
    if (_force_empty === undefined || typeof _force_empty !== "boolean") {
        _force_empty = true;
    }
    
    _input.change(function () {
        var _input = $(this);
        
        //$.test_msg('window ui.check_input()', _input.val());
        
        if (_input.val() === '' || _force_empty) {
            _input.addClass('empty');
        }
        else {
            _input.removeClass('empty');
        }
    });
    _input.change();
    return this;
};

/**
 * 建立下拉式選單
 * @param {jQuery[]} _option_lang_params
 * @param {String} _default_value 會去找options的value對應
 */
Window_user_interface.prototype.dropdown = function (_name, _options, _default_value) {
    var _select = $('<select></select>')
        .attr('name', _name)
        .addClass('dropdown');
        
    if ($.is_array(_options) === false) {
		_options = [_options];
	}
    
    for (var _i in _options) {
        _options[_i].appendTo(_select); 
    }
    
    //選擇預設的選項
    if ($.isset(_default_value)) {
        //_select.children('[value="' + _default_value + '"]').attr('selected', 'selected');
		_select.attr("value", _default_value);
        
		//$.test_msg('win ui.dropdown()' , [_default_value
        //    , _select.children('[value="' + _default_value + '"]').length
        //    , _select.children('[value="' + _default_value + '"]:selected').length]);
    }
    
    return _select;
};

/**
 * 建立下拉式選單的選項
 * @param {KALS_language_param} _lang_param
 * @param {Object} _value
 */
Window_user_interface.prototype.dropdown_option = function (_lang_param, _value) {
    
    var _option = $('<option></option>');
    
    KALS_context.lang.add_listener(_option, _lang_param);
    if ($.is_null(_value)) {
        if ($.is_class(_lang_param, 'KALS_language_param')) {
			_value = _lang_param.lang;
		}
		else {
			_value = _lang_param;
		}
    }
    
    _option.attr('value', _value);
    
    return _option;
};

/**
 * 條列式清單的選項
 * @param {KALS_language_param} _lang_param
 * @param {Object} _value
 */
Window_user_interface.prototype.list_option = function (_lang_param, _value) {
    
    var _option = $('<label><span></span></label>')
        .addClass('list-option');
    
    var _heading = _option.find('span').addClass('heading');
    
    KALS_context.lang.add_listener(_heading, _lang_param);
    
    if ($.is_null(_value)) {
        if ($.is_class(_lang_param, 'KALS_language_param')) {
			_value = _lang_param.lang;
		}
		else {
			_value = _lang_param;
		}
    }
    
    _heading.attr('value', _value);
    
    return _option;
};

/**
 * list_option的別名
 * 
 * @param {KALS_language_param} _lang_param
 * @param {Object} _value
 */
Window_user_interface.prototype.radio_option = function(_lang_param, _value){
	return this.list_option(_lang_param, _value);
};

Window_user_interface.prototype.radio_list = function (_name, _options, _default_value) {
    
    var _list = $('<span></span>')
        .addClass('radio-list')
        .addClass('list');
    
    if ($.is_array(_options) === false) {
		_options = [_options];
	}
    
    for (var _i in _options) {
        var _option = _options[_i];
        
        var _input = $('<input type="radio" name="'+_name+'" />')
            .prependTo(_option);
        var _value = _option.find('.heading:first').attr('value');
        _input.attr('value', _value);
        
        _option.appendTo(_list);
    }
    
    //選擇預設的選項
    if ($.isset(_default_value)) {
        //$.test_msg('window ui.radio_list() _default_value', _default_value);
        
        _list.find('[value="' + _default_value + '"]').attr('checked', true);
    }
    
    return _list;
};

/**
 * 修改指定列表的值
 * @type {jQuery} _list
 * @type {String} _value 要設定的值 
 */
Window_user_interface.prototype.change_list_value = function (_list, _value) {
	
	if (_list.length == 1) {
		//$.test_msg("Window_search change_annotation_type", _ui.attr("className"));
		var _classname = _list.attr("className");
		if (_classname.indexOf("radio-list") != -1) {
			_list.find("input:radio").attr("checked", false);
			_list.find("input:radio[value='"+_value+"']").attr("checked", true);
		}
		else {
			_list.attr("value", _value);
		}
	}
	else {
		/*
		var _this = this;
		_list.each(function (_index, _l) {
			_this.change_list_value(_l, _value);
		});
		*/
		for (var _i = 0; _i < _list.length; _i++) {
			this.change_list_value(_list.eq(_i), _value);
		}
	}
};

/**
 * 取得指定列表的值
 * @type {jQuery} _list 
 */
Window_user_interface.prototype.get_list_value = function (_list) {
	
	if (_list.length > 1) {
		_list = _list.eq(0);
	}
	
	var _value;
	//$.test_msg("Window_search change_annotation_type", _ui.attr("className"));
	var _classname = _list.attr("className");
	if (_classname.indexOf("radio-list") != -1) {
		_value = _list.find("input:radio:checked").attr("value");
	}
	else {
		_value = _list.attr("value");
	}
	return _value;
};


//------------------------------------------

Window_user_interface.prototype.window_change_link = function (_lang_param, _content_name) {
    
    var _link = new Window_change_link(
        _lang_param,
        _content_name
    );
    
    var _ui = _link.get_ui();
    return _ui;
};

/**
 * 行。有表格頭跟內容。
 * @param {KALS_language_param|jQuery|string} _title
 * @param {KALS_language_param|jQuery|string|null} _data
 */
Window_user_interface.prototype.row = function (_title, _data) {
    if ($.is_null(_data)) {
        _data = '';
        //return this.message_row(_title);
    }
    
    var _ui = $('<dl class="row"></dl>');
    
    var _dt = $('<dt></dt>').appendTo(_ui);
    var _dd = $('<dd></dd>').appendTo(_ui);
    
    _dt.click(function () {
        
        var _dt = $(this);
        var _dd = _dt.nextAll('dd:first');
        if (_dd.length > 0) {
            var _input = _dd.find('input:first');
            if (_input.length > 0) {
                var _type = _input.attr('type');
                if (_type == 'text' || _type == 'password') {
					_input.select();
				}
				else {
					_input.focus();
				}
            }                
        }
    });
    
    this._setup_content(_dt, _title);
    this._setup_content(_dd, _data);
    
    return _ui;
};

/**
 * 訊息行
 * @param {KALS_language_param|jQuery|string|null} _message = <hr />
 */
Window_user_interface.prototype.message_row = function (_message) {
    if ($.is_null(_message)) {
        _message = '';
    }
    
    var _ui = $('<div class="message-row"></div>');
    this._setup_content(_ui, _message);
    return _ui;
};

Window_user_interface.prototype.error_row_classname = 'error-row';

Window_user_interface.prototype.error_row = function (_message) {
    var _ui = this.message_row(_message);
    _ui.addClass(this.error_row_classname);
    return _ui;
};

Window_user_interface.prototype.hr_row = function () {
    var _ui = $('<div class="hr-row"><hr /></div>');
    return _ui;
};

Window_user_interface.prototype.heading_row = function (_heading) {
    
    if ($.is_null(_heading)) {
        return this.hr_row();
    }
    
    var _ui = $('<h2 class="heading-row"></h2>');
    this._setup_content(_ui, _heading);
    return _ui;
};

/**
 * 建立Span的HTML物件
 * @param {KALS_language_param} _lang_param
 * @type {jQuery}
 */
Window_user_interface.prototype.tip = function (_lang_param) {
    var _tip = KALS_context.lang.create_listener(_lang_param);
    _tip.addClass('tip');
    return _tip;
};

/**
 * 建立button的HTML物件
 * @param {KALS_language_param} _lang_param
 * @type {jQuery}
 */
Window_user_interface.prototype.button = function (_lang_param) {
	var _btn = $("<button type='button'></button>");
	KALS_context.lang.add_listener(_btn, _lang_param);
    _btn.addClass('button')
        .addClass('dialog-option');
    return _btn;
};

Window_user_interface.prototype._setup_content = function (_container, _content) {
    
    if ($.is_class(_content, 'KALS_language_param')) {
        KALS_context.lang.add_listener(_container, _content);
    }
    else {
        _container.append(_content);
    }
    return _container;
};

/**
 * 製造換頁的選單
 * @param {number} _now_page 現在頁數
 * @param {number} _all_page 所有頁數
 * @param {function} _callback 點下按鈕之後呼叫的功能
 * _callback = function (_page) {
 * 	//看你要用page作什麼事情
 * }
 */

Window_user_interface.prototype.create_pager = function (_now_page, _all_page, _callback) {
	var _factory = this;
	var _ui = _factory.panel('pager');
	
	var _first = new KALS_language_param (
	    'First',
	    'window.pager.first'
	);
	var _first_value = 1;
	
	var _prev = new KALS_language_param (
	    'Prev',
	    'window.pager.prev'
	);
	var _prev_value = _now_page - 1;
	
	var _next = new KALS_language_param (
	    'Next',
	    'window.pager.next'
	);
	var _next_value = parseInt(_now_page) + 1;
	
	var _last = new KALS_language_param (
	    'Last',
	    'window.pager.last'
	);
	var _last_value = _all_page;
	
	var _now = new KALS_language_param (
	    _now_page,
	    'window.pager.now'
	);
	var _now_value = _now_page;
	
	var _now_prev = new KALS_language_param (
	    parseInt(_now_page) - 1,
	    'window.pager._now_prev'
	);
	var _now_prev_value = parseInt(_now_page) - 1;
	
	var _now_prev2 = new KALS_language_param (
	    parseInt(_now_page) - 2,
	    'window.pager._now_prev2'
	);
	var _now_prev2_value = parseInt(_now_page) - 2;
	
	var _now_next = new KALS_language_param (
	    parseInt(_now_page) + 1,
	    'window.pager._now_next'
	);
	var _now_next_value = parseInt(_now_page) + 1;

	var _now_next2 = new KALS_language_param (
	    parseInt(_now_page) + 2,
	    'window.pager._now_next2'
	);
	var _now_next2_value = parseInt(_now_page) + 2;

	//var _lastnum = _all_page;
	
	// Prev First ... 3 4 5 6 7 ... Last Next
	// [1       ] [2] [3][4][5] [6] [7      ]
	
	// Part 1
	if (_now_page != 1) {
		this.create_pager_button(_prev, _prev_value, _callback).appendTo(_ui);
		this.create_pager_button(_first, _first_value, _callback).appendTo(_ui);
	} 
    if (_now_page ==2){
			
		this.create_pager_button('1', _first_value, _callback).appendTo(_ui);
		}
		
	
	//Part2
    if (_now_page > 3){
		
		this.create_pager_button('...').appendTo(_ui);
		
	}
		
	//PART3
	if (_now_page > 3) {
		this.create_pager_button(_now_prev2, _now_prev2_value, _callback).appendTo(_ui);
	}

    if (_now_page ==3){
			
		this.create_pager_button('1', _first_value, _callback).appendTo(_ui);
		}
	if (_now_page > 2) {
		this.create_pager_button(_now_prev, _now_prev_value, _callback).appendTo(_ui);
	}

	
	
	//PART4 //當前頁面
	this.create_pager_button(_now).appendTo(_ui);
	
	
	//PART5
	if (_now_page < _all_page - 1) {
		this.create_pager_button(_now_next, _now_next_value, _callback).appendTo(_ui);
	}
	
	if (_now_page < _all_page - 2) {
		this.create_pager_button(_now_next2, _now_next2_value, _callback).appendTo(_ui);
	}
	
	//PART6
	if (_now_page < _all_page - 3){
		
		this.create_pager_button('...').appendTo(_ui);
		
	}
	
	
	//PART7	
	
	    if (_now_page == _all_page - 1) {
			this.create_pager_button(_all_page, _last_value, _callback).appendTo(_ui);
		}
	    if (_now_page == _all_page - 2) {
			this.create_pager_button(_all_page, _last_value, _callback).appendTo(_ui);
		}
		if (_now_page != _all_page) {
		this.create_pager_button(_last, _last_value, _callback).appendTo(_ui);
		this.create_pager_button(_next, _next_value, _callback).appendTo(_ui);
	
	     
	} 
				
	return _ui;
};


/**
 * 製作換頁按鈕
 * @param {KALS_language_param} _lang 按鈕顯示樣貌
 * @param {string} _value 要輸入callback的值
 * @param {Function} _callback 案下去的動作
 * _callback = function (_value) {
 * 	//_value...
 * }
 */

 
 Window_user_interface.prototype.create_pager_button = function (_lang, _value, _callback) {
	var _button = $("<button></button>")
		.addClass("pager-button");
	
	if ($.is_function(_callback)) {
		_button.click(function () {
			_callback(_value);
		});
		_button.addClass("link");
	}
	
	this._setup_content(_button, _lang);
	
	return _button;
}; 


/* End of file Window_user_interface */
/* Location: ./system/application/views/web_apps/Window_user_interface.js *//**
 * Window_change_link
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/5 下午 11:13:03
 * @extends {Dialog_close_link}
 */
function Window_change_link(_lang, _content_name) {

    this.content_name = _content_name;
    Dialog_close_link.call(this, _lang);

    //$.test_msg('Window_change_link()', [this._$option_prototype, Dialog_link.prototype._$option_prototype]);
}

Window_change_link.prototype = new Dialog_close_link();

Window_change_link.prototype.content_name = null;

Window_change_link.prototype.close_handle = function (_ui, _callback) {
    
    //$.test_msg('Window_change_link.close_handle()');
    
    KALS_context.overlay.lock_mask();
    
    var _this = this;
    if (typeof(_this.content_name) != 'undefined') {
            KALS_window.setup_window(_this.content_name, function () {
                KALS_context.overlay.unlock_mask();
            });
    }
	
    /*
    var _this = this;
    setTimeout(function () {
        Dialog_close_link.prototype.close_handle.call(_this, _ui, function () {
            //if (typeof(_this.content_name) == 'string')
            if (typeof(_this.content_name) != 'undefined') {
				KALS_window.setup_window(_this.content_name);
			}
                
        });    
    }, 0);
    */
    
};

/* End of file Window_change_link */
/* Location: ./system/application/views/web_apps/Window_change_link.js *//**
 * Navigation_item
 * 
 * 選單按鈕
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/18 下午 12:19:43
 */

/**
 * @memberOf {Navigation_item}
 * @extends {KALS_user_interface}
 * @param {KALS_language_param|String} _lang 語系檔
 * @param {String} _classname 設定類別名稱
 * @constructor
 */
function Navigation_item(_lang, _classname) {
    
    if ($.isset(_lang)) {
        //$.test_msg("nav item 安裝 lang", _lang);
        this.set_lang(_lang);
    }
    if ($.isset(_classname)) {
        this.set_classname(_classname);
    }
    
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Navigation_item}
 */
Navigation_item.prototype = new KALS_user_interface();

/**
 * 顯示在標題列的語系檔
 * @memberOf {Navigation_item}
 * @type {KALS_language_param}
 */
Navigation_item.prototype._lang;

//Navigation_item.prototype.attribute = null;

/**
 * 設定語系檔
 * @param {KALS_language_param} _lang 語系檔
 * @memberOf {Navigation_item}
 */
Navigation_item.prototype.set_lang = function (_lang) {
    //$.test_msg("nav_item.set_lang()", _lang.msg);
    if (_lang === undefined) {
        return this;
    }
    else if ($.is_string(_lang)) {
        _lang = new KALS_language_param(_lang);
    }
    
    this._lang = _lang;
    return this;
};


/**
 * Create UI
 * @memberOf {Navigation_item}
 * @type {jQuery} UI
 */
Navigation_item.prototype._$create_ui = function () {
    var _ui = $("<a href='#'></a>")
            //.html(1212)
            .addClass("navigation-item");
            //.append(KALS_context.lang.create_listener(this._lang));
    
    KALS_context.lang.add_listener(_ui, this._lang);
    //$.test_msg("Nav item $create_ui", _ui.html());
    
    if ($.is_string(this._classname)) {
        _ui.addClass(this._classname);
    }
    
    var _this = this;
    _ui.click(function () {
        _this.callback();
    });
    
    return _ui;
};

/**
 * 設定回呼函數
 * @param {Function} _func
 * @returns {Navigation_item}
 */
Navigation_item.prototype.set_callback = function (_func) {
    if ($.is_function(_func)) {
        this.callback = _func;
    }
    else if ($.is_string(_func) && $.is_link(_func)) {
        this.callback = function () {
            location.href = _func;
        };
    }
    return this;
};

/**
 * 設定連結
 * @param {String} _link
 * @returns {Navigation_item.prototype}
 */
Navigation_item.prototype.set_link = function (_link) {
    if ($.is_string(_link) && $.is_link(_link)) {
        this.callback = function () {
            location.href = _link;
        };
    }
    return this;
};

/**
 * 設定開啟新視窗的連結
 * @param {String} _link
 * @returns {Navigation_item.prototype}
 */
Navigation_item.prototype.set_link_new_window = function (_link) {
    if ($.is_string(_link) && $.is_link(_link)) {
        this.callback = function () {
            window.open(_link, "_blank");
        };
    }
    return this;
};

/**
 * 回呼函數
 */
Navigation_item.prototype.callback = function () {};

Navigation_item.prototype._classname = null;

/**
 * 設定類別名稱
 * @param {String} _classname
 * @returns {Navigation_item.prototype}
 */
Navigation_item.prototype.set_classname = function (_classname) {
    if ($.is_string(_classname)) {
        this._classname = _classname;
    }
    return this;
};

Navigation_item.prototype.nav_item = true;

/* End of file Navigation_item */
/* Location: ./system/application/views/web_apps/Navigation_item.js *//**
 * Navigation_list
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 09:44:10
 * @memberOf {Navigation_list}
 * @extends {KALS_user_interface}
 * @constructor
 */
function Navigation_list() {
    
    KALS_user_interface.call(this);
    
    this._$nav_items = [];
    
}

// Extend from KALS_user_interface
Navigation_list.prototype = new KALS_user_interface();

Navigation_list.prototype._ui_nav = null;
Navigation_list.prototype._ui_menu = null;
Navigation_list.prototype._$classname = null;

/**
 * 導覽類型
 * 
 * 類型包括：
 * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
 * - profile: 以手動登入的使用者才會顯示
 * - embed: 以內嵌登入的使用者才會顯示
 * - anonymous: 未登入的使用者才會顯示
 * - null: 不列入在目前的導覽列
 * @type String
 */
Navigation_list.prototype._$nav_type = null;

/**
 * 決定是否要顯示說明
 * @type {boolean} 
 */
Navigation_list.prototype._$show_help = true;
Navigation_list.prototype._help_lang = new KALS_language_param(
    'Help',
    'toolbar.navigation_list.help'
);


/**
 * 決定是否要顯示錯誤回報
 * @type {boolean} 
 */
Navigation_list.prototype._$show_feedback = true;
Navigation_list.prototype._feedback_lang = new KALS_language_param(
    'Feedback',
    'toolbar.navigation_list.feedback'
);

/**
 * 主要設定。子類別請覆寫此屬性。
 * @type {Window_content[]}
 */
Navigation_list.prototype._$nav_items = [];

/**
 * Create UI
 * @memberOf {Navigation_list}
 * @type {jQuery} UI
 */
Navigation_list.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('navigation-list');
    
    if (this._$classname !== null) {
        _ui.addClass(this._$classname);
    }
    
    var _nav = this._create_nav();
    var _menu_button = this._create_menu();
    
    _ui.append(_nav)
        .append(_menu_button);
    
    //$.test_msg("Nav_list._$create_ui", _ui.html());
    return _ui;
};

/**
 * 建立導覽列
 * @returns {jQuery}
 */
Navigation_list.prototype._create_nav = function() {
    
    var _ui = $('<table align="right"><tbody><tr></tr></tbody></table>')
        .addClass('nav');
    
    var _tr = _ui.find('tr:first');
    //var _this = this;
    for (var _i in this._$nav_items) {
        var _td = $('<td></td>')
            .addClass('item')
            .appendTo(_tr);
        
        var _content = this._get_window_content(_i); 
        
        var _a;
        
        //$.test_msg("nav item " + _i + " content ", _content === null);
        if ($.is_null(_content) === false
                && _content.nav_item !== undefined 
                && $.is_boolean(_content.nav_item) 
                && _content.nav_item === true) {
            //$.test_msg("nav item " + _i, 1);
            _a = this._create_nav_item(_content, _i);
            //$.test_msg("Nav_list._create_nav_item", _a.html());
        }
        else {
            //$.test_msg("nav item " + _i, 2);
            _a = this._create_window_nav_item(_content, _i);
        }
        
        _a.appendTo(_td);
    }
    
    if (this._$show_help === true) {
        this._setup_help().appendTo(_tr);
    }
	
    // 插入錯誤回報功能
    //if (this._$show_feedback === true) {
    //    if (KALS_CONFIG.)
    //    this._setup_feedback().appendTo(_tr);
    //}
    
    _ui.find('td:last').addClass('last');
    
    return _ui;
};

/**
 * 建立Windows_content系列的按鈕
 * @param {type} _i
 * @returns {jQuery}
 */
Navigation_list.prototype._create_window_nav_item = function (_content, _i) {
        
    //if (_i === 0)
    //    _td.addClass('first');

    var _a = $('<a href="#"></a>')
        .addClass(_content.name)
        .attr('content_index', _i);

    if ($.isset(_content.nav_heading)) {
        //$.test_msg("Nav_list._create_window_nav_item() nav_heading", _content.nav_heading);
        KALS_context.lang.add_listener(_a, _content.nav_heading);
    }
    else if ($.isset(_content._$nav_heading)) {
        //$.test_msg("Nav_list._create_window_nav_item() _$nav_heading", _content._$nav_heading);
        _content._lang_filter();
        KALS_context.lang.add_listener(_a, _content._$nav_heading);
    }

    var _this = this;
    _a.click(function() {

        var _i = $(this).attr('content_index');
        //var _content = _this._$nav_items[_i];
        var _content = _this._get_window_content(_i);

        if (typeof(_content.callback) === "function") {
            _content.callback();
        }
        else if (typeof(_content._$nav_click_callback) === "function") {
            _content._$nav_click_callback();
        }
        else if (_content.is_absolute() === false) {
            //$.test_msg('Navigation_list._create_nav call content', [$.get_class(_content), _content.nav_heading.msg]);
            //KALS_window.setup_window(_content);
            _content.open();
        }
        else {
            //KALS_util.confirm('test', "content");
            _content.open();
        }

        return false;
    });
    
    return _a;
};

/**
 * 建立Navigation系列的按鈕
 * @param {Navigation_item} _content
 * @param {Number} _i
 * @returns {jQuery}
 */
Navigation_list.prototype._create_nav_item = function  (_content, _i) {
    var _ui = _content.get_ui();
    _ui.attr("content_index", _i);
    //$.test_msg("Nav_list._create_nav_item", _ui.html());
    return _ui.clone(true);
    //return _content.get_ui();
};

/**
 * 建立說明按鈕
 * @type jQuery
 */
Navigation_list.prototype._setup_help = function () {
	_td = $('<td></td>')
        .addClass('item');
            
    _a = $('<a href="#"></a>')
        .appendTo(_td)
        .addClass('help');

    KALS_context.lang.add_listener(_a, this._help_lang);
    
    _a.click(function() {
        
        KALS_util.help();
        
        return false;
    });
	
	return _td;
};

/**
 * 建立錯誤回報按鈕
 * @type jQuery
 */
Navigation_list.prototype._setup_feedback = function () {
    _td = $('<td></td>')
        .addClass('item');
            
    _a = $('<a href="#"></a>')
        .appendTo(_td)
        .addClass('feedback');

    KALS_context.lang.add_listener(_a, this._feedback_lang);
    
    _a.click(function() {
        
        KALS_context.feedback.open();
        
        return false;
    });
    
    return _td;
};

Navigation_list.prototype._get_window_content = function (_index) {
    
    if (typeof(this._$nav_items[_index]) === 'undefined') {
        return null;
    }
    else if (typeof(this._$nav_items[_index]) === 'string') {
        var _window_content = this._$nav_items[_index];
        eval('var _content = new ' + _window_content + '()');
        return _content;
    }
    else if (typeof(this._$nav_items[_index]) === 'object') {
        _window_content = this._$nav_items[_index];
        return _window_content;
    }
    else {
        return null;
    }
}; 

Navigation_list.prototype._create_menu = function() {
    
    var _ui = $('<button></button>')
        .addClass('menu');
    
    var _lang_param = new KALS_language_param(
        'Options',
        'toolbar.navigation_list.menu'
    );
    
    KALS_context.lang.add_listener(_ui, _lang_param);
    
    var _options = [];
    for (var _i in this._$nav_items) {
        //var _content = this._$nav_items[_i];
        var _content = this._get_window_content(_i);
        var _option = new Dialog_close_option(_content.nav_heading, function (_content) {
            
            //setTimeout(function() {
                // TODO Navigation_list.create_menu() 這邊很有可能出錯，請務必檢查
                KALS_window.setup_window(_content);    
            //}, 1000);
            
            
        }, _content);
        
        //$.test_msg('Navigation_list._create_menu() option classname', _content.name);
        _option.add_class(_content.name);
        
        _options.push(_option);
    }
    
    if (this._$show_help === true) {
        _option = new Dialog_close_option(this._help_lang, function () {
            KALS_util.help();
        });
        _option.add_class('help');
        _options.push(_option);
    }
    
    var _config = {
        heading: _lang_param,
        options: _options
    };
    
    _ui.click(function () {
        KALS_util.select_menu(_config);
    });
    
    return _ui;
};

/**
 * @type {Array|KALS_window}
 */
Navigation_list.prototype.get_nav_items = function () {
    return this._$nav_items;
};

/**
 * 從KALS_config.navigation取得資料，加入_$nav_items中
 * @returns {Navigation_list}
 */
Navigation_list.prototype._init_module_nav_items = function () {
    var _nav_type = this._$nav_type;
    
    if (typeof(_nav_type) !== "string" 
            && $.is_array(_nav_type) === false) {
        return this;
    }
    
    //return this;
    
    var _list = KALS_context.navigation.get_list(_nav_type);

    //$.test_msg("_init_module_nav_items", [_nav_type, _list.length]);
    for (var _i in _list) {
        //$.test_msg("_init_module_nav_items", _i);
        var _item = _list[_i];
        this._$nav_items.push(_item);
    }
    
    return this;
};

/* End of file Navigation_list */
/* Location: ./system/application/views/web_apps/Navigation_list.js */
/**
 * Anonymous_navigation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 09:43:57
 * @extends {Navigation_list}
 */
function Anonymous_navigation(_common_windows) {
    
    Navigation_list.call(this);
    
    this.login = new Window_login();
    this.register = new Window_register();  
    
    this._$nav_items = [
         this.login
         , this.register
         //'Window_login',
         //'Window_register'
    ];
    
    if (KALS_CONFIG.deny_register === true) {
        this._$nav_items = [
             this.login
        ];
    }
    
    // 載入來自KALS_navigation的導覽列
    this._init_module_nav_items();
    
    // 載入Common_navigation
    //if ($.isset(_common_windows)) {
    //   for (var _i in _common_windows) {
    //        this._$nav_items.push(_common_windows[_i]);
    //    }
    //}
}

Anonymous_navigation.prototype = new Navigation_list();

Anonymous_navigation.prototype._$classname = 'anonymous-navigation';

/**
 * @type {Window_login}
 */
Anonymous_navigation.prototype.login = null;

/**
 * @type {Window_register}
 */
Anonymous_navigation.prototype.register = null;

/**
 * 導覽類型
 * 
 * 類型包括：
 * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
 * - profile: 以手動登入的使用者才會顯示
 * - embed: 以內嵌登入的使用者才會顯示
 * - anonymous: 未登入的使用者才會顯示
 * - null: 不列入在目前的導覽列
 * @type String
 */
Anonymous_navigation.prototype._$nav_type = ["anonymous", "common"];

/* End of file Anonymous_navigation */
/* Location: ./system/application/views/web_apps/Anonymous_navigation.js *//**
 * Mobile_navigation
 *
 * 結合樣板的控制器
 * KALS Framework的Controller示範
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2014/5/19 下午 03:36:17
 * @extends {Navigation_list}
 */
function Mobile_navigation(_common_windows) {
    
    Navigation_list.call(this);
    
    //this.login = new Window_login();
    //this.register = new Window_register();  
    
    this._$nav_items = [
         //this.login
         //, this.register
         //'Window_login',
         //'Window_register'
    ];
    
    /*
    if (KALS_CONFIG.deny_register === true) {
        this._$nav_items = [
             this.login
        ];
    }
    */
    // 載入來自KALS_navigation的導覽列
    this._init_module_nav_items();
    
    // 載入Common_navigation
    //if ($.isset(_common_windows)) {
    //   for (var _i in _common_windows) {
    //        this._$nav_items.push(_common_windows[_i]);
    //    }
    //}
}

Mobile_navigation.prototype = new Navigation_list();

Mobile_navigation.prototype._$classname = 'mobile-navigation';

/**
 * @type {Window_login}
 */
Mobile_navigation.prototype.login = null;

/**
 * @type {Window_register}
 */
Mobile_navigation.prototype.register = null;

/**
 * 導覽類型
 * 
 * 類型包括：
 * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
 * - profile: 以手動登入的使用者才會顯示
 * - embed: 以內嵌登入的使用者才會顯示
 * - anonymous: 未登入的使用者才會顯示
 * - null: 不列入在目前的導覽列
 * @type String
 */
Mobile_navigation.prototype._$nav_type = ["mobile"];

/**
 * 決定是否要顯示說明
 * @type {boolean} 
 */
Mobile_navigation.prototype._$show_help = false;

/* End of file Mobile_navigation */
/* Location: ./system/application/views/web_apps/Mobile_navigation.js *//**
 * Window_login
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 10:56:17
 * @extends {Window_content}
 */
function Window_login() {
    
    Window_content.call(this);
    
    this._setup_submit(new Window_login_submit());
    
}

Window_login.prototype = new Window_content();

Window_login.prototype.name = 'Login';

Window_login.prototype.heading = new KALS_language_param (
    'Login',
    'window.login.heading'
);

Window_login.prototype.nav_heading = new KALS_language_param (
    'Login',
    'window.login.nav_heading'
);

Window_login.prototype.width = 400;

Window_login.prototype._$create_ui = function () {
    
    var _ui = KALS_window.ui.panel(this.name);
    _ui.addClass('window-login');
    
    /*
    var _error_row = KALS_window.ui.message_row('');
    _error_row.addClass('error')
        .appendTo(_ui);
    */
    var _email_lang = new KALS_language_param(
        'E-mail',
        'window.content.email'
    );
    var _email_row = KALS_window.ui.row(_email_lang
        //, KALS_window.ui.input('email', 'auth@test.kals.idv') );
        , KALS_window.ui.input('email') );
    _email_row
        .addClass('email')
        .appendTo(_ui);
    
    var _password_lang = new KALS_language_param(
        'Password',
        'window.content.password'
    );
    var _password_row = KALS_window.ui.row(_password_lang
        //, KALS_window.ui.password('password', 12121) );
        , KALS_window.ui.password('password') );
    _password_row
        .addClass('password')
        .appendTo(_ui);
    
        
    var _register_lang = new KALS_language_param(
        'Click here to register.',
        'window.login.content.register_link'
    );
    
    // 2010.11.21 在職專班實驗專用訊息
    if (typeof(KALS_CONFIG.login_hint) == 'string') {
        var _login_hint = $('<div></div>')
            .css({
                fontSize: 'small',
                'margin': '10px 0',
                'padding': '10px',
                'border': '1px solid gray'
            })
            .html(KALS_CONFIG.login_hint)
            .appendTo(_ui);
        
        
        //KALS_context.lang.add_listener(_experiment_message, new KALS_language_param(
        //    'If you are E-learning Master Program\'s student, please login with your school e-mail and student ID. <br /><br />For example, student with ID "96155001" will write "96155001@nccu.edu.tw" in e-mail address and "96155001" in password.',
        //    'login.experiment_message.201012'
        //));
    }
    
    
    /*
    var _register_link = new Dialog_close_link(_register_lang, function () {
        
        var _register_content = new Window_register();
        KALS_window.setup_window(_register_content);
        
    });
    */
   
    var _register_link = KALS_window.ui.window_change_link(_register_lang
        , 'Window_register');
        //, new Window_register());
    var _register_row = KALS_window.ui.message_row(_register_link);
    _register_row.addClass('register-link')
        .appendTo(_ui);
        
    if (KALS_CONFIG.deny_register === true) {
        _register_row.hide();
    }
    
    //KALS_context.overlay.lock_mask();
    return _ui;
};

/**
 * 設定錯誤
 * @param {KALS_language_param|null} _lang_param
 */
/*
Window_login.prototype.set_error = function (_lang_param) {
    
    var _error = this.get_ui('.error:first');
    
    _error.empty();
    if ($.is_null(_lang_param))
        _error.hide();
    else {
        var _error_msg = KALS_context.lang.create_listener(_lang_param);
        _error.append(_error_msg).show();
    }
    return this;
};
*/

/* End of file Window_login */
/* Location: ./system/application/views/web_apps/Window_login.js *//**
 * Window_login_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:39
 * @extends {Window_content_submit}
 */
function Window_login_submit() {
    
    Window_content_submit.call(this);
    
    this._$input_names = ['email', 'password'];
}

Window_login_submit.prototype = new Window_content_submit();

Window_login_submit.prototype.lang = new KALS_language_param(
    'Login',
    'window.login.submit'
);

Window_login_submit.prototype.complete_notification = new KALS_language_param(
    'Welcome, {0}!',
    'window.login.submit.complete'
);

/**
 * 取得email跟password
 * @type {Object}
 */
/*
Window_login_submit.prototype.get_data = function () {
    //var _content_ui = this._get_content_ui();
    //
    //var _email_input = _content_ui.find('input.text[name="email"]:first'); 
    //var _email = _email_input.val();
    //var _password_input = _content_ui.find('input.text[name="password"]:first'); 
    //var _password = _password_input.val();
    
    var _email_input = this._content.get_input('email');
    var _email = this._content.get_input_value('email');
    var _password_input = this._content.get_input('password');
    var _password = this._content.get_input_value('password');
    
    return {
        email: _email,
        email_input: _email_input,
        password: _password,
        password_input: _password_input
    };
};
*/

Window_login_submit.prototype.validate = function (_inputs, _data) {
    
    if (_inputs === null) {
        _inputs = this.get_inputs();
    }
    if (_data === null) {
        _data = this.get_data();
    }
    
    var _email = _data.email;
        _email = $.trim(_email);
    var _password = _data.password;    
    var _email_input = _inputs.email;
    var _password_input = _inputs.password;
    
    var _error_lang = null;
    
    if (_email === '' && _password === '') {
        _error_lang = new KALS_language_param(
            'Please write E-mail and Password',
            'window.content.error_no_email_password'
        );
        
        KALS_window.ui.check_input(_email_input);
        KALS_window.ui.check_input(_password_input);
        _email_input.focus();
    }
    else if (_email === '') {
        _error_lang = new KALS_language_param(
            'Please write E-mail',
            'window.content.error_no_email'
        );
        _email_input.focus();
        KALS_window.ui.check_input(_email_input);
    }
    else if (_password === '') {
        _error_lang = new KALS_language_param(
            'Please write Password',
            'window.content.error_no_password'
        );
        _password_input.focus();
        KALS_window.ui.check_input(_password_input);
    }
    
    if (_error_lang !== null) {
        this._content.set_error(_error_lang);
        this._unlock_submit();
        return false;
    }
    else {
        return true;
    }
};

Window_login_submit.prototype._setup_auth = function (_data) {
    
    if (_data === null) {
		_data = this.get_data();
	}
    
    var _auth = KALS_context.auth;
    _auth.set_email(_data.email);
    _auth.set_password(_data.password);
};

Window_login_submit.prototype.submit = function () {
    
    var _data = this.get_data();
    var _inputs = this.get_inputs();
    
    if (this.validate(_inputs, _data) === false) {
		return this;
	}
    
    this._setup_auth(_data);
    
    // ---------
    // 接下來要準備登入囉
    
    if (this._lock_submit() === false) {
		return this;
	}
    
    var _this = this;
    
    //$.test_msg('Window_login_submit.submit() 準備登入');
    var _auth = KALS_context.auth;
    KALS_window.toggle_loading(true, function () {
        _auth.login(true, function (_auth, _data) {
            if ($.is_class(_data, 'KALS_language_param')) {
                _this._content.set_error(_data);
                KALS_window.toggle_loading(false, function () {
                    _this._unlock_submit();
                });
            }
            else {
                var _username = KALS_context.user.get_name();
                _this.complete_notification.arg = _username;
                KALS_util.notify(_this.complete_notification);
                KALS_window.close(function () {
                    _this._unlock_submit();
                });
            }
            
        });    
    });
};

/* End of file Window_login_submit */
/* Location: ./system/application/views/web_apps/Window_login_submit.js *//**
 * Window_register
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 10:56:17
 * @extends {Window_login}
 */
function Window_register() {
    
    Window_login.call(this);
    
    this._setup_submit(new Window_register_submit());
    
}

Window_register.prototype = new Window_login();

Window_register.prototype.name = 'Register';

Window_register.prototype.heading = new KALS_language_param (
    'Register',
    'window.register.heading'
);

Window_register.prototype.nav_heading = new KALS_language_param (
    'Register',
    'window.register.nav_heading'
);

/**
 * 高度。直接繼承Window_login，所以不重新設定
 */
//Window_register.prototype.width = 400;

Window_register.prototype._$create_ui = function () {
    
    var _ui = KALS_window.ui.panel(this.name);
    _ui.addClass('window-register');
    
    /*
    var _error_row = KALS_window.ui.message_row('');
    _error_row.addClass('error')
        .appendTo(_ui);
    */
    var _email_lang = new KALS_language_param(
        'E-mail',
        'window.content.email'
    );
    var _email_row = KALS_window.ui.row(_email_lang
        //, KALS_window.ui.input('email', 'register@test.kals.idv') );
        , KALS_window.ui.input('email') );
    _email_row
        .addClass('email')
        .appendTo(_ui);
    
    var _password_lang = new KALS_language_param(
        'Password',
        'window.content.password'
    );
    var _password_row = KALS_window.ui.row(_password_lang
        //, KALS_window.ui.password('password', 'kals') );
        , KALS_window.ui.password('password') );
    _password_row
        .addClass('password')
        .appendTo(_ui);
        
    var _login_lang = new KALS_language_param(
        'Click here to login.',
        'window.register.content.login_link'
    );
    
    /*
    var _login_link = new Dialog_close_link(_login_lang, function () {
        
        var _login_content = new Window_login();
        KALS_window.setup_window(_login_content);
        
    });
    */
    var _login_link = KALS_window.ui.window_change_link(_login_lang
        , KALS_toolbar.anonymous_nav.login);
        //, new Window_login());
    var _login_row = KALS_window.ui.message_row(_login_link);
    _login_row.addClass('login-link')
        .appendTo(_ui);
    
    //KALS_context.overlay.lock_mask();
    return _ui;
};

/* End of file Window_register */
/* Location: ./system/application/views/web_apps/Window_register.js */
/**
 * Window_register_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:39
 * @extends {Window_login_submit}
 */
function Window_register_submit() {
    
    Window_login_submit.call(this);
    
    this._$input_names = ['email', 'password'];
}

Window_register_submit.prototype = new Window_login_submit();

Window_register_submit.prototype.lang = new KALS_language_param(
    'Register',
    'window.register.submit'
);

Window_register_submit.prototype.complete_notification = new KALS_language_param(
    'Register success! Welcome, {0}!',
    'window.register.submit.complete'
);

/**
 * 送出註冊訊息
 * @returns {Window_register_submit}
 */
Window_register_submit.prototype.submit = function () {
    
    var _data = this.get_data();
    var _inputs = this.get_inputs();
    
    if (this.validate(_inputs, _data) === false) {
        return this;
    }
    
    this._setup_auth(_data);
    
    // ---------
    // 接下來要準備登入囉
    
    if (this._lock_submit() === false) {
        return this;
    }
    
    var _this = this;
    
    var _auth = KALS_context.auth;
    KALS_window.toggle_loading(true, function () {
        _auth.register(true, function (_auth, _data) {
            
            //$.test_msg('Window_register_submit()', $.is_class(_data, 'KALS_language_param'));
            
            if ($.is_class(_data, 'KALS_language_param')) {
                _this._content.set_error(_data);
                KALS_window.toggle_loading(false, function () {
                    _this._unlock_submit();
                });
            }
            else {
                var _username = KALS_context.user.get_name();
                _this.complete_notification.arg = _username;
                KALS_util.notify(_this.complete_notification);
                KALS_window.close(function () {
                    _this._unlock_submit();
                });
            }
            
        });    
    });
};

/**
 * 檢查email是否正確
 * @param {Object} _inputs 通常是來自於this.get_inputs();
 * @param {Object} _data 通常是來自於this.get_data();
 */
/*
Window_register_submit.prototype.validate = function (_inputs, _data) {
    
    var _email = _data["email"];
    //$.test_msg("register email check", _email);
    
    var _is_email = $.is_email(_email);
    
    if (_is_email === false) {
        _inputs["email"].focus();
        
    }
    else {
        return true;
    }
};
*/

/**
 * 檢查email是否正確
 * @param {Object} _inputs 通常是來自於this.get_inputs();
 * @param {Object} _data 通常是來自於this.get_data();
 */
Window_register_submit.prototype.validate = function (_inputs, _data) {
    
    if (_inputs === null) {
        _inputs = this.get_inputs();
    }
    if (_data === null) {
        _data = this.get_data();
    }
    
    var _email = _data.email;
        _email = $.trim(_email);
    var _password = _data.password;    
    var _email_input = _inputs.email;
    var _password_input = _inputs.password;
    
    var _error_lang = null;
    
    if (_email === '' && _password === '') {
        _error_lang = new KALS_language_param(
            'Please write E-mail and Password',
            'window.content.error_no_email_password'
        );
        
        KALS_window.ui.check_input(_email_input, true);
        KALS_window.ui.check_input(_password_input, true);
        _email_input.focus();
    }
    else if (_email === '' || $.is_email(_email) === false) {
        _error_lang = new KALS_language_param(
            'Please write E-mail',
            'window.content.error_no_email'
        );
        _email_input.focus();
        KALS_window.ui.check_input(_email_input, true);
    }
    else if (_password === '') {
        _error_lang = new KALS_language_param(
            'Please write Password',
            'window.content.error_no_password'
        );
        _password_input.focus();
        KALS_window.ui.check_input(_password_input, true);
    }
    
    if (_error_lang !== null) {
        this._content.set_error(_error_lang);
        this._unlock_submit();
        return false;
    }
    else {
        return true;
    }
};

/* End of file Window_register_submit */
/* Location: ./system/application/views/web_apps/Window_register_submit.js *//**
 * Profile_navigation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 09:44:04
 * @extends {Navigation_list}
 */
function Profile_navigation(_common_windows) {
    
    Navigation_list.call(this);
    
    this._$nav_items = [
        new Window_profile()
        // 外觀設定的功能暫時不做，等畢業之後有空再進行
        //, new Window_style()    
        , new Window_logout()
        //'Window_profile'
        //, 'Window_logout'
    ];
    
    // 載入來自KALS_navigation的導覽列
    this._init_module_nav_items();
    
    // 載入Common_navigation
    /*
    if ($.isset(_common_windows)) {
        for (var _i in _common_windows) {
            this._$nav_items.push(_common_windows[_i]);
        }
    }
    */
}

Profile_navigation.prototype = new Navigation_list();

Profile_navigation.prototype._$classname = 'profile-navgation';

/**
 * 導覽類型
 * 
 * 類型包括：
 * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
 * - login: 只要有登入就會顯示
 * - profile: 以手動登入的使用者才會顯示
 * - embed: 以內嵌登入的使用者才會顯示
 * - anonymous: 未登入的使用者才會顯示
 * - null: 不列入在目前的導覽列
 * @type String
 */
Profile_navigation.prototype._$nav_type = ["profile", "login", "common"];


/* End of file Profile_navigation */
/* Location: ./system/application/views/web_apps/Profile_navigation.js */
/**
 * Embed_navigation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 09:44:04
 * @extends {Navigation_list}
 */
function Embed_navigation(_common_windows) {

    Navigation_list.call(this);

    this._$nav_items = [
        new Window_profile()
        // 外觀設定的功能暫時不做，等畢業之後有空再進行
        //, new Window_style()
        //'Window_profile'
    ];
    
    // 載入來自KALS_navigation的導覽列
    this._init_module_nav_items();
    
    // 載入Common_navigation
    //if ($.isset(_common_windows)) {
    //    for (var _i in _common_windows) {
    //        this._$nav_items.push(_common_windows[_i]);
    //    }
    //}
}

Embed_navigation.prototype = new Navigation_list();

Embed_navigation.prototype._$classname = 'embed-navigation';

/**
 * 導覽類型
 * 
 * 類型包括：
 * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
 * - profile: 以手動登入的使用者才會顯示
 * - embed: 以內嵌登入的使用者才會顯示
 * - anonymous: 未登入的使用者才會顯示
 * - null: 不列入在目前的導覽列
 * @type String
 */
Embed_navigation.prototype._$nav_type = ["embed", "login", "common"];

/* End of file Embed_navigation */
/* Location: ./system/application/views/web_apps/Embed_navigation.js */
/**
 * Window_profile
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/5 下午 07:51:43
 * @extends {Window_content}
 */
function Window_profile() {
    
    Window_content.call(this);
    
    this._setup_submit(new Window_profile_submit());
}

Window_profile.prototype = new Window_content();

Window_profile.prototype.name = 'Profile';

Window_profile.prototype.heading = new KALS_language_param (
    'Profile',
    'window.profile.heading'
);

Window_profile.prototype.nav_heading = new KALS_language_param (
    'Profile',
    'window.profile.nav_heading'
);

Window_profile.prototype._$load_config = 'Window_profile';

Window_profile.prototype.width = 500;

/**
 * Create UI
 * @memberOf {Window_profile}
 * @type {jQuery} UI
 */
Window_profile.prototype._$create_ui = function () {
    var _ui = KALS_window.ui.panel('window-profile');
    
    var _factory = KALS_window.ui;
    
    //2010.10.8 應該不用多餘的帳號資料標題orz
    /*
    var _heading_row = _factory.heading_row(this.heading);
    _heading_row.appendTo(_ui);
    */
    
    var _email_data = $('<div></div>').append(KALS_context.user.get_email());
    var _email_hint = _factory.tip(new KALS_language_param(
        '(E-mail cannot change.)',
        'window.profile.content.email_cannot_change'
    )).appendTo(_email_data);
    
    var _email_row = _factory.row(
        new KALS_language_param('E-mail', 'window.content.email'),
        _email_data
    ).appendTo(_ui);

    var _name_row = _factory.row(
        new KALS_language_param('Name', 'window.content.name'),
        _factory.input('name', KALS_context.user.get_name())
    ).appendTo(_ui);
    
    var _subpanel = _factory.subpanel('locale_sex').appendTo(_ui);
    
    var _this = this;
    this.set_config_onload(function () {
        var _locale_config = _this.get_config('locale');
        var _locale_options = [];
        for (var _i in _locale_config) {
            var _value = _locale_config[_i];
            var _lang_param = new KALS_language_param(
                _value,
                'window.content.locale.' + _value
            );
            
            var _option = _factory.dropdown_option(_lang_param, _value);
            _locale_options.push(_option);
        }
        var _locale_default_value = KALS_context.user.get_locale();
        var _locale_dropdown = _factory.dropdown('locale', _locale_options, _locale_default_value);
        
        var _locale_row = _factory.row(
            new KALS_language_param('Locale', 'window.content.locale'),
            _locale_dropdown
        ).appendTo(_subpanel);
        
        //2010.11.23 由於修改語系的功能上未完成，所以暫時不給使用者修改語系
        _locale_row.hide();
        
        
        var _sex_config = _this.get_config('sex');
        var _sex_options = [];
        for (_i in _sex_config) {
            _value = _sex_config[_i];
            _lang_param = new KALS_language_param(
                _value,
                'window.content.sex.' + _value
            );
            
            _option = _factory.list_option(_lang_param, _value);
            _sex_options.push(_option);
        }
        var _sex_default_value = KALS_context.user.get_sex();
        var _sex_list = _factory.radio_list('sex', _sex_options, _sex_default_value);
        
        var _sex_row = _factory.row(
            new KALS_language_param('Sex', 'window.content.sex'),
            _sex_list
        ).appendTo(_subpanel);
    });
    
    
    var _password_link_data = $('<div></div>');
    
    /*var _password_link = new Dialog_close_link(
        new KALS_language_param('Open password change window.'
            , 'window.profile.content.password_change.link'),
        function () {
            var _content = new Window_password_change();
            KALS_window.setup_window(_content);
        }
    );
    _password_link.get_ui().appendTo(_password_link_data);
    */
    
	// 建立一個視窗變換連結
    var _password_link = _factory.window_change_link(
        new KALS_language_param('Open password change window.'
            , 'window.profile.content.password_change.link'),
        'Window_password_change'
    ).appendTo(_password_link_data);
    
    var _password_tip = _factory.tip(new KALS_language_param(
        ' (ATTENTION: If you want to chage password, the profile you changed will be lost.)',
        'window.profile.content.password_change.tip'
    )).appendTo(_password_link_data);
    
    var _password_row = _factory.row(
        new KALS_language_param('Password Change', 'window.profile.content.password_change.heading'),
        _password_link_data
    ).appendTo(_ui);
    
    var _check_embed = function (_is_embed) {
        if (_is_embed === true) {
            _password_link_data.hide();
            _password_row.hide();
        }
        else {
            _password_link_data.show();
            _password_row.show();
        }
    };
    
    KALS_context.auth.add_listener(function (_auth, _data) {
        
        var _is_embed = _auth.is_embed();
        _check_embed(_is_embed);
    });
    
    _check_embed(KALS_context.auth.is_embed());
    
    return _ui;
};

/* End of file Window_profile */
/* Location: ./system/application/views/web_apps/Window_profile.js *//**
 * Window_profile_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:46
 * @extends {Window_content_submit}
 */
function Window_profile_submit() {
    
    Window_content_submit.call(this);
    
    this._$input_names = ['name', 'locale', 'sex'];
}

Window_profile_submit.prototype = new Window_content_submit();

Window_profile_submit.prototype.url = 'user_profile/update_profile';

Window_profile_submit.prototype.lang = new KALS_language_param(
    'Save',
    'window.save'
);

Window_profile_submit.prototype.complete_notification = new KALS_language_param(
    'Profile updated.',
    'window.profile.submit.complete'
);

Window_profile_submit.prototype.failed_notification = new KALS_language_param(
    'Profile not updated.',
    'window.profile.submit.failed'
);

Window_profile_submit.prototype.complete_handle = function (_data) {
    
    if (_data === true) {
        var _input_data = this.get_data();
        
        var _user = KALS_context.user;
        _user.set_name(_input_data.name);
        _user.set_sex(_input_data.sex);
        _user.set_locale(_input_data.locale);
    }
    
    return Window_content_submit.prototype.complete_handle.call(this, _data);
};

Window_profile_submit.prototype.validate = function (_inputs, _data) {
    
    //$.test_msg('Window_profile_submit.validate()', _data);
    
    if (_data.name === null || _data.name === '') {
        this.set_error(new KALS_language_param(
            'Please write name.',
            'window.profile.submit.error.name_empty'
        ));
        return false;
    }
    return true;
};


/* End of file Window_profile_submit */
/* Location: ./system/application/views/web_apps/Window_profile_submit.js *//**
 * Window_logout
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 10:56:17
 * @extends {Window_content}
 */
function Window_logout() {
    
    Window_content.call(this);
    
    this._setup_submit(new Window_logout_submit());
	
	/**
	 * 布丁測試用
	 * @author Pulipuli Chen 2013117
	 */
	/*
	var _this = this;
	setTimeout(function() {
		_this.get_ui();
		
		_this.set_field('first', '這是第一個值')
		_this.set_field('test', ['TEST A', 'TEST B 如何？', 'TEST C試試看吧！！']);
		//_this.set_field('repeat', ['重複1', '重複2', '重複3']);
		//_this.set_field('repeat', ['重複4', '重複5', '重複6']);
		//_this.set_field('repeat', ['不重複 啦 7']);
		
		_this.set_field('repeat', {
			'重複1': {
				'foot': 1
			},
			'重複2': {
                'foot': [2, 'a', 'b']
            }
		});
		
		//_this.reset_field('foot');
		
		_this.set_field('color', 'blue');
		//_this.set_field('display', 'none');
	}, 0);
	*/
}

Window_logout.prototype = new Window_content();

Window_logout.prototype.name = 'Logout';

Window_logout.prototype.width = 320;

Window_logout.prototype.heading = new KALS_language_param (
    'Logout',
    'window.logout.heading'
);

Window_logout.prototype.nav_heading = new KALS_language_param (
    'Logout',
    'window.logout.nav_heading'
);

Window_logout.prototype._$view = 'navigation/view/Window_logout';

/*
Window_logout.prototype.action = function (_ele, _params) {
	//alert(121212);
	_ele.css('color', 'red');
};

Window_logout.prototype.action_reset = function (_ele, _params) {
    //alert(121212);
    _ele.css('color', 'green');
};
*/
/*
Window_logout.prototype._$create_ui = function () {
    
    var _ui = KALS_window.ui.panel('window-logout');
    
    var _lang_param = new KALS_language_param(
        'Are you sure?',
        'window.logout.content.confirm'
    );
    
    KALS_context.lang.add_listener(_ui, _lang_param);
    
    return _ui;
};
*/



/* End of file Window_logout */
/* Location: ./system/application/views/web_apps/Window_logout.js *//**
 * Window_logout_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:46
 * @extends {Window_content_submit}
 */
function Window_logout_submit() {
    
    Window_content_submit.call(this);
    
}

Window_logout_submit.prototype = new Window_content_submit();

Window_logout_submit.prototype.lang = new KALS_language_param(
    'Logout',
    'window.logout.submit'
);

Window_logout_submit.prototype.complete_notification = new KALS_language_param(
    'Logout success!',
    'window.logout.submit.complete'
);

Window_logout_submit.prototype.submit = function () {
    if (this._lock_submit() === false) {
        return this;
    }
    
    var _this = this;
    var _auth = KALS_context.auth;
    KALS_window.toggle_loading(true, function () {
        _auth.logout(function (_auth, _data) {
            _this._unlock_submit();
            KALS_util.notify(_this.complete_notification);
            KALS_window.close(function () {
                //_this._unlock_submit();
            });
        });    
    });
};

/* End of file Window_logout_submit */
/* Location: ./system/application/views/web_apps/Window_logout_submit.js *//**
 * Window_password_change
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/8 下午 10:39:13
 * @extends {Window_content}
 */
function Window_password_change() {
    
    Window_content.call(this);
    
    this._setup_submit(new Window_password_change_submit());
    
}

Window_password_change.prototype = new Window_content();

Window_password_change.prototype.url = 'user_profile/change_password';

Window_password_change.prototype.width = 400;

Window_password_change.prototype.name = 'Password_change';

Window_password_change.prototype.heading = new KALS_language_param(
    'Password Chage',
    'window.password_change.heading'
);

Window_password_change.prototype.nav_heading = new KALS_language_param(
    'Password Chage',
    'window.password_change.nav_heading'
);

Window_password_change.prototype.onclose = function () {
    var _content = new Window_profile();
    KALS_window.setup_window(_content);
};

/**
 * Create UI
 * @memberOf {Window_password_change}
 * @type {jQuery} UI
 */
Window_password_change.prototype._$create_ui = function () {
    var _factory = KALS_window.ui;
    var _ui = _factory.panel('window-password-change');
    
    var _password_row = _factory.row(
        new KALS_language_param('Password', 'window.content.password'),
        _factory.password('password')
    ).appendTo(_ui);
    
    var _confirm_row = _factory.row(
        new KALS_language_param('Password Confirm', 'window.password_change.content.password_confirm'),
        _factory.password('password_confirm')
    ).appendTo(_ui);
    
    //KALS_context.overlay.lock_mask();
    
    return _ui;
};

/* End of file Window_password_change */
/* Location: ./system/application/views/web_apps/Window_password_change.js *//**
 * Window_password_change_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/8 下午 10:39:21
 * @extends {Window_content_submit}
 */
function Window_password_change_submit() {
    
    Window_content_submit.call(this);
    
    this._$input_names = ['password', 'password_confirm'];
    
}

Window_password_change_submit.prototype = new Window_content_submit();

Window_password_change_submit.prototype.complete_notification = new KALS_language_param(
    'Password changed.',
    'window.password_change.submit.complete'
);

Window_password_change_submit.prototype.failed_notification = new KALS_language_param(
    'Password not changed.',
    'window.password_change.submit.failed'
);

Window_password_change_submit.prototype.lang = new KALS_language_param(
    'Save',
    'window.save'
);

Window_password_change_submit.prototype.url = 'user_profile/change_password';

Window_password_change_submit.prototype.validate = function (_inputs, _data) {
    
    //$.test_msg('Window_password_change_submit.validate() _data', _data);
    
    if (_data.password === '') {
        this.set_error(new KALS_language_param(
            'Please write password.',
            'window.password_change.submit.error.password_emtpy'
        ));
        _inputs.password.focus();
        return false;
    }
    else if (_data.password_confirm === '') {
        this.set_error(new KALS_language_param(
            'Please write password confirm.',
            'window.password_change.submit.error.password_confirm_empty'
        ));
        _inputs.password_confirm.focus();
        return false;
    }
    else if (_data.password != _data.password_confirm) {
        _inputs.password_confirm.val('');
        _inputs.password.select();
        
        this.set_error(new KALS_language_param(
            'Password not match.',
            'window.password_change.submit.error.password_not_match'
        ));
        return false;
    }
    else {
        return true;
    }
};

/* End of file Window_password_change_submit */
/* Location: ./system/application/views/web_apps/Window_password_change_submit.js *//**
 * Common_navigation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/16 下午 08:16:44
 * @extends {Navigation_list}
 */
function Common_navigation() {
    
    Navigation_list.call(this);
    
    // @20130603 Pudding Chen
    // Isolation Mode
    if (KALS_context.policy.allow_show_navigation()) {

        this._$nav_items = [];
        
        //if (KALS_CONFIG.modules.Window_filter.enable === true) {
        //    this._$nav_items.push(new Window_filter());
        //}
        
        //if (KALS_CONFIG.modules.Window_map.enable === true) {
        //    this._$nav_items.push(new Window_map());
        //}
        
        //var _search = new Window_search();
        
        if (KALS_CONFIG.modules.Window_search.enable === true) {
            var _search_recent = new Window_search();
            _search_recent.setup_recent();
            this._$nav_items.push(_search_recent);
        }
        
        /*
        if (KALS_CONFIG.modules.Reading_guide.enable === true) {
            var _guide_nav = new Navigation_item("導讀");
            _guide_nav.set_callback(function () {
                //KALS_text.guide.open_whole_annotations_by_sentence();
                KALS_text.guide.open();
            });
            this._$nav_items.push(_guide_nav);
        }
        */
       
        /*
        this._$nav_items = [
            new Window_filter()
            , new Window_map()
            , _search_recent
            
            //, new Dashboard()
            
            //, _guide_nav
            //, new Reading_guide()
            //, KALS_text.guide
            //_search
            
            //, new Annotation_navigation_map()
        ];
        */
        this._init_module_nav_items();
    }
}

Common_navigation.prototype = new Navigation_list();

Common_navigation.prototype._$classname = 'common-navigation';

/**
 * 導覽類型
 * 
 * 類型包括：
 * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
 * - login: 已經登入的使用者就會顯示
 * - profile: 以手動登入的使用者才會顯示
 * - embed: 以內嵌登入的使用者才會顯示
 * - anonymous: 未登入的使用者才會顯示
 * - null: 不列入在目前的導覽列
 * @type String
 */
Common_navigation.prototype._$nav_type = "common";

Common_navigation.prototype._$create_ui = function () {
    
};

/* End of file Common_navigation */
/* Location: ./system/application/views/web_apps/Common_navigation.js */
/**
 * Window_filter
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 10:56:17
 * @extends {Window_content}
 */
function Window_filter() {
    
    Window_content.call(this);
    
    this._setup_submit(new Window_filter_submit());
    
}

Window_filter.prototype = new Window_content();

Window_filter.prototype.name = 'Filter';

Window_filter.prototype.width = 220;

Window_filter.prototype.heading = new KALS_language_param (
    'Annotation Filter',
    'window.filter.heading'
);

Window_filter.prototype.nav_heading = new KALS_language_param (
    'Annotation Filter',
    'window.filter.nav_heading'
);

Window_filter.prototype._$create_ui = function () {
    
    var _factory = KALS_window.ui;
    
    var _ui = _factory.panel('window-filter');
        
    var _my_div = $('<div></div>')
        .addClass('my-div')
        .appendTo(_ui);
    
    var _my_input = $('<label><input type="checkbox" name="filter" value="my" checked="true" /> <span></span></label>')
        .appendTo(_my_div);
    
    var _my_label = _my_input.find('span')
        .addClass('kals-word my_importance');
    var _my_lang = new KALS_language_param(
        'My annotations',
        'window.filter.content.option.my'
    ); 
    KALS_context.lang.add_listener(_my_label, _my_lang);
    
    // ---------
    
    //設定勾選my_input時，就勾選底下全部選項，或是取消全部選項
    var _my_checkbox = _my_input.find('input');
    
    // ---------
    
    var _my_type_div = $('<table><tbody></tbody></table>')
        .addClass('my-type-div')
        .appendTo(_my_div);
        
    // 2010.11.16 因為指定type顯示的功能很麻煩，所以先不作
    _my_type_div.hide();
    
    var _types = Annotation_type_param._type_mapping;
    var _type_lang_header = Type_menu.prototype._type_lang_header;
    
    var _type_inputs = [];
    for (var _i in _types) {
        var _type = _types[_i];
        
        var _type_input = $('<td><label><input type="checkbox" name="filter" value="my_'+_type+'" checked="true" /> <span></span></label></td>');
        _type_inputs.push(_type_input);
            
        var _type_label = _type_input.find('span')
            .addClass('my_' + _type + ' kals-word');
        
        var _type_lang = new KALS_language_param(
            _type,
            _type_lang_header + _type
        );
        
        KALS_context.lang.add_listener(_type_label, _type_lang);
        
        var _type_checkbox = _type_input.find('input');
        _type_checkbox.change(function () {
            var _inputs = _my_type_div.find('input');
            var _state = null;
            for (var _i = 0; _i < _inputs.length; _i++) {
                var _checked = _inputs.eq(_i).attr('checked');
                if (_state === null) {
                    _state = _checked;
                }
                else if (_state !== _checked) {
                    _state = 'half';
                    break;
                }
            }
            
            if (_state !== 'half') {
                _my_checkbox.attr('checked', _state);
            }
            else {
                _my_checkbox.attr('checked', false);
                _my_checkbox.attr('disabled', true);
            }
        });
    }
    
    var _tr;
    for (_i in _type_inputs) {
        if (_i % 2 === 0) {
            _tr = $('<tr></tr>')
                .appendTo(_my_type_div);
        }
        
        _type_input = _type_inputs[_i];
        _type_input.appendTo(_tr);
        
        if (_i === _type_inputs && _i % 2 === 0) {
            _type_input.attr('colspan', 2);
        }
    }
    
    // ---------
    
    //勾選全部
    _my_checkbox.change(function () {
        var _checked = this.checked;
        
        var _inputs =  _my_type_div.find('input');
        _inputs.attr('checked', _checked);
    });
    /*
    _my_input.click(function (_event) {
        var _disabled = _my_checkbox.attr('disabled');
        
        if (_disabled === true) {
            _event.preventDefault();
            
            _my_checkbox.attr('disabled', false)
                .attr('checked', true)
                .change();
        }
    });
    */
    
    //如果登出狀態，則隱藏
    KALS_context.auth.add_listener(function (_auth) {
        var _inputs = _my_div.find('input');
        if (_auth.is_login()) {
			_inputs.attr('disabled', false);
		}
		else {
			_inputs.attr('disabled', true);
		}
    }, true);
    
    // ---------
    
    //設定登入跟權限檢查
    
    var _nav_div = $('<div></div>')
        .addClass('nav-div')
        .appendTo(_ui);
    
    var _nav_input = $('<label><input type="checkbox" name="filter" value="nav" checked="true" /> <span></span></label>')
        .appendTo(_nav_div);
    
    var _nav_label = _nav_input.find('span')
        .addClass('kals-word nav_great');
    
    var _nav_lang = new KALS_language_param(
        'Recommend annotations',
        'window.filter.content.option.navigation'
    ); 
    KALS_context.lang.add_listener(_nav_label, _nav_lang);
    
    KALS_context.policy.add_attr_listener('show_navigation', function (_policy) {
        var _input = _nav_div.find('input');
        if (_policy.allow_show_navigation()) {
			_input.attr('disabled', false);
		}
		else {
			_input.attr('disabled', true);
		}
    });
    
    return _ui;
};


/**
 * 導覽列相關的設定
 * @type JSON
 */
Window_filter.prototype.nav_config = {
    /**
     * 顯示資料 
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/* End of file Window_filter */
/* Location: ./system/application/views/web_apps/Window_filter.js */
/**
 * Window_filter_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:46
 * @extends {Window_content_submit}
 */
function Window_filter_submit() {
    
    Window_content_submit.call(this);
    
}

Window_filter_submit.prototype = new Window_content_submit();

Window_filter_submit.prototype.lang = new KALS_language_param(
    'OK',
    'window.ok'
);

Window_filter_submit.prototype.submit = function () {
    var _data = this.get_data();
    
    var _style_name = 'filter';
    var _style_manager = KALS_context.style;
    
    
    
    if ($.isset(_data)) {
        _style_manager.clear_style(_style_name);
        var _url = 'custom';
        
        var _config = [];
        if (typeof(_data.my) == 'object' && _data.my.length > 0) {
            var _my_style = {
                //'background_color': 'transparent'
                'border-bottom-style': 'none'
                //'border-bottom-color': 'inherit'
            };
            _style_manager.add_style(_style_name, _data.my, _my_style);
            
            var _select_selector = '.kals-paragraph .select';
            var _select_style = {
                'border-bottom': '3px solid blue !important'
            };
            _style_manager.add_style(_style_name, _select_selector, _select_style);
            
            var _recommended_selector = '.kals-paragraph .recommended';
            var _recommended_style = {
                'border-bottom': '3px solid green !important'
            };
            _style_manager.add_style(_style_name, _recommended_selector, _recommended_style);
            
            /*
            _config.push({
                selector: _data.my,
                rule: _my_style
            });
            */
        }
        if (typeof(_data.nav) == 'object') {
            var _nav_style = {
                'color': 'inherit'
                //'text_decoration': 'none'
            };
            _style_manager.add_style(_style_name, _data.nav, _nav_style);
            /*
            _config.push({
                selector: _data.nav,
                rule: _nav_style
            });
            */
        }
        
        //_style_manager.load_style(_style_name, _url, _config);
        
    }
    else {
        _style_manager.remove_style(_style_name);
        //_style_manager.unload_style(_style_name);
    }
    
    KALS_window.close();
};

Window_filter_submit.prototype.get_data = function () {
    var _data = {};
    var _has_data = false;
    var _content_ui = this._content.get_ui();
    
    var _is_login = KALS_context.auth.is_login();
    var _word_classname = '.kals-paragraph .kals-word';
    //如果有登入，才需要取得my資料
    if (_is_login === true) {
        var _my = [];
        var _inputs = _content_ui.find('.my-type-div input');
        //$.test_msg('Window_filter_submit.get_data() my', _inputs.length);
        for (var _i = 0; _i < _inputs.length; _i++) {
            var _input = _inputs.eq(_i);
            if (_input.attr('checked') === true) {
				continue;
			}
            
            var _classname = _input.attr('value');
            _my.push(_word_classname + '.' + _classname);
        }
        
        if (_my.length > 0) {
            _data.my = _my;
            _has_data = true;
        }
    }
    
    //如果有show navigation，才需要取得nav資料
    var _allow_show_navigation = KALS_context.policy.allow_show_navigation();
    if (_allow_show_navigation) {
        
        var _nav_input = _content_ui.find('.nav-div input');
        var _nav_checked = _nav_input.attr('checked');
        if (_nav_checked === false) {
            var _nav = [];
            _nav.push(_word_classname + '.nav_bad');
            _nav.push(_word_classname + '.nav_normal');
            _nav.push(_word_classname + '.nav_good');
            _nav.push(_word_classname + '.nav_great');
            _data.nav = _nav;
            _has_data = true;
        }
    }
    
    if (_has_data === true) {
		return _data;
	}
	else {
		return null;
	}
};

/* End of file Window_filter_submit */
/* Location: ./system/application/views/web_apps/Window_filter_submit.js */
/**
 * Window_filter
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 10:56:17
 * @extends {Window_content}
 */

function Window_map() {
    
    Dialog_modal.call(this);
    
	//var _this = this;
	//setTimeout(function () {
	//	_this.open();
	//	$.test_msg("Open MAP!!");
	//}, 1000);
    //this._setup_submit(new Window_filter_submit());
	
}


//Window_map.prototype = new Window_content();
// 先繼承Overlay_modal
Window_map.prototype = new Dialog_modal();

// 多重繼承自Window_content
var _windows_content_prototype = new Window_content();
for (var _i in _windows_content_prototype) {
	Window_map.prototype[_i] = _windows_content_prototype[_i];
}
	
Window_map.prototype.name = 'Map';

Window_map.prototype.width = 220;

Window_map.prototype.heading = new KALS_language_param (
    'Annotation Map',
    'window.map.heading'
);

Window_map.prototype.nav_heading = new KALS_language_param (
    'Annotation Map',
    'window.map.nav_heading'
);

/**
 * 獨立視窗
 * 
 * 如果是false，則會依附在KALS_window底下
 * 如果是true，則會直接open
 */
Window_map.prototype._$absolute = true;

Window_map.prototype._$create_ui = function () {
    
    var _factory = KALS_window.ui;
	
    var _ui = this._$create_ui_prototype();
	_ui.addClass("overlay-map");
        _ui.append(_factory.panel('window-map'));

	
	_ui.addClass('dialog-modal')
		.addClass('KALS').addClass('window')
        .html('<table align="center" class="dialog-table" height="100%" width="100%" cellpadding="0" cellspacing="0" border="0"><tbody>'
        + '<tr class="dialog-toolbar-tr"><th class="dialog-toolbar" valign="middle">'
            + '<table class="dialog-toolbar-table" width="100%" align="center" cellpadding="0" cellspacing="0" border="0"><tbody><tr>'
            + '<td class="toolbar-options toolbar-backward"></td>'
            + '<td class="dialog-heading"></td>'
            + '<td class="toolbar-options toolbar-forward"></td>'
            + '</tr></tbody></table>'
        + '</th></tr>' 
        + '<tr class="dialog-content-tr"><td class="dialog-content-td">'
            + '<div class="dialog-content"></div></td></tr>'
        + '</tbody></table>');
	
	//_ui.css('font-size', '20pt');
	

        
    var _map = $('<div></div>')
        .addClass('content')
        .appendTo(_ui);

	_map.hover(function () {
		_map.toggleClass('focus');
	}, function () {
		_map.toggleClass('focus');
	});

	var _map_ol = $("<ul class='KALS H1'></ul>");
	
	
	
	// 4. 把<ol>列表貼到div中
	_map_ol.prependTo(_map);
	var _last_level = "H1";
	var _last_level_number = 1;
	
	var _count = 0;
	
	//建立文章和小地圖中header位置所存放的array
	var _header_array = [];
	var _map_array = [];
	
	
	// 5. 為所有找到的h1，建立<li>，貼到ol中 (迴圈)
	var _search_scope = KALS_text.get_selector().find("h1,h2,h3");
	_search_scope.each(function (_key, _ele) {
		
		
		//將找到的header加上id
		$(_ele).attr("id", "map-header"+ _count);
                
                var _header = $(_ele);
		_header.find(".kals-word:first").attr("id", "map-header"+ _count+"-anchor");
                var _level = _header.attr("tagName"); 
		var _level_number = parseInt(_level.substr(1), 10);
		
		if (_count === 0) {
			_last_level = _level;
			_last_level_number = _level_number;
		}
		
		var _li = $("<li class=" +_level+ " ></li>");

		//var _li = $("<li class='" +_level+ "' id=header"+count+"    ></li>");
		var _header_text = _header.text();
		_li.html("<a href='#map-header"+ _count +"-anchor' class='map-catalog'>"+ _header_text + "</a><ul></ul>");
                
                _li.find("a.map-catalog:first").click(function () {
					var _this = $(this);
                    var _href = _this.attr("href");
                    //$.test_msg("map-heaer", [$(_id).length, _id]);
					
                    //var _offset = $(_href).offset();
                    var _offset = $.get_offset(_offset);
                    if (_offset.top > 60) {
                        setTimeout(function () {
                            $(window).scrollTop(_offset.top - 60);
                        }, 0);
                    }
	                
					//記錄資料
					var _action = "29";	//29=小地圖點選章節標題，note={index:1, title:"標題內文"}
					
					var _title = _this.text();
					var _id = $.str_replace("#map-header", "", _href);
					_id = $.str_replace("-anchor", "", _id);
					_id = parseInt(_id, 10);
					
					var _note = {
						"index": _id,
						"title": _title 
					};
					
					KALS_util.log(_action, _note);
                });
		
		//_header_array[_count] = _header.offset().top;		
                _header_array[_count] = $.get_offset_top(_header);
		
		
		//判斷上一個_level是否相同
		if (_count === 0) {
			_li.addClass("map-header");
			_li.appendTo(_map_ol);
			
			//_map_array[_count] = _li.offset().top;
                        _map_array[_count] = $.get_offset_top(_li);
		}
		else if (_level !== _last_level && _last_level_number < _level_number) {
			_li.addClass("map-header");
			
			var _last_li = _map_ol.find("li."+_last_level+":last");
			var _last_li_ul = _last_li.children("ul:last");
			if (_last_li_ul.length === 0) {
				_last_li_ul = $("<ul></ul>").appendTo(_last_li);
			}
			_li.appendTo(_last_li_ul);
			
			//_map_array[_count] = _li.offset().top;
                        _map_array[_count] = $.get_offset_top(_li);
		}
		else if (_level !== _last_level && _last_level_number > _level_number) {
			_li.addClass("map-header");
			
			_last_li = _map_ol.find("li."+_level+":last");
			_li.insertAfter(_last_li);
			
			//_map_array[_count] = _li.offset().top;
                        _map_array[_count] = $.get_offset_top(_li);
		}
		else if (_level !== "H1" && _level === _last_level) {
			_last_li = _map_ol.find("li."+_level+":last");
			_li.addClass("map-header");
			_li.insertAfter(_last_li);
			
			//_map_array[_count] = _li.offset().top;
			_map_array[_count] = $.get_offset_top(_li);
		}
		else {
			_li.addClass("map-header");
			_li.appendTo(_map_ol);
			
			//_map_array[_count] = _li.offset().top;
                        _map_array[_count] = $.get_offset_top(_li);
		}
		
		_last_level_number = _level_number;
		_last_level = _level;
		
		
		_count++;
		
	});
	
	//$.test_msg("header_array", _header_array);
	//$.test_msg("_map_array", _map_array);
	
	
	//依所瀏覽位置highlight小地圖中的標題
	var _scroll_event = function() {
		var _offset = $( window ).scrollTop();
		
		_count = 0;
		var _first_top = null;
		
		_map.find('.map-header').each(function (_key, _ele) {
			
			if (_count === 0) {
                            //_first_top = $(_ele).offset().top;
                            _first_top = $.get_offset_top($(_ele));
			}
			
			if( _offset >= _header_array[_count]-10 
				&& ( (_header_array.length === _count+1) || (_offset < _header_array[_count+1]-10) ) ){
				
				$(_ele).addClass("highlight");
				
				//_highlight = $("#header"+count+"").position().top;
				
				
				var _div = _map;
				//.parents(".dialog-content:first");
				//var _top = $(_ele).offset().top;
                                var _top = $.get_offset_top($(_ele));
				_top = _top - _first_top;
				
				if (_map.hasClass('focus') === false) {
					_div.scrollTop( _top );
				}
				//$.test_msg('scroll map', _top);
				
				//alert("count="+count+"   _highlight="+_highlight);
			}
			
			else {
				$(_ele).removeClass("highlight");
			}

			_count++;
		});
	
	};
	
	$(window).scroll(_scroll_event);
	_scroll_event();

	//$("<div>121212112121</div>").appendTo(_ui);
	
	_ui.appendTo("body");
    var _config = this._$get_config();
    _ui.overlay(_config);	//jQuery TOOL Overlay
	
	var _this = this;
	setTimeout(function () {
		
		var _close_option = new Dialog_close_option();
	    _this.set_forward_option(_close_option);
	}, 0);
	
	//設定可拖曳
    var _draggable_config = {
        handle: 'div.annotation-tool-header'	//TODO 請調整handle
        
    };
    
	//設定游標變成手指
	$('.dialog-heading').css( 'cursor', 'pointer' );
	
    if ($('body').height() > _ui.height() + 100) {
        _draggable_config.containment = 'parent';
    }
    
    _ui.draggable(_draggable_config);
	
    return _ui;
};



/**
 * 開啟視窗
 * 
 * 加入一些設定，才能順利開啟視窗
 * @param {function} _callback
 */
Window_map.prototype.open = function (_callback) {
	
	// 加入open()之前需要的設定
	// 參考KALS_util.confirm()

    var _modal = this;
    /**
     * 用來擺放回呼函數使用
     * @type {function}
     */
    _modal.confirm_callback = null;

    
    var _id = 'Confirm_' + $.create_id();
    this.set_modal_name(_id);
	var _ui = this.get_ui();
    _ui.attr('id', _id);

    _modal.set_heading(this.heading);
    //_modal.set_content("asasa");
    
    if ($.is_function(_callback)) {
		_modal.confirm_callback = _callback;
	}
	else {
		_modal.confirm_callback = null;
	}
        
    //_modal.open();
	
	// 用原來的方式執行open
	//$.test_msg("Window_map.open()", this.is_opened());
	return Dialog_modal.prototype.open.call(this, _callback);
};

/**
 * @type {object}
 */
Window_map.prototype._$get_config = function () {
    
	var _config = Dialog_modal.prototype._$get_config.call(this);
	
	// http://jquerytools.org/documentation/overlay/
	_config.top = "10px";
	_config.left = ($(window).width() - 350) + "px";
        
        
        
	
    return _config; 
};


/**
 * 導覽列相關的設定
 * @type JSON
 */
Window_map.prototype.nav_config = {
    /**
     * 顯示資料 
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/* End of file Window_filter */
/* Location: ./system/application/views/web_apps/Window_filter.js *//**
 * Toolbar_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/14 下午 07:22:35
 * @extends {KALS_user_interface}
 */
function Toolbar_component() {
    
    KALS_user_interface.call(this);

}

Toolbar_component.prototype = new KALS_user_interface();

Toolbar_component.prototype._$create_ui = function () {
    
    var _ui = $('<table width="100%" cellspacing="0" cellpadding="0" class="toolbar-component">'
        + '<tbody><tr>'
        + '<td class="toolbar-left" valign="middle">'+'&nbsp;'+'</td>'
        + '<td class="toolbar-center" valign="middle">'+'&nbsp;'+'</td>'
        + '<td class="toolbar-right" valign="middle">'+'&nbsp;'+'</td>'
        + '</tr></tbody></table>');
    
    return _ui;
};


/**
 * 把UI塞到左邊的框框去
 * @param {array} _ui_list
 */
Toolbar_component.prototype.setup_left = function (_ui_list) {
    return this._setup_component('toolbar-left', _ui_list);
};

/**
 * 把UI塞到中間的框框去
 * @param {array} _ui_list
 */
Toolbar_component.prototype.setup_center = function (_ui_list) {
    return this._setup_component('toolbar-center', _ui_list);
};

/**
 * 把UI塞到右邊的框框去
 * @param {array} _ui_list
 */
Toolbar_component.prototype.setup_right = function (_ui_list) {
    return this._setup_component('toolbar-right', _ui_list);
};

/**
 * 把UI塞到_container裡面去
 * @param {string} _container_class_name
 * @param {array} _ui_list
 */
Toolbar_component.prototype._setup_component = function (_component_class_name, _ui_list) {
    
    if ($.is_array(_ui_list) === false) {
		_ui_list = [_ui_list];
	}
    
    var _ui = this.get_ui();
    
    var _component = _ui.find('.' + _component_class_name + ':first');
    
    _component.empty();
    
    for (var _i in _ui_list) {
        _component.append(_ui_list[_i]);
    }
    
    return this;
};

Toolbar_component.prototype.toggle_left = function (_display) {
    return this._toggle_component('toolbar-left', _display);
};

Toolbar_component.prototype.toggle_center = function (_display) {
    return this._toggle_component('toolbar-center', _display);
};

Toolbar_component.prototype.toggle_right = function (_display) {
    return this._toggle_component('toolbar-right', _display);
};

Toolbar_component.prototype._toggle_component = function (_component_class_name, _display) {
    
    var _ui = this.get_ui();
    var _component = _ui.find('.' + _component_class_name + ':first');
    
    if (_display === null) {
		_component.toggle();
	}
	else 
		if (_display === true) {
			_component.show();
		}
		else {
			_component.hide();
		}
        
    return this;
};

Toolbar_component.prototype.get_left = function () {
    return this._get_component('toolbar-left');
};

Toolbar_component.prototype.get_left = function () {
    return this._get_component('toolbar-center');
};

Toolbar_component.prototype.get_right = function () {
    return this._get_component('toolbar-right');
};

Toolbar_component.prototype._get_component = function (_component_class_name) {
    var _component = this.get_ui('.' + _component_class_name + ':first');
    
    return _component;
};

/* End of file Toolbar_component */
/* Location: ./system/application/views/web_apps/Toolbar_component.js *//**
 * Toolbar_toggle_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/14 下午 07:22:53
 * @extends {KALS_user_interface}
 */
function Toolbar_toggle_component() {
    
    KALS_user_interface.call(this);

}

Toolbar_toggle_component.prototype = new KALS_user_interface();

Toolbar_toggle_component.prototype._$create_ui = function () {
    
    var _ui = $('<div class="toolbar-toggle"></div>');
    
    var _button = $('<button type="button"  class="toolbar-toggle-button"> : : : : </button>')
        .appendTo(_ui);
    
    var _this = this;
    _button.click(function () {
        KALS_toolbar.toggle_toolbar();
    });
    
    return _ui;  
};

Toolbar_toggle_component.prototype.hide = function (_instant) {
    
    var _ui = this.get_ui();
    _ui.addClass('hidden');
    
    if (_instant === true) {
        _ui.hide();
    }
    else {
        //_ui.slideUp();
        _ui.fadeOut();
    }
    
    return this;
};

Toolbar_toggle_component.prototype.show = function (_instant) {
    
    var _ui = this.get_ui();
    _ui.removeClass('hidden');
    
    if (_instant === true) {
        _ui.show();
    }
    else {
        //_ui.slideDown();
        _ui.fadeIn();
    }
    
    return this;
};

Toolbar_toggle_component.prototype.is_show = function () {
    var _ui = this.get_ui();
    
    return !_ui.hasClass('hidden');
};

/* End of file Toolbar_toggle_component */
/* Location: ./system/application/views/web_apps/Toolbar_toggle_component.js *//**
 * Toolbar_padding_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/4 下午 09:22:02
 * @extends {KALS_user_interface}
 */
function Toolbar_padding_component() {
    
    KALS_user_interface.call(this);
    
}

// Extend from KALS_user_interface
Toolbar_padding_component.prototype = new KALS_user_interface();

/**
 * Create UI
 * @memberOf {Toolbar_padding_component}
 * @type {jQuery} UI
 */
Toolbar_padding_component.prototype._$create_ui = function () {
    var _ui = $('<div class="toolbar-padding"></div>')
            .css("height", 0);
    return _ui;
};

/* End of file Toolbar_padding_component */
/* Location: ./system/application/views/web_apps/Toolbar_padding_component.js *//**
 * Logo_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license	   http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/16 上午 10:57:25
 * @extends {KALS_user_interface}
 */
function Logo_component() {
    
    KALS_user_interface.call(this);

}

Logo_component.prototype = new KALS_user_interface();

Logo_component.prototype._$create_ui = function () {
    
    var _ui = $('<div class="logo-component">' + KALS_CONFIG.logo + '</div>');
    
    return _ui;
};

/* End of file Logo_component */
/* Location: ./system/application/views/web_apps/Logo_component.js *//**
 * Loading_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/16 上午 10:57:33
 * @extends {KALS_user_interface}
 */
function Loading_component() {
    
    KALS_user_interface.call(this);
}

Loading_component.prototype = new KALS_user_interface();

/**
 * 建立讀取中的清單
 * @returns {jQuery}
 */
Loading_component.prototype._$create_ui = function () {
    
    var _ui = $('<div class="loading-component">'
        + '<span class="progress"></span>'
        + '<span class="message"></span>'
        + '<span class="image"></span>'
        + '</div>');
    
    //加入計算Percent數量
    var _progress_ui = _ui.find(".progress");
    setTimeout(function () {
        KALS_context.progress.add_listener(function (_progress) {
            var _percent = _progress.get_percent(true);
            _progress_ui.html(_percent);
        });
    }, 5000);
        
    
    var _message = _ui.find('.message');
    KALS_context.lang.add_listener(_message, new KALS_language_param('LOADING...',
        'toolbar.loading_message'));
    
    _ui.find('.image').append(KALS_context.get_image_url('ajax-loader.gif'));
    //$.test_msg('loading component');
    
    
    return _ui;
    
};

/* End of file Loading_component */
/* Location: ./system/application/views/web_apps/Loading_component.js *//**
 * Avatar_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 09:42:52
 * @memberOf {Avatar_component}
 * @extends {KALS_user_interface}
 * @constructor
 */
function Avatar_component(_common_windows) {
    
    KALS_user_interface.call(this);
    
    this.child('notification', new Notification_component());
    this.child('profile', new Profile_navigation(_common_windows));
    this.child('embed', new Embed_navigation(_common_windows));
}

// Extend from KALS_user_interface
Avatar_component.prototype = new KALS_user_interface();

/**
 * Create UI
 * @memberOf {Avatar_component}
 * @type {jQuery} UI
 */
Avatar_component.prototype._$create_ui = function () {
    var _ui = $('<table align="right"><tbody><tr>'
            + '<td class="photo"></td>'
            + '<td class="name"></td>'
            + '<td class="notification"></td>'
            + '<td class="navigation profile"></td>'
            + '<td class="navigation embed"></td>'
            + '</tr></tbody></table>')
        .addClass('avatar-component');
    
    var _notification = this.notification.get_ui();
        _ui.find('td.notification:first').append(_notification);
        
        //2010.11.23 因為通知還沒完成，所以先關掉 
        _notification.hide();
    
    var _profile_nav = this.profile.get_ui();
        _ui.find('td.profile.navigation:first').append(_profile_nav);
    
    var _embed_nav = this.embed.get_ui();
        _ui.find('td.embed.navigation:first').append(_embed_nav)
            .hide();    // Embed_navigation預設是隱藏的
    
    var _this = this;
    KALS_context.user.add_attr_listener('has_photo', function (_user, _has_photo) {
        var _url = null;
        if (_has_photo === true) {
            _url = 'user_profile/photo/';    //controller應該會根據登入的使用者給予預設的id
        }
        _this.set_photo(_url);
    }, false);
    
    KALS_context.user.add_attr_listener('name', function(_user, _name) {
        _this.set_name(_name);
    }, false);
    
    
    KALS_context.auth.add_listener(function (_auth, _data) {
        
        var _is_embed = _auth.is_embed();
        if (_is_embed === true) {
			_this.toggle_navigation('embed');
		}
		else {
			_this.toggle_navigation('profile');
		}
    });
    
    return _ui;
};

/**
 * @memberOf {Avatar_component}
 * @type {Notification_component}
 */
Avatar_component.prototype.notification = null;

/**
 * @type {Profile_navigation}
 */
Avatar_component.prototype.profile = null;

/**
 * @type {Embed_navigation}
 */
Avatar_component.prototype.embed = null;

/**
 * 設置Avatar元件的照片。注意_url本身不需要加上base_url
 * @param {null|string} _url 如果_url === null，則隱藏photo
 */
Avatar_component.prototype.set_photo = function (_url) {
    
    if (_url === null) {
		this.toggle_photo(false);
		return this;
	}
	else {
		this.toggle_photo(true);
	}
    
    var _full_url = KALS_context.get_base_url(_url);
    var _ui = this.get_ui();
    var _photo_td = _ui.find('td.photo:first');
    var _photo_img = _photo_td.find('img:first');
    if (_photo_img.length === 0) {
		_photo_img = $('<img />').appendTo(_photo_td);
	}
    _photo_img.attr('src', _full_url);
    
    return this;
};

Avatar_component.prototype.toggle_photo = function (_display) {
    
    var _ui = this.get_ui();
    var _photo_td = _ui.find('td.photo:first');
    var _photo_hide_classname = 'hide';
    if (_display === null) {
		_display = _photo_td.hasClass(_photo_hide_classname);
	}
    
    if (_display) {
		_photo_td.addClass(_photo_hide_classname);
	}
	else {
		_photo_td.removeClass(_photo_hide_classname);
		_photo_td.find('img').remove();
	}
    return this;
};

Avatar_component.prototype.set_name = function (_name) {
    var _name_td = this.get_ui('td.name:first');
    
    if (_name === null) {
		_name_td.empty();
	}
	else {
		_name_td.html(_name);
	}
};

Avatar_component.prototype.toggle_navigation = function (_classname) {
    
    if ($.is_null(_classname)) {
		return this;
	}
    
    var _ui = this.get_ui();
    
    _ui.find('td.navigation').hide();
    _ui.find('td.navigation.' + _classname).show();
    
    return this;
};

/* End of file Avatar_component */
/* Location: ./system/application/views/web_apps/Avatar_component.js *//**
 * Notification_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 09:43:35
 * @extends {KALS_user_interface}
 */
function Notification_component() {
    
    KALS_user_interface.call(this);
    
    var _this = this;
    KALS_context.auth.add_listener(function (_auth, _data) {
        //如果有登入，則開始設置檢查
        _this._set_interval_check(_data.logined);
    });
}

// Extend from KALS_user_interface
Notification_component.prototype = new KALS_user_interface();

/**
 * Create UI
 * @memberOf {Notification_component}
 * @type {jQuery} UI
 */
Notification_component.prototype._$create_ui = function () {
    var _ui = $('<div><div class="unread"></div></div>')
        .addClass('notification-component');
    
    return _ui;
};

Notification_component.prototype.get_unread = function () {
    
    var _unread = this.get_ui('.unread:first').html();
    
    if (_unread === '') {
		_unread = 0;
	}
	else {
		_unread = parseInt(_unread, 10);
	}
    return _unread;
};

/**
 * 設定未讀的數量
 * @param {number|null} _unread 在null的情況下，會移除has-unread的classname
 */
Notification_component.prototype.set_unread = function (_unread) {
    
    if (_unread === null) {
        _unread = 0;
    }
    
    var _unread_div = this.get_ui('.unread:first');
    
    var _has_unread_classname = 'has-unread';
    if (_unread === 0) {
        this.add_class(_has_unread_classname);
        _unread_div.empty();
    }
    else {
        this.add_class(_has_unread_classname);
        _unread_div(_unread);
    }
    
    return this;
};

Notification_component.prototype.reset_unread = function () {
    return this.set_unread();
};

Notification_component.prototype.has_unread = function () {
    return (this.get_unread() !== 0);
};

/**
 * 減少unread的數量
 * @param {number|null} _reduce = 1
 */
Notification_component.prototype.reduce_unread = function (_reduce) {
    
    if (_reduce === null) {
		_reduce = 1;
	}
        
    var _unread = this.get_unread();
    if (_reduce > _unread) {
		_unread = 0;
	}
	else {
		_unread = _unread - _reduce;
	}
    
    return this.set_unread(_unread);
};

Notification_component.prototype.toggle_hover = function (_is_hover) {
    
    var _ui = this.get_ui();
    
    var _hover_classname = 'hover';
    if (_is_hover === null) {
		_ui.toggleClass(_hover_classname);
	}
	else 
		if (_is_hover) {
			_ui.addClass(_hover_classname);
		}
		else {
			_ui.removeClass(_hover_classname);
		}
    
};

// --------
// 自動確認的相關設定
// --------

/**
 * 設定是否開始進行間隔確認
 * @param {boolean} _excute = true 執行或停止
 */
Notification_component.prototype._set_interval_check = function (_excute) {
    
    if (_excute === null) {
        _excute = true;
    }
    
    if (_excute === true) {
        var _this = this;
        this._interval_checker = setInterval(function () {
            
            _this.load_unread();
            
        }, this._interval_time);
        this.load_unread();
    }
    else {
        clearInterval(this._interval_checker);
        this._interval_checker = null;
    }
    return this;
};

/**
 * 間隔確認的記錄物件
 */
Notification_component.prototype._interval_checker = null;

/**
 * 間隔確認的時間，預設是5分鐘
 * @type {number}
 */
Notification_component.prototype._interval_time = 1000 * 60 * 5;

// --------
// 讀取未讀資料
// --------

Notification_component.prototype._$load_url = 'notification/count_unread';

Notification_component.prototype.load_unread = function (_callback) {
    
    var _this = this;
    KALS_util.ajax_get({
        url: this._$load_url,
        callback: function (_data) {
            _this.set_unread(_data);
            $.trigger_callback(_callback);
        }
    });
    
    return this;
};

/* End of file Notification_component */
/* Location: ./system/application/views/web_apps/Notification_component.js *//**
 * KALS_toolbar
 * 實體化交由Init_component去做！
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/14 下午 05:40:35
 * @extends {Overlay_modal}
 */
function KALS_toolbar() {
    
    Overlay_modal.call(this);
    
    this.child('toolbar', new Toolbar_component());
    this.child('toggle', new Toolbar_toggle_component());
    this.child('padding', new Toolbar_padding_component());
    
    this.child('logo', new Logo_component());
    this.child('loading', new Loading_component());
    
    this.child('search', new Search_form_component());
    
    this._common_windows = (new Common_navigation()).get_nav_items();
    this.child('anonymous_nav', new Anonymous_navigation(this._common_windows));
    this.child('avatar', new Avatar_component(this._common_windows));
    
    this.child('mobile_nav', new Mobile_navigation(this._common_windows));
    //this.child('common_nav', new Common_navigation());
        
    var _this = this;
    
    KALS_context.init_profile.add_listener(function () {
        _this.toggle_loading(false);    
    });
    
    setTimeout(function () {
        _this.toggle_loading(true);
        KALS_context.init_component.complete('KALS_toolbar');    
    }, 0);
    
}

KALS_toolbar.prototype = new Overlay_modal();

KALS_toolbar.prototype._$modal_name = 'KALS_toolbar';
KALS_toolbar.prototype._$closable = false;
KALS_toolbar.prototype._$exposable = false;

/**
 * @type {Toolbar_component}
 */
KALS_toolbar.prototype.toolbar = null;

/**
 * @type {Toolbar_toggle_component}
 */
KALS_toolbar.prototype.toggle = null;

/**
 * @type {Toolbar_padding_component}
 */
KALS_toolbar.prototype.padding = null;

/**
 * @type {Logo_component}
 */
KALS_toolbar.prototype.logo = null;

/**
 * @type {Loading_component}
 */
KALS_toolbar.prototype.loading = null;

/**
 * @type {Search_component}
 */
KALS_toolbar.prototype.search = null;

/**
 * @type {Anonymous_navigation}
 */
KALS_toolbar.prototype.anonymous_nav = null;

/**
 * @type {Avatar_component}
 */
KALS_toolbar.prototype.avatar = null;

/**
 * @type {Common_navigation}
 */
//KALS_toolbar.prototype.common_nav = null;

/**
 * @type {Mobile_navigation}
 */
KALS_toolbar.prototype.mobile_nav = null;

KALS_toolbar.prototype._common_windows = null;

// ---------

KALS_toolbar.prototype._$create_ui = function () {
    
    var _ui = this._$create_ui_prototype();
    _ui.removeClass('kals-modal');
    _ui.addClass('kals-toolbar')
		.addClass("KALS");
    
    var _toolbar_ui = this.toolbar.get_ui();
    var _toggle_ui = this.toggle.get_ui();
    this.toggle.hide(true);
    _ui.append(_toolbar_ui).append(_toggle_ui);
    
    var _config = this._$get_config();
    _config.top = '0%';
    _config.closeOnClick = false;
    _config.closeOnEsc = false;
    _ui.overlay(_config);
    
    var _logo_ui = this.logo.get_ui();
    this.toolbar.setup_left(_logo_ui);
    
    var _loading_ui = this.loading.get_ui();
    
    if (KALS_CONFIG.modules.Window_search.enable === true) {
        var _search_ui = this.search.get_ui();
        this.toolbar.setup_center([
            _search_ui
        ]);
    }
    
    var _anonymous_ui = this.anonymous_nav.get_ui();
        _anonymous_ui.addClass('anonymous-component');
    var _avatar_ui = this.avatar.get_ui();
    var _mobile_nav = this.mobile_nav.get_ui();
    //var _common_ui = this.common_nav.get_ui();
    
    var _navigation_container = $('<div></div>').addClass('navigation-container')
        .append(_anonymous_ui)
        .append(_avatar_ui)
        .append(_mobile_nav);
    
    this.toolbar.setup_right([
        _loading_ui,
        //_anonymous_ui
        //, _avatar_ui
        _navigation_container 
    ]);
    
    //最後加上Padding
    var _padding = this.padding.get_ui();
    //_padding.hide();
    $('body').prepend(_padding);
    
    _ui.addClass('loading');
    
    var _this = this;
    setTimeout(function () {
        
        if ($.is_mobile_mode() === false) {
            _this.toggle_navigation('anonymous-component');
        }
        else {
            _this.toggle_navigation('mobile-navigation');
        }
        
        var _toolbar_height = _this.get_height();
        //$.test_msg('toolbar_height', _toolbar_height);
        //_padding.css("height", _toolbar_height + 'px');
        
        
        //2010.10.5 測試顯示avatar-component看看？
        //_this.toggle_navigation('avatar-component');
        /*
        _padding.slideDown(function () {
            $.test_msg('slideDown');
            $(this).removeAttr('style');
        });
        */
        _padding.show();
        _padding.animate({
            height: _toolbar_height + "px"
        }, 1000);
        _this.open();
    }, 0);
    
    
    if ($.is_mobile_mode() === false) {
        _this._listen_auth();
    }
    else {
        //_this.toggle_navigation('anonymous-component');
    }
    
    // 點兩下關閉工具列
    _ui.dblclick(function () {
        _this.toggle_toolbar(false);
    });
    
    return _ui;
};

/**
 * 監聽帳號功能
 * @returns {KALS_toolbar}
 */
KALS_toolbar.prototype._listen_auth = function () {
    
    var _this = this;
    KALS_context.auth.add_listener(function (_auth, _data) {
        if (_data === null) {
            return;
        }
        
        //$.test_msg('KALS_context_auth.add_listener()', _data.login);
        //如果有登入，切換至avatar-nav，否則切換至login-nav        
        if (_data.login === true) {
            _this.toggle_navigation('avatar-component');
        }
        else {
            _this.toggle_navigation('anonymous-component');
        }
    });
    return this;
};

/**
 * 當視窗大小改變時，需要因應變更的動作
 * @param {jQuery} _ui
 * @returns {KALS_toolbar}
 */
KALS_toolbar.prototype._$onviewportmove = function (_ui) {
    
    var _ui_toggle = this.toggle.get_ui();
    var _padding_ui = this.padding.get_ui();
    
    //$.test_msg('KALS_toolbar onviewportmove', {height: $.is_small_height(), width: $.is_small_width()});
    
    if ($.is_small_height()) {   
        // 如果是小高度的話
        
        if (this.toggle.is_show() === false) {
            this.toggle_toolbar(false);
            this.toggle.show();
        }
        if (_padding_ui.hasClass('compact-height') === false) {
            _padding_ui.slideUp(function () {
                _padding_ui.addClass('compact-height');    
            });
        }
    }
    else {
        this.toggle_toolbar(true);
        this.toggle.hide();
        
        if (_padding_ui.hasClass('compact-height')) {
            _padding_ui.removeClass('compact-height');
            _padding_ui.slideDown(function () {
                //_padding_ui.css('display', null);
                _padding_ui.removeAttr('style');    
            });   
        }
    }
    
    if ($.is_small_width()) {
        _ui.addClass('compact-width');
        //this.toolbar.toggle_left(false);
    }
    else {
        _ui.removeClass('compact-width');
        //this.toolbar.toggle_left(true);
    }
    
    if ($.is_mobile_mode()) {
        _ui.valign('top');
    }
    
    if (this.toolbar_visible() === false) {
        _ui.align('center');
    }
    
    return this;
};

/**
 * 即使被隱藏了，也能夠使用viewportmove
 * @type {function} = function (_ui) {}
 */
KALS_toolbar.prototype._$viewportmove_visible_enable = true;

/**
 * 切換Toolbar元件的顯示
 * @param {null|boolean} _display = null：如果是null，則會切換到另一種型態去。
 * @param {function} _callback
 */
KALS_toolbar.prototype.toggle_toolbar = function (_display, _callback) {
   
   var _toolbar_ui = this.toolbar.get_ui();
   var _ui = this.get_ui();
   var _ui_hidden = _ui.hasClass('hide');
   
   if ($.is_null(_display)) {
       if (_ui_hidden) {
            _display = true;
        }
        else {
            _display = false;
        }
   }
   
   var _complete = function () {
       $.trigger_callback(_callback);
   };
   
   //$.test_msg('display', _display);
   var _height;
   if (_display === true && _ui_hidden === true) {
       // 準備顯示
       
       //_toolbar_ui.slideDown(_callback);
       //_ui.show();
       _ui.removeClass('hide');
       _height = _toolbar_ui.height();
       _height = (_height * -1) + 'px';
       _ui.css('left', 0);
       _ui.css('top', _height);
       
       _ui.animate({
           top: 0
       }, {
           queue: false,
           complete: function () {
               _complete();
           }
       });
   }
   else if (_display === false && _ui_hidden === false) {
       // 準備隱藏
       
       _height = _toolbar_ui.height();
       _height = (_height * -1) + 'px';
       //$.test_msg(_height);
       //_toolbar_ui.slideUp(_callback);
       _ui.animate({
           top: _height
       }, {
           queue: false,
           complete: function () {
               _ui.addClass('hide');
               _ui.valign('top');
               _ui.align('center');
               //_ui.hide();
               _complete();
           }
       });
   }
   else {
       $.trigger_callback(_callback);
   }
   
   return this;
};

KALS_toolbar.prototype.toolbar_visible = function () {
    var _ui = this.get_ui();
    return (!(_ui.hasClass('hide'))); 
};

KALS_toolbar.prototype.toggle_loading = function (_is_loading) {
    
    //$.test_msg('toggle loading', _is_loading);
    
    var _ui = this.get_ui();
    
    var _class_name = 'loading';
    
    if ($.is_null(_is_loading)) {
        _ui.toggleClass(_class_name);
    }
    else if (_is_loading === true) {
        _ui.addClass(_class_name);
    }
    else {
        _ui.removeClass(_class_name);
    }
    
    return this;
};

KALS_toolbar.prototype.toggle_navigation = function (_show_classname) {
    
    var _toolbar_right = this.toolbar.get_right();
    var _container = _toolbar_right.children('.navigation-container:first');
    
    //$.test_msg('KALS_toolbar.toggle_navigation() container', _container.length);
    
    _container.children(':not(.common-navigation)').hide();
    _container.children('.' + _show_classname).show();
    
    //$.test_msg('KALS_toolbar.toggle_navigation()', [_show_classname, _toolbar_right.children('.' + _show_classname).length
    //    , _toolbar_right.length, _toolbar_right.html()]);
    
    return this;
};    

KALS_toolbar.prototype.disable = function () {
    this.get_ui().hide();
    this.padding.get_ui().hide();
};

/**
 * 取得工具列的高度
 * @returns {Int}
 */
KALS_toolbar.prototype.get_height = function () {
    return this.height();
};

/**
 * 取得工具列的高度
 * @returns {Int}
 */
KALS_toolbar.prototype.height = function () {
    var _ui = this.get_ui();
    var _height = _ui.find("table.toolbar-component:first").height();
    if (_height === 0) {
        _height = _ui.height();
    }
    return _height;
};

/* End of file KALS_toolbar */
/* Location: ./system/application/views/web_apps/KALS_toolbar.js *//**
 * Scope_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/15 下午 10:56:35
 * @extends {KALS_user_interface}
 */
function Scope_param(_from, _to, _anchor_text) {
    
    if ($.isset(_from)) {
		this.set_from(_from);
	}
    if ($.isset(_to)) {
		this.set_to(_to);
	}
    if ($.isset(_anchor_text)) {
		this.set_anchor_text(_anchor_text);
	}
}

Scope_param.prototype.from = null;

Scope_param.prototype.to = null;

Scope_param.prototype.anchor_text = null;

Scope_param.prototype._filter_index = function (_index) {
    
    var id;
    if ($.is_number(_index)) {
		return _index;
	}
	else 
		if ($.is_jquery(_index)) {
			_id = _index.attr('id');
			_id = $.get_prefixed_id(_id);
			return _id;
		}
		else 
			if (typeof(_index.id) != 'undefined') {
				_id = _index.id;
				_id = $.get_prefixed_id(_id);
				return _id;
			}
			else {
				try {
					_index = parseInt(_index, 10);
					return _index;
				} 
				catch (e) {
					return null;
				}
			}
    
};

Scope_param.prototype.set_from = function (_index) {
    
    _index = this._filter_index(_index);
    
    if (_index !== null) {
		this.from = _index;
	}
    
    this._check_order();
    
    return this;
};

Scope_param.prototype.get_from = function () {
    return this.from;
};

Scope_param.prototype.set_to = function (_index) {
    
    _index = this._filter_index(_index);
    
    if (_index !== null) {
		this.to = _index;
	}
    
    this._check_order();
    
    return this;
};

Scope_param.prototype.get_to = function () {
    return this.to;
};

Scope_param.prototype.set_anchor_text = function (_text) {
    this.anchor_text = _text;
    return this;
};

Scope_param.prototype.get_anchor_text = function () {
    return this.anchor_text;
};

Scope_param.prototype.reset = function() {
    this.from = null;
    this.to = null;
    this.anchor_text = null;
    return this;
};

Scope_param.prototype._check_order = function () {
    
    if (this.from === null ||
	this.to === null) {
		return this;
	}
    
    //$.test_msg('Scope_param', [this.from, this.to]);
    
    if (this.from > this.to) {
        var _temp = this.from;
        this.from = this.to;
        this.to = _temp;
    }
    
    return this;
};

Scope_param.prototype.export_json = function (_export_anchor_text) {
    
    var _json = [
        this.get_from(),
        this.get_to()
    ];
    
    if (_export_anchor_text !== false
        && this.get_anchor_text() !== null) {
        var _anchor_text = this.get_anchor_text();
        _anchor_text = encodeURIComponent(_anchor_text); 
        _json.push(_anchor_text);
    }
    
    return _json;
};

/**
 * @param {Scope_param} _scope
 * @type {Boolean}
 */
Scope_param.prototype.equals = function (_scope) {
    
    if ($.is_class(_scope, 'Scope_param') === false) {
		return false;
	}
        
    var _this_to = this.get_to();
    var _this_from = this.get_from();
    
    var _to = _scope.get_to();
    var _from = _scope.get_from();
    
    return (_this_to == _to && _this_from == _from);
};

/* End of file Scope_param */
/* Location: ./system/application/views/web_apps/Scope_param.js *//**
 * Scope_collection_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 02:06:18
 * @param {Scope_collection_param|Scope_param[]} _coll
 * @param {Object} _to
 */
function Scope_collection_param(_scope_coll, _to) {
    
    this.scopes = [];
    
    if ($.isset(_scope_coll) && $.is_null(_to)) {
        this.import_coll(_scope_coll);
    }
    else if ($.isset(_scope_coll) && $.isset(_to)) {
        var _from = _scope_coll;
        var _scope = new Scope_param(_from, _to);
        this.import_coll(_scope);
    }
}

/**
 * 標註
 * @type {Scopes_param[]}
 */
Scope_collection_param.prototype.scopes = [];

/**
 * 新增範圍
 * @param {Scope_param|number} _scope
 * @param {null|number} _to
 */
Scope_collection_param.prototype.add = function (_scope, _to) {
    
    if ($.is_array(_scope)) {
        var _scopes = _scope;
        for (var _i in _scopes) {
            _scope = _scopes[_i];
            this.add(_scope);
        }
        return this;
    }
    
    if ($.is_number(_scope) && $.is_number(_to)) {
        var _from = _scope;
        _scope = new Scope_param(_from, _to);
    }
    
    this.scopes.push(_scope);
    this._resorted = false;
    return this;
};

/**
 * 清空範圍
 */
Scope_collection_param.prototype.empty = function () {
    this.scopes = [];
    this._resorted = true;
    return this;
};

/**
 * 匯入
 * @param {Scope_collection_param|Scope_param[]|Array} _scope_coll
 * Array型態，也就是JSON型態，組成如下：
 * _scope_coll = [
 *     [0, 1],    //這是Scope_param的JSON型態
 *     [6, 18] 
 * ]
 */
Scope_collection_param.prototype.import_coll = function (_scope_coll) {
    
    //$.test_msg('Scope_collection_para.import_coll()', $.is_array(_scope_coll));
    
    if ($.is_class(_scope_coll, 'Scope_collection_param')) {
        this.scopes = _scope_coll.scopes;
    }
    else if ($.is_class(_scope_coll, 'Scope_param')) {
        this.empty();
        this.add(_scope_coll);
    }
    else if ($.is_array(_scope_coll) 
        && _scope_coll.length === 2
        && $.is_number(_scope_coll[0]) ) {
        var _from = _scope_coll[0];
        var _to = _scope_coll[1];
        //$.test_msg('Scope_collection_para.import_coll() add', [_from, _to]);
        this.add(_from, _to);
        
        this._resorted = true;
    }
    else if ($.is_array(_scope_coll)) {
        var _scope_coll_json = _scope_coll;
        
        //$.test_msg('Scope_collection_para.import_coll()', _scope_coll_json.length);
        //$.test_msg('Scope_collection_para.import_coll()', _scope_coll_json);
        
        for (var _i in _scope_coll_json) {
            var _scope_json = _scope_coll_json[_i];
            var _from = _scope_json[0];
            var _to = _scope_json[1];
            //$.test_msg('Scope_collection_para.import_coll() add', [_from, _to]);
            this.add(_from, _to);
        }
        
        this._resorted = true;
        
        //this.resort();
        //$.test_msg('Scope_collection_para.import_coll()', this.scopes[0].get_to());
    }
    else if ($.is_object(_scope_coll)) {
        for (var _i in _scope_coll) {
            var _webpage_scope_coll = _scope_coll[_i];
            this.import_coll(_webpage_scope_coll);
        }
    }
    return this;
};

Scope_collection_param.prototype.length = function () {
    return this.scopes.length;
};

/**
 * 
 * @param {number} _index
 * @type {Scope_param}
 */
Scope_collection_param.prototype.get = function (_index) {
    
    var _scope = null;
    if ($.is_number(_index)
        && _index < this.length()) {
        //this.resort();
        _scope = this.scopes[_index];
    }
    return _scope;
};

/**
 * 是否已經排序過的一個_flag。初始化為true。
 * 每次add時，都會將之設為false。只有經過resort()之後才會設為true。
 * @type {boolean}
 */
Scope_collection_param.prototype._resorted = true;

Scope_collection_param.prototype.resort = function (_force) {
    
    if ($.is_null(_force)) {
		_force = false;
	}
    
    //如果非強迫排序，而且是已經排序的情況下，則略過排序動作    
    if (_force === false && this._resorted === true) {
		return this;
	}
    
    var _scopes = this.scopes; 
    var _resort_scopes = [];
    var _hold = false;
    var _length = _scopes.length;
    
    for (var _i = 0; _i < _length; _i++) {
        var _scope = _scopes[_i];
        if (_i < _length - 1) {
            var _next_scope = _scopes[_i+1];
            
            if (_scope.get_to() < _next_scope.get_from()) {
                if (_hold === false) {
					_resort_scopes.push(_scope);
				}
                    
                _hold = false;
                continue;
            }
            else {
                if (_hold === true) {
					_scope = _resort_scopes.pop();
				}
                    
                //_scope = [_scope[0], _next_scope[1]];
                _scope = new Scope_param(_scope.get_from(), _next_scope.get_to());
                _resort_scopes.push(_scope);
                _hold = true;
                continue;
            }
            
            //做完是做完了，尚未經過驗證 
        }
        else {
            _resort_scopes.push(_scope);
        }
    }
    
    this.scopes = _resort_scopes;
    this._resorted = true;
    
    return this;
};

/**
 * 取得所有ID，並以陣列輸出
 * 注意，裡面是兩層陣列喔！
 * @type {number[][]}
 */
Scope_collection_param.prototype.get_index_array = function () {
    
    this.resort();
    
    var _coll = [];
    
    for (var _i = 0; _i < this.length(); _i++) {
        var _ary = [];
        var _scope = this.get(_i);
        
        var _from = _scope.get_from();
        var _to = _scope.get_to();
        
        //$.test_msg('Scope_coll.get_index_array()', [_from, _to]);
        
        for (var _j = _from; _j < (parseInt(_to, 10) + 1); _j++) {
			_ary.push(_j);
		}
        _coll.push(_ary);
    }
    
    return _coll;
    
};

/**
 * 取得所有位於開頭的index的id
 */
Scope_collection_param.prototype.get_from_index_array = function () {
    
    this.resort();
    
    var _coll = [];
    
    for (var _i = 0; _i < this.length(); _i++) {
        var _scope = this.get(_i);
        var _from = _scope.get_from();
        _coll.push(_from);
    }
    
    return _coll;
    
};

/**
 * 取得所有位於開頭的index的id
 */
Scope_collection_param.prototype.get_to_index_array = function () {
    
    this.resort();
    
    var _coll = [];
    
    for (var _i = 0; _i < this.length(); _i++) {
        var _scope = this.get(_i);
        var _to = _scope.get_to();
        _coll.push(_to);
    }
    
    return _coll;
    
};

Scope_collection_param.prototype.get_first_index = function () {
    
    var _index;
    
    if (this.length() > 0) {
        var _scope = this.get(0);
        _index = _scope.get_from();
    }
    
    return _index;
};

/**
 * 取得第一個from
 * @type number
 */
Scope_collection_param.prototype.get_from = function(){
	return this.get_first_index();
};

Scope_collection_param.prototype.get_last_index = function () {
    
    var _index;
    
    if (this.length() > 0) {
        var _scope = this.get((this.length()-1));
        _index = _scope.get_to();
    }
    
    return _index;
};

/**
 * 取得最後一個to
 * @type number
 */
Scope_collection_param.prototype.get_to = function(){
    return this.get_last_index();
};

/**
 * 匯出標註範圍的資料
 * @param {boolean} _export_anchor_text 是否匯出標註範圍文字，預設是false
 * @returns {Array}
 */
Scope_collection_param.prototype.export_json = function (_export_anchor_text) {
    
    var _json = [];
    
    for (var _i in this.scopes) {
        var _scope = this.scopes[_i];
        var _j = _scope.export_json(_export_anchor_text);
        _json.push(_j);
    }
    
    return _json;
    
};

/**
 * @param {Scope_collection_param} _scope_coll
 * @type {Boolean}
 */
Scope_collection_param.prototype.equals = function (_scope_coll) {
    if ($.is_class(_scope_coll, 'Scope_collection_param') === false) {
		return false;
	}
    
    if (this.length() != _scope_coll.length()) {
		return false;
	}
        
    for (var _i = 0; _i < this.length(); _i++) {
        var _this_scope = this.get(_i);
        var _scope = _scope_coll.get(_i);
        
        if (_this_scope.equals(_scope) === false) {
			return false;
		}
    }
    
    return true;
};

/* End of file Scope_collection_param */
/* Location: ./system/application/views/web_apps/Scope_collection_param.js *//**
 * User_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 12:52:59
 * @param {number} _id
 * @param {String} _name
 */
function User_param(_id, _name) {
    
    if ($.is_null(_id)) {
		return;
	}
	else 
		if ($.is_object(_id) && $.is_null(_name)) {
			if (typeof(_id.name) != 'undefined') {
				_name = _id.name;
			}
			if (typeof(_id.id) != 'undefined') {
				_id = _id.id;
			}
		}
    
    if ($.is_number(_id)) {
		this.set_id(_id);
	}
    
    if ($.isset(_name)) {
		this.set_name(_name);
	}
    
}

User_param.prototype.id = null;
User_param.prototype.name = null;

User_param.prototype.set_id = function (_id) {
    this.id = _id;
};

User_param.prototype.get_id = function () {
    return this.id;
};

User_param.prototype.set_name = function (_name) {
    this.name = _name;
};

User_param.prototype.get_name = function () {
    return this.name;
};

User_param.prototype.is_me = function () {
    var _login_user = KALS_context.user.get_data();
    if ($.is_null(_login_user)) {
		return false;
	}
	else {
		return this.equals(_login_user);
	}
};

User_param.prototype.equals = function (_other_user) {
    if ($.is_class(_other_user, 'User_param') === false) {
		return false;
	}
        
    var _other_user_id = _other_user.id;
    return (this.id == _other_user_id);
};

User_param.prototype.export_json = function () {
    
    var _json = {
        id: this.get_id(),
        name: this.get_name()
    };
    
    return _json;
};

/* End of file User_param */
/* Location: ./system/application/views/web_apps/User_param.js *//**
 * User_collection_param
 * 一群使用者的名單
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 12:53:07
 * @param {User_collection_param|User_param[]} _users
 */
function User_collection_param(_users) {
    
    this.users = [];
    
    this.import_coll(_users);
}

/**
 * 使用者
 * @type {User_param[]}
 */
User_collection_param.prototype.users = [];

/**
 * 新增使用者資料
 * @param {Object} _user
 */
User_collection_param.prototype.add = function (_user) {
    
    if ($.is_array(_user)) {
        var _users = _user;
        for (var _i in _users) {
            _user = _users[_i];
            this.add(_user);
        }
        return;
    }
    
    if ($.is_number(_user)) {
        _user = new User_param(_user);
    }
    else if ($.is_class(_user, 'User_param') === false) {
        return this;
    }
    
    this.users.push(_user);
    
    return this;
};

/**
 * 移除使用者資料
 * @param {int|User_param} _user_id
 */
User_collection_param.prototype.remove = function (_user_id) {
    
    if (typeof(_user_id.id) != 'undefined') {
		_user_id = _user_id.id;
	}
    
    var _old_coll = this.users;
    var _new_coll = [];
    
    for (var _i in _old_coll) {
        var _user = _old_coll[_i];
        
        if (_user.id == _user_id) {
			continue;
		}
		else {
			_new_coll.push(_user);
		}
    }
    
    this.users = _new_coll;
    return this;
};

/**
 * 清空使用者資料
 */
User_collection_param.prototype.empty = function () {
    
    this.users = [];
    return this;
    
};

User_collection_param.prototype.length = function () {
    if ($.is_array(this.users)) {
		return this.users.length;
	}
	else {
		return 0;
	}
};

/**
 * 匯入
 * @param {User_collection_param|User_param[]} _users
 */
User_collection_param.prototype.import_coll = function (_users) {
    
    if ($.isset(_users)) {
        if ($.is_class(_users, 'User_collection_param')) {
			this.users = _users.users;
		}
		else 
			if ($.is_class(_users, 'User_param') ||
			$.is_array(_users)) {
				this.add(_users);
			}
    }
    return this;
};

User_collection_param.prototype.export_json = function () {
    
    var _json = [];
    
    for (var _i in this.users) {
        var _user = this.users[_i];
        var _j = _user.export_json();
        _json.push(_j);
    }
    
    return _json;
    
};

/* End of file User_collection_param */
/* Location: ./system/application/views/web_apps/User_collection_param.js *//**
 * Annotation_type_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/26 下午 02:07:24
 * @param {Annotation_type_param|JSON|String} _param 預先匯入的資料
 */
function Annotation_type_param(_param) {
    
    this._enable_config = {
        topic: true,
        respond: true
    };
    
    if ($.isset(_param)) {
        return this.set(_param);
    }
}

Annotation_type_param.prototype.id = 1;
Annotation_type_param.prototype.custom_name = null;

Annotation_type_param._type_mapping = {
    1: 'importance',
    2: 'question',
    3: 'confusion',
    4: 'summary',
    5: 'concept',
    6: 'example',
    7: 'custom'
};

Annotation_type_param.current_custom_id = 100;

/**
 * 標註顯示的類型
 * @version 20111105 Pudding Chen 
 * @type String 自訂類型，有以下兩個選項可選
 *     "underline": 底線(預設)
 *     'dashedline': 底線虛線
 *     'dottedline': 底線虛線
 *     'doubleline': 底線雙線
 *     "background": 背景顏色
 */
Annotation_type_param.prototype._anchor_style = 'underline';

/**
 * 標註類型顯示的顏色
 * @version 20111105 Pudding Chen
 * @type {String} 以CSS的顏色表示法為主，開頭要有井字號「#」。也可以用CSS接受的英文。
 *     預設是my_custom的綠色
 */
Annotation_type_param.prototype._anchor_color = '#7EFF7E';

/**
 * 標註類型顯示的字型顏色
 * @version 20111105 Pudding Chen
 * @type {String} 以CSS的顏色表示法為主，開頭要有井字號「#」。也可以用CSS接受的英文。
 *     預設是原本文字的顏色
 */
Annotation_type_param.prototype._anchor_font_color = null;


/**
 * 標註類型的說明
 * @version 20111105 Pudding Chen
 * @type {String|null} 請寫上說明。盡量不要超過50個中文字，不然版面會很奇怪。
 */
Annotation_type_param.prototype._hint = null;

/**
 * 標註類型按鈕的背景顏色
 * @type {string} CSS的顏色表示法
 */
Annotation_type_param.prototype._option_background_color = 'white';

/**
 * 標註類型按鈕的字體顏色
 * @type {string} CSS的顏色表示法
 */
Annotation_type_param.prototype._option_font_color = 'black';

/**
 * 是否是基礎標註類型
 * @version 20111105 Pudding Chen
 * @type {boolean} = true
 */
Annotation_type_param.prototype._is_basic_annotation_type = true;

/**
 * 是否是預先標註類型
 * @version 20111105 Pudding Chen
 * @type {boolean} = true
 */
Annotation_type_param.prototype._is_predefined_annotation_type = true;

// ---------------------------------------------------------------

/**
 * 設定標註類型
 * @param {Object} _param
 */
Annotation_type_param.prototype.set = function (_param) {
    
    var _id = Annotation_type_param.filter_basic_id(_param);
    
    //$.test_msg('Annotation_type_param.set()', [_param, _id, $.is_number(_id)]);
    
    if ($.is_number(_id)) {
        //表示是基本的ID
        this.id = _id;
        this.custom_name = null;
    } 
    else if ($.is_class(_param, 'Annotation_type_param')) {
        //this.id = _param.get_id();
        //this.custom_name = _param.get_custom_name();
        return _param;
    }
    else if (_param === "[object Object]") {
        this.id = 7;
        this.custom_name = null;
    }
    else {
        //如果是字串的話，那表示是自訂類型囉
        //this.id = 7;
        this.custom_name = _param;
        this.set_custom();
    }
    
    return this;
};

/**
 * 等同於this.set()的功能
 * @param {Object} _param
 */
Annotation_type_param.prototype.set_type = function (_param) {
    return this.set(_param);
};

Annotation_type_param.prototype.reset_custom_name = function () {
    this.custom_name = null;
    return this;
};

Annotation_type_param.prototype.get_id = function () {
    return this.id;
};

/**
 * 設置標註類型的type_id
 * @param {int} _type_id
 * @version 20111105 Pudding Chen
 */
Annotation_type_param.prototype.set_id = function (_type_id) {
    this.id = _type_id;
    return this;
};

/**
 * 配給自訂標註類型的ID (這跟資料庫的ID不一樣喔
 * @version 20111105 Pudding Chen
 */
Annotation_type_param.prototype.set_custom_id = function () {
    var _custom_id = Annotation_type_param.current_custom_id + 1;
    this.set_id(_custom_id);
    Annotation_type_param.current_custom_id++;
    return this;
};

/**
 * 將這個標註類型設定為「自訂」的類別
 */
Annotation_type_param.prototype.set_custom = function () {
    this.set_custom_id();
    this._is_basic_annotation_type = false;
    return this;
};

/**
 * get_type_name的別名
 */
Annotation_type_param.prototype.get_name = function () {
    /*
    if (this.custom_name === null) {
        return Annotation_type_param.filter_name(this.id);
    }
    else {
        return this.custom_name;
    } 
    */
    return this.get_type_name();
};

/**
 * 標註類型的名字
 * 
 * @return {String} 
 */
Annotation_type_param.prototype.get_type_name = function () {
    /*
    var _id = this.get_id();
    if (_id > 7)
        _id = 7;
    
    //$.test_msg('Annotation_type_param.get_type_name()', [this.get_id(), _id, Annotation_type_param.filter_name(_id)]);
    
    return Annotation_type_param.filter_name(_id);
    */
    if (this.custom_name === null) {
        return Annotation_type_param.filter_name(this.id);
    }
    else {
        return this.custom_name;
    }
};

/**
 * 標註類型的語系檔
 * 
 * @return {KALS_language_param}
 */
Annotation_type_param.prototype.get_type_name_lang = function () {
    var _name = this.get_type_name();

    var _lang;
    if (this.is_basic()) {
        _lang = new KALS_language_param(
            _name,
            "annotation.type." + _name
        );
    }
    else {
        //如果是自訂類型的話
        _lang = new KALS_language_param(
            _name
        );
    }

    return _lang;
};

/**
 * 直接顯示標註名字的翻譯字串
 * 
 * @return {String}
 */
Annotation_type_param.prototype.get_type_name_display = function () {
    var _lang = this.get_type_name_lang();
    if (this.is_basic()) {
        return KALS_context.lang.line(_lang);
    }
    else {
        return this.get_custom_name();
    }
};

Annotation_type_param.prototype.get_custom_name = function () {
    return this.custom_name;
};

/**
 * @deprecated 20111106 Pudding Chen 不應該使用，應該使用is_basic
 * @return {boolean}
 */
Annotation_type_param.prototype.is_custom = function () {
    return (this.id === 7);
};

Annotation_type_param.prototype.has_custom_name= function () {
    return (this.custom_name !== null);
};

/**
 * 相等
 * @param {Annotation_type_param} _type
 * @returns {Boolean}
 */
Annotation_type_param.prototype.equals = function (_type) {
    if ($.is_null(_type)) {
        return false;
    }
    if ($.is_class(_type, 'Annotation_type_param') === false) {
        _type = new Annotation_collection_param(_type);
    }
    
    return (_type.get_id() === this.get_id()
            && _type.get_custom_name() === this.get_custom_name());
};

Annotation_type_param.prototype.export_json = function () {
    
    var _json = this.get_id();
    
    if (this.is_basic() === false) {
        var _name = this.get_name();
        if (_name !== 'custom') {
            _json = encodeURIComponent(_name);
        }
    }
    
    return _json;
};

Annotation_type_param.filter_basic_id = function (_param) {
    
    if ($.is_number(_param)) {
        if (typeof(Annotation_type_param._type_mapping[_param]) === 'string') {
            return _param;
        }
        else {
            return null;
        }
    }
    else if ($.is_string(_param)) {
        for (var _i in Annotation_type_param._type_mapping) {
            var _typename = Annotation_type_param._type_mapping[_i];
            if (_typename === _param) {
                return parseInt(_i,10);
            }
        }
    }
    
    return null;
};

Annotation_type_param.filter_name = function (_param) {
    
    if ($.is_string(_param)) {
        return _param;
    }
    else if ($.is_number(_param) 
            && typeof(Annotation_type_param._type_mapping[_param]) === 'string') {
        return Annotation_type_param._type_mapping[_param];
    }
    else {
        return _param;
    }
};

/**
 * 設定標註顯示的類型
 * @version 20111105 Pudding Chen
 * @param {string} _style 標註類型
 *     'underline': 底線(預設)
 *     'dashedline': 底線虛線
 *     'dottedline': 底線點線
 *     'doubleline': 底線雙線
 *     'background': 背景顏色
 */
Annotation_type_param.prototype.set_anchor_style = function (_style) {
    if (_style === 'background') {
        this._anchor_style = _style;
    }
    else {
        this._anchor_style = 'underline';
    }
    return this;
};

/**
 * 設定標註類型顯示的顏色
 * @version 20111105 Pudding Chen
 * @param {string} _color 以CSS的顏色表示法為主，開頭要有井字號「#」。也可以用CSS接受的英文。
 *     預設是my_custom的綠色
 */
Annotation_type_param.prototype.set_anchor_color = function (_color) {
    this._anchor_color = _color;
    return this;
};

/**
 * 設定標註類型顯示的字型顏色
 * @version 20111105 Pudding Chen
 * @param {string} _color 以CSS的顏色表示法為主，開頭要有井字號「#」。也可以用CSS接受的英文。
 *     預設是my_custom的綠色
 */
Annotation_type_param.prototype.set_anchor_font_color = function (_color) {
    this._anchor_font_color = _color;
    return this;
};

/**
 * 根據custom style & color取得css設定
 * @return {string}
 */
Annotation_type_param.prototype.get_anchor_css = function () {
    var _css;
    var _style = this._anchor_style;
    var _color = this._anchor_color;
    
    if (_style === 'underline') {
        _css = 'border-bottom:1px solid ' + _color;
    }
    else if (_style === 'dottedline') {
        _css = 'border-bottom:1px dotted ' + _color;
    }
    else if (_style === 'doubleline') {
        _css = 'border-bottom:1px double ' + _color;
    }
    else if (_style === 'hashedline') {
        _css = 'border-bottom:1px dashed ' + _color;
    }
    else if (_style === 'background') {
        _css = 'background-color:' + _color;
    }
    else {
        _css = 'border-bottom:1px solid ' + _color;
    }
    _css = _css + ' !important';
    
    if (typeof(this._anchor_font_color) === 'string') {
        _css = _css + ';color:' + this._anchor_font_color + ' !important';
    }
    //_css = ' {' + _css + '} ';
    return _css;
};

/**
 * 設定標註類型的說明
 * @version 20111105 Pudding Chen
 * @param {String} _hint 說明
 */
Annotation_type_param.prototype.set_hint = function(_hint) {
    if ($.is_string(_hint)) {
		_hint = $.trim(_hint);
	}
    this._hint = _hint;
    return this;
};

/**
 * 取得標註類型的說明
 * @version 20111105 Pudding Chen
 * @return {string}
 */
Annotation_type_param.prototype.get_hint = function () {
    if ($.is_null(this._hint)) {
        var _type = this.get_type_name();
        var _lang = new KALS_language_param(
        '',
        'annotation.type.' + _type + '.hint'
    );
        var _hint = KALS_context.lang.line(_lang);
        this._hint = _hint;
    }
    return this._hint;
};

/**
 * 確認是否是基礎標註類型
 * @version 20111105 Pudding Chen
 * @return {boolean}
 */
Annotation_type_param.prototype.is_basic = function () {
    return this._is_basic_annotation_type;
};

/**
 * 確認是否是預先定義的標註類型
 * @version 20111106 Pudding Chen
 * @return {boolean}
 */
Annotation_type_param.prototype.is_predefined = function () {
    return this._is_predefined_annotation_type;
};

/**
 * 設定是否是預先定義的函式
 * @version 20111106 Pudding Chen
 * @param {boolean} _is_prefined
 */
Annotation_type_param.prototype.set_predefined = function (_is_prefined) {
    if ($.is_boolean(_is_prefined)) {
        this._is_predefined_annotation_type = _is_prefined;
    }
    return this;
};

/**
 * 取得標註類型的classname
 * @param {string|null} _prefix
 * @param {string|null} _postfix
 * @return {string}
 */
Annotation_type_param.prototype.get_classname = function (_prefix, _postfix) {
    
    if (typeof(_prefix) === 'undefined') {
        _prefix = '';
    } 
    if (typeof(_postfix) === 'undefined') {
        _postfix = '';
    }
    
    var _type_id = this.get_id();
    var _type_classname = '';
    
    if (typeof(Annotation_type_param._type_mapping[_type_id]) === 'string') {
        _type_classname = Annotation_type_param._type_mapping[_type_id];
    }
    else {
        _type_classname = 'custom_type_' + _type_id;
    }
    
    return _prefix + _type_classname + _postfix;
};

/**
 * 取得標註類型的classname，以「my_」開頭
 * @param {string|null} _prefix
 * @param {string|null} _postfix
 * @return {string}
 */
Annotation_type_param.prototype.get_my_classname = function (_prefix, _postfix) {
    return 'my_' + this.get_classname(_prefix, _postfix);
};

/**
 * 設置按鈕的背景顏色
 * @param {string} _color CSS顏色表示法
 */
Annotation_type_param.prototype.set_option_background_color = function (_color) {
    this._option_background_color = _color;
    return this;
};

/**
 * 設置按鈕的字體顏色
 * @param {string} _color CSS顏色表示法
 */
Annotation_type_param.prototype.set_option_font_color = function (_color) {
    this._option_font_color = _color;
    return this;
};

/**
 * 取得設置按鈕的style參數
 * @return {String} CSS的style rule
 */
Annotation_type_param.prototype.get_option_style = function () {
    var _style = 'background-color:' + this._option_background_color
        + ';color:' + this._option_font_color;
    return _style;
};

//-----------------------------------------------------------

/**
 * 建立標註類別的按鈕
 * @returns {jQuery}
 */
Annotation_type_param.prototype.get_ui = function () {
    return this.get_option_ui();
};

/**
 * 建立標註類別的按鈕
 * @returns {jQuery}
 */
Annotation_type_param.prototype.get_option_ui = function () {
    if (this._option_ui === undefined) {
        var _view = new View_annotation_type_option(this);
        _view = _view.get_ui();
        this._option_ui = _view;
    }
    return this._option_ui;
};

/**
 * 標註類別的按鈕
 */
Annotation_type_param.prototype._option_ui;

//-----------------------------------------------------------

/**
 * 啟用標註類型的功能
 * @type type
 */
Annotation_type_param.prototype._enable_config = null;

/**
 * 設定自己的適用類型
 * @param {String|JSON} _type
 * @param {Boolean} _option
 * @returns {Annotation_type_param.prototype}
 */
Annotation_type_param.prototype.set_enable_config = function (_type, _option) {
    
    if (typeof(_type) === "object") {
        var _config = _type;
        for (var _type in _config) {
            _option = _config[_type];
            this.set_enable_config(_type, _option);
        }
        return this;
    }
    
    //$.test_msg("set_enable_config", [_type, _option]);
    this._enable_config[_type] = _option;
    
    return this;
};

/**
 * 取得標註類型的啟用設定
 * @returns {JSON}
 */
Annotation_type_param.prototype.get_enable_config = function() {
    return this._enable_config;
};

/**
 * 是否啟用於該類型底下
 * 
 * get_enable_config()的別名
 * @param {String} _type
 * @returns {Boolean}
 */
Annotation_type_param.prototype.is_enable = function (_type) {
    var _option = true;
    
    if (typeof(this._enable_config[_type]) === "boolean"
            && this._enable_config[_type] === false) {
        _option = false;
    }
    
    return _option;
};

// --------------------------------------------------

/**
 * 排序參數
 * 
 * 數字越大，越往上排
 * 數字越小，越往下排
 * 預設是1
 * @type Number
 */
Annotation_type_param.prototype._order = 1;

/**
 * 設定排序
 * @param {Number} _order
 * @returns {Annotation_type_param}
 */
Annotation_type_param.prototype.set_order = function (_order) {
    if (typeof(_order) === 'number') {
        this._order = _order;
    }
    return this;
}

/**
 * 取得排序
 * @returns {Number} _order
 */
Annotation_type_param.prototype.get_order = function () {
    return this._order;
}
/* End of file Annotation_type_param */
/* Location: ./system/application/views/web_apps/Annotation_type_param.js *//**
 * Annotation_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 12:13:19
 */
function Annotation_param(_param) {
    
    this.user = null;
    this.topic = null;
    this.respond_to_coll = null;
    this.recommend = null;
    this.scope = null;
    this.share_list = null;
    this.feature_location = [];
    this.feature_recommend_scope = null;
    this.type = new Annotation_type_param();
    this.navigation_level = 0;
    
    if ($.isset(_param)) {
        this.import_json(_param);
    }
}

/**
 * 標註的ID
 * @type {number}
 */
Annotation_param.prototype.annotation_id = null;

/**
 * 標註的作者
 * @type {User_param}
 */
Annotation_param.prototype.user = null;

/**
 * 回應的主題標註
 * @type {Annotation_param}
 */
Annotation_param.prototype.topic = null;

/**
 * 回應的其他標註
 * @type {Annotation_collection_param}
 */
Annotation_param.prototype.respond_to_coll = null;

/**
 * 筆記
 * @type {String}
 */
Annotation_param.prototype.note = null;

/**
 * 是否喜歡
 * @type {boolean}
 */
Annotation_param.prototype.is_like = false;

/**
 * 喜歡的人數
 * @type {number}
 */
Annotation_param.prototype.like_count = 0;

/**
 * 標註類型
 * 1    importance
 * 2    question
 * 3    confusion
 * 4    summary
 * 5    concept
 * 6    example
 * 7    custom
 * @type {Annotation_type_param}
 */
Annotation_param.prototype.type = null;

/**
 * 時間。通常是指更新的時間，而非建立的時間。
 * @type {Date}
 */
Annotation_param.prototype.timestamp = null;

/**
 * 推薦標註
 * @type {Annotation_param|null}
 */
Annotation_param.prototype.recommend = null;

/**
 * 範圍
 * @type {Scope_colleciotn_param}
 */
Annotation_param.prototype.scope = null;

/**
 * 特徵：位置
 * 'location-head',    //0
 * 'location-near-head',    //1
 * 'location-near-head-foot'    //2
 * 'location-near-foot'    //3
 * 'location-foot',    //4
 * 'location-other'    //5
 * 'location-head-foot'    //6
 * 改以一個陣列輸出
 */
Annotation_param.prototype.feature_location = [];

/**
 * 特徵：推薦範圍
 * @type {Scope_collection_param}
 */
Annotation_param.prototype.feature_recommend_scope = null;

/**
 * 權限設定
 * @type {String} 代號的意義如下：
 * 1    public
 * 2    private    private特別是指只有自己能閱讀
 * 3    share  
 */
Annotation_param.prototype.policy_type = 'public';

/**
 * 私密清單。只有在policy_type='share'的時候才需要設定。
 * @type {User_collection_param}
 */
Annotation_param.prototype.share_list = null;

/**
 * 只負責存入，不負責匯出
 * @type {Object} = {
 *     annotation_collection: [],
 *     totally_loaded: true
 * }
 */
Annotation_param.prototype.respond_list = null;

/**
 * 指引標註的等級
 * @type {number}
 */
Annotation_param.prototype.navigation_level = 1;

//------------------------

/**
 * 是否是回應的標註
 * @type {boolean}
 */
Annotation_param.prototype.is_respond = function () {
    return (this.topic !== null);
};

/**
 * 是否是現在登入者的標註。未登入的情況下一律回傳false
 * @type {boolean}
 */
Annotation_param.prototype.is_my_annotation = function () {
    
    if (this.user === null) {
        return false;
    }
    
    var _user_id = KALS_context.user.get_id();
    var _author_id = this.user.get_id();
    
    return (_user_id === _author_id);
};

/**
 * 是否擁有建議
 * @type {boolean}
 */
Annotation_param.prototype.has_recommend = function () {
    return !(this.recommend === null);
};

Annotation_param.prototype._plain_types = [
    'annotation_id',
    'feature_location',
    'note',
    'policy_type',
    'timestamp',
    'is_like',
    'like_count',
    'respond_list'
];

Annotation_param.prototype._param_types = [
    'feature_recommend_scope',
    //'recommend',    //新增或修改時不會動到recommend
    'respond_to_coll',
    'topic',
    'scope',
    'share_list',
    'user',
    'type',
    'recommend'    //只輸入不輸出
];

Annotation_param.prototype._only_for_import = [
    'recommend',
    'like_count'
];

Annotation_param.prototype._policy_types = {
    1: 'public',
    2: 'private',
    3: 'share'
};

Annotation_param.prototype.export_json = function () {
    
    var _json = {};
    
    var _plain_types = this._plain_types;
    for (var _i in _plain_types) {
        var _attr = _plain_types[_i];
        if ($.isset(this[_attr])) {
            var _value = this[_attr];
            if (_attr === 'note') {
                _value = encodeURIComponent(_value);
            }
            else if (_attr === 'policy_type' 
                    && $.is_string(_value)) {
                for (var _p in this._policy_types) {
                    var _policy_type = this._policy_types[_p];
                    if (_policy_type === _value) {
                        _value = parseInt(_p,10);
                        break;
                    }
                }
            }
            else if (_attr === 'respond_list') {
                continue;
            }
            
            _json[_attr] = _value;
        }
    }
	
    var _param_types = this._param_types;
    
    for (_i in _param_types) {
        _attr = _param_types[_i];
        //$.test_msg('Annotation_param.export_json', [_attr, ($.isset(this[_attr]))]);
        
        if ($.isset(this[_attr])) {
            if (_attr === 'respond_to_coll') {
                var _data = this[_attr].export_respond_json();
                if ($.is_array(_data) && _data.length > 0) {
                    _json[_attr] = _data;
                }
            }
            else if (_attr === 'topic') {
                _json[_attr] = this[_attr].export_respond_json();
            }
            else if ($.inArray(_attr, this._only_for_import) > -1) {
                // 不做輸出！
                continue;
            }
            else {
                _json[_attr] = this[_attr].export_json();
            }
        }
    }
    
    return _json;
};

Annotation_param.prototype.export_respond_json = function () {
    var _data = {};
    
    if ($.isset(this.annotation_id)) {
        _data.annotation_id = this.annotation_id;
    }
        
    return _data;
};

Annotation_param.prototype.import_json = function (_json) {
    /*
    if ($.is_class(_json, 'Annotation_param')) {
            //for (var _i in this._plain_types) {
            //	var _attr = this._plain_types[_i];
            //	this[_attr] = _json[_attr];
            //}
            //for (var _i in this._param_types) {
            //	var _attr = this._param_types[_i];
    //    this[_attr] = _json[_attr];
    //}
            return this;
    }
    */
    //取得Annotation的note時，也記得要先做urlencode()跟JavaScript端的decodeURIComponent()
    var _plain_types = this._plain_types;
    for (var _i in _plain_types) {
        var _attr = _plain_types[_i];
        if (typeof(_json[_attr]) !== 'undefined') {
            var _value = _json[_attr];
            if (_attr === 'note') {
                //$.test_msg("Annotation_param.import_json Note 1", _value);
                _value = $.decodeURIComponent(_value);
                //$.test_msg("Annotation_param.import_json Note 2", _value);
                _value = unescape(_value);
                //$.test_msg("Annotation_param.import_json Note 3", _value);
            }
            else  if (_attr === 'policy_type' && $.is_number(_value)) {
                _value = _value + '';
                for (var _p in this._policy_types) {
                    var _policy_type = this._policy_types[_p];
                    if (_p === _value) {
                        _value = _policy_type;
                        break;
                    }
                }
            }
            
            this[_attr] = _value;
        }
    }
	
    
    var _param_types = this._param_types;
    for (_i in _param_types) {
        _attr = _param_types[_i];
        if (typeof(_json[_attr]) !== 'undefined') {
            _value = _json[_attr];
            if (_attr === 'respond_to_coll') {
                //$.test_msg('respond_to_coll', _value);
                this[_attr] = new Annotation_collection_param(_value);
            }
            else if (_attr === 'scope') {
                //$.test_msg("Annotation_param.import_json", _value);
                this[_attr] = new Scope_collection_param(_value);
            }
            else if (_attr === 'share_list') {
                this[_attr] = new User_collection_param(_value);
            }
            else if (_attr === 'user') {
                this[_attr] = new User_param(_value);
            }
            else if (_attr === 'topic') {
                this[_attr] = new Annotation_param(_value);
            }
            else if (_attr === 'type') {
                _value = decodeURIComponent(_value);
                //this[_attr] = new Annotation_type_param(_value);
                this[_attr] = KALS_context.predefined_type.import_json(_value);
            }
            else if (_attr === 'recommend') {
                this[_attr] = new Recommend_param(_value);
            }

        }   //if (typeof(_json[_attr]) != 'undefined') {
    }   //for (_i in _param_types) {
    
    return this;
};

/**
 * 設置標註類型
 * @param {Annotation_type_param} _type
 */
Annotation_param.prototype.set_type = function (_type) {
    this.type = _type;
    return this;
};

Annotation_param.prototype.get_interval_time = function () {
    var _timestamp = this.timestamp;
    if ($.is_null(_timestamp)) {
        return null;
    }
    else {
        return $.get_interval_time(_timestamp);
    }
};

/**
 * 取得指引等級
 * @type {number} 
 */
Annotation_param.prototype.get_navigation_level = function () {
    return this.navigation_level;
};

/* End of file Annotation_param */
/* Location: ./system/application/views/web_apps/Annotation_param.js *//**
 * Annotation_collection_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 06:51:04
 */
function Annotation_collection_param(_param) {
    
    this.annotations = [];
    
	if ($.is_class(_param, 'Annotation_collection_param')) {
		this.annotations = _param.annotations;
		return;
	}
	
    if ($.isset(_param)) {
        if ($.is_array(_param)) {
			this.import_json(_param);
		}
		else {
			this.add(_param);
		}
    }
        
}

/**
 * @type {Annotation_param[]}
 */
Annotation_collection_param.prototype.annotations = [];

/**
 * 增加標註
 * @param {Annotation_param|Annotation_param[]} _param
 */
Annotation_collection_param.prototype.add = function (_param) {
    
    if ($.is_null(_param)) {
		return this;
	}
    
    if ($.is_array(_param) && _param.length > 0) {
        var _coll = _param;
		//$.test_msg('anno coll add is array', _param);
        for (var _i in _coll) {
			//$.test_msg('anno coll coll', _coll[_i].annotation_id);
            this.add(_coll[_i]);
        }
        return this;
    }
    
    if (typeof(_param.annotation_id) != 'undefined') {
		//$.test_msg('anno coll convert anno param, before', [_param.annotation_id, ($.is_class(_param) != 'Annotation_param')]);
		if ($.is_class(_param, 'Annotation_param') == false) {
			_param = new Annotation_param(_param);
		}
		//$.test_msg('anno coll convert anno param, after', _param.annotation_id);
        this.annotations.push(_param);
    }
    return this;
};

Annotation_collection_param.prototype.empty = function () {
    this.annotations = [];
    return this;
};

Annotation_collection_param.prototype.export_json = function () {
    
    var _json = [];
    
    for (var _i in this.annotations) {
        var _annotation = this.annotations[_i];
        var _j = _annotation.export_json();
        _json.push(_j);
    }
    
    return _json;
};

Annotation_collection_param.prototype.export_respond_json = function () {
    var _json = [];
    
    for (var _i in this.annotations) {
        var _annotation = this.annotations[_i];
        var _j = _annotation.export_respond_json();
        _json.push(_j);
    }
    
    return _json;
};

/**
 * 取得標註範圍的參數陣列
 * @returns {Array|Scope_collection_param}
 */
Annotation_collection_param.prototype.get_scope_colleciotn_param_array = function () {
    var _scope_coll = [];
    
    for (var _i in this.annotations) {
        var _annotation = this.annotations[_i];
        var _scope = _annotation.scope;
        _scope_coll.push(_scope);
    }
    
    return _scope_coll;
};

/**
 * 取得標註範圍的JSON陣列
 * @returns {Array|JSON}
 */
Annotation_collection_param.prototype.export_scope_colleciotn_json = function () {
    var _scope_coll = [];
    
    for (var _i in this.annotations) {
        var _annotation = this.annotations[_i];
        var _scope = _annotation.scope.export_json(true);
        _scope_coll.push(_scope);
    }
    
    return _scope_coll;
};

Annotation_collection_param.prototype.import_json = function (_json) {
    return this.add(_json);
};

Annotation_collection_param.prototype.get = function (_index) {
    if (_index === null &&
	this.annotations.length > 0) {
		return this.annotations[0];
	}
    
    if ($.is_number(_index) &&
	_index < this.annotations.length) {
		return this.annotations[_index];
	}
	else {
		return null;
	}
};

Annotation_collection_param.prototype.get_annotations = function () {
	var _output = [];
	$.test_msg(this.length());
	/*
	for (var _i = 0; _i < this.length(); _i++) {
		var _annotation_param = this.get(_i);
		if ($.is_class(_annotation_param, 'Annotation_param') === false) {
			_annotation_param = new Annotation_param(_annotation_param);
		}
		_output.push(_annotation_param);
	}
	*/
	return _output;
};

Annotation_collection_param.prototype.length = function () {
    return this.annotations.length;
};


/* End of file Annotation_collection_param */
/* Location: ./system/application/views/web_apps/Annotation_collection_param.js *//**
 * Recommend_param
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/12 上午 11:08:57
 * @extends {KALS_user_interface}
 */
function Recommend_param(_json) {
    
    if ($.isset(_json)) {
        this.import_json(_json);
    }
}

/**
 * 提示
 * @type {String[]} 直接存入的是完整的訊息
 * 其實也只有三種
 * 1    speech
 * 2    length
 * 3    location
 */
Recommend_param.prototype.tips = [];

/**
 * @type {Annotation_param}
 */
Recommend_param.prototype.recommend_by = null;

Recommend_param.prototype.import_json = function (_json) {
    if ($.isset(_json)) {
        if (typeof(_json.tips) != 'undefined'
            && $.is_array(_json.tips)) {
            this.tips = [];
            for (var _i in _json.tips) {
                this.tips.push(_json.tips[_i]);
            }
        }
        
        if (typeof(_json.recommend_by) == 'object'
            && $.isset(_json.recommend_by)) {
		    
            var _param = _json.recommend_by;
			if ($.is_class(_param, 'Annotation_param') === false) {
				_param = new Annotation_param(_param);
			}
			
            this.recommend_by = _param;
        }
    }
    return this;
};

/* End of file Recommend_param */
/* Location: ./system/application/views/web_apps/Recommend_param.js *//**
 * Selection
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:47
 * @extends {Multi_event_dispatcher}
 * @param {Selectable_text} _text
 */
function Selection(_text) {
    
    Multi_event_dispatcher.call(this);
    
    this._scope_coll = null;
    this._$enable_types = ['select', 'clear'];
    
    if ($.isset(_text)) {
        this._text = _text;
        
		/*
        var _this = this;
        KALS_context.auth.add_listener(function (_auth) {
            //if (_this._$logout_clear && _auth.is_login() === false)
            //if ((_this._$login_clear === true && _auth.is_login() === true)
            //    || (_this._$logout_clear === true && _auth.is_login() === false))
            //    _this.clear();
        });
        */
    }
}

Selection.prototype = new Multi_event_dispatcher();

/**
 * @type {Selectable_text}
 */
Selection.prototype._text = null;

Selection.prototype._$name = 'select';

Selection.prototype._$login_clear = false;

Selection.prototype._$logout_clear = true;

/**
 * @type {Scope_collection_param}
 */
Selection.prototype._scope_coll = null;

/**
 * 一次性選取。
 * 如果是true，每次新增選取時，都會先進行clear()指令。
 * 
 */
Selection.prototype._$select_once = true;

Selection.prototype._classname = null;

/**
 * 設定選擇的範圍
 * @param {Scope_collection_param} _scope
 */
Selection.prototype.set_scope_coll = function (_scope_coll) {
    
    //$.test_msg('Selection.set_scope_coll()', [$.is_class(_scope_coll, 'Scope_collection_param'), $.get_class(_scope_coll), _scope_coll.length()]);
    
	if ($.is_array(_scope_coll)) {
		_scope_coll = new Scope_collection_param(_scope_coll);
	}
	
    if ($.is_class(_scope_coll, 'Scope_collection_param') === false
        || _scope_coll.length() === 0) {
        //$.test_msg('Selection.set_scope_coll()', [($.is_class(_scope_coll, 'Scope_collection_param') === false), $.get_class(_scope_coll), _scope_coll.length()]);
        return this;
    }
    
    //if ($.isset(this._scope_coll))
    //    $.test_msg('Selection.set_scope_coll()', [this._scope_coll.equals(_scope_coll), this._scope_coll.export_json(), _scope_coll.export_json()]);
    
    //如果範圍一樣，則不用重置
    if ($.isset(this._scope_coll)
        && this._scope_coll.equals(_scope_coll)) {
        //$.test_msg('Selection.set_scope_coll()', [this._scope_coll.equals(_scope_coll), this._scope_coll.export_json(), _scope_coll.export_json()]);
        return this;
    }
        
    
    if (this._$select_once === true) {
		this.clear();
	}
    
    this._scope_coll = _scope_coll;
    
    var _classname = this.get_classname();
    
    //$.test_msg('Selection.set_scope_coll() text add class', [_classname, _scope_coll.length(), _scope_coll.export_json()]);
    
    var _this = this;
    this._text.add_class(_scope_coll, _classname, function () {
        //$.test_msg('Selection.set_scope_coll() select', [this._type_listeners.select.length]);
    
        //_this.notify_listeners('select', _scope_coll);    
    });
    
    _this.notify_listeners('select', _scope_coll);
    
    return this;
};

/**
 * @type {Scope_collection_param}
 */
Selection.prototype.get_scope_coll = function () {
    return this._scope_coll;
};

/**
 * @type {Scope_collection_param}
 */
Selection.prototype.get_recommend_scope_coll = function () {
    var _scope_coll = this._scope_coll;
    var _recommend_scope_coll = this._text.get_recommend_scope_coll(_scope_coll);
    return _recommend_scope_coll;
};

Selection.prototype.clear = function () {
    //如果本來就是清空的狀態，則不做任何改變
    if (this._scope_coll === null) {
        //$.test_msg('Selection.clear() no scope coll' , [this.get_classname()]);
        return this;
    }
    
    var _classname = this.get_classname();
    var _scope_coll = this.get_scope_coll();
    //$.test_msg('Selection.clear()' , [_scope_coll.export_json(), _classname]);
    //this._text.remove_class(_scope_coll, _classname);
    this._text.remove_class(_classname);
    this._scope_coll = null;
    
    //2010.10.20 不確定是否要重置classname，先確定重置好了
    this.set_classname();
    
    this.notify_listeners('clear', _scope_coll);
    
    return this;
    
};

Selection.prototype.clear_scope_coll = function (_scope_coll) {
    
    var _classname = this.get_classname();
    this._text.remove_class(_scope_coll, _classname);
    
    //這個動作太浪費資源了，不採用
    //this._scope_coll = this._text.retrive_scope_coll(_classname);
    
    return this;
};

Selection.prototype.set_classname = function (_classname) {
    this._classname = _classname;
    return this;
};

Selection.prototype.get_classname = function () {
    
    var _classname = this._$name;
    
    if ($.isset(this._classname)) {
        _classname = _classname + ' ' + this._classname;
    }
    
    return _classname;
};

Selection.prototype.get_offset_top = function () {
    
    var _scope_coll = this.get_scope_coll();
    var _top = this._text.get_offset_top(_scope_coll);
    return _top;
};

Selection.prototype.get_offset_bottom = function () {
    var _scope_coll = this.get_scope_coll();
    var _bottom = this._text.get_offset_bottom(_scope_coll);
    return _bottom;
};

Selection.prototype.get_offset_right = function () {
    
    var _scope_coll = this.get_scope_coll();
    var _offset = this._text.get_offset_right(_scope_coll);
    return _offset;
};

Selection.prototype.get_offset_left = function () {
    
    var _scope_coll = this.get_scope_coll();
    var _offset = this._text.get_offset_left(_scope_coll);
    return _offset;
};

Selection.prototype.get_offset_first_left = function () {
    
    var _scope_coll = this.get_scope_coll();
    var _offset = this._text.get_offset_first_left(_scope_coll);
    return _offset;
};

Selection.prototype.get_offset_last_right = function () {
    
    var _scope_coll = this.get_scope_coll();
    var _offset = this._text.get_offset_last_right(_scope_coll);
    return _offset;
};

Selection.prototype.get_anchor_text = function () {
    var _scope_coll = this.get_scope_coll();
    var _anchor_text = this._text.get_anchor_text(_scope_coll);
    return _anchor_text; 
};

/**
 * @type {number} 各數字代表的意思如下：
 * 0 => head : location-head
 * 1 => foot : location-foot
 * 2 => near head & foot : 此情況並不標示，由get_paragraph_location()去判斷
 * 3 => near head : location-near-head
 * 4 => near foot : location-near-foot
 * 5 => body : 沒有標示
 */
Selection.prototype.get_location_feature = function () {
    var _scope_coll = this.get_scope_coll();
    var _location = this._text.get_location_feature(_scope_coll);
    return _location;
};

/**
 * @type {Scope_collection_param}
 */
Selection.prototype.get_recommend_scope_coll = function () {
    var _scope_coll = this.get_scope_coll();
    var _recommend = this._text.get_recommend_scope_coll(_scope_coll);
    return _recommend;
};

/**
 * 是否有選取範圍？
 * @type {boolean}
 */
Selection.prototype.has_selected = function () {
    return !(this._scope === null);
};

Selection.prototype._scroll_lock = false;

/**
 * 讓捲軸捲到選取範圍位置
 */
Selection.prototype.scroll_into_view = function (_callback) {
    
    //$.test_msg("Selection.scroll_into_view", this._$name);
    //return;
    
    if (this._scroll_lock === true) {
        //$.test_msg("!!!!!!!!!Selection.scroll_into_view _scoll_lock === true", this._$name);
        $.trigger_callback(_callback);
        return this;
    }
    
    //var _x = this.get_offset_left();
    var _y = this.get_offset_top();
    
    /*
    if ($.is_null(_x) && $.is_null(_y)) {
        return this;
    }
    */
    
    if ($.is_null(_y)) {
        $.trigger_callback(_callback);
        return this;
    }
    
    var _config = {};
    /*
    if ($.isset(_x)) {
        _x = _x - 100;
        _config['x'] = _x;
    }
    */
    if ($.isset(_y)) {
        _y = _y - KALS_toolbar.get_height() - 100;
        //$.test_msg('Selection.scroll_into_view()', [this._$name, _y, KALS_toolbar.get_height()]);
        _config.y = _y;
    }
    
    //$.test_msg("要準備捲動囉", _config);
    
    var _this = this;
    this._scroll_lock = true;
    $.scroll_to(_config, 200, function () {
        _this._scroll_lock = false;
        $.trigger_callback(_callback);
    });
    
    return this;
};

Selection.prototype.equals = function (_scope_coll) {
    
    if (this._scope_coll === null || _scope_coll === null) {
        return false;
    }
    else {
        return this._scope_coll.equals(_scope_coll);
    }
};

/* End of file Selection */
/* Location: ./system/application/views/web_apps/Selection.js *//**
 * Selection_view
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_view(_text) {
    
    Selection.call(this, _text);
    
}

Selection_view.prototype = new Selection();

Selection_view.prototype._$name = 'view';

/* End of file Selection_view */
/* Location: ./system/application/views/web_apps/Selection_view.js *//**
 * Selection_select
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_select(_text) {
    
    Selection.call(this, _text);
	if (KALS_context.hash.has_field('select')) {
		this._setted_hash = true;
	}
	
	var _this = this;
	KALS_context.policy.add_attr_listener('read', function (_policy) {
        //$.test_msg('Selection_select()', _policy.readable());
        _this._selectable = _policy.readable();
    }, true);
}

Selection_select.prototype = new Selection();

/**
 * 開始選取的位置。如果空值，表示1. 尚未選取；2. 選取完畢；
 * @type {int|null}
 */
Selection_select.prototype._select_from = null;
Selection_select.prototype._select_from_word = null;

Selection_select.prototype._select_timer = null;
Selection_select.prototype._setted_hash = false;

Selection_select.prototype._$login_clear = true;

Selection_select.prototype.auto_cancel_wait = 10000;

Selection_select.prototype._selectable = true;

/**
 * 設定選取
 * @param {jQuery} _word
 */
Selection_select.prototype.set_select = function (_word) {
    // 如果輸入參數是範圍，那就改成用Scope_collection_param吧
    if ($.is_class(_word, "Scope_collection_param")) {
        return this.set_scope_coll(_word);
    }
    
    //$.test_msg("Selection_select.set_select()", KALS_context.policy.readable());
    if (this._selectable === false) {
		
        $.test_msg("delete_field select 3");
        KALS_context.hash.delete_field('select');

        return this;
    }
    
    var _id = $.get_prefixed_id(_word);
	
	//第一次點選
    if (this._select_from === null) {
        var _classname = this.get_classname();
        this.clear();
        this._select_from = _id;
        this._select_from_word = _word;
        _word.addClass(_classname);
        
        //2010.11.3 取消自動取消選取功能
        //var _this = this;
        //this._select_timer = setTimeout(function () {
        //    //$.test_msg('Selection_select.set_select() autocancel');
        //    _this._select_from = null;
        //    _word.removeClass(_classname);
        //    _this._select_timer = null;
        //}, this.auto_cancel_wait);
    }
    else {
		//第二次點選，顯示Editor_contrainer
		
        //2010.11.3 取消自動取消選取功能
        //if ($.isset(this._select_timer))
        //    clearTimeout(this._select_timer);
        
        //$.test_msg('Selection_select.set_select()', [this._select_from, _id]);
        
        //在做add_select的時候，就會進行通知
        var _scope_coll = new Scope_collection_param(this._select_from, _id);
        
        if (_scope_coll.length() > 0) {
            var _anchor_text = this._text.get_anchor_text(_scope_coll);
            
            //$.test_msg('Selection_select.set_select()', [_anchor_text.length, KALS_CONFIG.anchor_length_max]);
            
            //2010.12.3 改用ajax_post之後就突破字數限制了
            //if (_anchor_text.length > KALS_CONFIG.anchor_length_max)
            //{
            //    _anchor_text = _anchor_text.substring(0, KALS_CONFIG.anchor_length_max);
            //}
			
            _scope_coll.get(0).set_anchor_text(_anchor_text);
        
            this.set_scope_coll(_scope_coll);
            
            this._setted_hash = true;
			
        }
        
        this._select_from = null;
        this._select_from_word = null;
        
        //$.test_msg('Selection_select.set_select()', [this._select_from, _id]);
    }
    return this;
};

/**
 * 選取物件時加上hash，這是覆蓋Selection的功能
 * @author Pulipuli Chen 20131115
 */
Selection_select.prototype.set_scope_coll = function (_scope_coll) {
    Selection.prototype.set_scope_coll.call(this, _scope_coll);

    var _from = _scope_coll.get_from();
    var _to = _scope_coll.get_to();

    //$.test_msg("select set_scope_coll", [_from, _to]);
    KALS_context.hash.set_field('select', _from + ',' + _to);

    return this;
};

Selection_select.prototype.cancel_select = function () {
    
    if ($.isset(this._select_from_word)) {
        this._select_from_word.removeClass(this.get_classname());
    }
    
    this._select_from = null;
    this._select_from_word = null;
    this._setted_hash = false;
	
	//$.test_msg("delete_field select 1");
	KALS_context.hash.delete_field('select');
    
    return this;
};

Selection_select.prototype.clear = function () {
    if (this._setted_hash === true) {
		//$.test_msg("delete_field select 2");
		KALS_context.hash.delete_field('select');
	}
    
    return Selection.prototype.clear.call(this);
};

Selection_select.prototype.load_select = function (_scope_text) {
    
    if ($.is_null(_scope_text)) {
        return this;
    }
    
    var _scopes = _scope_text.split(',');
    
    var _first_index = _scopes[0];
    var _last_index = _first_index;
    if (_scopes.length > 1) {
        _last_index = _scopes[1];
    }

    var _scope_coll = new Scope_collection_param(_first_index, _last_index);
    var _anchor_text = this._text.get_anchor_text(_scope_coll);
    _scope_coll.get(0).set_anchor_text(_anchor_text);
    this.set_scope_coll(_scope_coll);
    
    //$.test_msg('Selection_select.load_select()');
    
    //var _this = this;
    //setTimeout(function () {
    //    _this.scroll_into_view();    
    //}, 500);
    
    KALS_context.hash.set_field('select', _first_index + ',' + _last_index);
    
    return this;
};

/* End of file Selection_select */
/* Location: ./system/application/views/web_apps/Selection_select.js *//**
 * Selection_recommend
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_recommend(_text) {
    
    Selection.call(this, _text);
    
}

Selection_recommend.prototype = new Selection();

Selection_recommend.prototype._$name = 'recommend';

Selection_recommend.prototype._$select_once = false;

Selection_recommend.prototype._$logout_clear = false;

/* End of file Selection_recommend */
/* Location: ./system/application/views/web_apps/Selection_recommend.js *//**
 * Selection_recommended
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_recommended(_text) {
    
    Selection.call(this, _text);
    
}

Selection_recommended.prototype = new Selection();

Selection_recommended.prototype._$name = 'recommended';

//Selection_recommended.prototype._$select_once = false;

Selection_recommended.prototype._$logout_clear = true;

/* End of file Selection_recommended */
/* Location: ./system/application/views/web_apps/Selection_recommended.js *//**
 * Selection_recommend_by
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_recommend_by(_text) {
    
    Selection.call(this, _text);
    
}

Selection_recommend_by.prototype = new Selection();

Selection_recommend_by.prototype._$name = 'recommend_by';

//Selection_recommend_by.prototype._$select_once = false;

Selection_recommend_by.prototype._$logout_clear = false;

/* End of file Selection_recommend_by */
/* Location: ./system/application/views/web_apps/Selection_recommend_by.js *//**
 * Selection_my
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_my(_text) {
    
    Selection.call(this, _text);
    
}

Selection_my.prototype = new Selection();

Selection_my.prototype._$name = 'my';

Selection_my.prototype._$select_once = false;

/* End of file Selection_my */
/* Location: ./system/application/views/web_apps/Selection_my.js *//**
 * Selection_my_importance
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_importance(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_importance.prototype = new Selection_my();

Selection_my_importance.prototype._$name = 'my_importance';

/* End of file Selection_my_importance */
/* Location: ./system/application/views/web_apps/Selection_my_importance.js *//**
 * Selection_my_concept
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_concept(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_concept.prototype = new Selection_my();

Selection_my_concept.prototype._$name = 'my_concept';

/* End of file Selection_my_concept */
/* Location: ./system/application/views/web_apps/Selection_my_concept.js *//**
 * Selection_my_confusion
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_confusion(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_confusion.prototype = new Selection_my();

Selection_my_confusion.prototype._$name = 'my_confusion';

/* End of file Selection_my_confusion */
/* Location: ./system/application/views/web_apps/Selection_my_confusion.js *//**
 * Selection_my_question
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_question(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_question.prototype = new Selection_my();

Selection_my_question.prototype._$name = 'my_question';

/* End of file Selection_my_question */
/* Location: ./system/application/views/web_apps/Selection_my_question.js *//**
 * Selection_my_example
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_example(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_example.prototype = new Selection_my();

Selection_my_example.prototype._$name = 'my_example';

/* End of file Selection_my_example */
/* Location: ./system/application/views/web_apps/Selection_my_example.js *//**
 * Selection_my_summary
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_summary(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_summary.prototype = new Selection_my();

Selection_my_summary.prototype._$name = 'my_summary';

/* End of file Selection_my_summary */
/* Location: ./system/application/views/web_apps/Selection_my_summary.js *//**
 * Selection_my_custom
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_custom(_text) {
    
    Selection_my.call(this,_text);
    
}

Selection_my_custom.prototype = new Selection_my();

Selection_my_custom.prototype._$name = 'my_custom';

/* End of file Selection_my_custom */
/* Location: ./system/application/views/web_apps/Selection_my_custom.js *//**
 * Selection_my_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:57:42
 * @extends {KALS_user_interface}
 */
function Selection_my_manager(_text) {
    
    KALS_user_interface.call(this);
    
    this.child('importance', new Selection_my_importance(_text));
    this.child('concept', new Selection_my_concept(_text));
    this.child('confusion', new Selection_my_confusion(_text));
    this.child('question', new Selection_my_question(_text));
    this.child('example', new Selection_my_example(_text));
    this.child('summary', new Selection_my_summary(_text));
    this.child('custom', new Selection_my_custom(_text));
	
	return this;
}

// Extend from KALS_user_interface
Selection_my_manager.prototype = new KALS_user_interface();

Selection_my_manager.prototype._my_selections = {
	1: 'importance',
	2: 'question',
	3: 'confusion',
	4: 'summary',
	5: 'concept',
	6: 'example',
	7: 'custom'
};

/**
 * @type {Selection_my_importance}
 */
Selection_my_manager.prototype.importance = null;

/**
 * @type {Selection_my_concept}
 */
Selection_my_manager.prototype.concept = null;

/**
 * @type {Selection_my_confusion}
 */
Selection_my_manager.prototype.confusion = null;

/**
 * @type {Selection_my_question}
 */
Selection_my_manager.prototype.question = null;

/**
 * @type {Selection_my_example}
 */
Selection_my_manager.prototype.example = null;

/**
 * @type {Selection_my_summary}
 */
Selection_my_manager.prototype.summary = null;


/**
 * @type {Selection_my_custom}
 */
Selection_my_manager.prototype.custom = null;

/**
 * 
 * @param {String} _type
 * @param {Scope_collection_param} _scope_coll
 * @param {boolean} _is_initialize
 */
Selection_my_manager.prototype.set_scope_coll = function (_type, _scope_coll, _is_initialize) {
    
    if (_scope_coll.length() === 0) {
		return this;
	}
        
    if ($.is_null(_is_initialize)) {
		_is_initialize = false;
	}
    
    
    //$.test_msg('Selection_my_manager.set_scope_coll()', [_type, $.is_number(_type), typeof(this._my_selections[_type])]);
    //if (typeof(this._my_selections[_type]) == 'string')
    //{
    //    _type = this._my_selections[_type];
    //}
    
    //加入基本標註類型檢查
    var _type_param = KALS_context.predefined_type.find_type(_type);
    if (_type_param.is_basic() === true) {
        _type = _type_param.get_type_name();
    }
    else {
        return KALS_text.selection.my_custom.set_scope_coll(_type, _scope_coll, _is_initialize);
    }
    
    for (var _i in this._my_selections) {
        var _type_name = this._my_selections[_i];
        
        
        //$.test_msg('Selection_my_manager.set_scope_coll()', [_type, _type_name, _i]);
        
        if (_type_name === _type) {
            //如果是現在這個類型，則設置
            this[_type].set_scope_coll(_scope_coll);
            //$.test_msg('Selection_my_manager.set_scope_coll()',[ _scope_coll.length(), typeof(this[_type].set_scope_coll), _type]);
            continue;
        }   
        else if (_is_initialize === false) {
            //其他的則是刪除標註
            this[_type_name].clear_scope_coll(_scope_coll);
        }
    }
    
    return this;
};

Selection_my_manager.prototype.clear = function () {
    
    for (var _i in this._my_selections) {
        var _type = this._my_selections[_i];
        //$.test_msg('Selection_my_manager.clear()', _type);
        this[_type].clear();
    }
    return this;
};

/* End of file Selection_my_manager */
/* Location: ./system/application/views/web_apps/Selection_my_manager.js *//**
 * Selection_my_custom_type
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_my}
 */
function Selection_my_custom_type(_text, _type_name) {
    
    Selection_my.call(this,_text);
    
    if ($.isset(_type_name)) {
		this._$name = _type_name;
	}
}

Selection_my_custom_type.prototype = new Selection_my();

Selection_my_custom_type.prototype._$name = 'my_custom_type';

/* End of file Selection_my_custom_type */
/* Location: ./system/application/views/web_apps/Selection_my_custom_type.js *//**
 * Selection_my_custom_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:57:42
 * @extends {KALS_user_interface}
 */
function Selection_my_custom_manager(_text) {
    
    KALS_user_interface.call(this);
    
    this._text = _text;
	
	var _this = this;
	KALS_context.auth.add_listener(function (_auth) {
		if (_auth.is_login() === false) {
			_this.clear();
		}
	});
}

// Extend from KALS_user_interface
Selection_my_custom_manager.prototype = new KALS_user_interface();

/**
 * @type {KALS_text}
 */
Selection_my_custom_manager.prototype._text = null;

Selection_my_custom_manager.prototype._my_selections = {
};

/**
 * 
 * @param {String} _type_id 現在標註類型
 * @param {Scope_collection_param} _scope_coll
 * @param {boolean} _is_initialize
 */
Selection_my_custom_manager.prototype.set_scope_coll = function (_type_id, _scope_coll, _is_initialize) {
    
    if (_scope_coll.length() === 0) {
		return this;
	}
        
    if ($.is_null(_is_initialize)) {
		_is_initialize = false;
	}
    
    //$.test_msg('my_custom_manager set_scope_coll 1'
    //    , typeof(this._my_selections[_type_id]));
    
    //var _my_custom_type_name = 'my_custom_type_' + _type_id;
    
    var _my_custom_type_name = 'my_custom';
    
    //$.test_msg('my_custom_manager set_scope_coll', _type_id);
    _type_id = decodeURIComponent(_type_id);
    
    var _my_type = KALS_context.predefined_type.find_type(_type_id);
	//$.test_msg('my_custom_manager 轉換成_my_custom_type_name', [$.isset(_my_type) , _my_type.is_predefined()]);
    if ($.isset(_my_type) && _my_type.is_predefined()) {
		_my_custom_type_name = _my_type.get_my_classname();
	}
    
    //$.test_msg('Selection_my_custom_manager.set_scope_coll', [_type_id, _my_custom_type_name, typeof(_my_type)]);
    if (typeof(this._my_selections[_type_id]) === 'undefined') {
        this._my_selections[_type_id] = _my_custom_type_name;
        this.child(_my_custom_type_name, new Selection_my_custom_type(this._text, _my_custom_type_name));
    }
    
    //$.test_msg('my_custom_manager set_scope_coll 2'
    //    , typeof(this._my_selections[_type_id]));
    
    for (var _i in this._my_selections) {
        var _type_name = this._my_selections[_i];
        
        //$.test_msg('my_custom_manager', [_type_name, _i, _type_id, typeof(this[_type_name])]);
        if (_i === _type_id) {
            this[_type_name].set_scope_coll(_scope_coll);
            continue;
        }   
        else if (_is_initialize === false) {
            //其他的則是刪除標註
            this[_type_name].clear_scope_coll(_scope_coll);
        }
    }
    
    return this;
};

Selection_my_custom_manager.prototype.clear = function () {
    
    for (var _i in this._my_selections) {
        var _type_name = this._my_selections[_i];
        this[_type_name].clear();
    }
    return this;
};

/* End of file Selection_my_manager */
/* Location: ./system/application/views/web_apps/Selection_my_manager.js *//**
 * Selection_navigation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_navigation(_text) {
    
    Selection.call(this, _text);
    
}

Selection_navigation.prototype = new Selection();

Selection_navigation.prototype._$name = 'nav';

Selection_navigation.prototype._$select_once = true;

Selection_navigation.prototype._$logout_clear = false;

/* End of file Selection_navigation */
/* Location: ./system/application/views/web_apps/Selection_navigation.js *//**
 * Selection_navigation_bad
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_navigation}
 */
function Selection_navigation_bad(_text) {
    
    Selection_navigation.call(this,_text);
    
}

Selection_navigation_bad.prototype = new Selection_navigation();

Selection_navigation_bad.prototype._$name = 'nav_bad';

/* End of file Selection_navigation_bad */
/* Location: ./system/application/views/web_apps/Selection_navigation_bad.js *//**
 * Selection_navigation_normal
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_navigation}
 */
function Selection_navigation_normal(_text) {
    
    Selection_navigation.call(this,_text);
    
}

Selection_navigation_normal.prototype = new Selection_navigation();

Selection_navigation_normal.prototype._$name = 'nav_normal';

/* End of file Selection_navigation_normal */
/* Location: ./system/application/views/web_apps/Selection_navigation_normal.js *//**
 * Selection_navigation_good
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_navigation}
 */
function Selection_navigation_good(_text) {
    
    Selection_navigation.call(this,_text);
    
}

Selection_navigation_good.prototype = new Selection_navigation();

Selection_navigation_good.prototype._$name = 'nav_good';

/* End of file Selection_navigation_good */
/* Location: ./system/application/views/web_apps/Selection_navigation_good.js *//**
 * Selection_navigation_great
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:58:03
 * @extends {Selection_navigation}
 */
function Selection_navigation_great(_text) {
    
    Selection_navigation.call(this,_text);
    
}

Selection_navigation_great.prototype = new Selection_navigation();

Selection_navigation_great.prototype._$name = 'nav_great';

/* End of file Selection_navigation_great */
/* Location: ./system/application/views/web_apps/Selection_navigation_great.js *//**
 * Selection_navigation_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 01:57:42
 * @extends {KALS_user_interface}
 */
function Selection_navigation_manager(_text) {
    
    KALS_user_interface.call(this);
    
    this.child('bad', new Selection_navigation_bad(_text));
    this.child('normal', new Selection_navigation_normal(_text));
    this.child('good', new Selection_navigation_good(_text));
    this.child('great', new Selection_navigation_great(_text));
    
}

// Extend from KALS_user_interface
Selection_navigation_manager.prototype = new KALS_user_interface();

Selection_navigation_manager.prototype._nav_selections = {
	1: 'bad',
	2: 'normal',
	3: 'good',
	4: 'great'
};

/**
 * @type {Selection_navigation_bad}
 */
Selection_navigation_manager.prototype.bad = null;

/**
 * @type {Selection_navigation_normal}
 */
Selection_navigation_manager.prototype.normal = null;

/**
 * @type {Selection_navigation_good}
 */
Selection_navigation_manager.prototype.good = null;

/**
 * @type {Selection_navigation_great}
 */
Selection_navigation_manager.prototype.great = null;

/**
 * 
 * @param {String} _type
 * @param {Scope_collection_param} _scope_coll
 * @param {boolean} _is_initialize
 */
Selection_navigation_manager.prototype.set_scope_coll = function (_type, _scope_coll, _is_initialize) {
    
	if (KALS_context.policy.allow_show_navigation() === false) {
		return this;
	}
	
    //$.test_msg('Selection_navigation_manager.set_scope_coll()', [_scope_coll.length(), _type, $.is_number(_type), typeof(this._nav_selections[_type])]);
    
    if (_scope_coll.length() === 0) {
		return this;
	}
        
    if ($.is_null(_is_initialize)) {
		_is_initialize = false;
	}
    
    
    //$.test_msg('Selection_navigation_manager.set_scope_coll()', [_type, $.is_number(_type), typeof(this._nav_selections[_type])]);
    
    if (typeof(this._nav_selections[_type]) == 'string') {
        _type = this._nav_selections[_type];
    }
    
    for (var _i in this._nav_selections) {
        var _type_name = this._nav_selections[_i];
        
        
        //$.test_msg('Selection_navigation_manager.set_scope_coll()', [_type, _type_name, _i]);
        
        if (_type_name == _type) {
            //如果是現在這個類型，則設置
            this[_type].set_scope_coll(_scope_coll);
         
            //$.test_msg('Selection_navigation_manager.set_scope_coll()',[ _scope_coll.length(), typeof(this[_type].set_scope_coll), _type, _scope_coll.export_json()]);
               
            //continue;
        }   
        //else if (_is_initialize === false)
        //{
            //其他的則是刪除標註
            //this[_type_name].clear_scope_coll(_scope_coll);
        //}
    }
    
    return this;
};

Selection_navigation_manager.prototype.clear = function () {
    
    for (var _i in this._nav_selections) {
        var _type = this._nav_selections[_i];
        this[_type].clear();
    }
    return this;
};

/* End of file Selection_navigation_manager */
/* Location: ./system/application/views/web_apps/Selection_navigation_manager.js *//**
 * Select_tooltip
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/15 下午 08:23:13
 * @extends {Tooltip_modal}
 * @param {Selectable_text} _selectable_text 父物件
 */
function Select_tooltip(_selectable_text) {
    
    Tooltip_modal.call(this);
    
    var _this = this;
    setTimeout(function () {
        _this.get_ui();
    }, 0);
    
    KALS_context.init_profile.add_listener(function () {
        _this.reset();
    });
	
    setTimeout(function () {
        KALS_text.selection.select.add_listener("select", function() {
                _this.reset();
        });

        KALS_text.selection.select.add_listener("clear", function() {
            _this.reset();
        });
    }, 0);
    
    this._selectable_text = _selectable_text;
}

Select_tooltip.prototype = new Tooltip_modal();

/**
 * 父物件
 * @type {Selectable_text}
 */
Select_tooltip.prototype._selectable_text;

// -----------------------------------
// 內部參數設定
// -----------------------------------

/**
 * 允許選取
 * @type Boolean
 */
Select_tooltip.prototype.enable_select = false;

/**
 * 開始的ID
 * @type String
 */
Select_tooltip.prototype.tooltip_id = 'kals_select_tooltip';

// -----------------------------------
// 方法
// -----------------------------------


/**
 * 重置成為初始狀態
 */
Select_tooltip.prototype.reset = function () {
	var _ui = this.get_ui();
    _ui.removeClass('hide');
    _ui.hide();
    this.enable_select = true;
};

/**
 * 設定tooltip
 * @returns Select_tooltip
 */
Select_tooltip.prototype._$get_config = function () {
    
    var _select_tooltip = this;
    
    var _config = Tooltip_modal.prototype._$get_config.call(this, '#' + this.tooltip_id + ':first');
    //_config['delay'] = 30;
    //_config['predelay'] = 100;
    
    if ($.is_mobile_mode()) {
        _config['events'] = {
            def: 'mouseenter click,null'
        }; 
    }
    else {
        //_config['events'] = {
        //    def: 'mouseenter click,mouseleave'
        //};    
    }
    
    if ($.is_touchable()) {
       var _touch_event = 'touchstart ';
       _config['events']['def'] = _touch_event + _config['events']['def'];
       
       var _trigger_class_name = this.trigger_classname;
       
       if (typeof(TRIGGER_TOUCHSTART_EVENT_LOCK) === 'undefined')
       {
           $('.' + _trigger_class_name).live('touchstart', function (_event) {
               _event.preventDefault();
           });
           TRIGGER_TOUCHSTART_EVENT_LOCK = true;
       }
    }
    
    var _onbeforeshow = _config['onBeforeShow'];
    _config['onBeforeShow'] = function (_event) {
        //if ($.is_null(_this))
        var _this = this;

        var _tip = _this.getTip();
        //setTimeout(function () {
        _tip.addClass("loading");
        //}, 0);
        
        //$.test_msg("onBeforeShow", _tip.css("visibility"));
        
        if (_tip.length === 0) {
            return;
        }

        if (_select_tooltip.enable_select === false) {
            return;
        }

        var _trigger = _this.getTrigger();
        var _id = $.get_prefixed_id(_trigger);

        _select_tooltip._event = _event;
        _select_tooltip._tip = _tip;
        _select_tooltip._trigger = _trigger;

        

        var _position_setup = function () {
            $('.tooltip-trigger-hover').removeClass('tooltip-trigger-hover');
            _trigger.addClass('tooltip-trigger-hover');

            //$.test_msg('Select_tooltip._$get_config()', _tip.length);

            _select_tooltip.setup_position(_after_setup_position);

        };    //var _position_setup = function () {
        
        var _after_setup_position = function () {
            _tip.attr('word_id', _id);

            //在顯示之前，決定是否要調整
            var _selected_classname = 'selected';
            if (KALS_text.selection.select._select_from !== null) {
                _tip.addClass(_selected_classname);
            }
            else {
                _tip.removeClass(_selected_classname);
            }

            if ($.is_function(_onbeforeshow)) {
                _onbeforeshow.call(_this);
            }

            //_tip.removeClass("loading");

            if ($.is_function(_event)) {
                _event();
            }
        };

        var _load_tooltip = function () {
            // 讀取標註
            _select_tooltip.load_tooltip_annotation(_id, function () {
                _position_setup();
            });
        };
        
        //var _preload_position = function () {
        //    _select_tooltip.setup_position(_load_tooltip);
        //};
        
        //_preload_position();
        
        _load_tooltip();
        
    };    //onBeforeShow: function () {
    
    /*
    _config['onShow'] = function () {
        var _this = this;
        //setTimeout(function () {
           
            var _tip = _this.getTip();
            //_tip.removeClass("loading");
            //_tip.hide();
        //},0);
    };
    */
    //_config["predelay"] = 500;
    
    var _onbeforehide = $.get_parameter( _config, 'onBeforeHide' );
    _config['onBeforeHide'] = function (_this) {
        
        if (_select_tooltip.enable_select === false) {
            return;
        }
        
        //if ($.is_null(_this))
        //{
            _this = this;
        //}
        
        if (typeof(_this.getTrigger) !== 'function'
            && typeof(this.getTrigger) === 'function') {
            _this.getTrigger = this.getTrigger;
        }
        var _trigger = _this.getTrigger();
        _trigger.removeClass('tooltip-trigger-hover');
        
        if ($.is_function(_onbeforehide)) {
            _onbeforehide.call(this);
        }
        
        //_this.getTip().addClass("loading");
        
    };    //onBeforeHide: function () {
    
    if ($.is_mobile_mode()) {
        _config['effect'] = 'toggle';
    }
    //else
    //    _config['effect'] = 'fade';
    
    return _config;
};

/**
 * 重設標註的位置
 * @param {Object} _tip
 * @param {Object} _trigger
 * @param {function} _callback
 */
Select_tooltip.prototype.setup_position = function (_callback) {
	
    //this.setup_position_pdf2htmlex();

    var _tip = this._tip;
    var _trigger = this._trigger; 
    var _event = this._event;
    //_tip.addClass("loading");
	
	//$.test_msg("tooltip setup_position", [typeof _tip, typeof _trigger]);
	
	//調整tip的位置
    //setTimeout(function () {
	   /*
        var _trigger_bottom;
        var _tip_top = _tip.offset().top;
        var _top_padding = KALS_toolbar.get_ui().height();
        if (_tip_top < window.pageYOffset + _top_padding) {             
           _trigger_bottom = _trigger.offset().top + _trigger.height();
               _tip.css('top', _trigger_bottom+'px');
           _tip.addClass('bottom');
        }
        else {
            _tip.removeClass('bottom');
        }
        
        var _tip_left = _tip.offset().left;
        var _x_left = window.pageXOffset;
        */
        // 如果他沒有對到字的正上方，則調整一下吧
        /*
        var _trigger_offset = _trigger.offset();
        
		var _tip_width = _tip.width();
		var _tip_height = _tip.height();
		
		var _trigger_width = _trigger.width();
		var _trigger_hei
		
		var _min_width = (_tip_width / 2);
		
		$.test_msg('Select_tooltip._$get_config()'
		  , [_trigger.offset().left, _trigger.offset().top
		      , _tip.offset().left, _tip.offset().top
			  , _min_width]);
		*/
		
		/*
        if (Math.abs( _tip_left - _trigger_offset.left) > _min_width ) {
            //那就定位在滑鼠上方
            //$.test_msg('Select_tooltip._$get_config()', [_event.clientX, _event.clientY]);
            _tip_left = _event.clientX - (_tip.width() / 2);
            _tip.css('left', _tip_left + 'px');
            
            _tip_top = window.pageYOffset + _event.clientY - _tip.height() - 3;
            //$.test_msg('Select_tooltip._$get_config()', [_tip_top]);
            _tip.css('top', _tip_top+'px');
            if (_tip_top < window.pageYOffset + _top_padding) {             
               _tip_top = window.pageYOffset + _event.clientY + (_trigger.height() / 3);
                   _tip.css('top', _tip_top+'px');
               _tip.addClass('bottom');
               //$.test_msg('Select_tooltip._$get_config() bottom', [_event.clientY, _tip_top, window.pageYOffset, _top_padding]);
            }
            else {
                $.test_msg('Select_tooltip._$get_config() top', [_tip_top]);
                _tip.css('top', _tip_top+'px');
                _tip.removeClass('bottom');
            }
        }   //if (Math.abs( _tip_left - _trigger_offset.left) > 50 ) {
        */

        //_trigger.css("color", "red");

    _tip
      //.removeClass('bottom')
      .removeClass('left')
      .removeClass('right');

    var _is_bottom = false;

    // 總之先做起始的對齊
    //_tip.position({
    //    my: 'center bottom',
    //    at: 'left top',
    //    of: _trigger
    //});
    
    $.set_position(_tip, _trigger, {
        my: 'center bottom',
        at: 'center top'
    });
    this.toggle_bottom(_is_bottom);
    
    //_trigger.css("border", "1px solid red");

    //var _tip_offset = _tip.offset();
    
    //$.test_msg("初始對齊之後的結果 1：", [ $.get_offset_bottom(_tip), $.get_offset_top(_trigger)]);
    //$.test_msg("初始對齊之後的結果 left：", [ $.get_offset_left(_tip), _tip.width(),  $.get_offset_left(_trigger), _trigger.width()]);
    //$.test_msg("初始對齊之後的結果 水平：", [ $.get_offset_horizontal_center(_tip), $.get_offset_horizontal_center(_trigger)]);
    //$.test_msg("初始對齊之後的結果 2：", [_trigger_offset]);

    //$.test_msg("position");

    this.setup_position_check(_callback);
        
    //$.trigger_callback(_callback);
    return this;
    //}, 0);    //setTimeout(function () {
};

/**
 * 再確認
 * @param {Function} _callback
 * @returns {Select_tooltip.prototype}
 */
Select_tooltip.prototype.setup_position_check = function (_callback) {
    
    var _tip = this._tip;
    var _trigger = this._trigger; 
    var _event = this._event;
    
    var _tip_offset = $.get_offset(_tip);
    
    var _margin_width = 5;

    var _my_y = "bottom";
    var _at_y = "top";
    var _my_x = "center";
    var _at_x = "center";
    var _changed = false;
    
    var _is_bottom = false;

    //var _trigger_top = _trigger.offset().top;
    var _trigger_top = $.get_offset_top(_trigger);
    if ( _tip_offset.top > _trigger_top 
            || (_tip_offset.top < window.pageYOffset + _margin_width + KALS_toolbar.get_height()) ) {
            //_tip.addClass('bottom');
        _my_y = "top";
        _at_y = "bottom";
        _is_bottom = true;
        _changed = true;
    }

    //$.test_msg('tooltip is bottom [1]', [_tip_offset.top, _trigger.offset().top]);
    //$.test_msg('tooltip is bottom [2]', [_tip_offset.top, [window.pageYOffset, _margin_width, KALS_toolbar.get_height()], _is_bottom]);
    
    
    //this.toggle_bottom(true);
    if (_tip_offset.left < window.pageXOffset + _margin_width) {
        _my_x = "left";
        _at_x = "left";	
        _tip.addClass('left');
        _changed = true;
    }
		
    if (_tip_offset.left + _tip.width() > window.pageXOffset + $("body").width() + _margin_width) {
                    //$.test_msg("tip right", [[_tip_offset.left, _tip.width(), _tip_offset.left + _tip.width()], [window.pageXOffset, $("body").width(), _margin_width]]);
        _my_x = "right";
        _at_x = "right"; 
        _tip.addClass('right');
        _changed = true;
    }
    
    if (_changed === true) {
        //_tip.position({
        //    my: _my_x + ' ' + _my_y,
        //    at: _at_x + ' ' + _at_y,
        //    of: _trigger
        //});
        this.toggle_bottom(_is_bottom);
        $.set_position(_tip, _trigger, {
            my: _my_x + ' ' + _my_y,
            at: _at_x + ' ' + _at_y
        });
    }
    
    _tip.removeClass("loading");
    $.trigger_callback(_callback);
    return this;
};

/**
 * 確認是否是bottom模式
 */
Select_tooltip.prototype.check_bottom = function () {
	var _tip = this._tip;
    var _trigger = this._trigger; 
    var _event = this._event;
	
	var _bottom = "bottom";
	//var _tip_offset = _tip.offset();
        var _tip_offset = $.get_offset(_tip);
	var _margin_width = 5; 
	//var _is_bottom = false;
        
        //var _trigger_top = _trigger.offset().top;
        var _trigger_top = $.get_offset_top( _trigger );
	if ( _tip_offset.top > _trigger_top && 
                    (_tip_offset.top < window.pageYOffset + _margin_width + KALS_toolbar.get_height()) ) {
        //_is_bottom = true;
		_tip.addClass(_bottom);
    }
	else {
		_tip.removeClass(_bottom);
	}
};

/**
 * 切換bottom模式
 * @param {boolean} _is_bottom
 */
Select_tooltip.prototype.toggle_bottom = function (_is_bottom) {
	//$.test_msg('Tooltip toggle_bottom', _is_bottom);
	
    var _content = this.get_ui().find(".tip-content:first");
    var _item_ui = this._item.get_ui();

    var _tip = _content.parent();

    if (_is_bottom) {
        _item_ui.appendTo(_content);
        _tip.addClass('bottom');
    }
    else {
        _item_ui.prependTo(_content);
        _tip.removeClass('bottom');
    }
};

/**
 * 20131108 Pulipuli Chen
 * 只有在pdf2htmlEX的特殊情況下才使用的定位
 */
Select_tooltip.prototype.setup_position_pdf2htmlex = function () {
	
    var _tip = this._tip;
    var _trigger = this._trigger;
    
    if ($(".ff1").length > 0) {
        
        //var _trigger_offset = _trigger.offset();
        var _trigger_offset = $.get_offset( _trigger );
        var _tip_left = (_trigger_offset.left + _trigger.width() / 2 / 2) - (_tip.width() / 2 );
        _tip.css("visibility", "hidden");
        setTimeout(function () {
            _tip.css("left", _tip_left + "px");
            _tip.css("visibility", "visible");
        }, 0);
    }
};

/**
 * Tooltip的設定
 * @type {Object}
 */
Select_tooltip.prototype._tooltip_config = null;

/**
 * 載入初始化tooltip設定
 * @returns {Select_tooltip.prototype@call;_$get_config}
 */
Select_tooltip.prototype.get_tooltip_config = function () {
    if (this._tooltip_config === null) {
        this._tooltip_config = this._$get_config();
    }
    return this._tooltip_config;
};

Select_tooltip.prototype.tooltip_id = 'kals_select_tooltip';
Select_tooltip.prototype.container_classname = 'kals-select-trigger-container';
Select_tooltip.prototype.button_classname = 'kals-select-trigger';

/**
 * 標示現在是Tooltip的trigger的classname
 * @type {String}
 */
Select_tooltip.prototype.trigger_classname = 'tooltip-trigger';

/**
 * Create UI
 * @memberOf {Select_tooltip}
 * @type {jQuery} UI
 */
Select_tooltip.prototype._$create_ui = function () {
    var _this = this;
    
    var _tooltip_id = this.tooltip_id;
    var _container_classname = this.container_classname;
    var _button_classname = this.button_classname;
    
    var _select_button = $('<button class="' + _button_classname + ' select">SELECT</button>');
    var _cancel_button = $('<button class="' + _button_classname + ' cancel">CANCEL</button>');
    
    var _content = $('<div class="tooltip">' 
            + '<div class="tip-needle top"></div>'
            + '<div class="tip-content"></div>'
            + '<div class="tip-needle bottom"></div>' 
            + '</div>');
			
    var _item = this._setup_item();
    _item.get_ui().prependTo(_content.find(".tip-content:first"));
	
    _content.find('.tip-content:first')
        .append(_cancel_button)
        .append(_select_button);
    
	
    var _select_tooltip = this._create_tooltip_prototype({
        id: _tooltip_id,
        content: _content
    });
    
    KALS_context.lang.add_listener(
        _select_button, 
        new KALS_language_param(
            'SELECT',
            'selection_manager.select_tooltip'    
        ) 
    );
    
    KALS_context.lang.add_listener(
        _cancel_button, 
        new KALS_language_param(
            'CANCEL',
            'selection_manager.select_tooltip.cancel'    
        ) 
    );
    
    _select_tooltip.addClass(_container_classname);
    
    //var _word_id_prefix = Selection_manager.prototype.word_id_prefix;
    //var _word_id_prefix = Selectable_text_word.prototype.word_id_prefix;
    //var _word_id_prefix = KALS_CONFIG.classname.selectable_text.word_id_prefix;
    var _selectable_text = this._selectable_text;
    
    /*
    var _select_event = function (_event) {
        _this._select_event(_event);
    };
    
    var _cancel_event = function (_event) {
        _this._cancel_event(_event);
    };
    */
    _select_button.click(function (_event) {
        _this._select_event(_event);
    });
    _cancel_button.click(function (_event) {
        _this._cancel_event(_event)
    });
    
    _select_tooltip.addClass('hide');
    
    var _deny_read_classname = 'deny-read';
    KALS_context.policy.add_attr_listener('read', function (_policy) {
        //$.test_msg('Select_tooltip._$create_ui()', _policy.readable());
        if (_policy.readable()) {
            _select_tooltip.removeClass(_deny_read_classname);
        }
        else {
            _select_tooltip.addClass(_deny_read_classname);
        }
    }, true);
    
    return _select_tooltip;
};

/**
 * 選取事件
 * @param {Object} _event
 * @returns Select_tooltip
 */
Select_tooltip.prototype._select_event = function (_event) {
    //先叫原本的事件不要動
    _event.preventDefault();

    //先關掉上一個的word的Tooltip
    var _tooltip_id = this.tooltip_id;
    
    var _tooltip = $('#' + _tooltip_id);
    var _word_id = _tooltip.attr('word_id');
    //var _word = $('#' + _word_id_prefix + _word_id );
    
    //$.test_msg("_select_event " + this.tooltip_id + ": ", _word_id);
    var _word = this._selectable_text.get_word(_word_id);

    _word.tooltip().hide();

    //呼叫Selection_manager.listen_select()事件
    //_this.listen_select(_word);
    //KALS_text.selection.listen_select(_word);

    KALS_text.selection.select.set_select(_word);
    
    return this;
};

/**
 * 取消事件
 * @param {Object} _event
 * @returns Select_tooltip
 */
Select_tooltip.prototype._cancel_event = function (_event) {
    //先叫原本的事件不要動
    _event.preventDefault();

    var _tooltip_id = this.tooltip_id;

    var _tooltip = $('#' + _tooltip_id);
    var _word_id = _tooltip.attr('word_id');
    //var _word = $('#' + _word_id_prefix + _word_id );
    var _word = this._selectable_text.get_word(_word_id);
    _word.tooltip().hide();

    KALS_text.selection.select.cancel_select();
    
    return this;
};

/**
 * 顯示標註的功能
 * 
 */
Select_tooltip.prototype._item = null;

Select_tooltip.prototype._setup_item = function () {
    var _item = new List_item_tooltip();
    this._item = _item;
    return _item;
};

/**
 * 記錄現在在讀取的ID
 * @deprecated 不使用 Pulipuli Chen 20131116
 */
//Select_tooltip.prototype._load_id = null;

/**
 * 讀取單一標註
 * @param int _index 標註的位置
 * @param function _callback
 */
Select_tooltip.prototype.load_tooltip_annotation = function (_index, _callback) {
	
	//var _item_ui = this._item.get_ui();
	//_item_ui.hide();
	this.reset_style();
	var _url = 'annotation_getter/tooltip';
	var _data = _index;
	
	var _ui = this.get_ui();
	//_ui.addClass("loading");
	
	var _this = this;
	var _ajax_callback = function (_data) {
		//$.test_msg("load_tooltip_annotation", _data);
		
		if (_data.count > 0) {
                    var _annotation_json = _data.annotation;
                    var _param = new Annotation_param(_annotation_json);
                    _this._item.set_data(_param);

                    var _count = _data.count;
                    _this._item.set_count(_count);

                    //_item_ui.show();
                    _this.set_has_annotation();
		}
                else {
                    //_ui.removeClass("loading");
                    $.trigger_callback(_callback);
                    return;
                }
		//_ui.css("visibility", "visible");
		
                _this._item.adjust_note();
		setTimeout(function () {

                    // @author Pulipuli Chen 20131117 17:16 
                    // 這是可以用的版本
                    _this._item.adjust_note();
                    //_ui.removeClass("loading");
                    /*
                    _this.setup_position(function () {
                        //_ui.removeClass("loading");
                        return;

                        _this._item.adjust_note(function () {

                            // 調整過note之後，位置會有所改變，所以需要再調整

                            setTimeout(function () {
                                //$.test_msg('第二次 setup_position');
                                //_ui.removeClass("loading");
                                _this.setup_position();
                            }, 0);
                        });
                    });
                    */
                    $.trigger_callback(_callback);
			 
			 //_this.setup_position(function () {
			 	//setTimeout(function () {
				//	_this.check_bottom();
				//}, 1000);	
			 //});
			 
			 
			 
			 //_ui.appendTo($('body'));
			 
			 //setTimeout(function () {
			 //	_this._item.adjust_note(function () {
			 //		_ui.addClass("loading");
             //       _this.setup_position(function () {
			 //			_ui.removeClass("loading");
			 //		});
             //    });
			 //}, 0);     
        }, 0);
	};
	
	KALS_util.ajax_get({
            url: _url,
            data: _data,
            callback: _ajax_callback
	});
	
	
	return this;
};

Select_tooltip.prototype._has_annotation_classname = "has-annotation";

/**
 * 重設tooltip的樣式
 */
Select_tooltip.prototype.reset_style = function () {
    var _ui = this.get_ui();
    _ui.removeClass(this._has_annotation_classname);
};

/**
 * 變成有標註的樣式
 */
Select_tooltip.prototype.set_has_annotation = function () {
    var _ui = this.get_ui();
    _ui.addClass(this._has_annotation_classname);
};

/**
 * 顯示的位置
 */
Select_tooltip.prototype._tip = null;

/**
 * 觸動的位置
 */
Select_tooltip.prototype._trigger = null;


/**
 * 事件記錄
 */
Select_tooltip.prototype._event = null;

/* End of file Select_tooltip */
/* Location: ./system/application/views/web_apps/Select_tooltip.js *//**
 * Selectable_text_anchor
 *
 * 2014/1/2 檢查完成
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 08:40:23
 */

/**
 * @memberOf {Selectable_text_anchor}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_anchor(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    this._selectable_text_word = _selectable_text.word;
    return this;
    
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_anchor}
 */
Selectable_text_anchor.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_anchor.prototype._selectable_text;

/**
 * 文字相關的物件
 * @type {Selectable_text_word}
 */
Selectable_text_anchor.prototype._selectable_text_word;

// -----------------------------------
// 內部參數設定
// -----------------------------------

// -----------------------------------
// 方法
// -----------------------------------

/**
 * 取得該範圍的文字
 * 
 * 2014/1/2 21:55 檢查完畢
 * 22:00 轉接完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {String}
 */
Selectable_text_anchor.prototype.get_anchor_text = function (_scope_coll) {
    
    var _selectable_text_word = this._selectable_text_word;
    
    if ($.is_null(_scope_coll)) {
        return null;
    }
    
    var _anchor_text = '';
    
    for (var _i = 0; _i < _scope_coll.length(); _i++) {
        var _sentence = '';
        
        var _scope = _scope_coll.get(_i);
        var _from = _scope.get_from();
        var _to = _scope.get_to();
        
        for (var _j = _from; _j < _to + 1; _j++) {
            var _index = _j;
            var _word = _selectable_text_word.get_word_by_index(_index);
            var _text = _word.text();
            		
            _sentence = _sentence + _text;
            
            if (_j < _to
                && _selectable_text_word.is_word_next_span(_word)) {
                _sentence = _sentence + ' ';
            }
            
            // @author Pulipuli Chen <pulipuli.chen@gmail.com> 20131230
            // 如果這裡面很多字的話，表示這是一個英文，應該加上空格
            if (_j < _to
                && _selectable_text_word.is_word_next_english(_word)) {
                _sentence = _sentence + ' ';
                
                //$.test_msg("is_word_next_english", _sentence);
            }
        }
        
        _sentence = $.trim(_sentence);
        
        //不同範圍之間，以空格斷句！
        if (_i > 0) {
            _anchor_text = _anchor_text + ' ';
        }
           
        _anchor_text = _anchor_text + _sentence;
    }
    
    _anchor_text = $.trim(_anchor_text);
    
    //把' "轉換掉
    //_anchor_text = $.str_replace("'", " ", _anchor_text);
    //_text= $.str_replace("'", "&amp;", _text);
	
    return _anchor_text;
};

/**
 * 取得部份的標註範圍文字
 * 
 * 21:56 檢查完畢
 * 22:00 轉接完畢
 * @param {Scope_collection_param} _scope_coll 要選取的範圍
 * @param {Number} _max_length 最長字數，預設是50個字。低於這個數字以下不省略
 * @return {String}
 */
Selectable_text_anchor.prototype.get_abbreviated_anchor_text = function (_scope_coll, _max_length) {
    
    if (_max_length === undefined) {
        _max_length = 50;
    }
    
    var _text = this.get_anchor_text(_scope_coll);

    if (_text.length > _max_length) {
        var _half = parseInt(_max_length / 2);

        var _first_part = _text.substr(0, _half);
        var _last_part = _text.substr(_text.length - _half, _half);
        _text = _first_part + "..." + _last_part; 
    }
    return _text;
};

/**
 * 取得該範圍的文字
 * @param {Scope_collection_param} _scope_coll
 * @param {Scope_collection_param} _focus_coll
 */
Selectable_text_anchor.prototype.get_display_anchor_text = function (_scope_coll, _focus_coll) {
    
    if ($.is_null(_scope_coll)) {
        return null;
    }
    
    var _anchor_text = $('<span></span>');
    
    var _focus_index = [];
    var _focus_head_index = [];
    var _focus_foot_index = [];
    if ($.is_class(_focus_coll, 'Scope_collection_param')) {
        _focus_index = _focus_coll.get_index_array();
        _focus_head_index = _focus_coll.get_from_index_array();
        _focus_foot_index = _focus_coll.get_to_index_array();
    }
    
    var _focus_text = function (_index, _text) {
        if ($.inArray(_index, _focus_head_index) > -1) {
            _text = '<span class="select select_from view">' + _text + '</span>';
        }
        else if ($.inArray(_index, _focus_foot_index) > -1) {
            _text = '<span class="select select_to view">' + _text + '</span>';
        }
        else {
            _text = '<span class="select select_middle view">' + _text + '</span>';
        }
        return _text;
    };
	
    var _focus_single_text = function (_index, _text) {
        if ($.inArray(_index, _focus_head_index) > -1) {
            _text = '<span class="select select_from select_to view">' + _text + '</span>';
        }
        return _text;
    };
    
    var _selectable_text_word = this._selectable_text_word;
    
    var _ellipsis = '<span class="ellipsis">...</span>';
    var _last_id = _selectable_text_word.word_count;
    
    for (var _i = 0; _i < _scope_coll.length(); _i++) {
        var _sentence = '';
        
        var _scope = _scope_coll.get(_i);
        var _from = _scope.get_from();
        var _to = _scope.get_to();
        
        for (var _j = _from; _j < _to + 1; _j++) {
            var _index = _j;
            var _word = _selectable_text_word.get_word_by_index(_index);
            var _text = _word.text();
            
            if (_j < _to
                && _selectable_text_word.is_word_next_span(_word)) {
                _text = _text + ' ';
            }
            else if ($.is_ascii(_text.substr(_text.length-1, 1))) {
                _text = _text + ' ';
            }
            
            for (var _k in _focus_index) {
                if ($.inArray(_j, _focus_index[_k]) > -1) {
                    if (_focus_index.length > 1) {
                        _text = _focus_text(_j, _text);
                    }
                    else {
                        _text = _focus_single_text(_j, _text);
                    }
                }    
            }
            
            _sentence = _sentence + _text; 
        }
        
        _sentence = $.trim(_sentence);
        
        //不同範圍之間，以空格斷句！
        if (_from > 0) {
            _sentence = _ellipsis + _sentence;
        }
        if (_i === _scope_coll.length() - 1 && _to < _last_id) {
            _sentence = _sentence + _ellipsis;
        }
           
        //var _sentence_span = $('<span></span>')
        //    .html(_sentence)
        //    .appendTo(_anchor_text);
        $('<span></span>')
            .html(_sentence)
            .appendTo(_anchor_text);
    }
    
    return _anchor_text;
};

/* End of file Selectable_text_anchor */
/* Location: ./system/application/views/web_apps/Selectable_text_anchor.js *//**
 * Selectable_text_chapter
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 09:17:54
 */

/**
 * @memberOf {Selectable_text_chapter}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_chapter(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    this._text = _selectable_text._text;
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_chapter}
 */
Selectable_text_chapter.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_chapter.prototype._selectable_text;

/**
 * 主要可以選擇的物件
 * @type {jQuery}
 */
Selectable_text_chapter.prototype._text;

// -----------------------------------
// 內部參數設定
// -----------------------------------

/**
 * 章節結構
 * @type Array|Int
 */
Selectable_text_chapter.prototype.structure = [];

/**
 * 如果元素標籤在此之中，則會被視為章節
 * 
 * @type {Array}
 */
Selectable_text_chapter.prototype.chapter_tag_names = ["h1", "h2", "h3", "h4", "h5", "h6"];

// -----------------------------------
// 方法
// -----------------------------------

/**
 * 類別名稱
 * @type String
 */
Selectable_text_chapter.prototype.classname = "kals-heading";

/**
 * 增加句子的結構
 * 
 * 要取得句子的第一部分
 * @param {jQuery} _child_obj 子節點
 * @returns {Selectable_text_chapter}
 */
Selectable_text_chapter.prototype.add_structure = function (_child_obj) {
    var _word_count = this._selectable_text.word.word_count;
   
    if (_child_obj !== undefined) {
        var _selectable_text_word = this._selectable_text.word;
        _child_obj = $(_child_obj);
        var _word_classname = _selectable_text_word.word_classname;
        var _first_word = _child_obj.find("." + _word_classname + ":first");
        var _first_word_id = _selectable_text_word.get_word_id(_first_word);
        _word_count = _first_word_id - 1;
        
        this.heading_list.push(_child_obj);
    }
   
    var _structure_count;
    if (_word_count < 1) {
        _structure_count = (this.structure.length);
        $(_child_obj).addClass(this.classname + "-" + _structure_count)
                .addClass(this.classname);
        return _structure_count;
    }
    if (this.structure.length === 0) {
        this.structure.push(_word_count);
    }
    else if (_word_count !== this.structure[this.structure.length-1]) {
        this.structure.push(_word_count);
    }
    _structure_count = (this.structure.length - 1);
    $(_child_obj).addClass(this.classname + "-" + (_structure_count + 1))
            .addClass(this.classname);
    
    return _structure_count;
};

/**
 * 取得目前計算的句子數量
 * @returns {number}
 */
Selectable_text_chapter.prototype.count_strucutre = function () {
    return this.structure.length;
};

/**
 * 取得句子的結構
 * @returns {Selectable_text_sentence.prototype}
 */
Selectable_text_chapter.prototype.get_structure = function () {
    return this.structure;
};


/**
 * 儲存章節標題
 * @type Array
 */
Selectable_text_chapter.prototype.heading_list = [];

/**
 * 取得標題列表
 * @returns Array|每個heading的jQuery
 */
Selectable_text_chapter.prototype.get_heading_list = function () {
    return this.heading_list;
};

/**
 * 取得標題列表
 * @param {Int} heading
 * @returns heading的jQuery
 */
Selectable_text_chapter.prototype.get_heading = function (_heading_id) {
    if (typeof(this.heading_list[_heading_id]) !== "undefined") {
        return this.heading_list[_heading_id];
    }
    else {
        return null;
    }
};

/**
 * 取得標題列表
 * @param {Int} heading
 * @returns heading的文字
 */
Selectable_text_chapter.prototype.get_heading_text = function (_heading_id) {
    if (typeof(this.heading_list[_heading_id]) !== "undefined") {
        return this.heading_list[_heading_id].text();
    }
    else {
        return null;
    }
};

/**
 * 捲動到指定標題
 * @param {Int} _heading_id
 * @param {Function} _callback
 * @returns {Selectable_text_chapter.prototype}
 */
Selectable_text_chapter.prototype.scroll_to = function (_heading_id, _callback) {
    
    if (_heading_id === undefined) {
        return this;
    }
    
    var _position = {
        selector: "." + this.classname + "-" + _heading_id + ":first"
    };
    
    var _speed = 500;
    $.test_msg("chapter scroll_to", _position);
    $.scroll_to(_position, _speed, _callback);
    
    return this;
};

/* End of file Selectable_text_chapter */
/* Location: ./system/application/views/web_apps/Selectable_text_chapter.js *//**
 * Selectable_text_location
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 09:45:35
 */

/**
 * @memberOf {Selectable_text_location}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_location(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_location}
 */
Selectable_text_location.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_location.prototype._selectable_text;

/**
 * 主要可以選擇的物件
 * @type {jQuery}
 */
Selectable_text_location.prototype._text;

// -----------------------------------
// 內部參數設定
// -----------------------------------

/**
 * 標註相對位置的classname，以及其代號
 * 
 * 2221 檢查完畢
 * @type {Array} 
 */
Selectable_text_location.prototype.location_classnames = [
                             //view modal
    'location-head',         //0    0 表示開頭
    'location-foot',         //1    4 表示結尾
    null,                    //2    2 表示同時是接近開頭與結尾
    'location-near-head',    //3    1 表示接近開頭
    'location-near-foot'     //4    3 標示接近結尾
                             //     6 表示同時是開頭與結尾
                             //     5 其他位置
];


// -----------------------------------
// 方法
// -----------------------------------

/**
 * 取得段落的特徵
 *                           //view modal
 *  'location-head',         //0    0
 *  'location-foot',         //1    4
 *  'location-near-head-foot'//2    2
 *  'location-near-head',    //3    1
 *  'location-near-foot'     //4    3
 *  'location-head-foot'     //     5
 *  (other)                  //     6
 *  
 *  2221 檢查完畢，轉接完畢
 * @param {Scope_collection_param} _scope_coll
 */
Selectable_text_location.prototype.get_location_feature = function (_scope_coll) {
	
    var _classnames = this.location_classnames;
    var _words = this._selectable_text.scope.get_words_by_scope_coll(_scope_coll);
    
    var _location_id_ary = [];
    
    var _push_location = function (_id) {
        if ($.inArray(_id, _location_id_ary) === -1) {
            _location_id_ary.push(_id);
        }
    };
    
    for (var _i in _words) {
        for (var _j in _words[_i]) {
            var _word = _words[_i][_j];
            
            if (_word.hasClass(_classnames[0]) 
                && _word.hasClass(_classnames[1])) {
                _push_location(5);
            }
            else {
                if (_word.hasClass(_classnames[0])) {
                    _push_location(0);
                }
                
                if (_word.hasClass(_classnames[1])) {
                    _push_location(4);
                }    
            }   
            
            if (_word.hasClass(_classnames[3])
                && _word.hasClass(_classnames[4])) {
                _push_location(2);
            }
            else {
                if (_word.hasClass(_classnames[3])) {
                    _push_location(1);
                }
                
                if (_word.hasClass(_classnames[4])) {
                    _push_location(3);
                }    
            }
        }
    }
    
    //if (_location_id_ary.length === 0)
    //    _location_id_ary.push(5);    //預設是5
    
    return _location_id_ary;
    
};

/**
 * 設定各個字在段落中的位置
 * 
 * 備註：位置與代號
 * 0 => head : location-head
 * 1 => foot : location-foot
 * 2 => near head & foot : 此情況並不標示，由get_paragraph_location()去判斷
 * 3 => near head : location-near-head
 * 4 => near foot : location-near-foot
 * 5 => body : 沒有標示
 * 
 * 2220 檢查完畢
 * @param {function} _callback
 */
Selectable_text_location.prototype.setup_paragraph_location = function(_callback) {
    
    var _selectable_text = this._selectable_text;
    
    var _selectable_text_word = _selectable_text.word;
    
    var _word_class_name = _selectable_text_word.word_classname;
    var _span_classname = _selectable_text_word._span_classname;
    var _word_id_prefix = _selectable_text_word.word_id_prefix;
    
    //--- 
    
    var _selectable_text_sentence = _selectable_text.sentence;
    
    var _sentence_punctuation_class_name = _selectable_text_sentence.sententce_punctuation_classname;
    
    //--- 
    
    var _location_class_names = this.location_classnames;
    
    //--- 
    
    var _selectable_text_paragraph = _selectable_text.paragraph;
    
    var _paragraph_class_name = _selectable_text_paragraph.paragraph_classname;
    var _paragraph_id_prefix = _selectable_text_paragraph.paragraph_id_prefix;
    
    //--- 
    
    var _text = _selectable_text._text;
    
    var _paragraphs = _text.find('.' + _paragraph_class_name);
    var _first_paragraph = _text.find('.' + _paragraph_class_name + ':first');
    var _last_paragraph = _text.find('.' + _paragraph_class_name + ':last');
    
    var _first_paragraph_id = _selectable_text_paragraph.get_paragraph_id(_first_paragraph);
    var _last_paragraph_id = _selectable_text_paragraph.get_paragraph_id(_last_paragraph);
    
    //$.test_msg('selectable.setup_paragraph_location()', [ _text.find('.' + _paragraph_class_name).length, _first_paragraph_id , _last_paragraph_id]);
    
    var _batch_excute = _selectable_text.excute_interval.batch_excute;
    var _wait = _selectable_text.excute_interval.wait;
    
    var _excute_timer;
    var _this = this;
    
    var _continue = function (_i, _callback) {
        
        _i++;
        
        /**
         * 加入統計目前字串次數的功能
         * @author Pulipuli Chen  20140518
         */
        KALS_context.progress.add_count(2);
        
        if (_i % _batch_excute === 0) {
            _excute_timer = setTimeout(function () {
                _loop(_i, _callback);
            }, _wait);    
        }
        else {
            _loop(_i, _callback);
        }
    };
    
    var _complete = function () {
        if ($.is_function(_callback)) {
            _callback();
        }
        return;
    };
    
    var _loop = function (_i) {
        //_first_paragraph = _text.find('.' + _paragraph_id_prefix + _i + ':first');
        //_last_paragraph = _text.find('.' + _paragraph_id_prefix + _i + ':last');
        
        //沒有段落了，結束了，所以呼叫完結的函數
        //$.test_msg('selectable.setup_paragraph_location()', [_i, _last_paragraph_id]);
        //if (_i === _last_paragraph_id + 1 || _i > _last_paragraph_id + 1) {
        //    _complete();
        //    return;
        //}
        if (_i === _paragraphs.length) {
            _complete();
            return;
        }
        
        //如果找不到下一個段落，則結束迴圈
        //if (false === _first_paragraph.exists()) {
            //$.test_msg('_text.setup_paragraph_location()',' Cannot found ' + _i);
        //   _continue(_i);
        //   return;
        //}
        
        //取得段落頭尾的編號
        //var _first_word = _first_paragraph.find('.' + _word_class_name + ':not(.' + _span_classname +'):first');
        //var _last_word = _last_paragraph.find('.' + _word_class_name + ':not(.' + _span_classname +'):last');
        var _paragraph = _paragraphs.eq(_i);
        var _words_selector = '.' + _word_class_name + ':not(.' + _span_classname +')';
        var _paragraph_words = _paragraph.find(_words_selector);
        var _first_word = _paragraph_words.filter(':first');
        var _last_word = _paragraph_words.filter(':last');
        
        //_first_word.css("color", "blue");
        //_last_word.css("color", "red");
        //$.test_msg("location", [_first_word.text(), _last_word.text(), _words_selector]);
        
        if (false === _first_word.exists()
            || false === _last_word.exists()) {
            _continue(_i, _callback);
            return;
        }
        
        var _first_id = $.get_prefixed_id(_first_word.attr('id'));
        var _last_id = $.get_prefixed_id(_last_word.attr('id'));
        
        //$.test_msg("location word_id", [_first_id, _last_id]);
        
        //標示段落開頭的部份
        var _location = 0;
        //for (var _w = _first_id; _w < _last_id + 1; _w++) {
        if (_paragraph_words.filter("." + _sentence_punctuation_class_name).length === 0) {
            var _word = _paragraph_words.eq(0);
            _word.addClass(_location_class_names[_location]);
        }
        else {
            for (var _w = 0; _w < _paragraph_words.length; _w++) {
                //var _word = $('#' + _word_id_prefix + _w + ':first');
                var _word = _paragraph_words.eq(_w);

                //$.test_msg('location 1', [_w, _word.length, '#' + _word_id_prefix + _w + ':first']);
                _word.addClass(_location_class_names[_location]);

                if (_word.hasClass(_sentence_punctuation_class_name)) {
                    if (_location === 0) {
                        _location = 3;
                    }
                    else {
                        //迴圈結束
                        break;
                    }
                }
            }
        }
        
        _excute_timer = setTimeout(function () {
            
            //標示段落結尾的部份
            _location = 1;
            
            if (_paragraph_words.filter("." + _sentence_punctuation_class_name).length === 0) {
                var _word = _paragraph_words.eq(_paragraph_words.length -1);
                _word.addClass(_location_class_names[_location]);
            }
            else {
                //for (var _w = _last_id; _w > _first_id - 1; _w--) {
                for (var _w = _paragraph_words.length -1; _w === 0; _w--) {
                    //var _word = $('#' + _word_id_prefix + _w + ':first');
                    var _word = _paragraph_words.eq(_w);

                    if (_w < _last_id - 3
                        && _word.hasClass(_sentence_punctuation_class_name)) {
                        if (_location === 1) {
                            _location = 4;
                        }
                        else {
                            //迴圈結束
                            break;
                        }
                    }

                    _word.addClass(_location_class_names[_location]);
                }
            }
                
            //處理完畢，進行下一個迴圈
            _continue(_i);
            return;
        }, 0);  //_excute_timer = setTimeout(function () {
    };
    
    _loop(0);
    return this;
};


/* End of file Selectable_text_location */
/* Location: ./system/application/views/web_apps/Selectable_text_location.js *//**
 * Selectable_text_offset
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 09:04:00
 */

/**
 * @memberOf {Selectable_text_offset}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_offset(_selectable_text) {
   
    this._selectable_text = _selectable_text;
    this._selectable_text_word = _selectable_text.word;
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_offset}
 */
Selectable_text_offset.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_offset.prototype._selectable_text;

/**
 * 父物件的Selectable_text_word
 * @type {Selectable_text_word}
 */
Selectable_text_offset.prototype._selectable_text_word;


// -----------------------------------
// 內部參數設定
// -----------------------------------

// -----------------------------------
// 方法
// -----------------------------------

/**
 * 取得選取範圍的top位置
 * 
 * 2223 轉接完畢
 * 2224 檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text_offset.prototype.get_offset_top = function (_scope_coll) {
    
    var _offset = null;
    if ($.is_null(_scope_coll)) {
        return _offset;
    }
    
    var _index = _scope_coll.get_first_index();
    if ($.isset(_index)) {
        var _word = this._selectable_text_word.get_word_by_index(_index);
        //_offset = _word.offset().top;
        _offset = $.get_offset_top(_word);
    }
    
    return _offset;
};

/**
 * 取得選取範圍最底部的位置
 * 
 * 2224 轉接完畢，檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text_offset.prototype.get_offset_bottom = function (_scope_coll) {
    
    var _offset = null;
    if ($.is_null(_scope_coll)) {
        return _offset;
    }
    
    var _index = _scope_coll.get_last_index();
    if ($.isset(_index)) {
        var _word = this._selectable_text_word.get_word_by_index(_index);
        
        /**
         * @20140110 Pudding Chen
         * 用jQuery的會有很大的問題
         * 所以改用其他方法
         */
        //_offset = _word.offset().top + _word.height();
        _offset = $.get_offset_bottom(_word);
    }
    
    //$.test_msg('取得選取位置底部', [_offset, _word.offset().top, _word.attr("offsetTop")]);
    
    return _offset;
};

/**
 * 取得標註範圍最左邊的位置
 * 
 * 2230 轉接完畢，檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text_offset.prototype.get_offset_left = function (_scope_coll) {
    var _offset = null;
    
    var _words = this._selectable_text.scope.get_words_by_scope_coll(_scope_coll);
    for (var _i in _words) {
        for (var _j in _words[_i]) {
            var _word = _words[_i][_j];
            
            //var _o = _word.offset().left;
            var _o = $.get_offset_left(_word);
            
            if (_offset === null ||
                    _o < _offset) {
                _offset = _o;
            }
        }
    }
    
    return _offset;
};

/**
 * 取得現在標註範圍最右邊的位置
 * 
 * 2231 轉接完畢，檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text_offset.prototype.get_offset_right = function (_scope_coll) {
    var _offset = null;
    
    var _words = this._selectable_text.scope.get_words_by_scope_coll(_scope_coll);
    for (var _i in _words) {
        for (var _j in _words[_i]) {
            var _word = _words[_i][_j];
            
            //var _o = _word.offset().left + _word.width();
            var _o = $.get_offset_right(_word);
            
            if (_offset === null 
                || _o > _offset) {
                _offset = _o;
            }
        }
    }
    
    return _offset;
};

/**
 * 取得標註範圍中，第一個範圍的第一個字的左邊位置
 * 
 * 2233 轉接完畢，檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text_offset.prototype.get_offset_first_left = function (_scope_coll) {
    var _offset = null;
    
    var _index = _scope_coll.get_first_index();
    
    if ($.is_number(_index)) {
        var _word = this._selectable_text_word.get_word_by_index(_index);
        //_offset = _word.offset().left;
        _offset = $.get_offset_left(_word);
    }
    
    return _offset;
};

/**
 * 取得標註範圍中，最後一個範圍的最後一個字的右邊位置
 * 
 * 2233 轉接完畢，檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text_offset.prototype.get_offset_last_right = function (_scope_coll) {
    var _offset = null;
    
    var _index = _scope_coll.get_last_index();
    
    if ($.is_number(_index)) {
        var _word = this._selectable_text_word.get_word_by_index(_index);
        //_offset = _word.offset().left + _word.width();
        _offset = $.get_offset_right(_word);
    }
    
    return _offset;
};


/* End of file Selectable_text_offset */
/* Location: ./system/application/views/web_apps/Selectable_text_offset.js *//**
 * Selectable_text_paragraph
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 09:17:54
 */

/**
 * @memberOf {Selectable_text_paragraph}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_paragraph(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    this._text = _selectable_text._text;
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_paragraph}
 */
Selectable_text_paragraph.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_paragraph.prototype._selectable_text;

/**
 * 主要可以選擇的物件
 * @type {jQuery}
 */
Selectable_text_paragraph.prototype._text;

// -----------------------------------
// 內部參數設定
// -----------------------------------

/**
 * 段落的ID前置詞
 * 
 * 2234 檢查完畢
 * @type String
 */
Selectable_text_paragraph.prototype.paragraph_id_prefix = 'kals_paragraph_';

/**
 * 段落的classname
 * 
 * 2234 檢查完畢
 * @type {String}
 */
Selectable_text_paragraph.prototype.paragraph_classname = 'kals-paragraph';

/**
 * 如果元素標籤在此之中，則會被視為段落
 * 
 * 2234 檢查完畢
 * @type {Array}
 */
Selectable_text_paragraph.prototype.paragraph_tag_names = ["h1", "h2", "h3", "h4", "h5", "h6", "div", "p", "ol", 'li', "ul", 'dl', 'dd', 'dt', "table", "code", "blockquote"];


/**
 * 段落記數，初始化時使用。
 * 
 * 2235 檢查完畢
 * @type {number}
 */
Selectable_text_paragraph.prototype.paragraph_count = 0;

/**
 * 段落特徵，保存段落切割的特徵。
 * 
 * 2235 檢查完畢
 * @type {Array|number}
 */
Selectable_text_paragraph.prototype.paragraph_structure = [];


// -----------------------------------
// 方法
// -----------------------------------

/**
 * 建立一個可以選取Word的容器
 * 
 * 2236 轉接完畢，檢查完畢
 * @param {number} _id
 * @type {HTMLElementSpan}
 */
Selectable_text_paragraph.prototype.create_selectable_paragraph = function (_id) {
    var _ele = document.createElement('span');
    
    _ele.className = this.paragraph_classname 
        + ' '
        + this.paragraph_id_prefix + _id;
        
    return _ele;
};

/**
 * 建立一個空容器
 * 
 * @type {HTMLElementSpan}
 */
Selectable_text_paragraph.prototype.create_span = function () {
    var _ele = document.createElement('span');
    
    return _ele;
};

/**
 * 取得段落的ID
 * 
 * 2237 轉接完畢，檢查完畢
 * @param {number|string|Object} _word
 */
Selectable_text_paragraph.prototype.get_paragraph_id = function(_word) { 
    
    var _selectable_text_word = this._selectable_text.word;
    
    if ($.is_number(_word)) {
        _word = _selectable_text_word.word_id_prefix + _word;
    }
    if ($.is_string(_word)) {
        _word = $('#' + _word);
    }
    if ($.is_object(_word) && false === $.is_jquery(_word)) {
        _word = $(_word);
    }
    
    var _paragraph_class_name = this.paragraph_classname;
    var _paragraph;
    if (false === _word.hasClass(_paragraph_class_name)) {
        _paragraph = _word.parents( '.' + this.paragraph_classname + ':first');
    }
    else {
        _paragraph = _word;
    }
        
    if (false === _paragraph.exists()) {
        return null;
    }
        
    var _paragraph_class_names = _paragraph.attr('className').split(' ');
    for (var _i in _paragraph_class_names) {
        var _class_name = _paragraph_class_names[_i];
        //$.test_msg('Selectable .get_paragraph_id()', [_class_name, _i, this.paragraph_id_prefix, $.get_prefixed_id(_class_name)]);
        if ($.starts_with(_class_name, this.paragraph_id_prefix)) {
            return $.get_prefixed_id(_class_name);
        }
    }
    return null;
};

/**
 * 計算段落的平均字數
 * 
 * 測試用，結果顯示在console端
 * 
 * 2242 檢查完畢，轉接完畢
 */
Selectable_text_paragraph.prototype.count_paragraph_words_avg = function () {
    
    var _selectable_text_word = this._selectable_text.word;
    
    var _paragraph_class_name = this.paragraph_classname;
    var _paragraph_id_prefix = this.paragraph_id_prefix;
    
    
    var _first_paragraph = this._text.find('.' + _paragraph_class_name + ':first');
    var _last_paragraph = this._text.find('.' + _paragraph_class_name + ':last');
    
    var _first_paragraph_id = this.get_paragraph_id(_first_paragraph);
    var _last_paragraph_id = this.get_paragraph_id(_last_paragraph);
    
    var _word_classname = _selectable_text_word.word_classname;
    var _punctuation_classname = this._selectable_text.sentence.punctuation_classname;
    var _sententce_punctuation_classname = this._selectable_text.sentence.sententce_punctuation_classname;
    
    var _para_ary = [];
 
    var _this = this;   
    var _loop = function (_i) {
        if (_i < _last_paragraph_id + 1) {
            _length = _this._text.find('.' 
                    + _paragraph_id_prefix + _i 
                    + ' .' + _word_classname 
                    + ':not(.span):not(.'
                    + _punctuation_classname+'):not(.'
                    +_sententce_punctuation_classname+')').length;
        
            //$.test_msg(_length);
            if (_length > 10) {
                _para_ary.push(_length);
            }
            
            setTimeout(function () {
                _i++;
                _loop(_i);
            }, 0);
        }
        else {
            $.test_msg('Total words', _selectable_text_word.word_count);
    
            var _sum = 0;
            for (_i in _para_ary) {
                _sum = _sum + _para_ary[_i];
            }
            var _avg = _sum / _para_ary.length;
            
            $.test_msg('Per paragraph avg words', _avg);
        }
    };
    
    _loop(_first_paragraph_id);
};

/**
 * 增加句子的結構
 * @returns {Selectable_text_sentence.prototype}
 */
Selectable_text_paragraph.prototype.add_structure = function () {
    var _word_count = this._selectable_text.word.word_count;
    
    if (_word_count < 1) {
        return this;
    }
    if (this.paragraph_structure.length === 0) {
        this.paragraph_structure.push(_word_count);
    }
    else if (_word_count !== this.paragraph_structure[this.paragraph_structure.length-1]) {
        this.paragraph_structure.push(_word_count);
    }
    return this;
};

/**
 * 取得目前計算的句子數量
 * @returns {number}
 */
Selectable_text_paragraph.prototype.count_strucutre = function () {
    return this.paragraph_structure.length;
};

/**
 * 取得句子的結構
 * @returns {Selectable_text_sentence.prototype}
 */
Selectable_text_paragraph.prototype.get_structure = function () {
    return this.paragraph_structure;
};

/**
 * 儲存到快取中
 * @param {String} _cache_id
 * @param {funciton} _callback
 * @returns {Selectable_text_paragraph}
 */
Selectable_text_paragraph.prototype.cache_save = function (_cache_id, _callback) {
    _cache_id = _cache_id + '_paragraph';
    //$.test_msg('paragraph save: ' + _cache_id, this.paragraph_count);
    KALS_context.storage.set(_cache_id, this.paragraph_count, _callback);
    return this;
};

/**
 * 從快取中復原
 * @param {String} _cache_id
 * @param {funciton} _callback
 * @returns {Selectable_text_paragraph}
 */
Selectable_text_paragraph.prototype.cache_restore = function (_cache_id, _callback) {
    _cache_id = _cache_id + '_paragraph';
    //this.paragraph_count = $.localStorage.get(_cache_id);
    var _this = this;
    KALS_context.storage.get(_cache_id, function (_value) {
        _this.paragraph_count = _value;
        $.trigger_callback(_callback);
    });
    //$.test_msg('paragraph restore: ' + _cache_id, this.paragraph_count);
    return this;
};

// -------------------------------------------

/**
 * cache storage使用的ID
 * @type type
 */
Selectable_text_paragraph.prototype._cache_id = null;

/**
 * 初始化next_element，只用於setup_selectable_element
 * @param {String} _text
 * @param {jQuery} _child_obj
 * @returns {HTMLNode}
 */
Selectable_text_paragraph.prototype._setup_selectable_element_init_next_element = function (_text, _child_obj) {
    // 變數簡化
    var _selectable_text_paragraph = this;
    var _selectable_text_word = this._selectable_text.word;
    var _selectable_text_sentence = this._selectable_text.sentence;
    var _sentence_punctuation_class_name = this._selectable_text.sentence.sententce_punctuation_classname;
    var _punctuation_classname = this._selectable_text.sentence.punctuation_classname;
    
    var _next_element;
    // ----------------------
    // 設定快取資訊
    
    // 決定是否使用快取
    /*
    var _cache_enable = false;
    //_cache_enable = true;
    
    var _local_storage = KALS_context.storage;
    this._cache_id = 'next_element_' + _selectable_text_word.word_count;
    
    // 嘗試取得快取資料
    
    // 如果有資料
    //if (_next_element !== undefined) {
    if (_local_storage.is_set(this._cache_id) && _cache_enable) {
        _next_element = _local_storage.get(this._cache_id);
        var _jquery_object = $("<span>" + _next_element + "</span>");
        var _html_object = _jquery_object.get(0);
        
        _selectable_text_word.cache_restore(this._cache_id);
        _selectable_text_sentence.cache_restore(this._cache_id);
        _selectable_text_paragraph.cache_restore(this._cache_id);
        // 應該還要加上事件的處理，但現在先暫緩
        
        return _html_object;
    }
    */
    // ----------------------
    // 以下是正式的初始化
    
    if (this.is_paragraph_node(_child_obj)) {
        _next_element = this.create_selectable_paragraph(_selectable_text_word.word_count);
    }
    else {
        _next_element = this.create_span();
    }
    
    
    $(_next_element).hide();
            
    /**
     * @version 20111106 Pudding Chen
     *     先不貼出去，讓他放在記憶體中處理。
     *     處理完一個段落在貼到DOM去。
     */
    //_child_obj.parentNode.insertBefore(_next_element, _child_obj);

    for (var _s = 0; _s < _text.length; _s++) {
        var _t = _text.substr(_s, 1);
        var _t_prev = '',  _t_next = '';

        if (_s > 0) {
            _t_prev = _text.substr(parseInt(_s,10) - 1, 1);
        }

        if (_s < _text.length - 1) {
            _t_next = _text.substr(parseInt(_s,10) + 1, 1);
        }

        if ($.match_english(_t) === true) {	
            while ($.match_english(_t_next) === true) {
                _t = _t + _t_next;
                _s++;
                _t_next = _text.substr(parseInt(_s,10)+1, 1);
            }
        }
        else if ($.match_number(_t) === true) {
            while ($.match_number(_t_next) === true) {
                _t = _t + _t_next;
                _s++;
                _t_next = _text.substr(parseInt(_s,10)+1, 1);
            }
        }

        var _t_element = null;

        // 如果不是空白的話
        if ($.match_space(_t) === false) {

            _t_element = _selectable_text_word.create_selectable_word(
                    _selectable_text_paragraph.paragraph_count, 
                    _selectable_text_word.word_count, _t
            );

            if ($.match_sentence_punctuation(_t)) {
                if ($.match_english_sentence_punctuation(_t)) {
                    if (_t_next === '') {
                        $(_t_element).addClass(_sentence_punctuation_class_name);

                        // 20140102 Pulipuli Chen
                        // 增加句子的計算數量
                        _selectable_text_sentence.add_structure();
                    }
                    else if ($.match_space(_t_next)) {
                        if (_s < _text.length - 2) {
                            //檢測下下個字是否是大寫英文
                            var _t_nnext = _text.substr(parseInt(_s, 10) + 2, 1);
                            if ($.match_upper_english(_t_nnext)) {
                                $(_t_element).addClass(_sentence_punctuation_class_name);

                                // 20140102 Pulipuli Chen
                                // 增加句子的計算數量
                                _selectable_text_sentence.add_structure();
                            }   //if ($.match_upper_english(_t_nnext)) {
                            else {
                                $(_t_element).addClass(_punctuation_classname);
                            }
                        }   //if (_s < _text.length - 2) {
                        else {
                            $(_t_element).addClass(_sentence_punctuation_class_name);

                            // 20140102 Pulipuli Chen
                            // 增加句子的計算數量
                            _selectable_text_sentence.add_structure();
                        }
                    }   // else if ($.match_space(_t_next)) {
                    else {
                        $(_t_element).addClass(_punctuation_classname);
                    }
                }   //if ($.match_sentence_punctuation(_t)) {
                else {
                    $(_t_element).addClass(_sentence_punctuation_class_name);

                    // 20140102 Pulipuli Chen
                    // 增加句子的計算數量
                    _selectable_text_sentence.add_structure();
                }
            }   //if ($.match_sentence_punctuation(_t)) {
            else if ($.match_punctuation(_t)) {
                $(_t_element).addClass(_punctuation_classname);
            }   //else if ($.match_punctuation(_t)) {
            
            _selectable_text_word.word_count++;
            
        }   //if ($.match_space(_t) === false) {
        else {
            // 如果是空白的話
            _t_element = this._selectable_text.create_span_word(_t);
        }

        _next_element.appendChild(_t_element);
    }    //for (var _s = 0; _s < _text.length; _s++)
    
    // ---------------------------
    // 儲存快取資料
    
    /*
    if (_cache_enable) {
        var _next_element_html = $(_next_element).html();
        
        //$.test_msg('cookie next_element: ' +  _cache_id, _next_element_html);
        _local_storage.set(this._cache_id
            , _next_element_html
            //, _cookie_param
            );

        _selectable_text_word.cache_save(this._cache_id);
        _selectable_text_sentence.cache_save(this._cache_id);
        _selectable_text_paragraph.cache_save(this._cache_id);
    }
    */
    // ---------------------------
    // 回傳
    
    return _next_element;
};

/**
 * 檢查是否是段落節點
 * @param {String|HTMLElement|jQuery} _node
 * @returns {Boolean}
 */
Selectable_text_paragraph.prototype.is_paragraph_node = function (_node) {
    var _tags = this.paragraph_tag_names;
    
    var _node_name;
    if (typeof(_node.nodeName) === "string") {
        _node_name = _node.nodeName;
    }
    else if (typeof(_node.attr) === "function") {
        _node_name = _node.attr("nodeName");
    }
    else {
        _node_name = _node;
    }
    
    _node_name = _node_name.toLocaleLowerCase();
    
    if (_node === "#text") {
        return false;
    }
    
    var _result = ($.inArray(_node_name, _tags) !== -1);
    //$.test_msg("is_paragraph_node的結果", [_result, _node_name]);
    if (_result === false) {
        return _result;
    }
    
    // --------------------
    // 條件2，他底下有text_node 之外的東西
    
    var _has_child_element = false;
    var _contents = $(_node).contents();
    //var _contents = _node.length;
    
    //$.test_msg("底下的content", [_node_name, _contents.length]);
    //return false;
    for (var _i = 0; _i < _contents.length; _i++) {
        var _ele = _contents[_i];
        var _node_name = _ele.nodeName.toLowerCase();
        
        //$.test_msg("底下的content", _node_name);
        
        if (_node_name !== "#text"
                && $.inArray(_node_name, _tags) !== -1) {
            //$.test_msg("底下的content", _node_name);
            _has_child_element = true;
            break;
        }
    }
    
    if (_has_child_element === true) {
        return false;
    }
    else {
        return true;
    }
    
    
    //if (_result === false) {
    //    $.test_msg("is_para node", _node);
    //}
};

/**
 * 設定為章節段落
 * @param {HTMLElement} _node
 * @returns {Boolean}
 */
Selectable_text_paragraph.prototype.setup_paragraph_node = function (_node) {
    
    if (typeof(_node.className) === "string"
            && _node.className.indexOf(this.paragraph_classname) === -1
            && this.is_paragraph_node(_node)) {
        // $.test_msg("setup_para node", _node.className);
        
        this.paragraph_count++;
        
        _node.className = _node.className 
                + " " + this.paragraph_classname
                + " " + this.paragraph_id_prefix + this.paragraph_count;
        
        this.add_structure();
    }
    
    //return _node;    
};

/* End of file Selectable_text_paragraph */
/* Location: ./system/application/views/web_apps/Selectable_text_paragraph.js *//**
 * Selectable_text_scope
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 08:48:13
 */

/**
 * @memberOf {Selectable_text_scope}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_scope(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    this._selectable_text_word = _selectable_text.word;
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_word}
 */
Selectable_text_scope.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_scope.prototype._selectable_text;

/**
 * 父物件的Selectable_text_word
 * @type {Selectable_text_word}
 */
Selectable_text_scope.prototype._selectable_text_word;

// -----------------------------------
// 內部參數設定
// -----------------------------------

Selectable_text_scope.prototype.selected_classname = 'selected';
Selectable_text_scope.prototype.selected_from_classname = 'from';
Selectable_text_scope.prototype.selected_to_classname = 'to';
Selectable_text_scope.prototype.selected_middle_classname = 'middle';

// -----------------------------------
// 方法
// -----------------------------------

/**
 * 從classname取回scope_coll
 * 
 * 2207 轉接完成
 * 2207 檢查完成
 * @param {String} _classname
 * @type {Scope_collection_param}
 */
Selectable_text_scope.prototype.retrieve_scope_coll = function (_classname) {
    
    var _selectable_text_word = this._selectable_text_word;
    var _word_classname = _selectable_text_word.word_classname;
    
    var _classnames = _classname.split(' ');
    _classname = _classnames.join('.');
    
    var _words = $('.' + _word_classname + '.' + _classname);
    
    var _scope_coll = new Scope_collection_param();
    
    var _from, _to, _last_to;
    for (var _i = 0; _i < _words.length; _i++) {
        var _id = $.get_prefixed_id(_words.eq(_i));
        
        if (_from === null) {
            _from = _id;
        }
        else {
            if ((_id - _from) === 1) {
                _to = _id;
            }
            else if (_to !== null 
                    && (_id - _to) === 1) {
                _to = _id;
            }
            else {
                _scope_coll.add(_from, _to);
                _from = _id;
                _to = null;
            }
        }
    }
    
    return _scope_coll;
};


/**
 * 對指定範圍加上_classname
 * 
 * 2208 檢查完成
 * @param {Scope_collection_param} _scope_coll
 * @param {String} _classname
 */
Selectable_text_scope.prototype.add_class = function(_scope_coll, _classname, _callback) {
    
    var _selectable_text_word = this._selectable_text_word;
    var _words = this.get_words_by_scope_coll(_scope_coll);
    
    var _classnames = this._filter_classname(_classname);
    
    var _this = this;
    var _add_class = function (_i, _j) {
        var _word = _words[_i][_j];
        
        for (var _c in _classnames) {
            _classname = _classnames[_c];
            _word.addClass(_classname);
            
            //_word.css('color', 'red');
            //$.test_msg('Selectable_text.add_class()', [_classname, _word.length]);
            
            if (_j === 0) {
                _word.addClass(_classname + '_from');
            }
            else if (_j === _words[_i].length - 1) {
                _word.addClass(_classname + '_to');
            }
            else {
                _word.addClass(_classname + '_middle');
            }
            
            if (_word.hasClass(_classname + '_to') === false
                && _selectable_text_word.is_word_next_span(_word)) {
                var _span = _selectable_text_word.get_word_next_span(_word); 
                _span.addClass(_classname + '_middle');
                _span.addClass(_classname);
                //$.test_msg('text.add_class()', [_span.length, _span.css('')]);
            }
            
            if (_words[_i].length === 1) {
                _word.addClass(_classname + '_to');
            }    
        }
    };
    
    
    var _loop_i = function (_i) {
        if (_i < _words.length) {
            
        var _loop_j = function (_j) {
            if (_j < _words[_i].length) {
                for (_j; _j < _j + 5 && _j < _words[_i].length; _j++) {
                    _add_class(_i, _j);
                }

                setTimeout(function () {
                    //_j++;
                    _loop_j(_j);
                }, 1);
            }
            else {
                setTimeout(function () {
                    _i++;
                    _loop_i(_i);
                }, 1);
            }
        };
    
            _loop_j(0);
        }
        else {
            $.trigger_callback(_callback);
        }
    };
    
    _loop_i(0);
    
    return this;
};

/**
 * 先過濾classname
 * 
 * 2209 不需要檢查，也不需要轉接
 * @param {String|String[]} _classname
 * @type {String[]}
 */
Selectable_text_scope.prototype._filter_classname = function (_classname) {
    var _classnames;
    if ($.is_array(_classname)) {
        _classnames = _classname;
    }
    else if (_classname.indexOf(' ') > -1) {
        _classnames = _classname.split(' ');
    }
    else {
        _classnames = [_classname];
    }
    
    return _classnames;
};

/**
 * 取消_classname，或是針對_scope取消_classname
 * 
 * 2210 轉接完成
 * 2212 檢查完成
 * @param {Scope_collection_param|String} _scope_coll
 * @param {String|null} _classname
 */
Selectable_text_scope.prototype.remove_class = function (_scope_coll, _classname, _callback) {
    
    // 取得word元件
    var _selectable_text_word = this._selectable_text_word;
    
    if ($.is_string(_scope_coll) && $.is_null(_classname)) {
        _classname = _scope_coll;
        _scope_coll = null;
    }
    
    var _classnames = this._filter_classname(_classname);
    
    if ($.isset(_scope_coll)) {
        var _words = this.get_words_by_scope_coll(_scope_coll);
        for (var _i in _words) {
            for (var _j in _words[_i]) {
                var _word = _words[_i][_j];
                for (var _c in _classnames) {
                    _classname = _classnames[_c];
                    
                    if (_word.hasClass(_classname + '_to') === false
                        && _selectable_text_word.is_word_next_span(_word)) {
                        var _span = _selectable_text_word.get_word_next_span(_word);
                        _span.removeClass(_classname + '_middle');
                        _span.removeClass(_classname);
                    }
                    
                    if (_j === 0) {
                        _word.removeClass(_classname + '_from');
                    } 
                    else if (_j === _words[_i].length - 1) {
                        _word.removeClass(_classname + '_to');
                    }
                    else {
                        _word.removeClass(_classname + '_middle');
                    }
                    
                    _word.removeClass(_classname);
                    
                }   //for (var _c in _classnames) {
            }   //for (var _j in _words[_i]) {
        }   //for (var _i in _words) {
    }   //if ($.isset(_scope_coll)) {
    else {
        
        for (_j in _classnames) {
            _classname = _classnames[_j];
            //要記得是限定在選取範圍喔！
            $('.' + _selectable_text_word.word_classname + '.' + _classname)
                .removeClass(_classname)
                .removeClass(_classname + '_from')
                .removeClass(_classname + '_to')
                .removeClass(_classname + '_middle');
        }   //for (_j in _classnames) {
    }   //else {
    return this._selectable_text;
};

/**
 * 取消_classname，並針對_scope加上_classname
 * 
 * 2212 轉接完成，不需檢查
 * @param {Scope_collection_param} _scope_coll
 * @param {String} _classname
 */
Selectable_text_scope.prototype.set_class = function (_scope_coll, _classname) {
    this.remove_class(_classname);
    return this.add_class(_scope_coll, _classname);
};


/**
 * 取得推薦的範圍
 * 
 * 2205 轉接完成
 * 2217 檢查完畢
 * @param {Scope_collection_param} _scope_coll
 * @type {Scope_collection_param}
 */
Selectable_text_scope.prototype.get_recommend_scope_coll = function (_scope_coll) {
    
    if ($.is_null(_scope_coll)) {
        return null;
    }
    
    var _selectable_text_word = this._selectable_text.word;
    var _selectable_text_sentence = this._selectable_text.sentence;
    var _selectable_text_paragraph = this._selectable_text.paragraph;
    
    var _word_id_prefix = _selectable_text_word.word_id_prefix;
    var _sentence_punctuation_class_name = _selectable_text_sentence.sententce_punctuation_classname;
    
    var _recommend_scope_coll = new Scope_collection_param();
    var _sentence = 0;
    var _paragraph_id;
    
    for (var _i = 0; _i < _scope_coll.length(); _i++) {
        var _s = _scope_coll.get(_i);
        var _from_index = _s.get_from();
        var _from = _selectable_text_word.get_word_by_index(_from_index);
        var _to_index = _s.get_to();
        var _to = _selectable_text_word.get_word_by_index(_to_index);
        
        //在此做調整
        
        //調整from
        _sentence = 0;
        _paragraph_id = _selectable_text_paragraph.get_paragraph_id(_from);
        var _from_id = $.get_prefixed_id(_from.id());
        var _prev_word = $('#' + _word_id_prefix + (_from_id) );
        
        while (_prev_word.exists()
            && _selectable_text_paragraph.get_paragraph_id(_prev_word) === _paragraph_id) {
            if (_prev_word.hasClass(_sentence_punctuation_class_name)) {
                if (_sentence === 0) {
                    _sentence++;
                }
                else {
                    break;
                }
            }
            
            _from_id = $.get_prefixed_id(_prev_word);
            _prev_word = $('#' + _word_id_prefix + (_from_id-1) );
        }        
        
        //調整to
        _sentence = 0;
        _paragraph_id = _selectable_text_paragraph.get_paragraph_id(_to);
        var _to_id = $.get_prefixed_id(_to.id());
        var _next_word = $('#' + _word_id_prefix + (_to_id) );
        if (_next_word.hasClass(_sentence_punctuation_class_name)) {
            _sentence++;
        }
                    
        while (_next_word.exists()
            && _selectable_text_paragraph.get_paragraph_id(_next_word) === _paragraph_id) {
            _to_id = $.get_prefixed_id(_next_word);
            _next_word = $('#' + _word_id_prefix + (_to_id+1) );
            
            if (_next_word.hasClass(_sentence_punctuation_class_name)) {
                if (_sentence === 0) {
                    _sentence++;
                }
                else {
                    _to_id = $.get_prefixed_id(_next_word);
                    break;
                }
            }
        }
        
        //_recommend_scope.push([_from_id, _to_id]);
        _recommend_scope_coll.add(_from_id, _to_id);
    }
    
    return _recommend_scope_coll;
};

/**
 * 將範圍轉換成jQuery陣列來選取
 * 
 * 2322 檢查完成，轉接完成
 * @param {Scope_collection_param} _scope_coll
 * @type {jQuery[][]} 注意，陣列是兩階層喔！
 * @TODO 20140102 尚未更新相關使用的程式碼 this.get_word_id
 */
Selectable_text_scope.prototype.get_words_by_scope_coll = function (_scope_coll) {
    
    var _coll = [];
    
    if ($.is_null(_scope_coll)) {
        return _coll;
    }
    
    var _index_array = _scope_coll.get_index_array();
    
    //$.test_msg('Selectable_text.get_words_by_scope_coll()', _index_array);
    
    for (var _i in _index_array) {
        var _ary = [];
        var _index_ary = _index_array[_i];
        for (var _j in _index_ary) {
            var _index = _index_ary[_j];
            var _word = this._selectable_text_word.get_word_by_index(_index);
            _ary.push(_word);
        }
        _coll.push(_ary);
    }
    
    return _coll;
};

/* End of file Selectable_text_scope */
/* Location: ./system/application/views/web_apps/Selectable_text_scope.js *//**
 * Selectable_text_sentence
 *
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 09:17:54
 */

/**
 * @memberOf {Selectable_text_sentence}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_sentence(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    this._text = _selectable_text._text;
    this.sentence_structure = [];
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_sentence}
 */
Selectable_text_sentence.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_sentence.prototype._selectable_text;

/**
 * 主要可以選擇的物件
 * @type {jQuery}
 */
Selectable_text_sentence.prototype._text;

// -----------------------------------
// 內部參數設定
// -----------------------------------

/**
 * 標點符號的classname
 * @type {String}
 */
Selectable_text_sentence.prototype.punctuation_classname = 'kals-punctuation';

/**
 * 分句用的標點符號classname
 * @type {String}
 */
Selectable_text_sentence.prototype.sententce_punctuation_classname = 'kals-sentence-punctuation';

/**
 * 分句用索引的classname
 * @type {String}
 */
Selectable_text_sentence.prototype.sententce_index_classname = 'kals-sentence-index';

/**
 * 句子特徵，保存句子切割的特徵。
 * @type {Array|number}
 */
Selectable_text_sentence.prototype.sentence_structure = [];


// -----------------------------------

/**
 * 取得句子位置的索引
 * 
 * 用來分析標註所在句子，跟段落paragraph是不一樣的。
 * 布丁測試用
 * 
 * 2243 轉接完成
 * 2246 檢查完成
 * 
 * @author Pudding Chen 20121228
 * @return {Array}
 */
Selectable_text_sentence.prototype.get_sentence_index = function () {
    
    var _selectable_text_word = this._selectable_text.word;
    
    //如果已經作過這樣的分析的話
    if (this._text.find('.'+this.sententce_index_classname).length > 0) {
        var _sentences = this._text.find('.'+this.sententce_index_classname);
        var _sentence_index = [];
        for (var _i = 0; _i < _sentences.length; _i++) {
            var _sentence = _sentences.eq(_i);
            var _word_id = _sentence.attr('id');
            _word_id = _word_id.substr(_selectable_text_word.word_id_prefix.length, _word_id);
            _word_id = parseInt(_word_id,10);
            
            if (_word_id !== null) {
                _sentence_index.push(_word_id);
            }
        }

        return _sentence_index;
    }

    //先來看被視為分句的標點符號位置
    var _sentence_index = [0];
    var _sentence_punctuation =  $('.'+this.sententce_punctuation_classname);

    
    for (var _s = 0; _s < _sentence_punctuation.length; _s++) {
        var _id = _sentence_punctuation.eq(_s).attr('id');
        //kals_word_953
        //_id = _id.substring(10, _id.length);
        _id = $.get_prefixed_id(_id);
        _sentence_index.push(parseInt(_id,10));	
    }

    //再來看段落的最後一個字
    var _last_word = this._text.find('.'+_selectable_text_word.word_classname+':last');
    var _last_paragraph = _last_word.parents("."+_selectable_text_word.paragraph_classname+":first");

    //var _last_paragraph_classname = _last_paragraph.attr('className');
    //var _paragraph_classname_header = this.paragraph_classname + ' ' + this.paragraph_id_prefix;  
    //var _last_pid = _last_paragraph_classname.substring(_paragraph_classname_header.length , _last_paragraph_classname.length);
    //_last_pid = parseInt(_last_pid);
    var _last_pid = $.get_class_prefixed_id(_last_paragraph, this.paragraph_id_prefix);

    for (_i = 0; _i < _last_pid+1; _i++) {
        var _paragraph = $('.' + this.paragraph_id_prefix + _i + ":last");

        if (_paragraph.length === 1) {
            _last_word = _paragraph.find('.'
                    + _selectable_text_word.word_classname 
                    + '.tooltip-trigger:last:not(.' 
                    + this.sententce_punctuation_classname+')');

            if (_last_word.length > 0) {
                _id = _last_word.attr('id');

                //_id = _id.substring(this.word_id_prefix.length, _id.length);
                _id = $.get_prefixed_id(_id);
                _sentence_index.push(parseInt(_id,10));

                if (isNaN(_id))
                {
                    _last_word.css('color', 'blue')
                            .attr('title', _id);
                }
            }
        }
    }

    //檢查測試結果用
    for (_i = 0; _i < _sentence_index.length; _i++) {

        var _sentense_index_word = $('#' 
                + _selectable_text_word.word_id_prefix 
                + _sentence_index[_i]);
        _sentense_index_word.addClass(this.sententce_index_classname);

        //檢測找到的字是否真的是分句點，平時不使用應關掉
        //_sentense_index_word.css("color", "red");
        //alert([$('#kals_word_' + _i).length, _i]);
    }

    //排序
    //_sentence_index.sort(function (_a, _b) {
    //	return (_a - _b);
    //});

    return _sentence_index;
};

/**
 * 增加句子的結構
 * @returns {Selectable_text_sentence.prototype}
 */
Selectable_text_sentence.prototype.add_structure = function () {
    var _word_count = this._selectable_text.word.word_count;
    this.sentence_structure.push(_word_count);
    return this;
};

/**
 * 增加句子的結構，但是是句子的最後一句
 * @returns {Selectable_text_sentence.prototype}
 */
Selectable_text_sentence.prototype.add_structure_last_word = function () {
    var _word_count = this._selectable_text.word.word_count;
    _word_count--;
    
    if (_word_count < 1) {
        return this;
    }
    if (this.sentence_structure.length === 0) {
        this.sentence_structure.push(_word_count);
    }
    else if (_word_count !== this.sentence_structure[this.sentence_structure.length-1]) {
        this.sentence_structure.push(_word_count);
    }
    return this;
};

/**
 * 取得目前計算的句子數量
 * @returns {number}
 */
Selectable_text_sentence.prototype.count_strucutre = function () {
    return this.sentence_structure.length;
};

/**
 * 取得句子的結構
 * @returns {Selectable_text_sentence.prototype}
 */
Selectable_text_sentence.prototype.get_structure = function () {
    return this.sentence_structure;
};

// -------------------

/**
 * 儲存到快取中
 * @param {String} _cache_id
 * @param {funciton} _callback
 * @returns {Selectable_text_sentence}
 */
Selectable_text_sentence.prototype.cache_save = function (_cache_id, _callback) {
    _cache_id = _cache_id + '_sentence';
    var _json = $.json_encode(this.sentence_structure);
    //$.test_msg('sentence save: ' + _cache_id, _json);
    //$.localStorage.set(_cache_id, _json);
    KALS_context.storage.set(_cache_id, _json, _callback)
    return this;
};

/**
 * 從快取中復原
 * @param {String} _cache_id
 * @param {funciton} _callback
 * @returns {Selectable_text_sentence}
 */
Selectable_text_sentence.prototype.cache_restore = function (_cache_id, _callback) {
    _cache_id = _cache_id + '_sentence';
    //var _json = $.localStorage.get(_cache_id);
    //$.test_msg('sentence restore: ' + _cache_id, _json);
    //this.sentence_structure = $.json_decode(_json);
    
    var _this = this;
    KALS_context.storage.get(_cache_id, function (_value) {
        var _cache = $.json_decode(_value);
        if (_cache !== null) {
            _this.sentence_structure = $.json_decode(_value);
        }
        $.trigger_callback(_callback);
    });
    return this;
};

/* End of file Selectable_text_sentence */
/* Location: ./system/application/views/web_apps/Selectable_text_sentence.js *//**
 * Selectable_text_word
 * 
 * 建立Selectable_text中的Word
 * 
 * @package     KALS
 * @category    Webpage Application Libraries
 * @author      Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright   Copyright (c) Expression year is undefined on line 7, column 33 in Templates/KALS/KALS_JavaScript_Class.js., Pudding Chen
 * @license     http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link        https://github.com/pulipulichen/kals
 * @version     1.0 2014/1/2 下午 08:25:49
 */

/**
 * @memberOf {Selectable_text_word}
 * @extends {KALS_user_interface}
 * @constructor
 * @param {Selectable_text} _selectable_text 父物件
 */
function Selectable_text_word(_selectable_text) {
    
    this._selectable_text = _selectable_text;
    this._text = _selectable_text._text;
    return this;
}

/**
 * Extends from KALS_user_interface.
 * @memberOf {Selectable_text_word}
 */
Selectable_text_word.prototype = new KALS_user_interface();

/**
 * 父物件
 * @type {Selectable_text}
 */
Selectable_text_word.prototype._selectable_text;

// -----------------------------------
// 內部參數設定
// -----------------------------------

/**
 * 文字記數，初始化時使用。
 * @type {number}
 */
Selectable_text_word.prototype.word_count = 0;

/**
 * 可選取文字的classname
 * @type {String}
 * @TODO 20140102 尚未更新相關使用的程式碼 this.word_classname
 */
Selectable_text_word.prototype.word_classname = 'kals-word';

/**
 * 可選取文字的ID前置
 * @type {String}
 * @TODO 20140102 尚未更新相關使用的程式碼 this.word_id_prefix
 */
Selectable_text_word.prototype.word_id_prefix = 'kals_word_';


Selectable_text_word.prototype._span_classname = 'span';

/**
 * 鎖
 * @type Array
 */
Selectable_text_word.prototype.locks = [];

// -----------------------------------
// 方法
// -----------------------------------

/**
 * 取得word_id_prefix
 * @returns {Selectable_text_word.word_id_prefix}
 */
Selectable_text_word.prototype.get_word_id_prefix = function () {
    return this.word_id_prefix;
};

/**
 * 從ID取得Word
 * @param {number} _id
 * @return {jQuery}
 */
Selectable_text_word.prototype.get_word_by_index = function(_index) {
    
    var _word_id_prefix = this.word_id_prefix;
    var _word_id = _word_id_prefix + _index;
    var _word = $('#' + _word_id);
    return _word;
};

/**
 * 取得指定ID的word
 * 
 * 2307 轉接完成，不需檢查
 * @param {int} _word_id
 * @returns {jQuery}
 */
Selectable_text_word.prototype.get_word = function (_word_id) {
    return this.get_word_by_index(_word_id);
};

/**
 * 取得word id，但似乎沒有人使用他
 * 
 * 2317 轉接完成，檢查完成
 * @param {jQuery} _word
 */
Selectable_text_word.prototype.get_word_id = function (_word) {
    if ($.is_object(_word)) {
        if ($.is_jquery(_word)) {
            _word = _word.attr('id');
        }
        else {
            _word = _word.id;
        }
    }
       
    var _id_prefix = this.word_id_prefix;
    if ($.starts_with(_word, _id_prefix)) {
        _word = _word.substring(_id_prefix.length, _word.length);
    }
    return parseInt(_word,10);
};


/**
 * 如果下一個字是英文的話
 * 
 * 2316 檢查完成
 * 2317 轉接完成
 * @param {jQuery} _word
 * @returns {Boolean}
 */
Selectable_text_word.prototype.is_word_next_english = function (_word) {
    var _word_id = this.get_word_id(_word);
    _word_id++;
    var _next = this.get_word_by_index(_word_id);
    var _text = _next.text();
    if (_text.length > 1) {
        // 如果超過一個字，那大概就是英文了
        return true;
    }
    else if ($.match_english(_text)) {
        return true;
    }
    
    return false;
};

/**
 * 如果下一個字是空格的話
 * 
 * 2318 轉接完成，檢查完成
 * @param {jQuery} _word
 * @returns {Boolean}
 */
Selectable_text_word.prototype.is_word_next_span = function (_word) {
    var _next = _word.next();
    if (_next.length === 0) {
        return false;
    }
    else {
        return _next.hasClass(this._span_classname);
    }
};

/**
 * 取得下一個span
 * 
 * 2319 檢查完成，轉接完成
 * @param {jQuery} _word
 * @returns {jQuery|null}
 */
Selectable_text_word.prototype.get_word_next_span = function (_word) {
    var _next = _word.next();
    //_next.css('background-color', 'red');
    //$.test_msg('Selectable_text.is_word_next_span()', _next.length);
    if (_next.length === 0) {
        return null;
    }
    else {
        return _next;
    }
};

/**
 * 建立一個不可選取的文字
 * 
 * 2323 轉接完成，檢查完成
 * @param {String} _text
 * @type {jQuery}
 */
Selectable_text_word.prototype.create_span_word = function(_text) {
    var _word = document.createElement("span");
    _word.className = this._span_classname + ' ' + this.word_classname;
	
    var _t_text = document.createTextNode(_text);
    _word.appendChild(_t_text);

    return _word;
};

/**
 * 建立一個可選取的文字
 * 
 * 2324 轉接完畢，檢查完畢
 * @param {number} _para_id Paragraph ID
 * @param {number} _point_id Word ID
 * @param {string} _text 內容文字
 * @type {jQuery}
 */
Selectable_text_word.prototype.create_selectable_word = function(_para_id, _point_id, _text) {
    var _word = document.createElement("span");

    _word.className = this.word_classname
    + ' ' + this._selectable_text.tooltip.trigger_classname;

    var _word_id = this.word_id_prefix + _point_id; 

    _word.id = _word_id;

    var _t_text = document.createTextNode(_text);
    _word.appendChild(_t_text);

    // 20140223 Pudding Chen
    // 停止在這裡設定事件，移到setup_word_selectable去做
    //_word = this.setup_word_tooltip(_word);

    /**
     * 加入統計目前字串次數的功能
     * @author Pulipuli Chen  20131227
     */
    KALS_context.progress.add_count();
    
    /*
    var _progress = _point_id;
    //每10統計一次
    if (_progress % 10 === 0) {
        _progress = (_progress / this._estimate_words_length) * 100;
        _progress = parseInt(_progress, 10);
        $.test_msg("[create_selectable_word] _point_id", _progress + "%");
    }
    */
    return _word;
};

Selectable_text_word.prototype.KALS_SELECT_MOUSEDOWN_LOCK;
Selectable_text_word.prototype.KALS_SELECT_LOCK;

/**
 * 設定文字的滑鼠事件
 * @param {jQuery} _words
 * @param {Function} _callback
 * @returns {Selectable_text_word}
 */
Selectable_text_word.prototype.setup_word_mouse_event = function (_words, _callback) {
    	
    var _select = KALS_text.selection.select;
    
    // @20130612 Pudding Chen
    // 加入了拖曳選取時也能用的選取範圍功能
    if (typeof(this.KALS_SELECT_MOUSEDOWN_LOCK) === "undefined") {
        this.KALS_SELECT_MOUSEDOWN_LOCK = null;
        this.KALS_SELECT_LOCK = false;
    }

    var _this = this;
    _words.mouseout(function () {
        _this.KALS_SELECT_LOCK = false;
    });

    _words.mousedown(function (_event) {

        // 限制只能用左鍵選取
        if (_event.which !== 1) {
            return;
        }

        /**
         * 先做超連結偵測
         * @author Pulipuli Chen <pulipuli.chen@gmail.com> 
         */
        var _md_this = this;
        var _word = $(_md_this);
        var _is_link = false;

        var _link_tag = _word.parents("a[href]:first");
        if (_link_tag.length === 1) {
            // 如果是超連結的話
            _is_link = true;

            var _link_url = _link_tag.attr("href");

            //alert(_link_tag.attr("target"));
            /*
            var _target = "_blank";
            if (_link_url.substr(0,1) != "#"
                    && (_link_tag.hasAttr("target") === false || _link_tag.attr("target") == "") ) {
                _link_tag.attr("target", "_blank");
            }
            else {
                _target = _link_tag.attr("target");
            }
            */
            var _target = "_self";
            if (_link_tag.hasAttr("target") === false 
                    || _link_tag.attr("target") === "") {
                _target = _link_tag.attr("target");
            }
            //_link_url = "//";

            var _log_data = {
                "url": _link_url,
                "target": _target
            };

            //$.test_msg("送出超連結", _log_data);
            var _action = 39;
            KALS_util.log(_action, _log_data);

            return;
        }

        _this.KALS_SELECT_LOCK = true;
        _this.KALS_SELECT_MOUSEDOWN_LOCK = 1;

        setTimeout(function () {
            if (_this.KALS_SELECT_MOUSEDOWN_LOCK === 1) {
                _word = $(_md_this);

                _select.cancel_select();
                _select.set_select(_word);	

                _this.KALS_SELECT_MOUSEDOWN_LOCK = 2;
            }
        }, 300);

        setTimeout(function () {
            if (_this.KALS_SELECT_MOUSEDOWN_LOCK === 2 
                    && _this.KALS_SELECT_LOCK === true) {
                _word = $(_md_this);
                _select.set_select(_word);	
                _this.KALS_SELECT_MOUSEDOWN_LOCK = null;
            }
        }, 1000);
    });

    _words.mouseup(function () {
        var _mu_this = this;
        setTimeout(function () {
            if (_this.KALS_SELECT_MOUSEDOWN_LOCK === 2) {
                var _word = $(_mu_this);
                _select.set_select(_word);	
            }

            _this.KALS_SELECT_MOUSEDOWN_LOCK = null;
        }, 100);

        if (_this.KALS_SELECT_MOUSEDOWN_LOCK === 1) {

            //表示這是一個Click事件
            _this.KALS_SELECT_MOUSEDOWN_LOCK = null;

            if (_this.initialized === false) {
                return this;
            }

            var _word = $(this);
            setTimeout(function () {
                _word.tooltip().hide();
            }, 100);

            //_manager.listen_select(_word);
            _select.set_select(_word);

            if ($.is_function(_callback)) {
                _callback();
            }
        }
    });

            /*
            _words.mousemove(function () {
                    if (KALS_SELECT_MOUSEDOWN_LOCK !== 2) {
                            KALS_SELECT_MOUSEDOWN_LOCK = null;	
                    }
            });
            */			
            /**
             * 滑鼠放在文字上的自動選取功能
             * 
             * @author Pudding Chen 20121228
             * @param {function} _callback
             * @deprecated 不佳，太麻煩了，不使用
             */
            /*
            var _hover_evt = function (_callback) {
                    _select.set_hover();
            };

            var _last_word = null;
            var _HOVER_TIMER = null;

            _words.mouseover(function () {
                    var _word = $(this);
                            _HOVER_TIMER = setTimeout(function () {
                                    setTimeout(function () {
                        _word.tooltip().hide();
                    }, 100);
                                    _select.set_select(_word);
                            }, 1500);
                    })
                    .mouseout(function () {
                            clearTimeout(_HOVER_TIMER);
                    });
            */
            /*
            var _HOVER_TIMER = null;
            _words.mouseover(function () {
                    if (_HOVER_TIMER != null)
                            clearTimeout(_HOVER_TIMER);

                    var _word = $(this);
                    _HOVER_TIMER = setTimeout(function () {
                            _word.click();
                            setTimeout(function () {}, 200);
                                    _word.click();
                                    clearTimeout(_HOVER_TIMER);
                                    _HOVER_TIMER = null;
                    }, 800);

            })
                    .mouseout(function () {
                            clearTimeout(_HOVER_TIMER);
                            _HOVER_TIMER = null;
                    });
            */
    if ($.is_function(_callback)) {
        _callback();
    }
    return this;
};

/**
 * 初始化這個文字的事件
 * @param {jQuery} _word
 * @returns {Selectable_text_word}
 */
Selectable_text_word.prototype._init_word_selectable_event = function (_word) {
    
    _word = $(_word);
    
    //$.test_msg("_init_word_selectable_event", 1);
    
    // 20140223 Pudding Chen
    // 轉移到這邊做tooltip
    this.setup_word_tooltip(_word);

    //$.test_msg("_init_word_selectable_event", 2);

    // 20140518 Pulipuli Chen
    // 分開來做選取事件
    this.setup_word_mouse_event(_word);
    
    //$.test_msg("_init_word_selectable_event", 3);
    
    _word.trigger("mouseover");
    
    //$.test_msg("_init_word_selectable_event", 4);
    
    return this;
};

/**
 * 讓所有文字都保持在可選取的狀態
 * 
 * 2254 轉接完畢，檢查完畢
 * @param {function} _callback
 */
Selectable_text_word.prototype.setup_word_selectable = function (_callback) {
    
    var _select = KALS_text.selection.select;
    
	// 如果是一般模式
    if ($.is_mobile_mode() === false) {
        if (typeof(this.locks.word_click) === 'undefined') {
            var _this = this;
			
            var _words = this._text.find('.'+ this.word_classname + ':not(.' + this._span_classname + ')');
            
            var _i = 0;
            var _wait_i = 1000;
            var _loop = function () {
                
                var _word = _words.eq(_i);
                
                
                _word.one("mouseover", function () {
                    //$.test_msg("初始化", this.id);
                    _this._init_word_selectable_event(this);
                });
                
                KALS_context.progress.add_count(2);
                
                _continue();
            };
            
            var _continue = function () {
                _i++;
                if (_i < _words.length) {
                    
                    if (_i % _wait_i === 0) {
                        setTimeout(function () {
                            _loop();
                        }, 10);
                    }
                    else {
                        _loop();
                    }
                }
                else {
                    _complete();
                }
            };
            
            var _complete = function () {
                _this.locks.word_click = true;
                $.trigger_callback(_callback);
            };
			
            _loop();
        }
    }
    else {
        $.trigger_callback(_callback);
    }
    
    return this;
};


/**
 * 設定Word的Tooltip
 * 
 * 2325 轉接完畢，檢查完畢
 * @deprecated 不使用逐字設定toolip，改用on
 * @param {jQuery|HTMLElement} _word
 * @returns {jQuery}
 */
Selectable_text_word.prototype.setup_word_tooltip = function (_word) {
    
    var _tooltip_config = this._selectable_text.tooltip.get_tooltip_config();
    
    $(_word).tooltip(_tooltip_config);
    
    return _word;
};

/**
 * 設定Word的Tooltip
 * 
 * 2325 轉接完畢，檢查完畢
 * 未完成，目前不使用
 * @deprecated 不使用逐字設定toolip，改用on
 * @param {jQuery|HTMLElement} _word
 * @returns {jQuery}
 */
/*
Selectable_text_word.prototype._init_word_tooltip = function () {
    
    var _tooltip_config = this._selectable_text.tooltip.get_tooltip_config();
    
    var _word_classname = this.word_classname;
    var _paragraph_classname = this._selectable_text.paragraph.paragraph_classname;
    var _selector = '.' + _paragraph_classname + ' .' + _word_classname;
    //$(_word).tooltip(_tooltip_config);
    this._text.on('append', _selector , function () {
        
    });
    //return _word;
};
*/
/**
 * 估算大概會多少字
 * 
 * 2326 檢查完畢，轉接完畢
 * @param {String} _text
 * @returns {Number}
 */
Selectable_text_word.prototype.get_estimate_total_words = function (_text) {
    
    //$.test_msg("預測字 1", _text);
    
    // 濃縮英數
    _text = _text.replace(/[\w]{1,}/gi, "_");
    
    // 去掉空格
    _text = _text.replace(/([\s|\t]*)/g, "");
    
    //$.test_msg("預測字 2", _text);
    
    var _total = 0;
    _total = _text.length;
    
    return _total;
};

/**
 * 儲存到快取中
 * @param {String} _cache_id
 * @param {funciton} _callback
 * @returns {Selectable_text_word}
 */
Selectable_text_word.prototype.cache_save = function (_cache_id, _callback) {
    _cache_id = _cache_id + '_word';
    //$.test_msg('word save: ' + _cache_id, this.word_count);
    KALS_context.storage.set(_cache_id, this.word_count, _callback);
    return this;
};

/**
 * 從快取中復原
 * @param {String} _cache_id
 * @param {funciton} _callback
 * @returns {Selectable_text_word}
 */
Selectable_text_word.prototype.cache_restore = function (_cache_id, _callback) {
    _cache_id = _cache_id + '_word';
    var _this = this;
    KALS_context.storage.get(_cache_id, function (_value) {
        _this.word_count = _value;
        $.trigger_callback(_callback);
    });
    //this.word_count = $.localStorage.get(_cache_id);
    //$.test_msg('word restore: ' + _cache_id, this.word_count);
    return this;
};

/**
 * 捲動到指定文字
 * @param {Int} _heading_id
 * @param {Function} _callback
 * @returns {Selectable_text_chapter.prototype}
 */
Selectable_text_word.prototype.scroll_to = function (_target_id, _callback) {
    
    if (_target_id === undefined) {
        return this;
    }
    
    var _position = {
        selector: "#" + this.word_id_prefix + _target_id
    };
    
    var _speed = 500;
    //$.test_msg("chapter scroll_to", _position);
    $.scroll_to(_position, _speed, _callback);
    
    return this;
};
/**
 * 取得現在捲軸的位置的first word id
 * @return {int} word_id
 */

Selectable_text_word.prototype.get_current_progress_word = function () {

    // 1.先比對kals_paragraph_i
    // 2.再比對該層內的word_id 直到比現在捲軸位置還大(y)的 記錄id
    var _scroll_top = $(window).scrollTop();
    _scroll_top = _scroll_top + KALS_toolbar.get_height();

    // 取得所有的kals_paragraph(array)
    var _paragraph_collection = $('.kals-paragraph');
    
    //$.test_msg('save_reading_progress, para length', _paragraph_len);

    var _target_paragraph;
    
    for (var _index = 0; _index < _paragraph_collection.length; _index++ ) {
        var _paragraph = _paragraph_collection.eq(_index);
        //var _paragraph_height = parseInt($('.kals_paragraph_' + _i).offset().top, 10);        
        //取得每個paragraph的第一個word的top
        var _paragraph_height = $.get_offset_top(_paragraph.find(".kals-word:first")); 
        //$.test_msg('save_reading_progress', [_paragraph_height, _scroll_top, _index]);
            
        if (_paragraph_height > _scroll_top) {
            //找前一段
            _target_paragraph = _paragraph_collection.eq(_index-1);
            break;
        }
            //$.test_msg('i', _i);
    }
        
    var _target_word;
    //已經找到該段落
    if (_target_paragraph !== undefined) {
        //段落中所有的word
        var _words = _target_paragraph.find(".kals-word");
            
        for (var _w = 0; _w < _words.length; _w++) {
            _target_word = _words.eq(_w);
            //比較每個字與現在捲軸位置的高度
            var _word_height = $.get_offset_top(_target_word);
            if (_word_height > _scroll_top) {
                break;
            }
            // 如果在這一段裡面都沒有找到位置比捲軸還低的word，表示實際上是下一個paragraph
            if (_w === _words.length - 1) {
                // get_prefixed_id 只取ID的值
                var _word_id = $.get_prefixed_id(_target_word.attr("id"));
                // id裡的值為"kals-word_id"
                _target_word = $("#kals_word_" + (_word_id+1));
                break;
            }
        };
    }
    else {
        _target_word = $(".kals-word:last");
    }
        
    var _word_id = 1;
    if (_target_word !== undefined) {
        _word_id = _target_word.attr("id");
        _word_id = $.get_prefixed_id(_word_id);
    }
    //$.test_msg("get_current_progress_word", [_word_id, _target_paragraph.attr("className")]);
    return _word_id;
};

/* End of file Selectable_text_word */
/* Location: ./system/application/views/web_apps/Selectable_text_word.js *//**
 * Webpage_cache
 *
 * 結合樣板的控制器
 * KALS Framework的Controller示範
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/11/19 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function Webpage_cache() {
    // 繼承宣告的步驟之一
    KALS_controller_window.call(this);
    
    if (typeof(KALS_context.selectable_text_cache) === "boolean") {
        this.enable_cache = KALS_context.selectable_text_cache;
    }
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
Webpage_cache.prototype = new KALS_controller();

/**
 * ====================
 * Model設定
 * ====================
 */

/**
 * 指定Model
 * @type String
 */
Webpage_cache.prototype._$model = 'webpage_cache';

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
Webpage_cache.prototype._$enable_debug = true;

/**
 * ====================
 * Action設定
 * ====================
 */

/**
 * 是否啟用快取
 * @type String
 */
Webpage_cache.prototype.enable_cache = true;

/**
 * 儲存資料的網址
 * @type String
 */
Webpage_cache.prototype._save_url = "webpage_cache/save";

/**
 * 儲存快取資料到伺服器
 * 
 * @param {String} _data 要儲存的資料
 * @param {Function} _callback 回呼函數
 * @returns {Webpage_cache}
 */
Webpage_cache.prototype.save = function (_data, _callback) {
    
    _data = this.compress_data(_data);
    var _data_parts = this.split_data(_data);
    
    //$.test_msg("總共分割成份數", _data_parts.length);
    var _i = 0;
    
    //var _clean_save_url = KALS_context.get_base_url("/webpage_cache/clean_save");
    
    //$.get(_clean_save_url, function () {
    //    _loop();
    //});
    
    var _clean_save_action = "clean_save";
    this.request_get(_clean_save_action, function () {
        _loop();
    });
    
    var _save_url = this._save_url;
    var _loop = function () {
        var _post_config = {
            url: _save_url + "/" + _i,
            data: _data_parts[_i],
            callback: _loop_callback
        };
        
        KALS_util.ajax_post(_post_config);
    };
    
    var _loop_callback = function () {
        _i++;
        
        if (_i < _data_parts.length) {
            _loop();
        }
        else {
            _complete();
        }
    };
    
    var _complete = function () {
        //$.test_msg("Webpage_cache 儲存了資料");
        if (_callback !== undefined) {
            $.trigger(_callback);
        }
    };
    
    return this;
};

/**
 * 讀取網頁的前置資料
 * @type String
 */
Webpage_cache.prototype._load_url_prefix = "webpage_cache/load/";

/**
 * 讀取網頁實際內容的前置資料
 * @type String
 */
Webpage_cache.prototype._load_parts_url_prefix = "webpage_cache/load_parts/";


/**
 * 讀取網頁快取的資料
 * @param {Function} _callback
 * @returns {Webpage_cache}
 */
Webpage_cache.prototype.load = function (_callback) {
    
    if (this.get_cache_data() !== undefined) {
        //$.test_msg("直接取用快取");
        if ($.is_function(_callback)) {
            _callback(this.get_cache_data());
        }
        return this;
    }
    
    //$.test_msg("Webpage_cache.load 開始讀取", (this._cache_data !== undefined));
    
    /*
    var _url = this._load_url_prefix;
    _url = _url + KALS_context.get_webpage_id();
    _url = KALS_context.get_base_url(_url);
    
    var _this = this;
    $.get(_url, function (_parts_count) {
        _parts_count = _this._remove_cache_prefix(_parts_count);
        //$.test_msg("份數", _parts_count);
        _parts_count = parseInt(_parts_count);
        
        if (_parts_count === 0) {
            if ($.is_function(_callback)) {
                _callback(false);
            }
            return;
        }
        
        _this._load_parts(_parts_count, _callback);
    });
    */
    
    var _action = "load";
    var _data = {
        webpage_id: KALS_context.get_webpage_id()
    };
    var _this = this;
    this.request_get(_action, _data, function (_data) {
        var _parts_count = _data.parts_count;
        //_parts_count = _this._remove_cache_prefix(_parts_count);
        //$.test_msg("份數", _parts_count);
        _parts_count = parseInt(_parts_count);
        
        if (_parts_count === 0) {
            if ($.is_function(_callback)) {
                _callback(false);
            }
            return;
        }
        
        _this._load_parts(_parts_count, _callback);
    });
    
    return this;
};

/**
 * 一一讀取各個部分
 * @param {Function} _callback
 * @returns {Webpage_cache}
 */
Webpage_cache.prototype._load_parts = function (_parts_count, _callback) {
    
    var _i = 0;
    
    var _this = this;
    var _loop = function () {
        _this._load_part(_i, _continue);
    };
    
    var _continue = function () {
        _i++;
        
        if (_i < _parts_count) {
            _loop();
        }
        else if (_this._need_clean_save && _this._enable_clean_save) {
            _this._clean_save();
        }
        else {
            _complete();
        }
    };
    /*
    var _clean_save = function () {
        
        var _clean_save_url = KALS_context.get_base_url("/webpage_cache/clean_save");

        $.get(_clean_save_url, function () {
            _complete();
        });
    };
    */
    var _complete = function () {
        var _data = _this.get_cache_data();
        _data = _this.decompress_data(_data);
        _this.set_cache_data(_data);
        
        if ($.is_function(_callback)) {
            _callback(_data);
        }
    };
    
    _loop();
    
    return this;
};

/**
 * 清理儲存
 * @param {Function} _callback
 */
Webpage_cache.prototype._clean_save = function (_callback) {
    var _clean_save_action = "clean_save";
    this.request_get(_clean_save_action, function () {
        //$.test_msg("清理了資料");
        if ($.is_function(_callback)) {
            _callback();
        }
    });
    
    return this;
};

/**
 * 讀取部分資料
 * 
 * @param {Function} _callback 回呼函數，以callback回傳資料
 *  如果沒有讀取到資料，則會回傳false
 * @returns {Webpage_cache}
 */
Webpage_cache.prototype._load_part = function (_part, _callback) {
    
    //var _url = this._load_parts_url_prefix;
    //_url = _url + KALS_context.get_webpage_id() + "/" + _part;
    //_url = KALS_context.get_base_url(_url);
    
    var _this = this;
    var _load_callback = function (_data) {
        
        //$.test_msg("Webpage_cache 取得了資料 1 (" + _data.length + ")");
        
        //_data = _this._remove_cache_prefix(_data);
        _data = _data.cache;
        
        //$.test_msg("Webpage_cache 取得了資料 2 (" + _data.length + ")");
        
        if (_data.length === 0) {
            _data = false;
            if ($.is_function(_callback)) {
                _callback();
            }
            return;
        }
            
        //_data = _this.decompress_data(_data);
        
        //$.test_msg("Webpage_cache 取得了資料 3 (" + _data.length + ")");
        
        _this.append_cache_data(_data);
        
        if ($.is_function(_callback)) {
            _callback();
        }
        return;
    };
    
    //$.get(_url, _load_callback);
    var _action = "load_parts";
    var _data = {
        webpage_id: KALS_context.get_webpage_id(),
        start_index: _part
    };
    this.request_get_cache(_action, _data, _load_callback);
    
    return this;
};

/**
 * 刪除快取資料前面的額外資料
 * 
 * @param {String} _data 取得的快取資料
 * @returns {String}
 */
Webpage_cache.prototype._remove_cache_prefix = function (_data) {
    // 額外資料是：/*Content-type: text/html*/
    
    if ($.starts_with(_data, "/*Content-type: text/html*" + "/")) {
        _data = $.substr(_data, 27);
        this._need_clean_save = false;
    }
    //_data = $.trim(_data);
    return _data;
};

/**
 * 取要清理儲存
 * @type Boolean
 */
Webpage_cache.prototype._need_clean_save = true;

/**
 * 取要清理儲存
 * @type Boolean
 */
Webpage_cache.prototype._enable_clean_save = false;


// ----------------------------------
// 內部快取
// ----------------------------------

/**
 * 儲存快取資料
 * @type String
 */
Webpage_cache.prototype._cache_data;

/**
 * 設定快取資料
 * @param {String} _data
 * @returns {Webpage_cache}
 */
Webpage_cache.prototype.set_cache_data = function (_data) {
    this._cache_data = _data;
    return this;
};

/**
 * 添加快取資料
 * @param {String} _data
 * @returns {Webpage_cache}
 */
Webpage_cache.prototype.append_cache_data = function (_data) {
    if (this._cache_data === undefined) {
        this._cache_data = '';
    }
    this._cache_data = this._cache_data + _data;
    return this;
};

/**
 * 取得快取資料
 * @returns {String}
 */
Webpage_cache.prototype.get_cache_data = function () {
    return this._cache_data;
};

// ----------------------------------
// 壓縮與解壓縮
// ----------------------------------

/**
 * 壓縮資料
 * @version 20140518 Pulipuli Chen
 * 先不採用壓縮與解壓縮策略
 * @param {String} _data
 * @returns {String}
 */
Webpage_cache.prototype.compress_data = function (_data) {
    //_data = " " + _data + " ";
    
    /*
    for (var _i = 0; _i < 3; _i++) {
        _data = _data + _data;
    }
    */
    
    // 極限長度：450000
    
    //$.test_msg("cache 壓縮前：" + _data.length);
    //_data = LZString.compress(_data);
    _data = LZString.compressToBase64(_data);
    //$.test_msg("cache 壓縮後：" + _data.length);
    return _data;
};

/**
 * 分割資料
 * 
 * 極限長度：450000
 * 不可以儲存超過這個大小的資料
 * @param {String} _data
 * @returns {Array<String>}
 */
Webpage_cache.prototype.split_data = function (_data) {
    var _parts = [];
    var _limit = this._split_limit;
    
    while (_data.length > _limit) {
        var _part = _data.substr(0, _limit);
        _parts.push(_part);
        _data = _data.substr(_limit, _data.length);
    }
    
    if (_data.length > 0) {
        _parts.push(_data);
    }
    
    return _parts;
};

/**
 * 分割的單位
 * 
 * 最大值是450000
 * @type Number
 */
Webpage_cache.prototype._split_limit = 450000;

/**
 * 解壓縮資料
 * 
 * @version 20140518 Pulipuli Chen
 * 先不採用壓縮與解壓縮策略
 * @param {String} _data
 * @returns {String}
 */
Webpage_cache.prototype.decompress_data = function (_data) {
    
    //$.test_msg("cache 解壓縮前：" + _data.length);
    _data = LZString.decompressFromBase64(_data);
    //$.test_msg("cache 解壓縮後：" + _data.length);
    //_data = $.trim(_data);
    return _data;
};

/* End of file Webpage_cache */
/* Location: ./system/application/views/web_apps/extension/Webpage_cache/Webpage_cache.js *//**
 * Selectable_text
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/15 下午 05:05:14
 * @extends {KALS_user_interface}
 */
function Selectable_text(_selector) {
    
    KALS_user_interface.call(this);
    
    this.locks = [];
    this.child('tooltip', new Select_tooltip(this));
    
    if ($.isset(_selector)) {
        this.set_text(_selector);
    }
    
    // Selectable_text_component
    this.child('word', new Selectable_text_word(this));
    
    this.child('offset', new Selectable_text_offset(this));
    this.child('scope', new Selectable_text_scope(this));
    this.child('anchor', new Selectable_text_anchor(this));
    this.child('sentence', new Selectable_text_sentence(this));
    this.child('paragraph', new Selectable_text_paragraph(this));
    this.child('location', new Selectable_text_location(this));
    this.child('chapter', new Selectable_text_chapter(this));
    this.child('cache', new Webpage_cache());
}

// Extend from KALS_user_interface
Selectable_text.prototype = new KALS_user_interface();

/**
 * 可選取的範圍
 * @type {jQuery};
 */
Selectable_text.prototype._text = null;

/**
 * 暫存的可選取的範圍
 * @type {jQuery};
 */
Selectable_text.prototype._cache_text = null;

/**
 * @type {Select_tooltip}
 */
Selectable_text.prototype.tooltip = null;

// -------------------------
// Selectable_text_component
// -------------------------

/**
 * @type {Selectable_text_word}
 */
Selectable_text.prototype.word;

/**
 * @type {Selectable_text_offset}
 */
Selectable_text.prototype.offset;

/**
 * @type {Selectable_text_scope}
 */
Selectable_text.prototype.scope;

/**
 * @type {Selectable_text_anchor}
 */
Selectable_text.prototype.anchor;

/**
 * @type {Selectable_text_sentence}
 */
Selectable_text.prototype.sentence;

/**
 * 段落
 * @type {Selectable_text_paragraph}
 */
Selectable_text.prototype.paragraph;

/**
 * @type {Selectable_text_location}
 */
Selectable_text.prototype.location;

/**
 * @type {Selectable_text_chapter}
 */
Selectable_text.prototype.chapter;

/**
 * 快取機制
 * @type Webpage_cache
 */
Selectable_text.prototype.cache;

// -------------------------
// End of Selectable_text_component
// -------------------------

/**
 * 設置選取區域
 * @param {jQuery} _selector 先前會經過Selection_manager過濾變數，所以此處可以確定是安全的範圍
 */
Selectable_text.prototype.set_text = function (_selector) {
    this._text = _selector;
    
    //調整速度
    if ($.browser.msie) {
        this.excute_interval = this.excute_interval_ie;
    }
    return this;
};


// --------
// 參數設定
// --------


/**
 * 各種鎖
 * @type Array
 */
Selectable_text.prototype.locks = [];

// --------
// Initialize
// --------

Selectable_text.prototype.initialized = false;

/**
 * 將可選取範圍初始化
 * 
 * 只會執行一次，不會給其他人使用
 * @memberOf {Selection_manager}
 * @param {function} _callback
 */
Selectable_text.prototype.initialize = function (_callback) {
    
    var _element = this._text;
    //this._cache_text = this._text.clone();
    //var _element = this._cache_text;
    
    
    // ---------
    // 開始作初始化
    // ---------
    var _this = this;
    
    /**
     * 加入預測進度的功能
     * @author Pulipuli Chen 20131227 
     */
    this._predict_progress_total(_element);
            
    /*
    this._estimate_words_length = _estimate_words_length;
    */
    //$.test_msg("預測字數", _estimate_words_length);
    
    // ----------------------------------------------
    // 舊式的寫法
    // 不建議用這麼多層來依序執行任務，讀起來很差
    
//    this.setup_selectable_element(_element, function () {
//        
//        // 全部處理完了
//        _this.sentence.add_structure();
//        _this.paragraph.add_structure();
//        _this.chapter.add_structure();
//        
//        // 全部處理完了
//        //$.test_msg("paragraph feature", _this.paragraph_feature);
//        $.test_msg("sentence structure", _this.sentence.get_structure());
//        $.test_msg("paragraph structure", _this.paragraph.get_structure());
//        $.test_msg("chapter structure", _this.chapter.get_structure());
//        
//        KALS_context.progress.set_finished();
//        
//        // ---------
//        // 開始標示段落位置
//        // ---------
//        _this.setup_paragraph_location(function () {
//            
//            // --------
//            // 讓文字變成可選取
//            // --------
//            _this.setup_word_selectable(function () {
//                
//                KALS_context.init_profile.add_listener(function () {
//                    _this.initialized = true;    
//                });
//                
//                //2010.11.22 為了計算字數而使用，正式時不用
//                //_this.count_paragraph_words_avg();
//                
//                //$.test_msg('Selectable_text.initialize() complete', _callback);
//                
//                $.trigger_callback(_callback);    
//            });
//        });        
//    });    
    
    
    // ------------------------------------
    
    // 是否啟用快取
    //var _cache_enable = KALS_CONFIG.selectable_text_cache;
    var _cache_enable = this.cache.enable_cache;
    //_cache_enable = false;
    
    var _task_cache_text_backup = function (_callback) {
        //$.test_msg("Selectacble_text _task_cache_text_backup");
        
        //_this._text.empty()
        //        .append(_this._cache_text.contents());
        
        _this._fake_text = _this._text.clone();
        _this._text.after(_this._fake_text);
        _this._cache_text = $("<div></div>").append(_this._text);
        /*
        _this._text.after(_this._cache_text);
        _this._text.remove();
        _this._text = _this._cache_text;
        */
        $.trigger_callback(_callback);
    };
    
    var _task_setup_selectable_element = function (_callback) {
        //$.test_msg("Selectacble_text _task_setup_selectable_element");
        return _this.setup_selectable_element(_element, _callback);
    };
    
    var _task_cache_text_restore = function (_callback) {
        //$.test_msg("Selectacble_text _task_cache_text_restore");
        
        //_this._text.empty()
        //        .append(_this._cache_text.contents());
        /*
        _this._text.after(_this._cache_text);
        _this._text.remove();
        _this._text = _this._cache_text;
        */
       
        _this._fake_text.after(_this._text);
        _this._fake_text.remove();
        _this._cache_text.remove();
        
        $.trigger_callback(_callback);
    };
    
    var _task_setup_paragraph_location = function (_callback) {
        //$.test_msg("Selectacble_text _task_location");
        
        // ---------
        // 開始標示段落位置
        // ---------
        _this.setup_paragraph_location(_callback);
    };
    
    var _task_progress = function (_callback) {
        //$.test_msg("Selectacble_text _task_progress");
        
        // 全部處理完了
        _this.sentence.add_structure();
        _this.paragraph.add_structure();
        _this.chapter.add_structure();
        
        // 全部處理完了
        //$.test_msg("paragraph feature", _this.paragraph_feature);
        //$.test_msg("sentence structure", _this.sentence.get_structure());
        //$.test_msg("paragraph structure", _this.paragraph.get_structure());
        //$.test_msg("chapter structure", _this.chapter.get_structure());
        
        KALS_context.progress.set_finished();
        
        $.trigger_callback(_callback);
    };
    
    var _task_cache_save = function (_callback) {
        //$.test_msg("Selectacble_text _task_cache_save");
        
        // 20140223 Pulipuli Chen
        // 儲存快取
        if (_cache_enable) {
            _this.cache_save(function () {
                $.trigger_callback(_callback);
            });
        }
        else {
            $.trigger_callback(_callback);
        }
        return;
    };
    
    var _task_cache_restore = function (_callback) {
        //$.test_msg("Selectacble_text _task_cache_restore");
        
        // 20140223 Pulipuli Chen
        // 恢復快取
        if (_cache_enable) {
            _this.cache_restore(function () {
                $.trigger_callback(_callback);
            });
        }
        
        return;
    };
    
    var _task_setup_word_selectable = function (_callback) {
        //$.test_msg("Selectacble_text _task_setup_word_selectable");
        return _this.setup_word_selectable(_callback);
    };
    
    var _task_complete = function (_callback) {
        //$.test_msg("Selectacble_text _task_complete");
        KALS_context.init_profile.add_listener(function () {
            _this.initialized = true;    
        });

        //2010.11.22 為了計算字數而使用，正式時不用
        //_this.count_paragraph_words_avg();

        //$.test_msg('Selectable_text.initialize() complete', _callback);

        $.trigger_callback(_callback);
    };
    
    // -----------------------------
    
    var _taks_list = [
        _task_cache_text_backup,
        _task_setup_selectable_element,
        _task_setup_paragraph_location,
        _task_cache_text_restore,
        _task_cache_save,
        _task_setup_word_selectable,
        _task_progress,
        _task_complete,
        _callback
    ];
    
    var _loop = function (_task_list, _i, _callback) {
        //$.test_msg('loop ' + _i , _task_list.length);
        if (_i === _task_list.length || _i > _task_list.length) {
            return $.trigger_callback();
        }
        else {
            _taks_list[_i](function () {
                _i++;
                _loop(_taks_list, _i, _callback);
            });
        }
    };
    
    if ($.is_mobile_mode()) {
        _taks_list = [
            _task_progress,
            _task_complete,
            _callback
        ];
        _loop(_taks_list, 0);
    }
    else if (_cache_enable) {
        this.has_cache(function (_existed) {
            if (_existed) {
                //$.test_msg('selectable_text 啟用 cache');
                _taks_list = [
                    //_task_setup_selectable_element,
                    //_task_setup_paragraph_location,
                    _task_cache_restore,
                    _task_setup_word_selectable,
                    _task_progress,
                    _task_complete,
                    _callback
                ];
            }
            
            _loop(_taks_list, 0);
        });
    }
    else {
        _loop(_taks_list, 0);
    }
    
    return this; 
};

/**
 * 執行間隔參數
 * 
 * 初始化速度設定
 * @type {JSON}
 */
Selectable_text.prototype.excute_interval = {
    /**
     * 批次執行的數量
     * 
     * 若批次執行的數量越多，則效能越好
     * 但設定太高的話，可能會導致瀏覽器回應速度下降
     * 
     * 20131228 設為200已經差不多沒什麼差別了
     * @type Number
     */
    batch_excute: 1000,
    /**
     * 中間等待時間
     * @type Number
     */
    wait: 0
};

/**
 * 執行間隔參數
 * 
 * 初始化速度設定，給IE用的版本
 * @type {JSON}
 */
Selectable_text.prototype.excute_interval_ie = {
    batch_excute: 1,
    wait: 0
};

Selectable_text.prototype.excute_timer = null;

/**
 * 停止初始化動作
 * @author Pulipuli Chen <pulipuli.chen@gmail.com>
 */
Selectable_text.prototype.stop_initialize = function () {
    try {
        clearTimeout(this.excute_timer);
    }
    catch (e) {}
};

// -----------------------------------------------

/**
 * 移除節點
 * @param {jQuery} _element
 * @returns {Selectable_text.prototype}
 */
Selectable_text.prototype._filter_empty_node = function (_element) {
    
    var _empty_span = _element.find("span._");
    
    if (_empty_span.length === 0) {
        return this;
    }
    
    _empty_span = _empty_span.filter(function () {
        return ($(this).text() === "");
    });
    
    //$.test_msg("找到的空標籤", _empty_span.length);
    
    _empty_span.remove();
    
    return this;
};

/**
 * 結合文字節點
 * @param {jQuery} _element
 * @returns {Selectable_text.prototype}
 */
Selectable_text.prototype._merge_child_text_node = function (_element) {
    
    var _contents = _element.contents()
    
    //$.test_msg("節點數量：", _contents.length);
    for (var _i = 0; _i < _contents.length; _i++) {
        var _node = _contents[_i];
        
        if (_node.nodeName === "#text"
              && _i < _contents.length-1) {
            //var _next_node = _contents[(_i+1)];
            while (_i < _contents.length-1 
                    && _contents[(_i+1)].nodeName === "#text") {
                var _next_node = _contents[(_i+1)];
                var _next_text = _next_node.nodeValue;
                _node.nodeValue = _node.nodeValue + _next_text;
                $(_next_node).remove();
                _i++;
            }
        }
    }
    return this;
};

/**
 * 將選取範圍設定為可以選取的型態
 * 
 * 這是最重要的一個函式，KALS如何認識文本就靠這隻函式
 * @param {jQuery} _element 指範圍scope的元素
 * @param {function} _callback
 */
Selectable_text.prototype.setup_selectable_element = function (_element, _callback) {
    
    this._filter_empty_node(_element);
    this._merge_child_text_node(_element);
    
    /**
     * @type {Array}
     */
    var _child_nodes = _element.attr('childNodes');
    if (typeof(_child_nodes) === 'undefined') {
        //$.test_msg('Selectable_text.setup_selectable_element() callback');
        
        if ($.is_function(_callback)) {
            _callback();
        }
        return this;
    }
    
    var _para_classname = this.paragraph.paragraph_classname;
    var _para_tag_names = this.paragraph.paragraph_tag_names;
    var _selectable_text_paragraph = this.paragraph;
    
    var _punctuation_classname = this.sentence.punctuation_classname;
    var _sentence_punctuation_class_name = this.sentence.sententce_punctuation_classname;
    var _selectable_text_sentence = this.sentence;
    
    var _selectable_text_word = this.word;
    
    var _chapter_tag_names = this.chapter.chapter_tag_names;
    var _selectable_text_chapter = this.chapter;
    
    var _this = this;
    
    var _batch_excute = this.excute_interval.batch_excute;
    var _wait = this.excute_interval.wait;
    
    /**
     * 用來儲存任務的變數
     * @type Array
     */
    //this._task_stack = [];
    
    /**
     * 實際執行的迴圈
     * 
     * @param {number} _i 迴圈編號
     * @param {jQuery} _child_nodes 子節點
     * @param {function} _cb 迴呼函數
     */
    var _loop = function (_i, _child_nodes, _cb) {
        
        // 完成迴圈了，停止迴圈的判定
        if (_i === _child_nodes.length || _i > _child_nodes.length) {
            return _this._setup_selectable_element_loop_complete(_cb);
        }
        
        /**
         * _child_obj
         * @type {jQuery}
         */
        var _child_obj = _child_nodes.item(_i);
        
        if (_this.is_element_has_class(_child_obj, _para_classname)) {
            _i++;
            _loop(_i, _child_nodes, _cb);
            return;
        }   //if (_this.element_has_class(_child_obj, _para_classname)) {
		
        if (_child_obj.nodeName !== '#text' &&
            _this.is_element_has_class(_child_obj, _para_classname) === false) {
        
            var _check_word_count = _selectable_text_word.word_count;
            
            var _deeper_parse = function () {
                var _node_name = _child_obj.nodeName;
                if (_check_word_count < _selectable_text_word.word_count
                    && typeof(_node_name) === 'string' 
                    && $.inArray(_node_name.toLowerCase(), _para_tag_names) !== -1) {
                    
                    //$.test_msg("是章節", _node_name);
                    _selectable_text_paragraph.setup_paragraph_node(_child_obj);
                
                    // 20131231 連續加兩次是刻意的
                    //_selectable_text_paragraph.paragraph_count++;
                    //_selectable_text_paragraph.paragraph_count++;
                    
                    //$.test_msg("deeper parse 1", _selectable_text_word.word_count);
                    //_selectable_text_paragraph.paragraph_structure.push(_selectable_text_word.word_count);
                    //_selectable_text_paragraph.add_structure();
                    
                    // 20140102 Pulipuli Chen
                    // 增加句子的計算數量
                    _selectable_text_sentence.add_structure_last_word();
                    
                    // 20140103 Pulipuli Chen
                    // 是章節嗎？
                    if ($.inArray(_node_name.toLowerCase(), _chapter_tag_names) !== -1) {
                        _selectable_text_chapter.add_structure(_child_obj);
                    }
                }   
                else if (typeof(_node_name) === 'string'
                    && _node_name.toLowerCase() === 'br') {
                    _selectable_text_paragraph.paragraph_count++;
                    
                    //$.test_msg("deeper parse 2", _selectable_text_word.word_count);
                    //_selectable_text_paragraph.paragraph_structure.push(_selectable_text_word.word_count);
                    _selectable_text_paragraph.add_structure();
                    
                    // 20140102 Pulipuli Chen
                    // 增加句子的計算數量
                    _selectable_text_sentence.add_structure_last_word();
                }
				
                _i++;
                
                if (_i % _batch_excute === 0) {
                    _this.excute_timer = setTimeout(function () {
                        _loop(_i, _child_nodes, _cb);
                        return;
                    }, _wait);    
                }
                else {
                    _loop(_i, _child_nodes, _cb);
                    return;
                }
            };  // var _deeper_parse = function () {
            
            _this.setup_selectable_element($(_child_obj), _deeper_parse);
            return;
        }   //if (_child_obj.nodeName !== '#text' &&
        else {
            var _text = _this.get_element_content(_child_obj);
            
            // 20140518 Pulipuli Chen
            // 連接下一個text
            /*
            $.test_msg("開始找尋下一個", _i);
            var _next_child_obj = _child_nodes.item(_i + 1);
            while (_next_child_obj !== null 
                    && _next_child_obj.nodeName === "#text") {
                var _next_text = _this.get_element_content(_next_child_obj);
                if ($.trim(_next_text) === "") {
                    $.test_msg("空格", _next_text);
                    //break;
                }
                else {
                    $.test_msg("下一個text", _next_text);
                }
                _text = _text + _next_text;
                _i++;
                
                $(_next_child_obj).remove();
                _next_child_obj = _child_nodes.item(_i + 1);
            }   //
            
            if (_text === "") {
                _i++;
                _loop(_i, _child_nodes, _cb);
                return;
            }
            */

            // 20140223 Pulipuli Chen
            // 將初始化next_element的動作往外移
            var _next_element = _this._setup_selectable_element_init_next_element(_text, _child_obj);
//            var _next_element = null;
//            _next_element = _this.create_selectable_paragraph(_selectable_text_paragraph.paragraph_count);
//            $(_next_element).hide();
//            
//            /**
//             * @version 20111106 Pudding Chen
//             *     先不貼出去，讓他放在記憶體中處理。
//             *     處理完一個段落在貼到DOM去。
//             */
//            //_child_obj.parentNode.insertBefore(_next_element, _child_obj);
//            
//            for (var _s = 0; _s < _text.length; _s++) {
//                var _t = _text.substr(_s, 1);
//                var _t_prev = '',  _t_next = '';
//                
//                if (_s > 0) {
//                    _t_prev = _text.substr(parseInt(_s,10) - 1, 1);
//                }
//                
//                if (_s < _text.length - 1) {
//                    _t_next = _text.substr(parseInt(_s,10) + 1, 1);
//                }
//                
//                if ($.match_english(_t) === true) {	
//                    while ($.match_english(_t_next) === true) {
//                        _t = _t + _t_next;
//                        _s++;
//                        _t_next = _text.substr(parseInt(_s,10)+1, 1);
//                    }
//                }
//                else if ($.match_number(_t) === true) {
//                    while ($.match_number(_t_next) === true) {
//                        _t = _t + _t_next;
//                        _s++;
//                        _t_next = _text.substr(parseInt(_s,10)+1, 1);
//                    }
//                }
//                
//                var _t_element = null;
//                
//                // 如果不是空白的話
//                if ($.match_space(_t) === false) {
//                    
//                    _t_element = _selectable_text_word.create_selectable_word(
//                            _selectable_text_paragraph.paragraph_count, 
//                            _selectable_text_word.word_count, _t
//                    );
//                    
//                    if ($.match_sentence_punctuation(_t)) {
//                        if ($.match_english_sentence_punctuation(_t)) {
//                            if (_t_next === '') {
//                                $(_t_element).addClass(_sentence_punctuation_class_name);
//                                
//                                // 20140102 Pulipuli Chen
//                                // 增加句子的計算數量
//                                _selectable_text_sentence.add_structure();
//                            }
//                            else if ($.match_space(_t_next)) {
//                                if (_s < _text.length - 2) {
//                                    //檢測下下個字是否是大寫英文
//                                    var _t_nnext = _text.substr(parseInt(_s, 10) + 2, 1);
//                                    if ($.match_upper_english(_t_nnext)) {
//                                        $(_t_element).addClass(_sentence_punctuation_class_name);
//                                        
//                                        // 20140102 Pulipuli Chen
//                                        // 增加句子的計算數量
//                                        _selectable_text_sentence.add_structure();
//                                    }   //if ($.match_upper_english(_t_nnext)) {
//                                    else {
//                                        $(_t_element).addClass(_punctuation_classname);
//                                    }
//                                }   //if (_s < _text.length - 2) {
//                                else {
//                                    $(_t_element).addClass(_sentence_punctuation_class_name);
//                                    
//                                    // 20140102 Pulipuli Chen
//                                    // 增加句子的計算數量
//                                    _selectable_text_sentence.add_structure();
//                                }
//                            }   // else if ($.match_space(_t_next)) {
//                            else {
//                                $(_t_element).addClass(_punctuation_classname);
//                            }
//                        }   //if ($.match_sentence_punctuation(_t)) {
//                        else {
//                            $(_t_element).addClass(_sentence_punctuation_class_name);
//                            
//                            // 20140102 Pulipuli Chen
//                            // 增加句子的計算數量
//                            _selectable_text_sentence.add_structure();
//                        }
//                    }   //if ($.match_sentence_punctuation(_t)) {
//                    else if ($.match_punctuation(_t)) {
//                        $(_t_element).addClass(_punctuation_classname);
//                    }   //else if ($.match_punctuation(_t)) {
//                    _selectable_text_word.word_count++;
//                }   //if ($.match_space(_t) === false) {
//                else {
//                    // 如果是空白的話
//                    _t_element = _this.create_span_word(_t);
//                }
//                
//                _next_element.appendChild(_t_element);
//            }    //for (var _s = 0; _s < _text.length; _s++)
    	
            // 20140223 Pulipuli Chen
            // 將腳本分離
            //var _insert_action = function () {
            //    _child_obj.parentNode.insertBefore(_next_element, _child_obj);
            //    $(_next_element).css("display", "inline");
            //    $(_child_obj).remove();
            //};
            //_this._task_stack.push(_insert_action);
            _this._setup_selectable_element_insert_action(_child_obj, _next_element);
            
            _i++;
            if (_i % _batch_excute === 0) {
                
                // 開始批次執行
                /*
                if (_task_stack.length > 0) {
                    for (var _t in _task_stack) {
                        _task_stack[_t]();
                    }
                    _task_stack = [];
                }
                */
                
                _this.excute_timer = setTimeout(function () {
                    _loop(_i, _child_nodes, _cb);
                    return;
                }, _wait);    
            }
            else {
                _loop(_i, _child_nodes, _cb);
                return;
            }
        }    //else if (_child_obj.nodeName != '#text' &&
	};    //var _loop = function (_i, _child_nodes, _callback)
    
    // 開始進行設定化
    this.excute_timer = setTimeout(function () {
        _loop(0, _child_nodes, _callback);
    }, 0);
    return this;
    
};    //Selectable_text.prototype.setup_scope

/**
 * 初始化next_element，只用於setup_selectable_element
 * @param {String} _text
 * @param {jQuery} _child_obj
 * @returns {HTMLNode}
 */
Selectable_text.prototype._setup_selectable_element_init_next_element = function (_text, _child_obj) {
    return this.paragraph._setup_selectable_element_init_next_element(_text, _child_obj);
};

/**
 * 新增任務
 * @param {HTMLNode} _child_obj
 * @param {HTMLNode} _next_element
 */
Selectable_text.prototype._setup_selectable_element_insert_action = function (_child_obj, _next_element) {
    var _insert_action = function () {
        _child_obj.parentNode.insertBefore(_next_element, _child_obj);
        $(_next_element).css("display", "inline");
        $(_child_obj).remove();
    };
    this._task_stack.push(_insert_action);
    
    return this;
};

/**
 * setup_selectable_element loop完成之後做的事情
 * @param {function} _callback
 */
Selectable_text.prototype._setup_selectable_element_loop_complete = function (_callback) {
    //$.test_msg('Selectable_text.setup_selectable_element() cb', _cb);

    // 把剩餘的任務執行完
    //if (_task_stack.length > 00) {
        //$.test_msg("剩餘的任務？", _task_stack.length);
        //for (var _t = 0; _t < _task_stack.length; _t++) {
        for (var _t in this._task_stack) {
            //if ($.is_function(_task_stack[_t])) {
                this._task_stack[_t]();
            //}
        }
        this._task_stack = [];
    //}


    if ($.is_function(_callback)) {
        _callback();
    }
};

/**
 * 給setup_selectable_element作為儲存任務使用的
 * @type Array
 */
Selectable_text.prototype._task_stack = [];

/**
 * 設定各個字在段落中的位置
 * 
 * 備註：位置與代號
 * 0 => head : location-head
 * 1 => foot : location-foot
 * 2 => near head & foot : 此情況並不標示，由get_paragraph_location()去判斷
 * 3 => near head : location-near-head
 * 4 => near foot : location-near-foot
 * 5 => body : 沒有標示
 * 
 * 2220 檢查完畢
 * @param {function} _callback
 */
Selectable_text.prototype.setup_paragraph_location = function(_callback) {
    return this.location.setup_paragraph_location(_callback);
};

// --------
// Initialize Helpers
// --------

/**
 * 檢查HTML元素是否有_class_name
 * @param {Object} _element
 * @param {String} _class_name
 * @type {boolean}
 */
Selectable_text.prototype.is_element_has_class = function (_element, _class_name) {
    if ($.is_object(_element) === false
        || typeof(_element.className) === 'undefined') {
        return false;
    }
    else {
        var _class_names = _element.className.split(' ');
        return ($.inArray(_class_name, _class_names) > -1);
    }
};

/**
 * 取得_element的內容資料。如果_element不是HTML內容，則回傳空字串
 * @param {Object} _element
 */
Selectable_text.prototype.get_element_content = function (_element) {
    if (_element === undefined 
            || $.is_object(_element) === false) {
        return '';
    }
    else if (typeof(_element.nodeValue) !== 'undefined' &&
            $.trim(_element.nodeValue) !== '') {
        //2010.10.15 還是保留空格好了
        //return $.trim(_element.nodeValue);
        return _element.nodeValue;
    }
    else {
        return '';
    }
};

// -------------------------------------
// Selectable_text_scope
// -------------------------------------

/**
 * 取得推薦的範圍
 * @param {Scope_collection_param} _scope_coll
 * @type {Scope_collection_param}
 */
Selectable_text.prototype.get_recommend_scope_coll = function (_scope_coll) {
    return this.scope.get_recommend_scope_coll(_scope_coll);
};

/**
 * 從classname取回scope_coll
 * @param {String} _classname
 * @type {Scope_collection_param}
 */
Selectable_text.prototype.retrieve_scope_coll = function (_classname) {
    return this.scope.retrieve_scope_coll(_classname);
};

/**
 * 對指定範圍加上_classname
 * 
 * @param {Scope_collection_param} _scope_coll
 * @param {String} _classname
 */
Selectable_text.prototype.add_class = function(_scope_coll, _classname, _callback) {
    this.scope.add_class(_scope_coll, _classname, _callback);
};

/**
 * 取消_classname，或是針對_scope取消_classname
 * 
 * @param {Scope_collection_param|String} _scope_coll
 * @param {String|null} _classname
 */
Selectable_text.prototype.remove_class = function (_scope_coll, _classname, _callback) {
    return this.scope.remove_class(_scope_coll, _classname, _callback);
};

/**
 * 取消_classname，並針對_scope加上_classname
 * @param {Scope_collection_param} _scope_coll
 * @param {String} _classname
 */
Selectable_text.prototype.set_class = function (_scope_coll, _classname) {
    return this.scope.set_class(_scope_coll, _classname);
};

/**
 * 將範圍轉換成jQuery陣列來選取
 * @param {Scope_collection_param} _scope_coll
 * @type {jQuery[][]} 注意，陣列是兩階層喔！
 * @TODO 20140102 尚未更新相關使用的程式碼 this.get_word_id
 */
Selectable_text.prototype.get_words_by_scope_coll = function (_scope_coll) {
    return this.scope.get_words_by_scope_coll(_scope_coll);
};

// ---------------------------------------
// Selectable_text_paragraph
// ---------------------------------------

/**
 * 建立一個可以選取Word的容器
 * @param {number} _id
 * @type {HTMLElementSpan}
 */
Selectable_text.prototype.create_selectable_paragraph = function (_id) {
    return this.paragraph.create_selectable_paragraph(_id);
};

/**
 * 取得段落的ID
 * @param {number|string|Object} _word
 */
Selectable_text.prototype.get_paragraph_id = function(_word) { 
    return this.paragraph.get_paragraph_id(_word);
};

/**
 * 計算段落的平均字數
 * 
 * 測試用，結果顯示在console端
 */
Selectable_text.prototype.count_paragraph_words_avg = function () {
    return this.paragraph.count_paragraph_words_avg();
};


// --------------------------
// Selectable_text_location
// --------------------------

/**
 * 取得段落的特徵
 *                           //view modal
 *  'location-head',         //0    0
 *  'location-foot',         //1    4
 *  'location-near-head-foot'//2    2
 *  'location-near-head',    //3    1
 *  'location-near-foot'     //4    3
 *  'location-head-foot'     //     5
 *  (other)                  //     6
 * @param {Scope_collection_param} _scope_coll
 */
Selectable_text.prototype.get_location_feature = function (_scope_coll) {
    return this.location.get_location_feature(_scope_coll);
};

// -------------------------------------
// Selectable_text_sentence
// -------------------------------------

/**
 * 取得句子位置的索引
 * 
 * 用來分析標註所在句子，跟段落paragraph是不一樣的。
 * @author Pudding Chen 20121228
 * @return {Array}
 */
Selectable_text.prototype.get_sentence_index = function () {
    return this.sententce.get_sentence_index();
};

// -------------------------------------
// Selectable_text_word
// -------------------------------------

/**
 * 取得word_id_prefix
 * @returns {Selectable_text_word.word_id_prefix}
 */
Selectable_text.prototype.get_word_id_prefix = function () {
    return this.word.get_word_id_prefix();
};

/**
 * 讓所有文字都保持在可選取的狀態
 * 
 * @param {function} _callback
 */
Selectable_text.prototype.setup_word_selectable = function (_callback) {
    return this.word.setup_word_selectable(_callback);
};

/**
 * 從ID取得Word
 * @param {number} _id
 * @return {jQuery}
 */
Selectable_text.prototype.get_word_by_index = function(_index) {
    return this.word.get_word_by_index(_index);
};

/**
 * 取得指定ID的word
 * @param {int} _word_id
 * @returns {jQuery}
 */
Selectable_text.prototype.get_word = function (_word_id) {
    return this.word.get_word(_word_id);
};

/**
 * 取得word id，但似乎沒有人使用他
 * @param {jQuery} _word
 */
Selectable_text.prototype.get_word_id = function (_word) {
    return this.word.get_word_id(_word);
};

/**
 * 如果下一個字是英文的話
 * 
 * @param {jQuery} _word
 * @returns {Boolean}
 */
Selectable_text.prototype.is_word_next_english = function (_word) {
    return this.word.is_word_next_english(_word);
};

/**
 * 如果下一個字是空格的話
 * @param {jQuery} _word
 * @returns {Boolean}
 */
Selectable_text.prototype.is_word_next_span = function (_word) {
    return this.word.is_word_next_span(_word);
};

/**
 * 取得下一個span
 * @param {jQuery} _word
 * @returns {jQuery|null}
 */
Selectable_text.prototype.get_word_next_span = function (_word) {
    return this.word.get_word_next_span(_word);
};

/**
 * 建立一個不可選取的文字
 * 
 * @param {String} _text
 * @type {jQuery}
 */
Selectable_text.prototype.create_span_word = function(_text) {
    return this.word.create_span_word(_text);
};

/**
 * 建立一個可選取的文字
 * @param {number} _para_id Paragraph ID
 * @param {number} _point_id Word ID
 * @param {string} _text 內容文字
 * @type {jQuery}
 */
Selectable_text.prototype.create_selectable_word = function(_para_id, _point_id, _text) {
    return this.word.create_selectable_word(_para_id, _point_id, _text);
};

/**
 * 設定Word的Tooltip
 * @param {jQuery|HTMLElement} _word
 * @returns {jQuery}
 */
Selectable_text.prototype.setup_word_tooltip = function (_word) {
    return this.word.setup_word_tooltip(_word);
};

/**
 * 估算大概會多少字
 * @param {String} _text
 * @returns {Number}
 */
Selectable_text.prototype.get_estimate_total_words = function (_text) {
    return this.word.get_estimate_total_words(_text);
};

// -------------------------------------
// Selectable_text_anchor
// -------------------------------------

/**
 * 取得該範圍的文字
 * 
 * @param {Scope_collection_param} _scope_coll
 * @type {String}
 */
Selectable_text.prototype.get_anchor_text = function (_scope_coll) {
    return this.anchor.get_anchor_text(_scope_coll);
};

/**
 * 取得部份的標註範圍文字
 * 
 * @param {Scope_collection_param} _scope_coll 要選取的範圍
 * @param {Number} _max_length 最長字數，預設是50個字。低於這個數字以下不省略
 * @return {String}
 */
Selectable_text.prototype.get_abbreviated_anchor_text = function (_scope_coll, _max_length) {
    return this.anchor.get_abbreviated_anchor_text(_scope_coll, _max_length);
};

/**
 * 取得該範圍的文字
 * @param {Scope_collection_param} _scope_coll
 * @param {Scope_collection_param} _focus_coll
 */
Selectable_text.prototype.get_display_anchor_text = function (_scope_coll, _focus_coll) {
    return this.anchor.get_display_anchor_text(_scope_coll, _focus_coll);
};

// -------------------------------------
// Selectable_text_offset
// -------------------------------------

/**
 * 取得選取範圍的top位置
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text.prototype.get_offset_top = function (_scope_coll) {
    return this.offset.get_offset_top(_scope_coll);
};

/**
 * 取得選取範圍最底部的位置
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text.prototype.get_offset_bottom = function (_scope_coll) {
    return this.offset.get_offset_bottom(_scope_coll);
};

/**
 * 取得標註範圍最左邊的位置
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text.prototype.get_offset_left = function (_scope_coll) {
    return this.offset.get_offset_left(_scope_coll);
};


/**
 * 取得現在標註範圍最右邊的位置
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text.prototype.get_offset_right = function (_scope_coll) {
    return this.offset.get_offset_right(_scope_coll);
};

/**
 * 取得標註範圍中，第一個範圍的第一個字的左邊位置
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text.prototype.get_offset_first_left = function (_scope_coll) {
    return this.offset.get_offset_first_left(_scope_coll);
};

/**
 * 取得標註範圍中，最後一個範圍的最後一個字的右邊位置
 * @param {Scope_collection_param} _scope_coll
 * @type {int}
 */
Selectable_text.prototype.get_offset_last_right = function (_scope_coll) {
    return this.offset.get_offset_last_right(_scope_coll);
};

/**
 * 快取ID
 * @type String
 */
Selectable_text.prototype._cache_id = 'selectable_text';

/**
 * 儲存到快取中
 * 
 * @version 20140517 Pulipuli Chen
 *  取代了原本使用storage來儲存的作法
 *  改用Webpage_cache的方式從伺服器儲存快取
 * @param {funciton} _callback
 * @returns {Selectable_text}
 */
Selectable_text.prototype.cache_save = function (_callback) {
    
    var _cache_id = this._cache_id;
    
    //var _text_html = this._text.html();
    var _text_html = this._text.html();
    
    // 測試看看是不是因為字串太長的原因
    //_text_html = _text_html.substr(0, 1000);
    //$.test_msg('cache_save ' + _cache_id, _text_html);
    
    var _this = this;
//    KALS_context.storage.set(_cache_id, _text_html, function () {
//        _this.word.cache_save(_cache_id, function () {
//            _this.sentence.cache_save(_cache_id, function () {
//                _this.paragraph.cache_save(_cache_id, _callback);
//            });
//        });
//    });
    
    this.word.cache_save(_cache_id, function () {
        _this.sentence.cache_save(_cache_id, function () {
            _this.paragraph.cache_save(_cache_id, _callback);
        });
    });
    
    this.cache.save(_text_html);
    
    return this;
};

/**
 * 從快取中復原
 * 
 * @version 20140517 Pulipuli Chen
 *  取代了原本使用storage來儲存的作法
 *  改用Webpage_cache的方式從伺服器取得快取
 * @param {funciton} _callback
 * @returns {Selectable_text_word}
 */
Selectable_text.prototype.cache_restore = function (_callback) {
    
    
    var _cache_id = this._cache_id;
    var _this = this;
    var _loaded_callback = function (_text_html) {
        //$.test_msg('cache_restore ' + _cache_id, _text_html);
        _this._text.html(_text_html);

        _this.word.cache_restore(_cache_id, function () {
            _this.sentence.cache_restore(_cache_id, function () {
                _this.paragraph.cache_restore(_cache_id, _callback);
            });
        });
    };
    
    /*
    KALS_context.storage.get(_cache_id, _loaded_callback);
    */
   
    this.cache.load(_loaded_callback);
    return this;
};

/**
 * 檢查是否有cache
 * 
 * @version 20140517 Pulipuli Chen
 *  取代了原本使用storage來儲存的作法
 *  改用Webpage_cache的方式從伺服器取得快取
 * @param {funciton} _callback
 * @returns {Boolean}
 */
Selectable_text.prototype.has_cache = function (_callback) {
    
    //return KALS_context.storage.is_set(this._cache_id, _callback);
    
    var _loaded_callback = function (_data) {
        var _existed = false;
        if (_data !== false) {
            _existed = true;
        }
        
        if ($.is_function(_callback)) {
            _callback(_existed);
        }
    };
    
    this.cache.load(_loaded_callback);
};

/**
 * 加入預測進度的功能
 * @author Pulipuli Chen 20131227 
 * @param {jQuery} _element
 * @returns {Selectable_text} description
 */
Selectable_text.prototype._predict_progress_total = function (_element) {
    var _total;
    var _estimate_words = _element.text();
    var _estimate_words_length = this.word.get_estimate_total_words(_estimate_words);
    _total = _estimate_words_length;
    
    // 段落
    var _para_tags = this.paragraph.paragraph_tag_names;
    //a=$('[myc="blue"],[myid="1"],[myid="3"]');
    var _para_selector = _para_tags.join(",");
    var _para_length = _element.find(_para_selector).length;
    _para_length = _para_length * 2;
    _total = _total + _para_length;
    
    // 文字
    var _span = _element.find("span");
    _total = _total + _span.length;
    
    //$.test_msg("預測長度", [_total, _estimate_words_length, _para_length]);
    
    KALS_context.progress.set_total(_total);
    
    return this;
};

/* End of file Selectable_text */
/* Location: ./system/application/views/web_apps/Selectable_text.js *//**
 * Selection_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/5 下午 01:45:46
 * @extends {Multi_event_dispatcher}
 * @param {jQuery} _selector
 */
function Selection_manager(_selector) {
    
    //參數初始化
    this._$enable_types = ['ready'];
    
    //設置元件
    //this.scope = new Selectable_text(_selector);
    this.child('text', new Selectable_text(_selector));
    
    var _text = this.text;
    this.child('select', new Selection_select(_text));
    //this.child('editor', new Selection_editor(_text));
    this.child('view', new Selection_view(_text));
    this.child('search', new Selection_search(_text));
	
    this.child('my_basic', new Selection_my_manager(_text));
    this.child('my_custom', new Selection_my_custom_manager(_text));
	
    
    this.child('recommend', new Selection_recommend(_text));
    this.child('navigation', new Selection_navigation_manager(_text));
    
    this.child('recommended', new Selection_recommended(_text));
    this.child('recommend_by', new Selection_recommend_by(_text));
    
    //this.selectable_selector = null;
    //this.selected_scope = [];
    //this.selected_start = null;
    
    
    
    return this;
}

/**
 * 繼承
 * @memberOf {Selection_manager}
 */
Selection_manager.prototype = new Multi_event_dispatcher();

/**
 * Selection_manager管理的範圍
 * @type {Selectable_text}
 */
Selection_manager.prototype.text = null;

/**
 * @type {Selection_select}
 */
Selection_manager.prototype.select = null;

/**
 * @type {Selection_view}
 */
Selection_manager.prototype.view = null;

/**
 * @type {Selection_Search}
 */
Selection_manager.prototype.search = null;

/**
 * @type {Selection_my_manager}
 */
Selection_manager.prototype.my_basic = null;

/**
 * @type {Selection_my_custom_manager}
 */
Selection_manager.prototype.my_custom = null;

/**
 * @type {Selection_recommend}
 */
Selection_manager.prototype.recommend = null;

/**
 * @type {Selection_navigation_manager}
 */
Selection_manager.prototype.navigation = null;
/**
 * 將可選取範圍初始化
 * @memberOf {Selection_manager}
 * @param {Object} _selector
 */
Selection_manager.prototype.initialize = function () {
    // ---------
    // 開始作初始化
    // ---------
    var _this = this;
    this.text.initialize(function () {
        // ---------
        // 完成後的動作
        // ---------
        _this.notify_listeners('ready', this);
        
        //$.test_msg('Selection_manager.iitialize() 完成！');
        
        KALS_text.init.complete('Selection_manager');
    });    
    
    return this; 
};

// --------
// 以下廢棄
// --------

/**
 * 目前已經被選取的範圍，注意，資料型態不是JSON，而是被選取的jQuery元素
 * @type {jQuery[]} = [
 *     [jQuery1_1, jQuery1_2, jQuery1_3],
 *     [jQuery2_1, jQuery2_2]
 * ]
 */
/*
Selection_manager.prototype.selected_scope = [];
*/

/**
 * 將目前選取的範圍轉換成scope陣列回傳
 * @type {Scope_collection_param}
 */
/*
Selection_manager.prototype.get_selection_scopes = function () {
    
    var _scopes = new Scope_collection_param();
    
    var _first_id = null;
    var _last_id = null;
    for (var _key in this.selected_scope) {
        var _s = this.selected_scope[_key];
        
        var _from = _s[0];
        var _to = _s[(_s.length-1)];
        
        var _from_id = $.get_prefixed_id(_from);
        var _to_id = $.get_prefixed_id(_to);
        
        var _scope = new Scope_param(_from_id, _to_id);
        
        //_scopes.push([_from_id, _to_id]);
        _scopes.add(_scope);
    }
   
    return _scopes;
};
*/

/*
Selection_manager.prototype.get_anchor_text = function () {
    
    var _anchor_text = '';
    
    for (var _i in this.selected_scope) {
        if (_i > 0)
            _anchor_text = _anchor_text + ' ';
        
        var _scope = this.selected_scope[_i];
        for (var _j in _scope) {
            var _word = _scope[_j];
            _anchor_text = _anchor_text + _word.html();
        }
    }
    
    return _anchor_text;
};
*/

/*
Selection_manager.prototype.get_recommend_scope = function () {
    return this.scope.get_recommend_scope();
};
*/
/**
 * 選擇指定範圍
 * @param {Scope_param|Scope_param[]} _scope 範圍
 */
/*
Selection_manager.prototype.select = function (_scope) {
    this.cancel_select();
    this.add_select(_scope);
    return this;
};
*/
/**
 * 增加選擇範圍
 * @param {Scope_param|Scope_param[]} _scope 範圍。example: {
 *     from: 0,
 *     to: 12
 * }
 */
/*
Selection_manager.prototype.add_select = function (_scope) {
    _scope = this.scope.add_select(_scope);
    this.selected_scope.push(_scope);
    this.notify_listeners('select', this);
    
    return this;
};
*/
/**
 * 看看是否有選取範圍
 * @type {boolean} 
 */
/*
Selection_manager.prototype.has_selected = function () {
    return (this.selected_scope.length > 0);
};
*/

/**
 * 設定該選取範圍為此標註類型
 * @param {number} _type 標註類型ID
 */
/*
Selection_manager.prototype.set_annotation_type = function (_type) {
    //有哪些標註的class_name，尚未訂定
    var _anno_class_name = _type;
    this.add_class(_anno_class_name);
    
    return this;
};
*/
/*
Selection_manager.prototype.unset_annotation_type = function (_type) {
    //有哪些標註的class_name，尚未訂定
    var _anno_class_name = _type;
    this.remove_class(_anno_class_name);
    
    return this;
};
*/
//Selection_manager.prototype.recommend_classname = 'recommend';

/**
 * 設定該選取範圍為推薦
 */
/*
Selection_manager.prototype.set_recommend = function () {
    
    //有哪些推薦標註的class_name，尚未訂定
    this.add_class(this.recommend_classname);
    
    return this;
};
*/
/*
Selection_manager.prototype.unset_recommend = function () {
    
    //有哪些推薦標註的class_name，尚未訂定
    this.remove_class(this.recommend_classname);
        
    return this;
};
*/
/**
 * 增加_class_name
 * @param {String} _class_name
 */
/*
Selection_manager.prototype.add_class = function (_class_name) {
    
    for (var _i in this.selected_scope) {
        var _scope = this.selected_scope[_i];
        if ($.is_array(_scope)) {
            for (var _j in _scope) {
                var _word = _scope[_j];
                if ($.is_jquery(_word)) {
                    _word.addClass(_class_name);
                }
            }
        }
        else if ($.is_jquery(_scope)) {
            _scope.addClass(_class_name);
        }
    }
    return this;
};
*/
/**
 * 移除_class_name
 * @param {String} _class_name
 */
/*
Selection_manager.prototype.remove_class = function (_class_name) {
    
    for (var _i in this.selected_scope) {
        var _scope = this.selected_scope[_i];
        if ($.is_array(_scope)) {
            for (var _j in _scope) {
                var _word = _scope[_j];
                if ($.is_jquery(_word)) {
                    _word.removeClass(_class_name);
                }
            }
        }
        else if ($.is_jquery(_scope)) {
            _scope.removeClass(_class_name);
        }
    }
    return this;
};
*/
/**
 * 取消選取。注意，notify是在真正取消選取之前進行的的。
 */
/*
Selection_manager.prototype.cancel_select = function () {
    
    this.notify_listeners('cancel_select', this);
    
    this.scope.cancel_select();
    this.selected_scope = [];
    
    return this;
};
*/

/**
 * 清理標註範圍標示
 */
/*
Selection_manager.prototype.clear_annotation = function () {
    
    //有哪些標註的class_name，尚未訂定
    var _anno_class_names = [];
    
    for (var _i in _anno_class_names) {
        var _class_name = _anno_class_names[_i];
        $('.' + _class_name).removeClass(_class_name);
    }
    return this;
    
};
*/
/**
 * 清理推薦範圍標示
 */
/*
Selection_manager.prototype.clear_recommend = function () {
    
    //有哪些推薦標註的class_name，尚未訂定
    var _recommend_class_names = [];
    
    for (var _i in _recommend_class_names) {
        var _class_name = _recommend_class_names[_i];
        $('.' + _class_name).removeClass(_class_name);
    }
    return this;
    
};
*/
/**
 * 取得選取區域的top。沒有選取時，回傳null。
 * @type {number} 單位是px
 */
/*
Selection_manager.prototype.get_selection_top = function () {
    
    if (this.selected_scope === null
        || this.selected_scope.length === 0)
        return null;
    
    var _first_group = this.selected_scope[0];
    _first_word = _first_group[0];
    
    //$.test_msg('Selection_manager.get_selection_top()', _first_word.length);
    //_first_word.css('color', 'red');
    
    var _top = _first_word.offset().top;
    
    return _top;
};
*/
/**
 * 取得選取區域的bottom。沒有選取時，回傳null。
 * @type {number} 單位是px
 */
/*
Selection_manager.prototype.get_selection_bottom = function () {
    
    if (this.selected_scope === null
        || this.selected_scope.length === 0)
        return null;
    
    var _last_scope = this.selected_scope[(this.selected_scope.length - 1)];
    _last_word = _last_scope[( _last_scope.length-1 )];
    
    var _top = _last_word.offset().top;
    var _height = _last_word.height();
    var _bottom = _top + _height;
    
    return _bottom;
};
*/


/* End of file Selection_manager */
/* Location: ./system/application/views/web_apps/kals_text/Selection_manager.js *//**
 * Editor_container
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/18 上午 01:00:02
 * @extends {KALS_user_interface}
 * @param {List_collection} _list_coll
 */
function Editor_container(_list_coll) {
    
    KALS_user_interface.call(this);
    
    //this.setup_editor(_list_coll, _policy_changable);
    if ($.isset(_list_coll)) {
        this._list_coll = _list_coll;
    }
}

// Extend from KALS_user_interface
Editor_container.prototype = new KALS_user_interface();

/**
 * 清單。
 * 為了要讓editor跟group_list互動，所以需要設定。
 * @type {List_collection}
 */
Editor_container.prototype._list_coll = null;

/**
 * 可改變權限。給editor的設定。
 * @type {boolean}
 */
Editor_container.prototype._disable_option = [];
//_policy_changable = true;


/**
 * toggle的位置，相對於editor。
 * @type {String}
 */
Editor_container.prototype._toggle_position = 'bottom';

/**
 * 預設的開啟狀態
 * @tyep boolean true=開啟; false=關閉
 */
Editor_container.prototype._$default_toggle = false;

/**
 * 編輯器。
 * @type {Annotation_editor}
 */
Editor_container.prototype.editor = null;

/**
 * @type {jQuery}
 */
Editor_container.prototype._toggle = null;

/**
 * @param {List_collection} _list_coll
 */
Editor_container.prototype.set_list_coll = function (_list_coll) {
    this._list_coll = _list_coll;
};

/**
 * Create UI
 * @memberOf {Editor_container}
 * @type {jQuery} UI
 */
Editor_container.prototype._$create_ui = function () {
    var _ui = $('<table height="100%" width="100%" cellspacing="0"><tbody>'
            + '</tbody></table>')
        .addClass('editor-container');
    
    var _tbody = _ui.find('tbody:first');
    
    var _container = this._create_container();
    _container.appendTo(_tbody);
    
    var _editor = this._setup_editor();
    //$.test_msg('Editor_container._$create_ui [_editor.get_ui()]');
    var _editor_ui = _editor.get_ui();
    _editor_ui.appendTo(_container.find('td:first'));
    //_editor_ui.hide();
    
    this._create_toggle();
    this._set_toggle_position();
    
    var _deny = this._create_deny_conpoment();
    _deny.appendTo(this._toggle.find('td:first'));
    
    var _deny_write_lang = this._deny_write_lang;
    this.set_deny_message(_deny_write_lang);
    
    this._listen_auth();
    
    var _loading = this._create_loading();
    _loading.appendTo(_container.find('td:first'));

    if (this._$default_toggle === true
       || this._$default_toggle === false) {
            //$.test_msg("編輯器設定預設狀態", this._$default_toggle);
        this.toggle_container(this._$default_toggle);
    }
    
    var _this = this;
	
    //setTimeout(function () {
    //    _this.toggle_deny(true);
    //}, 0);
    
    this.check_policy();
    
    return _ui;
};

/**
 * 建立編輯器
 */
Editor_container.prototype._setup_editor = function () {
    
    if ($.is_null(this.editor)) {
        var _list_coll = this._list_coll;
        var _disable_option = this._disable_option;
        var _editor = new Annotation_editor(this, _list_coll, _disable_option);
        _editor.get_ui();
        this.child('editor', _editor);    
    }
    return this.editor;
};

// --------
// Toggle
// --------

Editor_container.prototype._create_toggle = function () {
    
    //var _toggle = $('<div></div>')
    //    .addClass('toggle');
    
    //_toggle.html(': : : :');
    
    var _toggle = $('<tr><td></td></tr>')
        .addClass('toggle');
    
    _toggle.find('td').append($('<span class="handler">: : : :</span>'));
    
    _toggle.find('td').append($('<span class="deny-message"></span>'));
    
    var _this = this;
    _toggle.click(function () {
        _this.toggle_container();
    });
    
    this._toggle = _toggle;
    return _toggle;
};

Editor_container.prototype._set_toggle_position = function (_toggle_position) {
    
    if (_toggle_position === this._toggle_position) {
        return this;
    }
    
    if ($.is_null(_toggle_position)) {
        _toggle_position = this._toggle_position;
    }
     
    var _container = this._container;
    var _toggle_ui = this._toggle;
    var _top_classname = 'top';
       
    if (_toggle_position === 'bottom') {
        _container.after(_toggle_ui);
        _toggle_ui.removeClass(_top_classname);
    }
    else {
        _container.before(_toggle_ui);
        _toggle_ui.addClass(_top_classname);
    }
    
    //$.test_msg('Editor_container.set_toggle_position()', [_toggle_ui.html(), _toggle_position]);
    
    return this;
};

/*
Editor_container.prototype.toggle_editor = function (_display, _callback) {
    
    if (this.has_setup_ui() === false) {
        //$.trigger_callback(_callback);
        return this;
    }
    
    var _editor_ui = this.editor.get_ui();
    var _visible = _editor_ui.visible();
    
    if (_display === null) {
        _display = !(_visible);
    }
    
    var _parent = _editor_ui.parents('.annotation-tool:first');
    var _hide_classname = 'hide-editor';
    
    var _complete = function () {
        setTimeout(function () {
            $.trigger_callback(_callback);    
        }, 0);
    };
    
    if (_display === true && _visible === false) {
        _editor_ui.show();  
        _parent.removeClass(_hide_classname);
    }
    else if (_display === false && _visible === true) {
        _editor_ui.hide();
        _parent.addClass(_hide_classname);
    }
    
    _complete();
    
    return this;
};
*/

/**
 * @type {jQuery}
 */
Editor_container.prototype.get_parent_container = function () {
    return this.get_ui().parents('.annotation-tool:first');
};

/**
 * 開關編輯器
 * @param {boolean} _display
 * @param {function} _callback
 */
Editor_container.prototype.toggle_container = function (_display, _callback) {
    
    //$.test_msg('Editor_container.toggle_container()', this.has_setup_ui());
	//$.test_msg('Editor_container.toggle_container()', this.has_setup_ui());
    
    if (this.has_setup_ui() === false) {
        //$.trigger_callback(_callback);
        return this;
    }
    
    var _container = this._container;
    var _visible = (_container.css('display') !== 'none');
    
    //$.test_msg('Editor_container.toggle_container() visible', [_display, _visible]);
    
    if (_display === undefined || _display === null) {
        _display = !(_visible);
    }
    
    var _parent = this.get_parent_container();
    
    //$.test_msg('Editor_container.toggle_container() parent', [_parent.length, _display, _visible]);
    
    //return $.trigger_callback(_callback);
    
    // 如果是deny狀態，則強制維持_display = false
    if (this.get_ui().hasClass(this._deny_classname)) {
        _display = false;
    }
    
    var _hide_editor_classname = 'hide-editor';
    
    /*
    var _complete = function () {
        $.trigger_callback(_callback);
    };
    */
    var _hide_classname = 'hide';
    
    //$.test_msg("toggle_container", [_display, _visible]);
    
    if (_display === true && _visible === false) {
        
        this.check_policy();
        
        /*
        if (this._toggle_position == 'bottom')
            _container.slideDown(_complete);
        else if (this._toggle_position == 'top')
            _container.slideUp(_complete);
        else
            _complete();
        */
       
        //$.test_msg('Editor_container.toggle_container() if true', _display);
        
        _container.show();

        _parent.removeClass(_hide_editor_classname);
        this._toggle.removeClass(_hide_classname);
        this.editor.note.focus();
        //$.test_msg('Editor_container.toggle_container() if true end', _display);
    }
    else if (_display === false && _visible === true) {
        
        /*
        if (this._toggle_position == 'bottom')
            _container.slideUp(_complete);
        else if (this._toggle_position == 'top')
            _container.slideDown(_complete);
        else
            _complete();
        */
        _container.hide();
        _parent.addClass(_hide_editor_classname);
        this._toggle.addClass(_hide_classname);
    }
    
    //$.test_msg('Editor_container.toggle_container() before callback', _display);
    
    
    $.trigger_callback(_callback);
    
    return this;
};

Editor_container.prototype.is_container_display = function () {
    var _hide_classname = 'hide';
    return !(this._toggle.hasClass(_hide_classname));
};

/**
 * 未登入前顯示的訊息
 * @type {jQuery}
 */
Editor_container.prototype._deny = null;

/**
 * 未登入前，顯示禁止留言的訊息
 * @return {jQuery} 禁止訊息的元件
 */
Editor_container.prototype._create_deny_conpoment = function () {
    
    var _deny = $('<div></div>')
        .addClass('editor-deny');
    
    var _not_login = $('<span></span>')
        .addClass('not-login')
        .appendTo(_deny);
        
    var _not_login_lang = new KALS_language_param(
        'If you want to write annotation, please click here to login.',
        'editor_container.deny'
    );
    
    KALS_context.lang.add_listener(_not_login, _not_login_lang);
    
    
    _not_login.click(function () {
        KALS_window.setup_window('Window_login');
    });
    
    // --------
    var _deny_write = $('<span></span>')
        .addClass("deny-message")
        .hide()
        .appendTo(_deny);
       
    /* 
    var _deny_write_lang = new KALS_language_param(
        'You can not write annotation.',
        'editor_container.deny_write'
    );
    
    KALS_context.lang.add_listener(_deny_write, _deny_write_lang);
    */
    // --------
    
    var _this = this;
    KALS_context.auth.add_listener(function(_auth) {
        //$.test_msg("Editor_container", "登入了嗎？: " + _auth.is_login());
        var _ui = _this.get_ui();
        if (_auth.is_login()) {
            _deny_write.show();
            _not_login.hide();
            _ui.removeClass(_this._not_login_classname);
        }
        else {
            _deny_write.hide();
            _not_login.show();
            _ui.addClass(_this._not_login_classname);
        }
    });
    
    this._deny = _deny;
    
    return _deny;
    
};

/**
 * 尚未登入的classname
 * @type String
 */
Editor_container.prototype._not_login_classname = "not-login";

/**
 * 讀取中的訊息
 * @type {jQuery}
 */
Editor_container.prototype._loading = null;


Editor_container.prototype._create_loading = function () {
    
    var _loading = $('<div></div>')
        .addClass('editor-loading')
        .addClass('editor-message');
        
    var _lang = new KALS_language_param(
        'Loading...',
        'annotation_editor.loading'
    );
    
    KALS_context.lang.add_listener(_loading, _lang);
    
    this._loading = _loading;
    
    return _loading;
    
};

/**
 * 包含編輯器與未登入訊息的容器
 * @type {jQuery}
 */
Editor_container.prototype._container = null;


Editor_container.prototype._create_container = function () {
    
    var _container = $('<tr><td class="container-td"></td></tr>')
        .addClass('container');
    
    this._container = _container;
    
    return _container;
};

/**
 * 禁止使用的class name
 * @type String
 */
Editor_container.prototype._deny_classname = "deny";

/**
 * 切換無法禁止留言的功能
 * @param {boolean} _is_deny
 */
Editor_container.prototype.toggle_deny = function (_is_deny) {
    
    var _deny = this._deny;
    var _editor = this.editor.get_ui();
    
    //$.test_msg('Editor_container.toggle_deny() 1', _is_deny);
	
    if ($.is_null(_is_deny) || _is_deny === undefined) {
        //_is_deny = !(_deny.visible());
        _is_deny = (KALS_context.policy.writable() === false);
    }
    
    //$.test_msg('Editor_container.toggle_deny() 2', _is_deny);
    
    //如果是一樣的話，那就不用切換啦
    //if (_is_deny === true 
    //        && _deny.css('display') === 'block') {
    //    return this;
    //}
    
    var _this = this;
	
    // @20130603 Pudding Chen
    // 不知道為什麼加入這段就能正常顯示，非常不能理解
    //_editor.show();
       
    setTimeout(function () {
        var _ui = _this.get_ui();
        if (_is_deny === true) {
            _ui.addClass(_this._deny_classname);
        }
        else {
            _ui.removeClass(_this._deny_classname);
        }
        /*
        _this.toggle_container(false, function () {
            //$.test_msg("Editor_container _is_deny", _is_deny);
            if (_is_deny === true) {
                _deny.show();
                _editor.hide();
                _ui.addClass(_this._deny_classname);
            }
            else {
                _deny.hide();
                _editor.show();
                _ui.removeClass(_this._deny_classname);
            }

            
            // @20130610 Pudding Chen
            // 讓下面的編輯器，重置吧
            _this.editor.reset();

            //$.test_msg("toggle editor_container 2", _this._$default_toggle);
            _this.toggle_container(_this._$default_toggle);
        });
        */
    }, 0);
	    
	
    return this;
};  //Editor_container.prototype.toggle_deny = function (_is_deny) {

/**
 * 禁止寫入的訊息
 * @type KALS_language_param
 */
Editor_container.prototype._deny_write_lang = new KALS_language_param(
    'You can not write annotation.',
    'editor_container.deny_write'
);

/**
 * 設定禁止撰寫的語系
 * @param {KALS_language_param} _lang 
 * @returns {Editor_container}
 */
Editor_container.prototype.set_deny_message = function (_lang) {
    
    var _message = KALS_context.lang.line(_lang);
    //this._deny.find(".deny-message:first").html(_message);
    this._toggle.find(".deny-message:first").html(_message);
    
    return this;
};

Editor_container.prototype.toggle_loading = function (_is_loading) {
    
    var _loading = this._loading;
    var _editor = this.editor.get_ui();
    
    if ($.is_null(_is_loading)) {
        _is_loading = !(_loading.visible());
    }
    
    //$.test_msg('Editor_container.toggle_deny()', _is_deny);
    
    //如果是一樣的話，那就不用切換啦
    if (_is_loading === true 
            && _loading.css('display') === 'block') {
        return this;
    }
    
    var _this = this;
    /*
    this.toggle_container(false, function () {
        if (_is_loading === true) {
            _loading.show();
            _editor.hide();
        }
        else {
            _loading.hide();
            _editor.show();
        }
        
        _this.toggle_container(true);
    });
    */
    if (_is_loading === true) {
        _loading.show();
        _editor.hide();
    }
    else {
        _loading.fadeOut(function () {
            _editor.fadeIn();    
        });
    }
    
    return this;
};

Editor_container.prototype._listen_auth = function () {
    
    var _this = this;
    /*
    KALS_context.auth.add_listener(function (_auth, _data) {
        
        //$.test_msg('Editor_container.listen_auth()', [_auth.is_login(), _auth._is_login]);
        
        if (_auth.is_login())
            _this.toggle_deny(false);
        else
            _this.toggle_deny(true);
    }, true);
    */
    KALS_context.policy.add_attr_listener('write', function (_policy) {
        //$.test_msg("Editor_container toggle_deny", _policy.writable());
        if (_policy.writable()) {
            _this.toggle_deny(false);
        }
        else {
            _this.toggle_deny(true);
        }
    }, true);
};

Editor_container.prototype.reset = function (_callback, _reset_container) {
    
    if ($.is_null(_reset_container)) {
        _reset_container = true;
    }
    
    var _container_display;
    if (_reset_container === false) {
        _container_display = this.is_container_display();
    }
    
    this.editor.reset();
    
    //$.test_msg('Editor_contaienr.reset()', _reset_container);
    if (_reset_container === true) {
		
        //$.test_msg("toggle editor_container 3", this._$default_toggle);
        this.toggle_container(this._$default_toggle, function () {
            $.trigger_callback(_callback);
        });
    }
    else {
        this.toggle_container(_container_display, function () {
            $.trigger_callback(_callback);
        });    
    }
    
    this.check_policy();
    
    return this;
};

// ------------------------
// Context_policy
// ------------------------

/**
 * 設定權限監聽器
 * @returns {Editor_container}
 */
Editor_container.prototype.check_policy = function () {
    
    var _write_topic = (this.editor.is_respond() === false);
    var _respond_to_my_topic = (this.editor.is_respond_to_my_annotation());
    
    var _policy = KALS_context.policy;
    var _policy_enable;
    var _policy_lang;
    if (_write_topic === true) {
        _policy_enable = _policy.topic_writable();
        _policy_lang = new KALS_language_param(
                    "You cannot write annotation",
                    "editor_container.deny.topic_wrtiable"
                );
    } 
    else {
        if (_respond_to_my_topic) {
            //_policy_name = "respond_my_topic_wrtiable";
            _policy_enable = _policy.respond_my_topic_wrtiable();
            _policy_lang = new KALS_language_param(
                    "You cannot respond your annotation",
                    "editor_container.deny.respond_my_topic_wrtiable"
                );
        }
        else {
            //_policy_name = "respond_other_topic_wrtiable";
            _policy_enable = _policy.respond_other_topic_wrtiable();
            _policy_lang = new KALS_language_param(
                    "You cannot respond other's annotation",
                    "editor_container.deny.respond_other_topic_wrtiable"
                );
        }
    }
    
    this.set_writable(_policy_enable, _policy_lang);
    
    return this;
};

/**
 * 設定是否可以撰寫
 * @param {Boolean} _writable
 * @param {KALS_language_param} _deny_lang
 * @returns {Editor_container}
 */
Editor_container.prototype.set_writable = function(_writable, _deny_lang) {
    //$.test_msg("Editor_container.set_writable", [_writable, _deny_lang.line, (_writable === true)]);
    if (_writable === true) {
        this.toggle_deny(false);
    }
    else {
        this.toggle_deny(true);
        this.toggle_container(false);
        if ($.is_class(_deny_lang, "KALS_langauge_param") ) {
            this.set_deny_message(_deny_lang);
        }
    }
    return this;
};

/* End of file Editor_container */
/* Location: ./system/application/views/web_apps/Editor_container.js *//**
 * Annotation_editor
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/18 上午 11:45:38
 * @extends {Multi_event_dispatcher}
 * @param {Editor_container} _editor_container
 * @param {List_collection} _list_coll
 * @param {String[]} _disable_option
 */
function Annotation_editor(_editor_container, _list_coll, _disable_option) {
    
    Multi_event_dispatcher.call(this);
    
    if ($.isset(_editor_container)) {
        this._editor_container = _editor_container;
    }
    
    if ($.isset(_list_coll)) {
        this.set_list_coll(_list_coll);
    }
    
    //this.listen_reset();
    //this.setup_note_editor_factory();
    
    if ($.isset(_disable_option)) {
        this._disable_option = _disable_option;
    }
}

Annotation_editor.prototype = new Multi_event_dispatcher();

/**
 * @type {Editor_container}
 */
Annotation_editor.prototype._editor_container = null;

/**
 * 清單。
 * 為了要讓editor跟group_list互動，所以需要設定。
 * @type {List_collection} _list_coll
 */
Annotation_editor.prototype.list_coll = null;

/**
 * 設定目標標註訊息群組
 * @param {List_collection} _list_coll
 */
Annotation_editor.prototype.set_list_coll = function (_list_coll) {
    this.list_coll = _list_coll;
    
    if ($.isset(this.list_coll)) {
        //鎖定該List_item
        var _this = this;
        this.list_coll.add_listener(function (_list_coll) {
            if ($.isset(_this._editing_param)) {
                var _param = _this._editing_param;
                //_list_coll.focus(_param, function (_list_item) {
                //    if ($.isset(_list_item))
                //    {
                //        //_list_item.get_ui().css('color', 'red');
                //        _this._editing_item = _list_item;
                //    }
                //});
                
                //_this.set_editing_item(_list_coll.focus(_param, true));
                _this.set_editing(_param);
            }
        }); 
    }
};


// --------
// Submit
// --------

Annotation_editor.prototype._create_url = 'annotation_setter/create_post';
Annotation_editor.prototype._edit_url = 'annotation_setter/edit_post';

/**
 * 編輯的標註參數
 * @type {Annotation_param}
 */
Annotation_editor.prototype._editing_param = null;

/**
 * @type {List_item}
 */
Annotation_editor.prototype._editing_item = null;

Annotation_editor.prototype._editing_lock = false;

Annotation_editor.prototype._editing_classname = 'editing';

/**
 * @param {Annotation_param} _param
 */
Annotation_editor.prototype.set_editing = function (_param ) {
    //if ($.is_null(_param) || _param.annotation_id === null)
    //    return this;
    
    var _scope_coll = _param.scope;
    
    //分成兩種來看，一種是範圍不同，一種是範圍相同
    
    if (KALS_text.selection.select.equals(_scope_coll)) {
        //this.list_coll.focus(_param, _editing_focus);
        this._editing_param = _param;
        
        var _ui = this.get_ui();
        _ui.addClass(this._editing_classname);
        
        this._editor_container.toggle_container(true);
            
        return this.set_data(_param);
    }
    else {
        this._editing_param = _param;
        this.list_coll.set_editing_param(_param);
        KALS_text.selection.select.set_scope_coll(_scope_coll);
        return this;
    }
    
        
    //if (this.is_enable('editing_focus'))
    //    _editing_focus = true;
    /*
    var _editing_item = this.list_coll.focus(_param, _editing_focus);
    
    if ($.is_null(_editing_item)) {
        var _this = this;
        $.test_msg('Annotation_editor.set_editing() 沒找到item');
        this.list_coll.set_focus(_param, _editing_focus, function (_item) {
            _this.set_editing_item(_item);
        });
        //return this;
    }
    else {
        this.set_editing_item(_editing_item);
    }
    */
};

Annotation_editor.prototype.set_editing_item = function (_item) {
    
    if ($.isset(_item)) {
        this._editing_item = _item;
        this._editing_item.set_editing();    
    }
    
    return this;
};

/**
 * 是否是編輯模式
 * @type {boolean}
 */
Annotation_editor.prototype.is_editing = function () {
    return $.isset(this._editing_param);
};

/**
 * 是否是回應模式
 * @type {boolean}
 */
Annotation_editor.prototype.is_respond = function () {
    return $.isset(this._topic);
};

/**
 * 是否是回應到我的標註
 * @type {boolean}
 */
Annotation_editor.prototype.is_respond_to_my_annotation = function () {
    return ($.isset(this._topic) && this._topic.is_my_annotation());
};

/**
 * 從各元件取得資料。各元件要跟Annotation_editor註冊，利用傳址的方式，分開各處完成_annotation_param，作法如下：
 * _editor.add_listener('get', function (_editor, _annotation_param) {
 *     //將要增加的資料新增入_annotation_param
 *     //注意，不可以直接覆寫_annotation_param本身。
 * });
 * @returns {Annotation_param} description
 */
Annotation_editor.prototype.get_data = function () {
    
    var _annotation_param = new Annotation_param();
    
    //2010.10.22 不使用user，由伺服器端的session去取得user資料
    //_annotation_param.user = KALS_context.user.get_data();
    
    if (this.is_editing()) {
        _annotation_param.annotation_id = this._editing_param.annotation_id;
    }
    else {
        //在create模式底下，要加入標註範圍的資料
        var _select = KALS_text.selection.select;
        _annotation_param.scope = _select.get_scope_coll();
        
        _annotation_param.feature_location = _select.get_location_feature();
        _annotation_param.feature_recommend_scope = _select.get_recommend_scope_coll();
        //_annotation_param.anchor_text = _select.get_anchor_text();        
    }
    
    _annotation_param.topic = this._topic;
    //$.test_msg('Annotation_editor.get_data()', $.isset(this._topic));
    
    this.notify_listeners('get', _annotation_param);
    
    return _annotation_param;
};

/**
 * 送出標註
 * 
 */
Annotation_editor.prototype.submit = function () {
    
    //讀取中就不設定
    if (this.is_loading() === true) {
        return this;
    }
    
    var _annotation_param = this.get_data();
    
    if (this._check_note(_annotation_param) === false) {
        return this;
    }
    
    var _annotation_json = _annotation_param.export_json();
    
    //檢查取得資料是否正確
    $.test_msg('Annotation_editor.submit()', _annotation_json);
    
    var _load_url;
    var _is_editing_mode = this.is_editing(); 
    if (_is_editing_mode) {
        _load_url = this._edit_url;
    }
    else {
        _load_url = this._create_url;
    }
    
    var _this = this;
    
    var _callback = function (_data) {
        
        //如果已經取消了loading動作，那就不作任何反應。
        if (_this.is_loading() === false) {
            return this;
        }
        
        //補完參數
        _annotation_param.user = KALS_context.user.get_data();
        
        if (_is_editing_mode)    //編輯模式
        {
            if ($.isset(_data)
                && typeof(_data.timestamp) !== 'undefined') {
                _annotation_param.timestamp = _data.timestamp;
            }
            var _scope_coll = KALS_text.selection.select.get_scope_coll();
            _annotation_param.scope = _scope_coll;
			
            _this._edit_callback(_annotation_param);
            
            //_annotation_param.scope = _this._editing_param.scope;
        }
        else    //新增模式
        {
            if ($.isset(_data)) {
                if (typeof(_data.annotation_id) !== 'undefined') {
                    _annotation_param.annotation_id = _data.annotation_id;
                }
                
                if (typeof(_data.timestamp) !== 'undefined') {
                    _annotation_param.timestamp = _data.timestamp;
                }
                    
                if (typeof(_data.recommend) !== 'undefined' 
                        && KALS_CONFIG.enable_annotation_recommend === true) {
                    _annotation_param.recommend = new Recommend_param(_data.recommend);
                }
                if (typeof(_data.nav) !== 'undefined') {
                    //$.test_msg('_data.nav', _data.nav);
                    _annotation_param.navigation_level = _data.nav;
                }
            }
			
            _this._create_callback(_annotation_param);
        }
        
        if (_annotation_param.is_respond() === false) {
            //設置selection
            //$.test_msg("submt之後,檢查標註資料", [_annotation_param.type.get_type_name(), _annotation_param.scope]);
            KALS_text.selection.my_basic.set_scope_coll(_annotation_param.type.get_type_name(), _annotation_param.scope);
            
            //$.test_msg('_data.nav setup', [KALS_context.user.get_anchor_navigation_type(), _annotation_param.get_navigation_level()]);
            if (KALS_context.user.get_anchor_navigation_type() === 'all') {
                //設置指引selection
                KALS_text.selection.navigation.set_scope_coll(_annotation_param.get_navigation_level(), _annotation_param.scope);
            }   
        }
    };
    
    var _get_config = {
        url: _load_url,
        data: _annotation_json,
        callback: _callback,
        retry_wait: 60 * 1000
    };
    
    this.toggle_loading(true, function () {
        
        //2010.10.25 測試時使用，略過伺服器的步驟
        //_callback();return;
        
        KALS_util.ajax_post(_get_config);
    });
    
    return this;
    
};

Annotation_editor.prototype._check_note = function (_annotation_param) {
    
    if (this.is_enable('note_allow_empty')) {
		return true;
	}
    
    if (typeof(_annotation_param.note) === 'undefined' 
            || _annotation_param.note === null) {
        //顯示錯誤
        var _heading = new KALS_language_param('ERROR', 'alert.heading.error');

        var _content = new KALS_language_param('You have to write something in note.', 'annotation_editor.note_deny_empty');

        var _this = this;
        KALS_util.alert(_heading, _content, function(){
        //_this.note.focus();
        });

        return false;
    }
    else {
        return true;
    }
};

/**
 * 建立標註之後，要做的事情包括：
 * 1. 將現在的標註資料加入_list_coll
 * 2. 將該標註的範圍加入KALS_text.selection.my
 * @param {Annotation_param} _annotation_param
 */
Annotation_editor.prototype._create_callback = function (_annotation_param) {
    
    //$.test_msg('Annotation_editor._create_callback()', [_annotation_param.annotation_id, _annotation_param.timestamp, $.is_null(_annotation_param.recommend)]);
    
    //將新增加的資料丟進_list_coll
    var _list_item = this.list_coll.editor_add_list_item(_annotation_param, false);
    this._editing_item = _list_item;
    
    this.toggle_loading(false);
    
    //完成時，要設置notify
    var _notify_lang;
    
    //變成新增模式
    if ($.is_null(_annotation_param.recommend)) {
        //完成時，要設置notify
        _notify_lang = new KALS_language_param(
            'Annotation had been created.',
            'annotation_editor.submit.create_complete'
        );
		
        // @20131115 Pulipuli Chen
        // 不使用編輯模式，改用新增模式
        //this.set_editing(_annotation_param);

        this.reset();
    }
    else {
        _notify_lang = new KALS_language_param(
            'Annotation had been created and there is some recommend for you.',
            'annotation_editor.submit.create_complete_with_recommend'
        );
        KALS_text.tool.recommend.setup_recommend(_annotation_param);
    }
    
    KALS_util.notify(_notify_lang);
    
    // ------------------------
    // 加入Context_user的計數
    /*
    var _is_respond = _annotation_param.is_respond();
    var _annotation_type_param = _annotation_param.type;
    if (_is_respond === false) {
        //$.test_msg("create callback", _annotation_type_param);
        KALS_context.user.set_topic_annotation_count_add(_annotation_type_param);
    } 
    else {
        var _topic_annotation_param = _annotation_param.topic;
        var _is_my_topic = _topic_annotation_param.is_my_annotation();
        
        if (_is_my_topic) {
            KALS_context.user.set_respond_to_my_annotation_count_add(_annotation_type_param);
        }
        else {
            KALS_context.user.set_respond_to_other_annotation_count_add(_annotation_type_param);
        }
    }
    */
    KALS_context.user.set_annotation_count_add_by_param(_annotation_param);
    
    return this;
};

/**
 * 更新之後的回呼函數。只要更新_list_coll裡面的資料即可。
 * @param {Annotation_param} _annotation_param 修改過後的標註參數
 */
Annotation_editor.prototype._edit_callback = function (_annotation_param) {
    
    //$.test_msg('Annotation_editor._edit_callback()', [_annotation_param.timestamp]);
    
    //修改this._editing_item
    if ($.isset(this._editing_item)) {   
        //$.test_msg('Annotation_editor._edit_callback()', _annotation_param.policy_type);
		$.test_msg('Annotation_editor._edit_callback()', _annotation_param);
        this._editing_item.editor_set_data(_annotation_param);
    }
    
    //完成時，要設置notify
    var _notify_lang = new KALS_language_param(
        'Annotation had been updated.',
        'annotation_editor.submit.edit_complete'
    );
    
    KALS_util.notify(_notify_lang);
    this.toggle_loading(false);
    
    // ------------------------
    // 加入Context_user的計數
    /*
    var _is_respond = _annotation_param.is_respond();
    var _original_type_param = this._editing_param.type;
    var _annotation_type_param = _annotation_param.type;
    if (_original_type_param.equals(_annotation_type_param) === false) {
        if (_is_respond === false) {
            //$.test_msg("create callback", _annotation_type_param);
            KALS_context.user.set_topic_annotation_count_change(_original_type_param, _annotation_type_param);
        } 
        else {
            var _topic_annotation_param = _annotation_param.topic;
            var _is_my_topic = _topic_annotation_param.is_my_annotation();

            if (_is_my_topic) {
                //KALS_context.user.set_respond_to_my_annotation_count_add(_annotation_type_param);
                KALS_context.user.set_respond_to_my_annotation_count_change(_original_type_param, _annotation_type_param);
            }
            else {
                //KALS_context.user.set_respond_to_other_annotation_count_add(_annotation_type_param);
                KALS_context.user.set_respond_to_other_annotation_count_change(_original_type_param, _annotation_type_param);
            }
        }
    }   //if (_original_type_param.equals(_annotation_type_param) === false) {
    */
   
    KALS_context.user.set_annotation_count_change_by_param(this._editing_param, _annotation_param);
    
    /**
     * 編輯完成之後，還原狀態
     */
    this.reset();
    
    return this;
};


// --------
// Event Dispatch
// --------

/**
 * 宣告可以用的事件
 * @type {String[]}
 */
Annotation_editor.prototype._$enable_types = ['reset', 'set'];

/**
 * 重設目前的編輯器
 */
Annotation_editor.prototype.reset = function () {
    
    if (this._editing_lock === false) {
        this.toggle_loading(false);
        
        //this._topic = null;
        this._loading_flag = false;
        this._loading_component.hide();
        
        this._editing_param = null;
        this._editing_item = null;
        var _ui = this.get_ui();
        _ui.removeClass(this._editing_classname);
        
		/**
		 * @20131115 Pulipuli Chen
		 * 改為新增完成之後關閉
		 */
        //this._editor_container.toggle_container(true);
        this._editor_container.toggle_container(this._editor_container._$default_toggle);
        
        return this.notify_listeners('reset');    
    }
    else {
        return this;
    }
};

/**
 * @deprecated 2010.10.21 由Editor_container去決定何時要執行reset。但Annotation_editor底下的子元件還是可以跟它監聽reset事件。
 */
/*
Annotation_editor.prototype.listen_reset = function () {
    
    var _this = this;
    
    //KALS_text.selection.add_listener('cancel_select', function () {
    //    _this.reset();
    //});
};
*/

/**
 * 設置資料。
 * 子元件監聽editor的方式來獲取資料
 * _editor.add_listener('set', function (_editor, _param) {
 *     _this.set_data(_para);
 * })
 * @param {Annotation_param} _param
 */
Annotation_editor.prototype.set_data = function (_param) {
    return this.notify_listeners('set', _param);
};

// --------
// Create UI
// -------

/**
 * Create UI
 * @memberOf {Annotation_editor}
 * @type {jQuery} UI
 */
Annotation_editor.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('annotation-editor');
        
    var _container = this._create_container();
    _container.appendTo(_ui);
    
    //_ui.html('測試用的編輯器  <br />');
    
    var _user = this._create_user_component();
    _user.appendTo(_container.find('th.left:first'));
    
    var _type = this._setup_type();
    _type.get_ui().appendTo(_container.find('th.left:first'));
    
	// @20130603 Pudding Chen
	// 加入Web Search功能
	var _web_search = new Web_search_component();
	this.web_search = _web_search;
	_web_search.get_ui().appendTo(_container.find('th.left:first'));
	
    var _policy = this._setup_policy();
    _policy.get_ui().appendTo(_container.find('th.right:first'));

    // --------
    // 第二列

    this._setup_type_hint();

    // --------
    // 第三列
	
    var _respond_container = this._create_respond_container()
        .appendTo(_container.find('td.respond:first'));
    
    //$.test_msg('Annotation_editor._$create_ui [setup_note editor]');
    //alert('Annotation_editor._$create_ui [setup_note editor]');
    var _note_editor = this._setup_note_editor();
    _note_editor.get_ui().appendTo(_container.find('td.note:first'));
    
	// ---------
	// 第四列
	
    var _submit = this._create_submit_button()
        .appendTo(_container.find('th.submit:first'));
    
	
    // ---------
    
    var _loading = this._create_loading_component();
    _loading.appendTo(_ui);
    
    var _this = this;
    setTimeout(function () {
        _this._setup_respond();
    }, 0);
    
    return _ui;
};

Annotation_editor.prototype.is_enable = function (_option_name) {
    if (_option_name === null || this._disable_option === null) {
        return true;
    }
    else {
        return ($.inArray(_option_name, this._disable_option) === -1);
    }
};

Annotation_editor.prototype._container = null; 

Annotation_editor.prototype._create_container = function () {
    var _ui = $('<table width="100%" cellspacing="0" cellpadding="0"><tbody>'
            + '<tr class="header">'
                + '<th class="left">&nbsp;</th>'
                + '<th class="right">&nbsp;</th>'
            + '</tr>'
			+ '<tr><td class="annotation-type-hint" colspan="2"></td></tr>'
            + '<tr><td class="respond" colspan="2"></td></tr>'
            + '<tr><td class="note" colspan="2"></td></tr>'
			+ '<tr><th class="submit" colspan="2"></th></tr>'
            + '</tbody></table>')
        .addClass('container');
    
    this._container = _ui;
    
    return _ui;
};

// --------
// Prviate Component
// --------

/**
 * 使用者名稱元件
 * @type {jQuery}
 */
Annotation_editor.prototype._user_component = null;

/**
 * 建立使用者名稱元件
 * @type {jQuery}
 */
Annotation_editor.prototype._create_user_component = function () {
    
    var _user = $('<span></span>')
        .addClass('user-component');
    
    KALS_context.user.add_attr_listener('name', function (_context_user, _name) {
        
        _name = _context_user.get_name(10);
        _user.html(_name);
    }, true);
    
    this._user_component = _user;
    
    return _user;
};

Annotation_editor.prototype._create_submit_button = function () {
    
    var _create_button = $('<button type="submit"></button>')
        .addClass('create')
        .addClass('button dialog-option');
    
    var _create_lang = new KALS_language_param(
        'ADD',
        'annotation_editor.submit.create'
    );
    
    KALS_context.lang.add_listener(_create_button, _create_lang);
    
    var _this = this;
    _create_button.click(function () {
        _this.submit();
    });
    
    var _edit_button = $('<button type="submit"></button>')
        .addClass('edit')
        .addClass('button dialog-option');
    
    var _edit_lang = new KALS_language_param(
        'UPDATE',
        'annotation_editor.submit.edit'
    );
    
    KALS_context.lang.add_listener(_edit_button, _edit_lang);
    
    _edit_button.click(function () {
        _this.submit();
    });
    
    var _cancel_button = $('<button type="button"></button>')
        .addClass('cancel')
        .addClass('button dialog-option');
    
    var _cancel_lang = new KALS_language_param(
        'CANCEL',
        'annotation_editor.submit.cancel'
    );
    
    KALS_context.lang.add_listener(_cancel_button, _cancel_lang);
    
    _cancel_button.click(function () {
        _this.reset();
    });
    
    var _hover_classname = 'hover';
    var _mouseover = function () {
        $(this).addClass(_hover_classname);
    };
    var _mouseout = function () {
        $(this).removeClass(_hover_classname);
    };
    
    _create_button.hover(_mouseover, _mouseout);
    _edit_button.hover(_mouseover, _mouseout);
    _cancel_button.hover(_mouseover, _mouseout);
    
    
    var _ui = $('<span></span>')
        .addClass('submit-container')
        .append(_create_button)
        .append(_edit_button)
        .append(_cancel_button);
    
    return _ui;
    
};

/**
 * @type {jQuery}
 */
Annotation_editor.prototype._loading_component = null;

/**
 * @type {jQuery}
 */
Annotation_editor.prototype._create_loading_component = function () {
    
    var _ui = $('<div></div>')
        .addClass('loading-component');
        
    var _lang = new KALS_language_param(
        'Loading...',
        'annotation_editor.loading'
    );
    
    KALS_context.lang.add_listener(_ui, _lang);
    
    this._loading_component = _ui;
    
    _ui.hide();
    
    return _ui;
};

Annotation_editor.prototype.is_loading = function () {
    //return (this._loading_component.css('display') == 'block');
    return this._loading_flag;
};

Annotation_editor.prototype._loading_flag = false;

Annotation_editor.prototype.toggle_loading = function (_is_loading, _callback) {
    
    if ($.is_function(_is_loading) && $.is_null(_callback)) {
        _callback = _is_loading;
        _is_loading = null;
    }
    
    if (_is_loading === null) {
        _is_loading = (this.is_loading() === false);
    }
    
    
    if (_is_loading === this.is_loading()) {
        $.trigger_callback(_callback);
        return this;
    }
    
    this._loading_flag = _is_loading;
    
    var _complete = function () {
        $.trigger_callback(_callback);
    };
    
    var _container = this._container;
    var _loading = this._loading_component;
    
	//進入讀取狀態
    if (_is_loading === true) {
        //_container.slideUp(function () {
        //    _loading.slideDown(_complete);
        //});
        _container.fadeOut(function () {
            _loading.fadeIn(_complete);
        });
    }
	//讀取完成
    else {
        //_loading.slideUp(function () {
        //    _container.slideDown(_complete);
        //});
        _loading.fadeOut(function () {
            _container.fadeIn(_complete);
        });
    }
    
    return this;
};

// --------
// Type
// --------

/**
 * 標註元件
 * @type {Type_component}
 */
Annotation_editor.prototype.type = null;

/**
 * @type {Type_component}
 */
Annotation_editor.prototype._setup_type = function () {
    
    var _type = new Type_component(this);
    this.child('type', _type);
    return this.type;
};

// --------
// Note Editor
// --------

/**
 * 標註編輯器
 * @type {Note_editor_manager}
 */
Annotation_editor.prototype.note = null;

Annotation_editor.prototype._setup_note_editor = function () {
    
    var _note_editor = new Note_editor_manager(this);
    this.note = _note_editor;
    setTimeout(function () {
        //$.test_msg('Annotation_editor._setup_note_editor [note_editor, initialize]');
        _note_editor.initialize(function () {
            KALS_text.init.complete('Annotation_tool');
        });    
    }, 0);
    
	var _this = this;
	this.type.add_listener(function () {
		_this.note.focus();
	});
    
    return _note_editor;
};

// --------
// Respond
// --------

/**
 * 被回應的標註資料
 * @type {Annotation_param}
 */
Annotation_editor.prototype._topic = null;

/**
 * @type {Annotation_param} _param
 */
Annotation_editor.prototype.set_topic = function (_param) {
    this._topic = _param;
    return this;
};

/**
 * @type {Editor_respond_to_collection}
 */
Annotation_editor.prototype.respond_coll = null;

/**
 * @type {jQuery}
 */
Annotation_editor.prototype._respond_container = null;

Annotation_editor.prototype._create_respond_container = function () {
    var _container = $('<div></div>')
        .addClass('respond-container');
    
    this._respond_container = _container;
    
    return _container;
};

Annotation_editor.prototype._setup_respond = function () {
    
    /*
    var _topic = new Editor_respond_to_topic(this);
    //this.respond_topic = _topic;
    this.child('respond_topic', _topic);
    var _topic_id = _topic.get_ui();
    _topic_id.appendTo(this._respond_container);
    */
    
    var _coll = new Editor_respond_to_collection(this);
    //this.respond_coll = _coll;
    this.child('respond_coll', _coll);
    var _coll_ui = _coll.get_ui();
    _coll_ui.appendTo(this._respond_container);
    
    return this; 
};

// --------
// Policy 
// --------

/**
 * @type {Policy_component}
 */
Annotation_editor.prototype.policy = null;

Annotation_editor.prototype._setup_policy = function() {
    
    var _policy = new Policy_component(this);
    
    var _policy_changable = this.is_enable('policy_changable');
    
    _policy.set_policy_changable(_policy_changable);
    
    this.child('policy', _policy);
    
    return _policy;  
};

// --------
// Web Search
// @copyright 20130603 Pudding Chen 
// --------

/**
 * @type {Web_search_component}
 */
Annotation_editor.prototype.web_search = null;

// --------
// Annotation type hint
// @copyright 20130609 Pudding Chen 
// --------
/**
 * 設定標註類型的說明
 */
Annotation_editor.prototype._setup_type_hint = function () {
	
	var _type_hint = this._container.find("td.annotation-type-hint:first");
	
	this.type.add_listener(function (_type) {
		
		//$.test_msg("Annotation_editor._setup_type_hint()", _type.get_hint());
		
		var _hint = _type.get_hint();
		if ($.is_null(_hint)
			|| typeof(_hint) == "undefined"
			|| _hint === "") {
			_type_hint.hide();
		}
		else {
			_type_hint.show();
			_type_hint.html(_hint);
		}
	});
	
	return this;
};

/* End of file Annotation_editor */
/* Location: ./system/application/views/web_apps/Annotation_editor.js *//**
 * Type_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/18 下午 03:31:54
 * @extends {Event_dispatcher}
 * @param {Annotation_editor} _editor
 */
function Type_component(_editor) {
    
    Event_dispatcher.call(this);
    if ($.isset(_editor)) {
        this._editor = _editor;
        this._default_type = new Annotation_type_param();
        //this._is_respond = _editor.is_respond();
        //this._type = new Annotation_type_param();
        //$.test_msg('Type_component() _type', this._type.export_json());
    }
}

// Extend from KALS_user_interface
Type_component.prototype = new Event_dispatcher();

Type_component.prototype._$enable_changed_lock = false;

/**
 * @type {Annotation_editor}
 */
Type_component.prototype._editor = null;

/**
 * 預設顯示的標註類型
 * @type {Annotation_type_param}
 */
Type_component.prototype._default_type = null;

/**
 * @type {Type_menu}
 */
Type_component.prototype.menu = null;

/**
 * 現在所選擇的type
 * @type {Annotation_type_param}
 */
Type_component.prototype._type = null;

/**
 * 現在編輯時是否是回應狀態
 * @type {Boolean}
 */
Type_component.prototype._is_respond;

/**
 * Create UI
 * @memberOf {Type_component}
 * @type {jQuery} UI
 */
Type_component.prototype._$create_ui = function () {
    var _ui = $('<span></span>')
        .addClass('type-component');
    
    var _this = this;
    
    setTimeout(function () {
        _this.set_type();
    }, 0);
    
    var _menu = this._setup_menu();
    _menu.get_ui().appendTo(_ui);
    var _config = _menu._$get_config();
    
    //$.test_msg('Type_component._$create_ui()', _config);
    
    var _options = _menu.create_type_option_list();
    
    for (var _i in _options) {
        var _option = _options[_i];
        
        //_option.tooltip(_config);
        
        if (_i === 'custom') {
            _option = this._create_custom_type_option(_option);
        }
        _option.hide().appendTo(_ui);
    }
    
    _ui.tooltip(_config);
	
    //_ui.setup_hover();
    
	// 20130603 Pudding Chen
	// 預設選單
	var _default_type = null;
	if (typeof(KALS_CONFIG.default_annotation_type) === "string") {
            var _default_type_name = KALS_CONFIG.default_annotation_type;
            for (_i in _options) {
                _option = _options[_i];
                var _type_name = _i;
                //$.test_msg("Type_component", [_i, _default_type_name]);
                if (_default_type_name === _type_name) {
                    this._default_type = KALS_context.predefined_type.find_type(_i);
                    _default_type = this._default_type;
                    //$.test_msg("Type_component set default", this._default_type); 
                    break;
                }
            }
	}
	
	//如果沒有設定預設選單，則自動選擇第一個選單
	if (_default_type === null) {
            for (_i in _options) {
                _option = _options[_i];
                _type_name = _i;
                this._default_type = KALS_context.predefined_type.find_type(_i);
                break;
            }
	}
    this._listen_editor();
    
    return _ui;
};

/**
 * 設定標註類型
 * 
 * @param {Annotation_type_param} _type
 * @param {boolean} _is_manual = false 是人為選擇的，預設是false。如果是人為選擇的，則會記錄起來
 */
Type_component.prototype.set_type = function (_type, _is_manual) {
    
    //$.test_msg('Type_component.set_type() start', _type);
    
    //if (_type == this._type
    //    && _type != null)
    
    //改變UI
    //var _ui = this.get_ui();
    //_ui.empty();
    
	/**
	 * 過濾_type參數
	 */
    var _is_custom_type = false;
    if ($.is_null(_type)) {
        _type = this.get_type();
    }
    else if (_type === '') {
        _type = new Annotation_type_param(7);
    }
    else {
        _custom_type = KALS_context.predefined_type.find_type(_type);

        if (_custom_type !== null) {
            _type = _custom_type;
        }
        else {
            //$.test_msg('Type_component.set_type() [add_custom_type]', _type);
            _type = KALS_context.predefined_type.add_custom_type(_type);
            _is_custom_type = true;
        }
    }
    
    /**
     * 20130603 Pudding Chen
     * 如果是人為選擇的，則記錄起來
     */
    if (typeof(_is_manual) === "boolean" 
            && _is_manual === true) {
        KALS_context.last_select_annotation_type = _type;
    }
	
    //$.test_msg('Type_component.set_type()', [$.isset(this._type), _type.equals(this._type)]);
    
    if ($.isset(this._type) 
            && _type.equals(this._type) 
            && _is_custom_type === false) {
        return this;
    }
    
    //$.test_msg('Type_component.set_type() pass', [_type.export_json(), _type.export_json()
    //    , _type.get_id(), _type.get_type_name()
    //    , _type.is_custom(), _type.has_custom_name()]);
    
    //$.test_msg('Type_component.set_type() [get_type_name]', [_type.get_type_name(), _type.is_basic()]);
    
    //_type = this.menu.filter_type(_type);
    
    //var _type_ui = this.menu.create_type_option(_type)
    //    .appendTo(_ui);
    
    var _ui = this.get_ui();
    var _classname = _type.get_classname();
    
    if (_ui.children('.' + _classname).length > 0) {
        _ui.children(':not(.' + _type.get_classname() + ')').hide();
        _ui.children('.' + _type.get_classname()).css('display', 'inline');
    }
    else {
        _ui.children(':not(.custom:first)').hide();
        _ui.children('.custom:first').css('display', 'inline');
    }
    
    if (_type.is_basic() === false) {
        //如果不是基本類型，則設置custom_name
        this.set_custom_name(_type.get_type_name());
    }
    else {
        this.reset_custom_name();
    }
    
    this._type = _type;
    
    return this.notify_change();
};

/**
 * 如果標註類型有所改變，則通知別人
 */
Type_component.prototype.notify_change = function () {
    
    //通知監聽者
    this.notify_listeners(this._type);
    
    return this;
};

/**
 * 取得標註類型
 * @type {Annotation_type_param}
 */
Type_component.prototype.get_type = function () {
    if ($.is_null(this._type)) {
        return this._default_type;
    }
    else {
        if (this._custom_name === null) {
            return this._type;
        }
        else {
            return this._custom_name;
        }
    }    
};

/**
 * 取得標註類型的說明
 * @type {string}
 */
Type_component.prototype.get_hint = function () {
    var _type = this.get_type();
    return _type.get_hint();
};

/**
 * 取得預設的標註類型
 * @type {Annotation_type_param}
 */
Type_component.prototype.get_default_type = function () {
    return this._default_type;
};

/**
 * 重設標註類型
 */
Type_component.prototype.reset_type = function () {
    this.reset_custom_name();
    
    /**
     * 20130603 Pudding Chen
     * 改成記錄最後一次選擇的標註類型
     */
    //return this.set_type(this._default_type);
    var _last_select_annotation_type = KALS_context.last_select_annotation_type;

    if (_last_select_annotation_type === null 
            && typeof(KALS_CONFIG.default_annotation_type) === "string") {
        // 不做任何事情？
    }
    
    // 確認一下是否是可以選擇的類型
    var _enable_type = "topic";
    if (this.is_respond()) {
        _enable_type = "respond";
    }
    var _type_list = KALS_context.create_type_param_list(_enable_type);
    var _last_select_annotation_type_name = "";
    if ($.is_class(_last_select_annotation_type, "Annotation_type_param")) {
        _last_select_annotation_type_name = _last_select_annotation_type.get_name();
    }
    else if ($.is_string(_last_select_annotation_type)) {
        _last_select_annotation_type_name = _last_select_annotation_type;
    }
        
    if (typeof(_type_list[_last_select_annotation_type_name]) === "undefined") {
        var _first_type_param;
        for (var _type_name in _type_list) {
            _first_type_param = _type_list[_type_name];
            break;
        }
        _last_select_annotation_type = _first_type_param;
    }
    
	
    return this.set_type(_last_select_annotation_type);
};

/**
 * 設定好標註選單
 * @returns {Type_menu}
 */
Type_component.prototype._setup_menu = function () {
    
    /**
     * @author 20140505 Pulipuli Chen
     * 不在此處寫死類型
     */
    /*
    var _enable_type = "topic";
    if (this._is_respond 
            && this._is_respond === true) {
        _enable_type = "respond";
    }
    
    $.test_msg("_setup_menu", _enable_type);
    */
    //var _menu = new Type_menu(this, _enable_type);
    
    var _menu = new Type_menu(this);
    this.menu = _menu;
    return _menu;
    
};

/**
 * 監聽Editor的動作來反應
 */
Type_component.prototype._listen_editor = function () {
    
    var _this = this;
    
    if ($.is_null(this._editor)) {
        return;
    }
    
    this._editor.add_listener('reset', function () {
        _this.reset_type();
    });
    
    this._editor.add_listener('set', function (_editor, _param) {
        _this.set_data(_param);
    });
    
    this._editor.add_listener('get', function (_editor, _annotation_param) {
        
        var _type = _this.get_type();
        
        //如果是預設值，則不回傳，由伺服器去取得預設值
        //if (_type != _this._default_type) {
        //    _annotation_param.set_type(_type);
        //}
		
        // @20130609 Pudding Chen
        // 因為現在預設值都可以做修改，所以不管怎樣都要回傳預設值
        _annotation_param.set_type(_type);
    });
    
    return this;
};

/**
 * 設置標註參數
 * @param {Annotation_param} _param
 */
Type_component.prototype.set_data = function (_param) {
    
    if ($.isset(_param)
        && typeof(_param.type) !== 'undefined') {
        this.set_type(_param.type);
    }
    return this;
};

/**
 * 自訂選項
 */
Type_component.prototype._custom_type_option = null;

Type_component.prototype._custom_type_option_classname = "custom-type-option";

Type_component.prototype._create_custom_type_option = function (_option) {
    
    var _ui = $('<span></span>')
        .addClass('type-option')
        .addClass('custom');
        
    _ui.append(_option);
    
    //var _custom = $('<input type="text" class="' +  this._custom_type_option_classname + '"></input>')
    var _custom = $('<span class="' +  this._custom_type_option_classname + '"></span>')
        .hide()
        .focus(function () {
            this.blur();
        })
        .appendTo(_ui);
    
    var _config = this.menu._$get_config();
    //_custom.tooltip(_config);
    //_ui.tooltip(_config);
    
    _custom.mouseover(function () {
        _ui.tooltip().show();
    });
    
    this._custom_type_option = _ui;
    
    return _ui;
};

Type_component.prototype._custom_name = null;

/**
 * 設置自訂類型的名稱
 * @param {String|Annotation_type_param} _name
 */
Type_component.prototype.set_custom_name = function (_name) {
    
    //$.test_msg('Type_component.set_custom_name 1', _name);
    
    if ($.is_string(_name)) {
            _name = $.trim(_name);
	}
    else {
        if ($.is_class(_name, 'Annotation_type_param')) {
            _name = _name.get_type_name();
        }
    }
    if (_name === '') {
        _name = null;
    }
    
    if (this._custom_type_option === null) {
        return this;
    }
    
    var _classname = '.' + this._custom_type_option_classname + ':first';
        
    //$.test_msg('Type_component.set_custom_name 2', [_name, $.isset(_name), (_name != null), _classname]);
    if ($.isset(_name) && _name !== null) {
        //this._type.set_type(_name);
        
        this._custom_type_option.children(_classname)
            //.val(_name)
            .html(_name)
            .css('display', 'inline');
            
        this._custom_type_option.children(':not(' + _classname + ')')
            .hide();
        
    }
    else {   
        this._custom_type_option.find(_classname)
            //.val('')
            .html('')
            .hide();
        this._custom_type_option.children(':not(' + _classname + ')')
            .css('display', 'inline');
    }
    return this;
};

/**
 * 重設自訂類型的名稱
 */
Type_component.prototype.reset_custom_name = function () {
    
    if (this._custom_type_option === null) {
        return this;
    }
    
    return this.set_custom_name();
};

/**
 * 確認是否是回應的狀態
 * 
 * 直接介接到Annotation_editor.is_respond()
 * @returns {Boolean}
 */
Type_component.prototype.is_respond = function () {
    var _is_respond = false;
    if (this._editor !== null) {
        _is_respond = this._editor.is_respond();
    }
    return _is_respond;
};

/* End of file Type_component */
/* Location: ./system/application/views/web_apps/Type_component.js *//**
 * View_annotation_type_option
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pulipuli Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pulipuli Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2013/11/23 下午 03:31:54
 * @extends {KALS_user_interface}
 * @param {Annotation_type_param} _type
 */
function View_annotation_type_option(_type) {
    
    KALS_user_interface.call(this);
    
    this.set_type(_type);
}

View_annotation_type_option.prototype = new KALS_user_interface();

/**
 * 這個按鈕的標註類型參數
 * @type {Annotation_type_param}
 */
View_annotation_type_option.prototype._type = null;

/**
 * 設定標註類型
 * @param {Annotation_type_param} _type
 * @returns {View_annotation_type_option}
 */
View_annotation_type_option.prototype.set_type = function (_type) {
    this._type = _type;
    return this;
};

/**
 * Create UI
 * @type {jQuery} UI
 */
View_annotation_type_option.prototype._$create_ui = function () {
    var _option = $('<span></span>')
        .addClass('type-option')
        .addClass('view-annotation-type');
    
    //取得參數   
    /**
     * @type {Annotation_type_param}
     */
    var _type_param = this._type;
    
    
    //設置外觀
    _option.addClass(_type_param.get_classname());
    if (_type_param.is_basic() === false) {
        _option.attr('style', _type_param.get_option_style());
    }
    
    //接下來是內文的部份
    var _type_name = _type_param.get_type_name();
    _option.html(_type_name);
    
    if (_type_param.is_basic()) {
        var _type_lang_header = Type_menu.prototype._type_lang_header;
        var _lang = new KALS_language_param(
            _type_name,
            _type_lang_header + _type_name
        );
        
        KALS_context.lang.add_listener(_option, _lang);
    }
    
    //額外的參數
    _type_name = _type_param.get_type_name();
    _option.attr('annotation_type', _type_name);
    
    var _enable_config = _type_param.get_enable_config();
    for (var _enable_type in _enable_config) {
        var _enable_option = _enable_config[_enable_type];
        if (_enable_option !== false) {
            _option.addClass("enable-type-" + _enable_type);
            //$.test_msg("View_annotation_type_option.prototype._$create_ui", _enable_type);
        }
    }
    //_option.attr("enable_type", );
    
    return _option;
};

/* End of file View_annotation_type_option */
/* Location: ./system/application/views/web_apps/kals_framework/View_annotation_type_option.js *//**
 * Type_menu
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/18 下午 04:57:05
 * @extends {Tooltip_modal}
 * @param {jQuery} _type_component 放置標註類型的元件
 */
function Type_menu(_type_component) {
    
    Tooltip_modal.call(this);
    
    this._type_component = _type_component;
    
    //var _this = this;
    this._init_type_options();
    
    //setTimeout(function () {
    //    _this.get_ui();
    //}, 0);
    
    //this._enable_type = _enable_type;
}

Type_menu.prototype = new Tooltip_modal();

Type_menu.prototype._$modal_name = 'Type_menu';

/**
 * type menu id
 * @type {String}
 */
Type_menu.prototype._menu_id = 'editor_type_menu';

/**
 * 啟用標註類型的形態
 * @type String|undefined
 * @deprecated 20140505 Pulipuli Chen
 * 不寫死，動態調整
 */
//Type_menu.prototype._enable_type = "topic";

/**
 * Create UI
 * @memberOf {Type_menu}
 * @type {jQuery} UI
 */
Type_menu.prototype._$create_ui = function () {
    this._menu_id = this._menu_id + $.create_id();
    var _id = this._menu_id;
    
    var _ui = this._create_tooltip_prototype({
        id: _id,
        classname: 'type-menu KALS'
    });
    /*
    // 基本類型
    var _options = KALS_context.basic_type.get_type_list();
    for (var _i in _options) {
        var _type = _options[_i];
        this._setup_type_ui(_ui, _type);
    }
    
    // 預定類型
    var _custom_type_list = KALS_context.predefined_type.get_type_list();
    //$.test_msg('Type_menu._$create_ui custom_type_lis', _custom_type_list);
    for (var _j in _custom_type_list) {
        //$.test_msg('Type_menu._$create_ui custom_type_lis', _j);
        _type = _custom_type_list[_j];
        this._setup_type_ui(_ui, _type);
    }
    //_ui.appendTo($("body"));
    */
    var _type_list = KALS_context.create_type_param_list();
    for (var _type_name in _type_list) {
        var _type_param = _type_list[_type_name];
        this._setup_type_ui(_ui, _type_param);
    }
    return _ui;
};

/**
 * 設置標註類型的按鈕
 * @version 20111105 Pudding Chen
 * @param {jQuery} _ui 按鈕元件
 * @param {string|Annotation_type_param} _type 類型
 */
Type_menu.prototype._setup_type_ui = function (_ui, _type) {
    var _type_ui = this.create_type_option(_type);
    _type_ui = this.setup_type_option(_type_ui);
    _type_ui.appendTo(_ui);
    
    var _hint_ui = this.create_type_hint(_type);
    _hint_ui.appendTo(_ui);
    
    _type_ui.tooltip(this._hint_tooltip_config);
    return this;
};

/**
 * 標註選項的classname
 * @type {String} 
 */
Type_menu.prototype._option_classname = 'type-option';

/**
 * 建立按鈕吧
 * @param {String|Annotation_type_param} _type 標註類型
 * @return {jQuery}
 */
Type_menu.prototype.create_type_option = function (_type) {
    
    /*
    var _type_ui = $('<span></span>')
        .addClass(this._option_classname);
        
    var _classname;
    var _annotation_type;
    
    if ($.is_string(_type)) {
        _classname = _type;
        _annotation_type = _type;
        
        var _lang_index = this._type_lang_header + _type;
        if (this.enable_custom_name === false
            && _type == 'custom') {
            _lang_index = this._type_lang_header + 'other';
        }
        
        var _type_lang = new KALS_language_param(
            _type,
            _lang_index
        );
        
        KALS_context.lang.add_listener(_type_ui, _type_lang);
    }
    else if ($.is_class(_type, 'Annotation_type_param')) {
        _classname = _type.get_classname();
        _annotation_type = _type.get_name();
        var _type_name = _type.get_name();
        //$.test_msg('Type_menu.create_type_option _classname', [_annotation_type, _classname]);
        
        _type_ui.html(_type_name);
        
        var _style = _type.get_menu_style();
        _type_ui.attr('style', _style);
    }
    
    _type_ui.addClass(_classname)
        .attr('annotation_type', _annotation_type);
    */
	
    //var _type_value = $('<input type="hidden" class="type-value" value="'+_type+'" />')
    //    .appendTo(_type_ui);
    
    //var _option_ui = KALS_context.predefined_type.get_type_option(_type);
    if ($.is_class(_type, "Annotation_type_param") === false) {
        _type = new Annotation_type_param(_type);
    }
    var _option_ui = _type.get_option_ui().clone(true);
    
    return _option_ui;
};

/**
 * @type {String} 提示
 */
Type_menu.prototype._hint_classname = 'type-hint';

/**
 * 建立提示的選項
 * @param {String|Annotation_type_param} _type
 */
Type_menu.prototype.create_type_hint = function (_type) {
    
    var _hint_ui = $('<div></div>')
        .addClass(this._hint_classname);
    var _classname = '';
    
    if ($.is_string(_type)) {
        _classname = _type;
        var _hint_lang;
        if (this.enable_custom_name === false
                && _type === 'custom') {
            _hint_lang = new KALS_language_param(
                'Your custom type.',
                'annotation.type.other.hint'
            );
        }
        else {
            _hint_lang = new KALS_language_param(
                '',
                'annotation.type.' + _type + '.hint'
            );
        }
        KALS_context.lang.add_listener(_hint_ui, _hint_lang);
    }
    else if ($.is_class(_type, 'Annotation_type_param')) {
        _classname = _type.get_classname();
        _hint_ui.html(_type.get_hint());
    }
    
    _hint_ui.addClass(_classname + '-hint');
    
    return _hint_ui;
};

Type_menu.prototype._hint_tooltip_config = {
    position: 'center right',
    relative: true,
    offset: [0, 5],
    delay: 0
};

/**
 * 建立標註類型選項
 * @type {Array|jQuey} 標註類型選項的列表
 */
Type_menu.prototype.create_type_option_list = function () {
    
    var _list = {};
    for (var _i in this._type_options) {
        var _type = this._type_options[_i];
        var _option = this.create_type_option(_type);
        _list[_type] = _option;
    }
    
    //$.test_msg('Type_menu.create_type_option_list _list.length', _length);
    
	/**
	 * 20130603 Pudding Chen 
	 * 加入自訂的標註類型
	 */
    var _custom_type_list = KALS_context.predefined_type.get_type_list();
    for (var _j in _custom_type_list) {
        _type = _custom_type_list[_j];
        var _type_name = _type.get_name();
        _option = this.create_type_option(_type);
        _list[_type_name] = _option;
    }
    
    return _list;
    
};


/**
 * 建立標註類型參數
 * @type {Array|Annotation_type_param} 標註類型選項的列表
 */
Type_menu.prototype.create_type_param_list = function () {
	
	/**
	 * Pulipuli Chen 20131114
	 * 改為KALS_context中使用
	 */
    return KALS_context.create_type_param_list();
};

Type_menu.prototype.setup_type_option = function (_type_ui) {
    
    var _hover_classname = 'hover';
    
    _type_ui.hover(function () {
        $(this).addClass(_hover_classname);
    }, function () {
        $(this).removeClass(_hover_classname);
    });
   
    var _component = this._type_component;
    var _this = this;
    _type_ui.click(function () {
        //var _type = $(this).find('.type-value').val();
        var _type = $(this).attr('annotation_type');
        
        //$.test_msg('Type_menu.setup_option()', _type);
        
        if (_this.enable_custom_name === true
                && _type === 'custom') {
            _this.open_custom_name_dialog();
        }
        else {
            /**
             * 20130603 Pudding Chen
             * 加入記錄最後選擇參數的設定
             */
			//_component.set_type(_type);    
			_component.set_type(_type, true);
			
        }
        _this.close();
    });
    
    return _type_ui;
};

/**
 * @type {Type_component}
 */
Type_menu.prototype._type_component = null;

/**
 * 標註選項。注意此選項會影響順序。
 * @type {String[]}
 */
Type_menu.prototype._type_options = [];

/**
 * @author Pulipuli Chen 20140502
 * 將設定改成到函式中處理
 * @returns {undefined}
 */
/*
if (typeof(KALS_CONFIG.annotation_type_basic_enable) !== "undefined") {
    Type_menu.prototype._type_options = KALS_CONFIG.annotation_type_basic_enable;
}
else if (typeof(KALS_CONFIG.annotation_type_option) !== "undefined") {
    Type_menu.prototype._type_options = KALS_CONFIG.annotation_type_option;
}
*/

/**
 * 初始化載入標註的類型
 * @returns {Type_menu.prototype}
 */
Type_menu.prototype._init_type_options = function () {
    //this._type_options = KALS_context.get_basic_type_options();
    this._type_options = KALS_context.basic_type.get_type_name_list();
    return this;
};

/*
Type_menu.prototype._type_options = [
    'importance',
    'concept',
    'confusion',
    'question',
    'example',
    'summary',
    'custom'
];
*/

Type_menu.prototype._type_lang_header = 'annotation.type.';

Type_menu.prototype._$get_config = function () {
    
    var _selector = '#' + this._menu_id + ':first';
    
    var _config = Tooltip_modal.prototype._$get_config.call(this, _selector);
    
    _config.position = 'bottom right';
    //_config.offset = [-50, -13];
	_config.offset = [0, 0];
    _config.events = {def: 'click mouseover, mouseleave' };
    
    var _onbeforeshow;
    if (typeof(_config.onBeforeShow) === 'function') {
        _onbeforeshow = _config.onBeforeShow;
    }
        
    var _this = this;
    _config.onBeforeShow = function () {
        _this._on_before_show(this, _onbeforeshow);
    };
    
    _config.relative = true;
    
    return _config;
    
};

/**
 * 顯示之前的調整
 * @param {Function} _onbeforeshow
 * @returns {Type_menu}
 */
Type_menu.prototype._on_before_show = function (_tooltip, _onbeforeshow) {
    var _this = this;
    this.get_ui().css("visibility", "hidden");
    setTimeout(function () {		
        _this.setup_position();    
        _this.get_ui().css("visibility", "visible");
    }, 0);

    if ($.is_function(_onbeforeshow)) {
        _onbeforeshow.call(_tooltip);
    }
    
    // 開啟時改變型態
    var _enable_type = "topic";
    if (this._type_component.is_respond()) {
        _enable_type = "respond";
    }
    this.change_enable_type(_enable_type);
    
    return this;
};

/**
 * 設定標註類型選單的位置
 */
Type_menu.prototype.setup_position = function () {
    
    var _ui = this.get_ui();
    
	var _type_ui = this._type_component.get_ui();
	
	//var _type_offset = _type_ui.offset();
        var _type_offset = $.get_offset(_type_ui);
	var _type_right = _type_ui.width();
	//$.test_msg("setup_position", [_type_offset.left, _type_ui.width(), _type_right]);
	_ui.css("left", _type_right + "px");
	
	_ui.css("top", "-50px");
	
    var _top, _left;
    
    //上極限
    //if (_ui.offset().top < 0) {
    if ($.get_offset_top(_ui) < 0) {
        _top = 0;
    }
    
    //$.test_msg('Type_menu.setup_position()', _ui.offset().top);
    
    if ($.isset(_top)) {
        _ui.css('top', _top + 'px');
    }
    
    //左右
    //var _ui_left = _ui.offset().left;
    //var _ui_right = _ui_left + _ui.width();
    var _ui_left = $.get_offset_left(_ui);
    var _ui_right = $.get_offset_right(_ui);
    
    if (_ui_right > $('body').width()) {
        var _trigger = this.get_trigger();
        //var _trigger_left = _trigger.offset().left;
        var _trigger_left = $.get_offset_left(_trigger);
        _left = _trigger_left - _ui.width() - 10;
        
        if (_left < 0) {
            _left = null;
        }
    }
    
    if ($.isset(_left)) {
        _ui.css('left', _left + 'px');
    }
    
    return this;
};

// --------
// Custom name dialog
// --------


/**
 * 是否啟用自訂標籤。
 * 
 * 如果啟用的話，則允許使用者自訂標籤的字串。
 * 否則自訂會以「其他」顯示，使用者不能自訂字串。
 * 2010.10.25 因為Modal端尚不能自訂字串，所以在此設定為false
 */
Type_menu.prototype.enable_custom_name = KALS_CONFIG.enable_custom_name;

/**
 * @type {Dialog_modal}
 */
Type_menu.prototype._custom_name_dialog = null;

/**
 * @type {jQuery}
 */
Type_menu.prototype._custom_name_dialog_content = null;

Type_menu.prototype.open_custom_name_dialog = function () {
    
    var _dialog = this._custom_name_dialog;
    var _this = this;
    if (_dialog === null) {
        _dialog = new Dialog_modal();
        
        _dialog.set_heading(new KALS_language_param(
            'Custom Annotation Type',
            'type_menu.custom_type_dialog.heading'
        ));
        
        var _content = $('<div class="custom-type-dialog"><input name="custom_type" type="text" class="text" /></div>');
        
        this._custom_name_dialog_content = _content;
        
        _dialog.set_content(_content);
        
        var _option_lang = new KALS_language_param(
            'OK',
            'window.ok'
        );
        
        var _option = new Dialog_close_option(_option_lang, function () {
            var _custom_name = _content.find('input[name="custom_type"]:first').val();
            //alert(_custom_name);
			
			/**
			 * 20130603 Pudding Chen
			 * 改成記錄最後一次選擇的標註類型
			 */
            //_this._type_component.set_type(_custom_name);
			_this._type_component.set_type(_custom_name, true);
			
            return false;
        });
        
        _dialog.set_options(_option);
        
        this._custom_name_dialog = _dialog;
    } 
    this._custom_name_dialog_content.find('input').val('');
    _dialog.open();
    return this;
};

/**
 * 找一下這個type是不是自訂的類型
 * @deprecated 20130603 Pudding Chen 不使用了，因為現在標註類型不是單純的字串，而是物件
 * @param {Object} _type
 */
Type_menu.prototype.filter_type = function (_type) {
    
    for (var _i in this._type_options) {
        if (_type === this._type_options[_i]) {
            return _type;
        }
    }
    
    return 'custom';
};

/**
 * --------------------------------------------------
 */

/**
 * 在主題標註時啟用
 * @type Boolean
 */
//Type_menu.prototype._enable_topic = true;

/**
 * 在回應標註時啟用
 * @type Boolean
 */
//Type_menu.prototype._enable_respond = true;
/*
Type_menu.prototype.set_enable_type = function (_type) {
    if (_type === "topic") {
        this._enable_topic = true;
        this._enable_respond = false;
    }
    else if (_type === "repsond") {
        this._enable_topic = false;
        this._enable_respond = true;
    }
    else {
        this._enable_topic = true;
        this._enable_respond = true;
    }
    
    return this;
};
*/
/**
 * 確認是否是回應的狀態
 * 
 * 直接介接到Type_component.is_respond()
 * @returns {Boolean}
 */
Type_menu.prototype.is_respond = function () {
    var _is_respond = false;
    if (this._type_component !== null) {
        _is_respond = this._type_component.is_respond();
    }
    return _is_respond;
};

/**
 * 切換要顯示的標註類型
 * @param {String} _enable_type
 * @returns {Type_menu.prototype}
 */
Type_menu.prototype.change_enable_type = function (_enable_type) {
    
    //$.test_msg("type-menu, _enable_type", _enable_type);
    
    this.find(".type-option")
            .hide()
            .filter(".enable-type-" + _enable_type)
            .show();
    
    return this;
};

/* End of file Type_menu */
/* Location: ./system/application/views/web_apps/Type_menu.js *//**
 * Note_editor
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 06:12:11
 * @extends {Event_dispatcher}
 * @param {Annotation_editor} _editor
 */
function Note_editor(_editor) {
    
    Event_dispatcher.call(this);
            
    this._$apply_types = [];
    if ($.isset(_editor)) {
        this._editor = _editor;
        //this.listen_editor();
        
    }
}

/**
 * 繼承自Event_dispatcher
 */
Note_editor.prototype = new Event_dispatcher();

/**
 * @type {Annotation_editor}
 */
Note_editor.prototype._editor = null;

Note_editor.prototype._$name = 'textarea';

Note_editor.prototype.get_name = function () {
    return this._$name;
};

Note_editor.prototype._$classname = 'Note_editor';

Note_editor.prototype.get_classname = function () {
    return this._$classname;
};

Note_editor.prototype._$apply_type = [];

/**
 * Create UI
 * @memberOf {Note_editor}
 * @type {jQuery} UI
 */
Note_editor.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .append(this.create_textarea());
    var _this = this;
    this.notify_ready();
    
        _this = this;
        setTimeout(function() {
            _this.notify_ready();    
        }, 0);
        
    return _ui;
};

Note_editor.prototype.create_textarea = function () {
    var _ui = $('<textarea></textarea>')
        .addClass('note-editor-textarea');
    return _ui;
};

Note_editor.prototype.get_text = function () {
    var _ui = this.get_ui('.note-editor-textarea:first');
    var _text = _ui.val();
    
    
    if ($.trim(_text) === '') {
		return null;
	}
	else {
		return _text;
	}
};

/**
 * 設定指定文字到筆記編輯器中
 * @param {string} _text
 */
Note_editor.prototype.set_text = function (_text) {
    var _setted_text = this.get_text();
    
    //$.test_msg('Note_editor.set_text() setted text', [_text, _setted_text]);
    
    if ($.is_null(_text)) {
		_text = '';
	}
    
    if (_text == _setted_text) {
		return this;
	}
    
    var _ui = this.get_ui('.note-editor-textarea:first');
    //$.test_msg('Note_editor.set_text()', [_text, _ui.length]);
    
    _ui.val(_text);
    
    return this;
};

Note_editor.prototype.reset = function () {
    //var _ui = this.get_ui('.note-editor-textarea:first');
    //$.test_msg('Note_editor.set_text()', [_text, _ui.length]);
    
    this.set_text('');
    return this;
};

Note_editor.prototype.notify_ready = function () {
    
    var _this = this;
    
    //$.test_msg('Note_editor.notify_ready()', [this._$name, this._listeners.length, this._listeners[0]]);
    setTimeout(function () {
        _this.notify_listeners();
    }, 0);
    
    return this;
};

Note_editor.prototype.focus = function () {
	var _ui = this.get_ui('.note-editor-textarea:first');
	if (_ui.length > 0) {
		_ui.focus();	
	}
	return this;
};


/* End of file Note_editor */
/* Location: ./system/application/views/web_apps/Note_editor.js *//**
 * Note_editor_ckeditor
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 06:24:56
 * @extends {Note_editor}
 * @param {Annotation_editor} _editor
 */
function Note_editor_ckeditor(_editor) {
    
    //$.test_msg('Note_editor_ckeditor()', typeof(_editor));
    Note_editor.call(this, _editor);
}

Note_editor_ckeditor.prototype = new Note_editor();

Note_editor_ckeditor.prototype._$name = 'ckeditor';

Note_editor_ckeditor.prototype._$classname = 'Note_editor_ckeditor';

Note_editor_ckeditor.prototype._$apply_type = 'default';

/**
 * Create UI
 * @memberOf {Note_editor_ckeditor}
 * @type {jQuery} UI
 */
Note_editor_ckeditor.prototype._$create_ui = function () {
    var _ui = Note_editor.prototype._$create_ui.call(this);
    
    //_ui.attr('id', 'textarea_' + $.create_id());
    _ui.addClass('ckeditor')
        .addClass('note-editor-ckeditor');
    _ui.find('textarea:first').show();
	
    //$.test_msg('Note_editor_cheditor._$create_ui [stantby ready to call setup]');
    
    var _this = this;
    setTimeout(function () {
        //Note_editor_ckeditor._setup_ckeditor();
        Note_editor_ckeditor._setup_ckeditor();
    }, 0);
    return _ui;
};

/**
 * CKEditor的核心物件
 */
Note_editor_ckeditor.prototype._ckeditor = null;

Note_editor_ckeditor._ckeditor_config = KALS_CONFIG.ckeditor_config;

Note_editor_ckeditor._setup_timer = null;
Note_editor_ckeditor._setup_ckeditor = function () {
    
    if ($.isset(this._setup_timer)) {
        clearTimeout(this._setup_timer);
    }
    
    var _this = Note_editor_ckeditor;
    var _setup = function () {
        
        var _textareas = $('.note-editor-ckeditor');
        
        //$.test_msg('Note_editor_ckeditor.setup_ckeditor() textareas', _textareas.length);
        
        _textareas.each(function(_index, _textarea) {
            var _ui = $(_textarea).find('textarea:first');

            var _hint_lang = new KALS_language_param(
                'If editor could not edit, press "source" button twice to enable it.',
                "note.ckeditor.edit_hint"
            );
            var _hint = KALS_context.lang.create_listener(_hint_lang)
                    .addClass("enable-editor-hint")
                    .insertAfter(_ui);

			
            //$.test_msg('Note_editor_ckeditor.setup_ckeditor() [each textarea]', [_ui.length, typeof(_ui.ckeditor)]);
            _ui.ckeditor(function () {
            
                //$.test_msg('Note_editor_ckeditor.setup_ckeditor() after ckeditor setup ok?');
                
                //var _ui = _textareas.eq(_i);
                
                var _editor_span = _ui.nextAll('span:first'); 
                var _toolbox = _editor_span.find('.cke_toolbox');
                
                _toolbox.children('.cke_toolbar:last').addClass('minimize');
                _toolbox.children('.cke_toolbar:not(:last)').addClass('maximize');
                
                var _cke_editor = _editor_span.find('table.cke_editor:first');
                var _cke_bottom_tr = _cke_editor.find('> tbody > tr:last').addClass('cke_bottom_tr');
				
            }, _this._ckeditor_config);
            
			
			
			
            /*
            setTimeout(function () {
                if ($(_textarea).children('span').length === 0) {
                    _ui.show();
                    _ui.css('visibility', 'visible');
                }
            }, 500);
            */
           
           /*
           var _editor_id = 'ckeditor_' + $.create_id();
           _ui.attr('name', _editor_id);
           CKEDITOR.replace(_editor_id);
           */
        });
    };
    
    //$.test_msg('Note_editor_ckeditor.setup_ckeditor() [standby ready]');
    this._setup_timer = setTimeout(_setup, 100);
    
    return this;
};

Note_editor_ckeditor.prototype._setup_ckeditor = function () {
    
    var _ui = this.get_ui('textarea:first');
    var _this = this;
    
    /*
    var _config = {
        autoGrow_maxHeight: false,
        autoGrow_maxWidth: false,
        extraPlugins: 'kals_maximize,MediaEmbed',
        toolbar: [
            ['Maximize','Source','Preview','ShowBlocks','-'],
            ['Cut','Copy','Paste','PasteText','PasteFromWord'],
            ['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveFormat'],
            '/',
            ['Bold','Italic','Underline','Strike','-','Subscript','Superscript'],
            ['NumberedList','BulletedList','-','Outdent','Indent','Blockquote','CreateDiv'],
            ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],
            ['Link','Unlink','Anchor'],
            ['Image','MediaEmbed','Table','HorizontalRule','Smiley','SpecialChar'],
            '/',
            ['Styles','Format','Font','FontSize'],
            ['TextColor','BGColor'],
            ['Maximize','-','Bold', 'Italic', '-', 'NumberedList', 'BulletedList', '-', 'Link', 'Unlink']
        ],
        height: '50px',
        //width: '261px',
        resize_enabled: false,
        startupFocus: false,
        uiColor : '#CB842E'
    };
    */
   var _config  = Note_editor_ckeditor._ckeditor_config;
    
    var _ckeditor = null;
    
    //try
    //{
        //var _had_setup_classname = 'setted';
        //this._had_setup = false;
        _this = this; 
        
        var _afterckeditorsetup = function () {
            
            //if (_ui.hasClass(_had_setup_classname))
            //    return;
            
            //if (_this._had_setup === true)
            //    return;
            
            
            //$.test_msg('Note_editor_ckeditor.setup_ckeditor() after ckeditor setup');
            
            
            var _editor_span = _ui.nextAll('span:first'); 
            var _toolbox = _editor_span.find('.cke_toolbox');
            
            _toolbox.children('.cke_toolbar:last').addClass('minimize');
            _toolbox.children('.cke_toolbar:not(:last)').addClass('maximize');
            
            var _cke_editor = _editor_span.find('table.cke_editor:first');
            var _cke_bottom_tr = _cke_editor.find('> tbody > tr:last').addClass('cke_bottom_tr');    
			
            /*
            var _toolboxs = $('.cke_toolbox');
            
            $.test_msg('Note_editor_ckeditor.setup_ckeditor() toolboxs', [_toolboxs.length]);
            
            for (var _i = 0; _i < _toolboxs.length; _i++) {
                var _toolbox = _toolboxs.eq(_i);
                
                _toolbox.find('.cke_toolbar:last').addClass('minimize');
                _toolbox.find('.cke_toolbar:not(:last)').addClass('maximize');
                
                var _cke_editor = _toolbox.find('table.cke_editor:first');
                //_cke_editor.css('display', 'table');
                //var _cke_toolbox = _cke_editor.find('> tbody > tr:first').addClass('cke_toolbox');
                var _cke_bottom_tr = _cke_editor.find('> tbody > tr:last').addClass('cke_bottom_tr');
                
                $.test_msg('Note_editor_ckeditor.setup_ckeditor()', [_cke_editor.length, _cke_bottom_tr.length]);    
            }
            */
            /*
            var _cke_editors = $('table.cke_editor');
            
            $.test_msg('Note_editor_ckeditor.setup_ckeditor() cke_editors', [_cke_editors.length]);
            
            for (var _i = 0; _i < _cke_editors.length; _i++) {
                var _cke_editor = _cke_editor.eq(_i);
                
                var _cke_toolbox = _cke_editor.find('.cke_toolbox:first');
                
                _cke_toolbox.children('.cke_toolbar:last').addClass('minimize');
                _cke_toolbox.children('.cke_toolbar:not(:last)').addClass('maximize');
                
                _cke_editor.find('> tbody > tr:last').addClass('cke_bottom_tr');
            }
            */
            
			
            _this.notify_ready();
            
            //_ui.addClass(_had_setup_classname);
            //_this._had_setup = true;
        };
        
        _ui.ckeditor( _afterckeditorsetup , _config);
        
        //_ckeditor = _ui.ckeditorGet();
        
        //setTimeout(function () {
        //    _afterckeditorsetup();
        //}, 1000);
    //} catch (e) {} 
    
    /*
    _ckeditor.on('instanceReady', function( _evt ) {
         //_evt.preventDefault();
         var _editor = _evt.editor;
         _editor.execCommand('maximize');
         
      });
    _ckeditor.on('focus', function (_evt) {
        
        var _editor = _evt.editor;
        
        var _container = editor.container.getChild( 1 );
        _container.addClass('focus');
        
        //alert(_editor.getCommand('maximize').setState())
        //alert();
        
        //_editor.focusManager.hasFocus = false;
        //alert(_evt.editor.focusManager.hasFocus);
        
        //setTimeout(function () {
             //window.scrollTo(0,0);    
        // }, 10);
        //return true;
        //return false;
        //alert('focuse');
    });
    */
    /*
    _ckeditor.on('maximize', function (_evt) {
        
        //_evt.editor.editorConfig = function (_config)
        //{
        //    _config.toolbar = 'KALS_Full';
            //_evt.editor.    
        //};
        //
        //CKEDITOR.replace( 'editor1',{
        //    toolbar: 'KALS_Full'
        //});
        
        var _editor = _evt.editor;
        _editor.editorConfig = function (_config) {
            _config.toolbar = 'KALS_Full';
        };
        _editor.config.toolbar = 'KALS_Full';
        
        CKEDITOR.plugins.get("toolbar").init(_editor);
        
        
        //_editor.destroy();
        //_ui.ckeditor({
        //    toolbar: 'KALS_Full'
        //}).end();
        
        //_editor.ui.separator.render();
        //CKEDITOR.ui.separator.render(_editor);
        
        
        //_editor.setData('test');
        //_editor.resetDirty();
        //_editor.destroy();
        //_editor.updateElement();
        
        //alert( _editor.checkDirty() );
        
        //CKEDITOR.editorConfig();
    });
    */
    /*
    var _config = _ckeditor.config;
    // Referencing the new plugin
   _config.extraPlugins = 'window_editor';

   // Define the toolbar buttons you want to have available
   _config.toolbar = 'MyToolbar';
   _config.toolbar_MyToolbar = 
      [
         ['Window_editor', 'Preview'],
         ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Scayt'],
         ['Undo', 'Redo', '-', 'Find', 'Replace', '-', 'SelectAll', 'RemoveFormat']
      ];
      */  
      
      /*
    _ckeditor.on('minimize', function (_event) {
        $.test_msg(_cke_editor.length);
        _cke_editor.addClass('inline-table');
        setTimeout(function () {
            _cke_editor.removeClass('inline-table');    
        }, 10);
        
    });
    */
    //this._ckeditor = _ckeditor;
    return this;
};

/*
Note_editor.prototype.get_text = function () {
    var _text;
    try {
        _text = this._ckeditor.getData();    
    }
    catch (e) {}
       
    
    if ($.trim(_text) === '')
        return null;
    else
        return _text;
};

Note_editor_ckeditor.prototype.set_text = function (_text) {
    var _setted_text = this.get_text();
    if (_text == _setted_text)
        return this;
    
    try {
        this._ckeditor.setData(_text);    
    }
    catch (e) {}
    return this;
};
*/

/**
 * 設定CKedtior中的文字
 * 
 * CKeditor的設定方式比較特別，請小心喔
 * @param {String} _text
 */
Note_editor_ckeditor.prototype.set_text = function (_text) {
    var _setted_text = this.get_text();
    
    if ($.is_null(_text)) {
        _text = '12212';
    }
    
	/*
    if (_text == _setted_text) {
		return this;
	}
	*/
    
	//$.test_msg("Note_editor_ckeditor.set_text()", _text);
	
    var _ui = this.get_ui('.note-editor-textarea:first');
    $.save_scroll_position();
	
	
    //為了避免CKeditor還沒初始化前就設定，我們必須等它一下。
    var _set_data = function () {
        if (typeof(_ui.ckeditorGet) !== "function") {
                $.test_msg("check _ui.ckeditorGet() failed", typeof(_ui.ckeditorGet));
            throw "CKeditor_not_ready"; 
            return;
        }

        _ui.ckeditorGet().setData(_text, function () {
            //$.test_msg("Note_editor_ckeditor.set_text() ok", _text);
            setTimeout(function () {
                $.load_scroll_position();    
            }, 0);

        });
    };

    var _loop_count = 0;
    var _loop_limit = 10;
    var _loop = function () {
        
        // 避免無止盡讀取下去
        if (_loop_count > _loop_limit) {
            return;
        }
        _loop_count++;
        
        try {
            _set_data();
        }
        catch (_e) {
            setTimeout(function () {
                _loop();
            }, 1000);
        }
    };

    _loop();
    
    return this;
};

/**
 * 將游標聚焦於編輯器上
 */
Note_editor_ckeditor.prototype.focus = function () {
    var _ui = this.get_ui('.note-editor-textarea:first');
    var _ckeditor = _ui.ckeditorGet();
    _ckeditor.focus();
    //$.test_msg(_ckeditor);

    return this;	
};

/* End of file Note_editor_ckeditor */
/* Location: ./system/application/views/web_apps/Note_editor_ckeditor.js *//**
 * Init_note_editor
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/25 下午 02:42:42
 * @extends {Task_event_dispatcher}
 */
function Init_note_editor() {
    
    Task_event_dispatcher.call(this);

    this._$schedule_task = [
        //'ckeditor'
        'textarea'
    ];
}

Init_note_editor.prototype = new Task_event_dispatcher();

/* End of file Init_note_editor */
/* Location: ./system/application/views/web_apps/Init_note_editor.js *//**
 * Note_editor_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/19 下午 06:59:24
 * @extends {KALS_user_interface}
 * @param {Annotation_editor} _editor
 */
function Note_editor_manager(_editor) {
    
    KALS_user_interface.call(this);
    
    if ($.isset(_editor)) {
        this._editor = _editor;
        this._listen_editor();
    }
    this.child('init', new Init_note_editor());
    
    if ($.browser.msie) {
        this._type_mapping = this._type_mapping_ie;
    }
}

Note_editor_manager.prototype = new KALS_user_interface();

/**
 * @type {Annotation_editor}
 */
Note_editor_manager.prototype._editor = null;

/**
 * @type {Note_editor}
 */
Note_editor_manager.prototype._active_editor = null;

/**
 * @type {String}
 */
Note_editor_manager.prototype._active_editor_name = null;

/**
 * @type {Init_note_editor}
 */
Note_editor_manager.prototype.init = null;

Note_editor_manager.prototype._type_mapping = {
    'importance': 'Note_editor_ckeditor',
    'question': 'Note_editor_ckeditor',
    'confusion': 'Note_editor_ckeditor',
    'summary': 'Note_editor_ckeditor',
    'concept': 'Note_editor_ckeditor',
    'example': 'Note_editor_ckeditor',
    'custom': 'Note_editor_ckeditor'
};

/**
 * 給IE用的列表
 * @version 2009 Pudding Chen
 * @type JSON
 */
Note_editor_manager.prototype._type_mapping_ie = {
    'importance': 'Note_editor',
    'question': 'Note_editor',
    'confusion': 'Note_editor',
    'summary': 'Note_editor',
    'concept': 'Note_editor',
    'example': 'Note_editor',
    'custom': 'Note_editor'
};

Note_editor_manager.prototype._default_editor = 'Note_editor_ckeditor';
//Note_editor_manager.prototype._default_editor = 'Note_editor';

Note_editor_manager.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('note-editor');

    // 加入防止被hotkey影響的設定
    _ui.keydown(function (_event) {
        _event.preventDefault();
    });
    
    return _ui;
};


/**
 * 建立編輯器
 * @param {String} _type
 */
Note_editor_manager.prototype.create = function (_type) {
    //if ($.browser.msie == false)
    //    return new Note_editor_ckeditor(this._editor);
    //else
        return new Note_editor(this._editor);
};

Note_editor_manager.prototype.get_text = function () {
    if ($.isset(this._active_editor))
        return this._active_editor.get_text();
    else
        return null;
};

Note_editor_manager.prototype.set_text = function (_text) {
    
    //$.test_msg('Note_editor_manager.set_text()', [_text, this._active_editor, typeof(this._active_editor.set_text)]);
    /*
    for (var _i in this._note_editors)
    {
        //var _note_editor = this._note_editors[_i];
        //_note_editor.set_text('121212121212');
        this._note_editors[_i].set_text(_text);
        //$.test_msg('Note_editor_managr.reset() set ', [_i, $.isset(this._note_editors[_i]), $.get_class(_note_editor)]);
    }
    */
    if ($.isset(this._active_editor))
        this._active_editor.set_text(_text);
    return this;
};

Note_editor_manager.prototype._get_editor_list = function () {
    
    var _list = [];
    
    for (var _i in this._type_mapping)
    {
        var _editor_name = this._type_mapping[_i];
        
        if ($.inArray(_editor_name, _list) == -1)
            _list.push(_editor_name);
    }
    
    //$.test_msg('Note_editor._get_editor_list', _list);
    
    return _list;
    
};

Note_editor_manager.prototype._note_editors = {};

Note_editor_manager.prototype.initialize = function (_callback) {
    
    //$.test_msg('Note_editor_manager.initialize()', _callback);
    
    //初始化完成之後，呼叫回呼函數
    var _this = this;
    this.init.set_oncomplete(function () {
        
        _this.toggle_editor();
        //$.test_msg('Note_editor_manager.initialize() init oncomplete()');
        $.trigger_callback(_callback);
        
    });
    var _ui = this.get_ui();
    /*
    var _note_editor = new Note_editor_ckeditor(this._editor);
    _note_editor.appendTo();
    */
    var _list = this._get_editor_list();
    this.init._$schedule_task = _list;
    for (var _i in _list)
    {
        var _note_editor_name = _list[_i];
        //$.test_msg('Note_editor_manager.initialize()', _note_editor_name);
        
        var _note_editor;
        eval('_note_editor = new ' + _note_editor_name + '(this._editor);');
        
        var _note_editor_ui = _note_editor.get_ui();
        _note_editor_ui.addClass(_note_editor_name)
            .appendTo(_ui);
        
        _note_editor.add_listener(function (_dispatcher) {
            var _name = _dispatcher.get_classname();
            
            //$.test_msg('Note_editor_manager.initialize()', _name);
            
            _this.init.complete(_name);
        });
        
        //$.test_msg('Note_editor_manager.initialize()', _note_editor_name);
        
        this._note_editors[_note_editor_name] = _note_editor;
    }
    
    this._editor.type.add_listener(function (_dispatcher, _type) {
        _this.ontypechange(_type);
    });
    
    return this;
};

/**
 * @param {Annotation_type_param|String} _type
 */
Note_editor_manager.prototype.toggle_editor = function (_type) {
    
    if ($.is_null(_type))
    {
        _type = this._editor.type.get_default_type();
    }
    
    if ($.is_class(_type, 'Annotation_type_param'))
    {
        _type = _type.get_type_name();
    }
    
    var _note_editor_name;
    if (typeof(this._type_mapping[_type]) == 'string')
    {
        _note_editor_name = this._type_mapping[_type];
    }
    else
    {
        _note_editor_name = this._default_editor;
    }
    
    //防止重複更換
    if (_note_editor_name == this._active_editor_name)
        return this;
    else
        this._active_editor_name = _note_editor_name;    
    
    var _ui = this.get_ui();
    
    _ui.children(':not(.' + _note_editor_name + ')').hide();
    _ui.children('.' + _note_editor_name).show();
    
    
    var _text = false;
    if ($.isset(this._active_editor))
        _text = this._active_editor.get_text();
    
    this._active_editor = this._note_editors[ _note_editor_name ];
    
    if (_text != false)
        this._active_editor.set_text(_text);
    
    return this;
};

Note_editor_manager.prototype.ontypechange = function (_type) {
    //$.test_msg('Note_editor_manager.ontypechange()', _type);
    return this.toggle_editor(_type);
};


/**
 * 設置標註參數
 * @param {Annotation_param} _param
 */
Note_editor_manager.prototype.set_data = function (_param) {
    
    if ($.isset(_param)
        && typeof(_param.note) != 'undefined')
    {
        this.set_text(_param.note);
    }
    return this;
};


Note_editor_manager.prototype._listen_editor = function () {
    
    var _this = this;
    this._editor.add_listener('set', function (_editor, _param) {
        _this.set_data(_param);
    });
    
    this._editor.add_listener('get', function (_editor, _annotation_param) {
        var _text = _this.get_text();
        
        //如果是空值，則不傳輸資料，由伺服器端去取得預設值
        if ($.isset(_text))
        {
            _annotation_param.note = _text;
        }
    });
    
    this._editor.add_listener('reset', function (_editor) {
        _this.reset();
    });
};



Note_editor_manager.prototype.reset = function () {
    
    /*
    for (var _i in this._note_editors)
    {
        //var _note_editor = this._note_editors[_i];
        //_note_editor.set_text('121212121212');
        this._note_editors[_i].reset();
        //$.test_msg('Note_editor_managr.reset() set ', [_i, $.isset(this._note_editors[_i]), $.get_class(_note_editor)]);
    }
    */
    if ($.isset(this._active_editor)) {
		this._active_editor.reset();
	}
    
    //$.test_msg('Note_editor_managr.reset()');
    //this.set_text('');
    
    //var _ui = this.get_ui('textarea');
    //_ui.val('');
    
    
    return this;
};

/**
 * 聚焦於編輯器上
 */
Note_editor_manager.prototype.focus = function () {
    if ($.isset(this._active_editor)) {
		this._active_editor.focus();
	} 
    
    return this;
};

/* End of file Note_editor_manager */
/* Location: ./system/application/views/web_apps/Note_editor_manager.js *//**
 * Editor_respond_to
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 02:28:26
 * @extends {KALS_user_interface}
 * @param {Annotation_editor} _editor
 * @param {Annotation_param} _param
 */
function Editor_respond_to(_editor, _param, _removable) {
    
    KALS_user_interface.call(this);
    
    this._editor = _editor;
    
    if ($.isset(_param)) {
		this.set_respond_to(_param);
	}
    
    //$.test_msg('Editor_respond_to()', _removable);
    
    if ($.isset(_removable)) {
		this._removable = _removable;
	}
}

// Extend from KALS_user_interface
Editor_respond_to.prototype = new KALS_user_interface();

/**
 * @type {Annotation_editor}
 */
Editor_respond_to.prototype._editor = null;

/**
 * 回應的標註資料
 * @type {Annotation_param}
 */
Editor_respond_to.prototype._respond_to = null;

/**
 * Create UI
 * @memberOf {Editor_respond_to}
 * @type {jQuery} UI
 */
Editor_respond_to.prototype._$create_ui = function () {
    var _ui = $('<span></span>')
        .addClass('editor-respond-to');
    return _ui;
};

/**
 * 設置回應的參數
 * @param {Annotation_param} _param
 */
Editor_respond_to.prototype.set_respond_to = function (_param) {
    
    var _this = this;
    var _ui = this.get_ui();
    
    //名稱的部份
    var _name, _annotation_id;
    
    if (typeof(_param.annotation_id) != 'undefined') {
		_annotation_id = _param.annotation_id;
	}
	else {
		return this;
	}
    
    if (typeof(_param.user) == 'object'
        && typeof(_param.user.name) != 'undefined') {
        _name = _param.user.name;
        
        //避免名稱太長
        if (_name === null) {
            _name = '';
        }
        if (_name.length > 7) {
            _name = _name.substr(0, 7) + '...';
        }
    }
    else {
        var _anonymous = KALS_context.lang.create_listener(new KALS_language_param(
            'anonymous',
            'user.anonymous'
        ));
        
        _name = $('<span></span>')
            .append(_anonymous);
    } 
    
    var _data_ui = $('<span></span>')
        .addClass('data')
        .attr('id', this._respond_to_id_prefix + _annotation_id)
        .click(function () {
            _this.focus_respond_to_annotation(this.id);
        });
    
    var _name_ui = $('<span></span>')
        .addClass('name')
        .append(_name)
        .appendTo(_data_ui);
        
    var _id_ui = $('<span></span>')
        .addClass('id')
        .html('#' + _annotation_id)
        .appendTo(_data_ui);
    
    //$.test_msg('Editor_respond_to._$create_ui()', this._removable);
    if (this._removable === true) {
        //刪除的部份
        var _delete_ui = $('<span></span>').html('x')
            .addClass('delete')
            .click(function () {
                _this.remove();
            })
            .hover(function () {
                $(this).addClass('hover');
            }, function () {
                $(this).removeClass('hover');
            });
        _delete_ui.appendTo(_ui);
    }
    
    //設置
    this._respond_to = _param;
    
    _data_ui.prependTo(_ui);
    
    
    return this;
};

Editor_respond_to.prototype._removable = true;

Editor_respond_to.prototype._respond_to_id_prefix = 'editor_respond_to_';

Editor_respond_to.prototype.focus_respond_to_annotation = function (_id) {
    
    if (_id === null) {
		return this;
	}
	else {
		_id = $.get_prefixed_id(_id);
	}
    
    this._editor.list_coll.focus(_id, true);
};

/**
 * @type {Annotation_param}
 */
Editor_respond_to.prototype.get_respond_to = function () {
    return this._respond_to;
};

/*
Editor_respond_to.prototype.get_data = function () {
    return this._respond_to;
};
*/

Editor_respond_to.prototype.remove = function () {
    
    KALS_user_interface.prototype.remove.call(this);
    
    this._respond_to = null;
    return this;
};

/* End of file Editor_respond_to */
/* Location: ./system/application/views/web_apps/Editor_respond_to.js *//**
 * Editor_respond_to_collection
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 02:28:32
 * @extends {KALS_user_interface}
 * @param {Annotation_editor} _editor
 */
function Editor_respond_to_collection(_editor) {
    
    KALS_user_interface.call(this);
    
    this._responds = [];
    
    this.set_editor(_editor);
}

// Extend from KALS_user_interface
Editor_respond_to_collection.prototype = new KALS_user_interface();

// --------
// Annotation Editor
// --------

/**
 * @type {Annotation_editor}
 */
Editor_respond_to_collection.prototype._editor = null;

Editor_respond_to_collection.prototype.set_editor = function (_editor) {
    if ($.isset(_editor)) {
        this._editor = _editor;   
        this._listen_editor();    
    }
    return this;
};

/**
 * Create UI
 * @memberOf {Editor_respond_to_collection}
 * @type {jQuery} UI
 */
Editor_respond_to_collection.prototype._$create_ui = function () {
    var _ui = $('<span></span>')
        .addClass('editor-respond-to-collection');
      
    return _ui;
};

/**
 * 標註本身
 * @type {Editor_respond_to[]}
 */
Editor_respond_to_collection.prototype._responds = [];

Editor_respond_to_collection.prototype._$removable = true;

/**
 * 新增標註
 * @param {Annotation_param|Annotation_collection_param} _param
 */
Editor_respond_to_collection.prototype.add_respond_to = function (_param) {
    
    var _removable = this._$removable;
    
    if ($.is_array(_param)) {
        for (var _i in _param) {
            this.add_respond_to(_param[_i], _removable);
        }
        return this;
    }
    else if ($.is_class(_param, 'Annotation_collection_param')) {
        var _coll = _param.annotations;
        for (_i in _coll) {
            this.add_respond_to(_coll[_i], _removable);
        }
        return this;
    }
    else if ($.is_class(_param, 'Annotation_param') === false) {
        return this;
    }
    
	// 如果是回應的才要加入
	if (_param.is_respond() === false) {
		return this;
	}
	
    //要先確認是否已經有這個respond
    if (this.has_respond_to(_param) === true) {
		return this;
	}
    
    var _respond = new Editor_respond_to(this._editor, _param, _removable);
    
    var _ui = this.get_ui();
    var _respond_ui = _respond.get_ui();
    _ui.prepend(_respond_ui);
    
    this._responds.push(_respond);
    //$.test_msg('Editor_respond_to_collection.add_respond_to()', this._responds.length);
    return this;
};

/**
 * @param {Annotation_param} _param
 */
Editor_respond_to_collection.prototype.has_respond_to = function (_param) {
    
    //是以id來比較的
    var _annotation_id = _param.annotation_id;
    
    //$.test_msg('Editor_respond_to_colleciton.has_respond_to()', [_annotation_id, this._responds.length]);
    
    for (var _i in this._responds) {
        var _respond = this._responds[_i];
        var _respond_param = _respond.get_respond_to();
        
        if ($.is_null(_respond_param)) {
            continue;
        }
        
        var _respond_id = _respond_param.annotation_id;
        
        //$.test_msg('Editor_respond_to_colleciton.has_respond_to() for loop ', [(_respond_id == _annotation_id), _respond_id]);
        
        if (_respond_id == _annotation_id) {
            return true;
        }
    }
    
    return false;
};

Editor_respond_to_collection.prototype.reset = function () {
    
    var _responds = this._responds;
    for (var _i in _responds) {
        _responds[_i].remove();
    }
    
    var _ui = this.get_ui();
    _ui.empty();
    
    this._responds = [];
    return this;
};

/**
 * 
 * @param {Annotation_collection_param} _param_coll
 */
Editor_respond_to_collection.prototype.set_respond_to_coll = function(_param_coll) {
    this.reset();
    return this.add_respond_to(_param_coll);
};

/**
 * @type {Annotation_collection_param}
 */
Editor_respond_to_collection.prototype.get_respond_to_coll = function () {
    /*
    var _coll = [];
    
    var _responds = this._responds;
    for (var _i in _responds) {
        var _param = _responds[_i].get_respond_to();
        if (_param != null)
            _coll.push(_param);
    }
    
    return _coll;
    */
    if (this._responds.le === 0) {
		return null;
	}
    
    var _coll = new Annotation_collection_param();
    
    for (var _i in this._responds) {
        var _respond = this._responds[_i];
        var _param = _respond.get_respond_to();
        _coll.add(_param);
    }
    
    return _coll;
};

Editor_respond_to_collection.prototype._listen_editor = function () {
    
    var _this = this;
    this._editor.add_listener('set', function (_editor, _param) {
        _this.set_data(_param);
    });
    
    this._editor.add_listener('reset', function (_editor) {
        _this.reset();
    });
    
    this._editor.add_listener('get', function (_editor, _param) {
        var _data = _this.get_data();
        //$.test_msg('Editor_respond_to_collection._listen_editor() get', _data);
        
        if ($.isset(_data)) {
			_param[_this._$listen_field] = _data;
		}
    });
};

/**
 * 精簡過的資料
 * @type {Annotation_collection_param}
 */
Editor_respond_to_collection.prototype.get_data = function () {
    
    var _coll = this.get_respond_to_coll();
    if ($.is_null(_coll)) {
		return null;
	}
    
    var _new_coll = new Annotation_collection_param();
    
    for (var _i = 0; _i < _coll.length(); _i++) {
        var _param = _coll.get(_i);
        var _annotation_id = _param.annotation_id;
        var _user = _param.user;
        
        var _new_param = new Annotation_param();
        _new_param.annotation_id = _annotation_id;
        _new_param.user = _user;
        _new_coll.add(_new_param);
    }
    
    return _new_coll;
};

/**
 * @param {Annotation_param} _param
 */
Editor_respond_to_collection.prototype.set_data = function (_param) {
    
    if (typeof(_param[this._$listen_field]) == 'undefined') {
		return this;
	}
    
    var _respond_to_coll = _param[this._$listen_field];
    this.reset();
	
    return this.set_respond_to_coll(_respond_to_coll);
};

Editor_respond_to_collection.prototype._$listen_field = 'respond_to_coll';

/* End of file Editor_respond_to_collection */
/* Location: ./system/application/views/web_apps/Editor_respond_to_collection.js *//**
 * Editor_respond_to_topic
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 04:38:37
 * @extends {Editor_respond_to_collection}
 */
function Editor_respond_to_topic(_editor) {
    
    Editor_respond_to_collection.call(this, _editor);
    
}

Editor_respond_to_topic.prototype = new Editor_respond_to_collection();

Editor_respond_to_topic.prototype._$listen_field = 'respond_to_topic';

/**
 * 
 * @param {Annotation_param} _param
 */
Editor_respond_to_topic.prototype.add_respond_to = function (_param) {
    this.reset();
    Editor_respond_to_collection.prototype.add_respond_to.call(this, _param, false);
    
    //$.test_msg('Editor_respond_to_toipc.add_respond_to()', this._responds.length);
};

Editor_respond_to_topic.prototype._$create_ui = function () {
    var _ui = Editor_respond_to_collection.prototype._$create_ui.call(this);
    _ui.addClass('editor-respond-to-topic');
    return _ui;
};

/* End of file Editor_respond_to_topic */
/* Location: ./system/application/views/web_apps/Editor_respond_to_topic.js *//**
 * Policy_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/22 下午 03:07:24
 * @extends {KALS_user_interface}
 * @param {Annotation_editor} _editor
 */
function Policy_component(_editor) {
    
    KALS_user_interface.call(this);
    
    if ($.isset(_editor)) {
        this._editor = _editor;
        this._listen_editor();
    }
    
    this._share_list = null;
    
    this._default_policy_type = this._config_default_policy_type();
}

// Extend from KALS_user_interface
Policy_component.prototype = new KALS_user_interface();

/**
 * @type {Annotation_editor}
 */
Policy_component.prototype._editor = null;

/**
 * 現在的type
 * @type {String}
 */
Policy_component.prototype._policy_type = null;

/**
 * 可用選項。
 * 腰斬掉「share」的這個功能。但是大架構還是要坐上去。
 * @type {String[]}
 */
Policy_component.prototype._policy_type_options = ['public', 'private'];

Policy_component.prototype.get_options = function () {
    return this._policy_type_options;
};

Policy_component.prototype._default_policy_type = 'public';

/**
 * @type {User_collection_param}
 */
Policy_component.prototype._share_list = null;

/**
 * 是否可以變更
 */
Policy_component.prototype._policy_changable = false;

// --------
// UI Methods
// --------

/**
 * Create UI
 * @memberOf {Policy_component}
 * @type {jQuery} UI
 */
Policy_component.prototype._$create_ui = function () {
    var _ui = $('<span></span>')
        .addClass('policy-component');
    
    var _this = this;
    
    for (var _i in this._policy_type_options) {
        var _type = this._policy_type_options[_i];
        
        var _option = $('<span></span>')
            .addClass('policy-option')
            .addClass(_type)
            .hide();
        
        var _lang = new KALS_language_param(
            _type,
            'policy_type.' + _type
        );
        
        KALS_context.lang.add_listener(_option, _lang);
        
        _option.appendTo(_ui);
    }
	
	_ui.click(function () {
        _this.open_window();
    });
    
    setTimeout(function() {
        _this.set_policy_type();
    }, 0);
    
    return _ui;
};

/**
 * 變更權限
 * @param {string|null} _type = this._default_policy_type
 */
Policy_component.prototype.set_policy_type = function(_type) {
    
    if ($.is_null(_type)) {
        _type = this._default_policy_type;
    }
    
    //$.test_msg('set_policy_type', [_type, this._policy_type]);
    
    //防止重複變更
    if (_type === this._policy_type) {
        return this;
    }
    
    this._policy_type = _type;
    
    var _ui = this.get_ui();
    
    //$.test_msg('set_policy_type2', [_type, this._policy_type]);
    
    _ui.children('.policy-option:not(.'+_type+')').hide();
    _ui.children('.policy-option.'+_type).css('display', 'inline');
    
    var _lock_classname = 'lock';
    
    _ui.addClass('test' + _type);
    
    if (_type === 'public') {
        this._share_list = null;
        _ui.removeClass(_lock_classname);
    }
    else if (_type === 'private') {
        
        var _user_coll = new User_collection_param();
        _user_coll.add(KALS_context.user.get_data());
        this._share_list = _user_coll;
        _ui.addClass(_lock_classname);
        //$.test_msg('Policy.set_policy_type', _type);
    }
    else if (_type === 'share') {
        _ui.addClass(_lock_classname);
    }
    
    return this;
};

Policy_component.prototype.get_policy_type = function () {
    return this._policy_type;
};


Policy_component.prototype.get_default_type = function () {
    return this._default_policy_type;
};


// --------
// Attributes Methods
// --------

Policy_component.prototype.set_policy_changable = function (_changable) {
    
    //$.test_msg("set_policy_changable", [_changable, this._config_policy_changable()]);
    
    if (_changable === true && this._config_policy_changable() === false) {
		_changable = false;
	}
    
    
    this._policy_changable = _changable;
    
    var _ui = this.get_ui();
    var _deny_change_classname = 'deny-change';
    
    if (_changable === false) {
        _ui.addClass(_deny_change_classname);    
    }
    else {
        _ui.removeClass(_deny_change_classname);
    }
    return this;
};

Policy_component.prototype.set_share_list = function (_user_coll, _policy_type) {
    
    if ($.is_class(_user_coll, 'User_collection_param')) {
        this._share_list = _user_coll;
        this.set_policy_type('share');
    }
    /*
    else if (_policy_type == 'private') {
        //什麼都不做！
    }
    else {
        this._share_list = null;
        this.set_policy_type('public');
    }
    */
    return this;
};

Policy_component.prototype.get_share_list = function () {
    return this._share_list;
};

Policy_component.prototype.get_data = function () {
    
    var _data = {
        policy_type: this.get_policy_type(),
        share_list: this.get_share_list()
    };
    return _data;
};

Policy_component.prototype.reset = function () {
    return this.set_policy_type(this._default_policy_type);
};

Policy_component.prototype._listen_editor = function () {
    
    var _this = this;
    
    this._editor.add_listener('reset', function () {
        _this.reset();
    });
    
    this._editor.add_listener('set', function (_editor, _param) {
        _this.set_data(_param);
    });
    
    this._editor.add_listener('get', function (_editor, _param) {
        
        var _policy_type = _this.get_policy_type();
        
        //如果是預設值，則由伺服器端去取得預設值
        if (_policy_type != this._default_policy_type) {
            //var _policy_type_id = _this.filter_policy_type_id(_policy_type);
            _param.policy_type = _policy_type;
        }
        
        //要注意到，如果type='private'，則是由伺服器端去設定只有該使用者才擁有readable的權限。而不是從這邊指名share_list為該使用者。
        var _share_list = _this.get_share_list();
        if ($.isset(_share_list) && _policy_type == 'share') {
			_param.share_list = _share_list;
		}
    });
};

/**
 * 過濾Policy_type變成簡單的ID
 * 1    public
 * 2    private
 * 3    share
 * @deprecated 2010.11.2 交給Annotation_param去做
 * @param {Object} _policy_type
 */
/*
Policy_component.prototype.filter_policy_type_id = function (_policy_type) {
    if (_policy_type == 'public') {
        return 1;
    }
    else if (_policy_type == 'private') {
        return 2;
    }
    else if (_policy_type == 'share')
        return 3;
    }
    else {
        return 1;
    }
        
};
*/

/**
 * 從Annotation_param設置資料
 * @param {Annotation_param} _annotation_param
 */
Policy_component.prototype.set_data = function (_annotation_param) {
    if ($.is_null(_annotation_param)) {
		return this;
	}

    var _policy_type = _annotation_param.policy_type;
    //$.test_msg('Policy.set_data()', [_policy_type, typeof(_policy_type)]);
    this.set_policy_type(_policy_type);
    
    var _share_list = _annotation_param.share_list;
    if ($.isset(_share_list)) {
		this.set_share_list(_share_list);
	}
    
    return this;
};

/**
 * 開啟視窗
 */
Policy_component.prototype.open_window = function () {
    
    //$.test_msg('Policy_component.open_window()', this._policy_changable);
    
    if (this._policy_changable === false) {
		return this;
	}
    
    var _content = new Window_policy(this);
    
    KALS_window.setup_window(_content);
    
    return this;
};

/**
 * 確認KALS_CONFIG是否有預設的權限，有的話則把這個權限功能鎖死
 * @version 2011/11/3 Pudding Chen
 */
Policy_component.prototype._config_default_policy_type = function () {
    return KALS_CONFIG.default_policy_type;
};

Policy_component.prototype._config_policy_changable = function () {
    return KALS_CONFIG.policy_changable;
};

/* End of file Policy_component */
/* Location: ./system/application/views/web_apps/Policy_component.js *//**
 * Window_policy
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/22 下午 04:36:42
 * @extends {Window_content}
 * @param {Policy_component} _trigger
 */
function Window_policy(_trigger) {
    
    Window_content.call(this);
    
    if ($.isset(_trigger)) {
		this._trigger = _trigger;
	}
    
    this._setup_submit(new Window_policy_submit());
}

Window_policy.prototype = new Window_content();

Window_policy.prototype.heading = new KALS_language_param(
    'Annotation Policy',
    'window.policy.heading'
);

Window_policy.prototype.name = 'Policy';

Window_policy.prototype.width = 320;

/**
 * @type {Policy_component}
 */
Window_policy.prototype._trigger = null;

/**
 * @type {Policy_component}
 */
Window_policy.prototype.get_trigger = function () {
    return this._trigger;
};

/**
 * @type {Share_list_component}
 */
Window_policy.prototype._share = null;

/**
 * @type {Friends_list_component}
 */
Window_policy.prototype._friends = null;

/**
 * @type {User_search_input}
 */
Window_policy.prototype._input = null;

/**
 * 目前選擇的policy type
 * @type {String}
 */
Window_policy.prototype._policy_type = 'public';

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {Window_policy}
 * @type {jQuery} UI
 */
Window_policy.prototype._$create_ui = function () {
    var _ui = $('<form></form>')
        .addClass('window-policy');
    
    var _this = this;
    var _options = this._trigger.get_options();
    for (var _i in _options) {
        
        var _type = _options[_i];
        
        
        
        var _label = $('<label></label>')
            .addClass(_type + '-label')
            .appendTo(_ui);
        
        var _dt = $('<div class="dt"><input type="radio" name="window_policy" value="'+_type+'"> <span class="heading"></span></div>')
            .appendTo(_label);
        
        var _dd = $('<div class="help"></div>')
            .appendTo(_label);
        
        var _heading = _dt.find('.heading:first');
        var _heading_lang = new KALS_language_param(
            _type,
            'policy_type.' + _type
        );
        
        KALS_context.lang.add_listener(_heading, _heading_lang);
        
        var _help_lang = new KALS_language_param(
            ' ',
            'policy_type.' + _type + '.help'
        );
        
        if (_type == 'public') {
			_help_lang.msg = 'Everyone can read this annotation.';
		}
		else if (_type == 'private') {
			_help_lang.msg = 'Only you can read this annotation.';
		}
		else if (_type == 'share') { 
			_help_lang.msg = 'People in follow list can read this annotation.';
		}
        
        //$.test_msg('Window_policy._$create_ui()', [_type, _heading.length, _dt.length]);
        
        KALS_context.lang.add_listener(_dd, _help_lang);
        
        var _radio = _dt.find('input:radio:first');
        _radio.change(function () {
            var _type = this.value;
            _this.ontypechange(_type);
        });
    }
    
    //設定Input、Share、Friend
    
    _this  = this;
    setTimeout(function () {
        _this.set_policy_type();
    }, 0);
    
    return _ui;
};

Window_policy.prototype.ontypechange = function (_type) {
    
    this._policy_type = _type;
    
    return this;
};

Window_policy.prototype.set_policy_type = function (_type) {
    
    if ($.is_null(_type)) {
        _type = this._trigger.get_policy_type();
    }
    
    var _radio = this.get_ui('input:radio[value="'+_type+'"]').click();
    return this;
};

Window_policy.prototype.get_policy_type = function () {
    
    var _type = this._policy_type;
    
    return _type;
};

/**
 * @deprecated 2010.10.22 因為共享標註功能腰斬，所以暫時先不做
 * @type {User_search_input}
 */
Window_policy.prototype._setup_input = function () {
    
};

/**
 * @deprecated 2010.10.22 因為共享標註功能腰斬，所以暫時先不做
 * @type {Share_list_component}
 */
Window_policy.prototype._setup_share = function () {
    
};

/**
 * @deprecated 2010.10.22 因為共享標註功能腰斬，所以暫時先不做
 * @type {Friends_list_component}
 */
Window_policy.prototype._setup_friend = function () {
    
};


/* End of file Window_policy */
/* Location: ./system/application/views/web_apps/Window_policy.js *//**
 * Window_policy_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/22 下午 04:36:47
 * @extends {Window_content_submit}
 */
function Window_policy_submit() {
    
    Window_content_submit.call(this);
    
}

Window_policy_submit.prototype = new Window_content_submit();

Window_policy_submit.prototype.lang = new KALS_language_param(
    'OK',
    'window.ok'
);

Window_policy_submit.prototype.submit = function () {
    
    var _trigger = this._content.get_trigger();
    
    var _type = this._content.get_policy_type();
    
    _trigger.set_policy_type(_type);
    
    KALS_window.close();
    
};

/* End of file Window_policy_submit */
/* Location: ./system/application/views/web_apps/Window_policy_submit.js *//**
 * Web_search_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2013/6/3 下午 02:59:42
 */
function Web_search_component() {
    
    Event_dispatcher.call(this);
	
}

// Extend from KALS_user_interface
Web_search_component.prototype = new Event_dispatcher();

/**
 * Create UI
 * @memberOf {Web_search_component}
 * @type {jQuery} UI
 */
Web_search_component.prototype._$create_ui = function () {
	
	var _ui = $("<span></span>")
		.addClass("web-search")
		.addClass("button")
		.addClass("dialog-option");
	
	if (typeof(KALS_CONFIG.web_search_url) != "undefined"
		&& (KALS_CONFIG.web_search_url === false
			|| KALS_CONFIG.web_search_url == "disable")) {
				_ui.hide();
				return _ui;
			}
	
	var _this = this;
	
	// 設定語系
	var _lang = new KALS_language_param(
		"Web Search",
		"web_search"
	);
	
	KALS_context.lang.add_listener(_ui, _lang);
	
	//設定按下去之後的效果
	var _web_search_url = "http://www.google.com/search?q={query}";
	if (typeof(KALS_CONFIG.web_search_url) == "string") {
		_web_search_url = KALS_CONFIG.web_search_url;
	}
	//https://www.google.com.tw/#safe=off&site=&source=hp&q=test&oq=test&gs_l=hp.3..0l10.1094.1687.0.2052.4.4.0.0.0.0.45.155.4.4.0.eqrwrth..0.0.0..1.1.15.hp.rh1WD0sToJU&qscrl=1&bav=on.2,or.r_cp.&bvm=bv.47244034,d.dGI&fp=543fd01eff5ed8d6&biw=950&bih=934
	
	_ui.click(function () {
		//var _query = "test";
		var _query = KALS_text.selection.select.get_anchor_text();
		_query = encodeURI(_query);
		var _url = $.str_replace("{query}", _query, _web_search_url) ;
		
		var _search_win = window.open(_url, '_blank');
	});
	
	_ui.hover(function () {
		$(this).addClass("hover");
	}, function () {
		$(this).removeClass("hover");
	});
	
	return _ui;
};

/* End of file Web_search_component */
/* Location: ./system/application/views/web_apps/Web_search_component.js *//**
 * List_collection
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 07:27:52
 * @extends {JSONP_dispatcher}
 */
function List_collection() {
    
    JSONP_dispatcher.call(this);
    
    this._list_items = [];
    
}

List_collection.prototype = new JSONP_dispatcher();

List_collection.prototype._$load_url = 'annotation_getter/list_annotation';

List_collection.prototype._$name = 'list';

List_collection.prototype.get_name = function () {
    return this._$name;
};

/**
 * 一次讀取的標註數量
 * @type {number|null} 如果是null，表示讀取全部
 */
List_collection.prototype._$limit = 10;

/**
 * 預設讀取的回應標註
 * @type {number|null} 如果是null，表示讀取全部
 */
List_collection.prototype._$respond_limit = 5;

/**
 * 是否排除或只含括登入的該使用者。null表示不限定。
 * 如果在未登入的狀態下設定此項，則永遠會回傳空結果。
 * @type {Boolean|null}
 */
List_collection.prototype._$target_my = null;

/**
 * 是否排除或只含括喜歡的標註。null表示不限定。
 * 如果在未登入的狀態下設定此項，則永遠會回傳空結果。
 * @type {Boolean|null}
 */
List_collection.prototype._$target_like = null;

/**
 * 是否鎖定主題的標註
 * @type {boolean|null}
 */
List_collection.prototype._$target_topic = true;

/**
 * 是否要限定標註的ID。
 * 用於view模式中，觀察單一主題的時候。
 * @type {number|null}
 */
List_collection.prototype._$topic_id = null;

/**
 * 排序方式。選項為預設的'score'或'update'。
 * @type {String}
 */
List_collection.prototype._$order_by = 'score';

/**
 * 排序的方向。
 * @type {string} desc|asc，如果是null，則由系統預設
 */
List_collection.prototype._$direction = null;


/**
 * 回應的排序方向。
 * @type {string} desc|asc，如果是null，則由系統預設
 */
List_collection.prototype._$respond_direction = null;

/**
 * 是否啟用登入檢查
 * @type boolean
 */
List_collection.prototype._$enable_check_login = true;

/**
 * 限定必須是登入或是未登入的狀態
 * @type boolean true=登入; false=未登入
 */
List_collection.prototype._$need_login = false;

// --------
// Private Attributes
// --------

/**
 * 
 * @type {List_item[]}
 */
List_collection.prototype._list_items = [];

/**
 * @type {jQuery}
 */
List_collection.prototype._list_container = null;

/**
 * @type {jQuery}
 */
//List_collection.prototype._load_component = null;

/**
 * 是否已經完全讀取
 * @type {boolean}
 */
List_collection.prototype._totally_loaded = false;

/**
 * @type {Scope_collection_param}
 */
List_collection.prototype._scope_coll = null; 

/**
 * 每次讀取時，都會變更這個offset，以方便下一次load時指定offset
 */
List_collection.prototype._offset = null;


// --------
// UI Methods
// --------

/**
 * Create UI
 * @memberOf {List_collection}
 * @type {jQuery} UI
 */
List_collection.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('list-collection')
        .addClass(this._$name);
    
    var _container = $('<div></div>')
        .addClass('list-container')
        .appendTo(_ui);
    this._list_container = _container;
      
    // 2010.11.5 取消所有_loading_component元件，由上層的Topic_list來判斷即可  
    //var _loading = this._create_loading_component()
    //    .appendTo(_ui);
    
    //if (this._$limit === null
    //    || this.is_totally_loaded() === true)
    //{
    //    _loading.hide();
    //}
        
    return _ui;
};

/**
 * @type {jQuery}
 */
/*
List_collection.prototype._create_loading_component = function() {
    var _ui = jQuery('<div></div>')
        .addClass('loading-component');
    
    var _loading_lang = new KALS_language_param(
        'Now Loading...',
        'list_collection.loading'
    );
    
    KALS_context.lang.add_listener(_ui, _loading_lang);
    
    this._load_component = _ui;
        
    return _ui;
};
*/


/**
 * @param {Boolean|null} _display
 */
/*
List_collection.prototype._toggle_loading = function(_display) {
    if ($.is_null(_display)) {
        _display = (this._load_component.css('display') != 'block');
    }
    
    if (_display === true)
        this._list_container.show();
    else
        this._list_container.hide();
    
    return this;
};
*/

// --------
// Load
// --------

List_collection.prototype._load_lock = false;

List_collection.prototype.load_list = function(_data, _callback) {
    if ($.is_function(_data) && $.is_null(_callback)) {
        _callback = _data;
        _data = null;
    }
    
    var _this = this;
    
    if ($.isset(_data)) {
        if ($.is_class(_data, 'Annotation_param')) {
            var _annotation_param = _data.export_json();
            _data = {
                annotation_collection: [ _annotation_param ],
                totally_loaded: true
            };    
        }
        else if ($.is_class(_data, 'Annotation_collection_param')) {
            var _coll_param = _data.export_json();
            _data = {
                annotation_collection: _coll_param,
                totally_loaded: true
            };
        }
        
        //$.test_msg('List_collection.load_list() has data', _data);
        
        this.setup_load_list(_data, function () {
            $.trigger_callback(_callback);
            _this.notify_listeners(_data);
        });
        return this;
    }
    
    if (this.is_totally_loaded() === true
        || this._check_login() === false) {
        $.trigger_callback(_callback);
        return this;
    }
    
    // 如果有讀取鎖的話，那就不做任何事情
    if (this._load_lock === true) {
        return this;
    }
    
    var _search_data = this.get_search_data();
    
    if ($.isset(_search_data)) {
        //$.test_msg('List_coll.load_list', _search_data);
        
        this._load_lock = true;
        this.load(_search_data, function (_this, _data) {
            _this.setup_load_list(_data, function () {
                $.trigger_callback(_callback);
                _this._load_lock = false;
            });
        });    
    }
    
    return this;
};

/**
 * 取得要搜尋的資料
 * @returns {List_collection}
 */
List_collection.prototype.get_search_data = function () {
    
    var _search_data = {};
    
    //如果有指定target id，則就不需要其他參考資料
    if ($.isset(this._$topic_id)) {
        _search_data.topic_id = this._$topic_id;
        
        if ($.isset(this._$limit)) {
			_search_data.limit = this._$limit;
		}
		
		if ($.isset(this._$respond_limit)) {
            _search_data.respond_limit = this._$respond_limit;
        }
            
        if ($.isset(this._$target_topic)) {
			_search_data.target_topic = this._$target_topic;
		}
        if ($.isset(this._$order_by) && this._$order_by != 'score') {
			_search_data.order_by = this._$order_by;
		}
        
        if ($.isset(this._$direction)) {
            _search_data.direction = this._$direction;
        }
            
        if ($.isset(this._offset)) {
			_search_data.offset = this._offset;
		}
        
        return _search_data;
    }
    
    //一定要有範圍資料！
    if ($.is_null(this._scope_coll)) {
		return null;
	}
    
    _search_data.scope = this._scope_coll.export_json(false);
    
    //需要登入身分的兩個參數
    if (($.isset(this._$target_like) || $.isset(this._$target_my)) &&
	KALS_context.auth.is_login() === false) {
		return null;
	}
    
    if ($.isset(this._$target_like)) {
		_search_data.target_like = this._$target_like;
	}
    if ($.isset(this._$target_my)) {
		_search_data.target_my = this._$target_my;
	}
	
	if ($.isset(this._$respond_limit)) {
        _search_data.respond_limit = this._$respond_limit;
    }
    
    if ($.isset(this._$limit)) {
		_search_data.limit = this._$limit;
	}
    
    if ($.isset(this._$target_topic)) {
		_search_data.target_topic = this._$target_topic;
	}
    if ($.isset(this._$order_by) && this._$order_by != 'score') {
		_search_data.order_by = this._$order_by;
	}
	
	if ($.isset(this._$direction)) {
        _search_data.direction = this._$direction;
    }
        
    if ($.isset(this._offset)) {
		_search_data.offset = this._offset;
	}
    
    return _search_data;
    
};

/**
 * 檢查登入狀態
 * 
 * 如果有設定this._$enable_check_login = false，則會強制回傳true
 * @type boolean
 */
List_collection.prototype._check_login = function () {
    
	if (this._$enable_check_login === false) {
		return true;
	}
	
    //$.test_msg('List_coll._check_login()', [this._$name, this._$need_login, KALS_context.auth.is_login()]);
    
    if ($.isset(this._$need_login) === false) {
		return true;
	}
    
    var _pass = (this._$need_login == KALS_context.auth.is_login());
    if (_pass === false) {
        this._totally_loaded = true;
    } 
    return _pass;
};


List_collection.prototype._check_load_id = false;
List_collection.prototype._load_id = null;
List_collection.prototype._load_id_dispatcher = null;

List_collection.prototype.set_load_id = function (_dispatcher) {
    this._load_id_dispatcher = _dispatcher;
    this._load_id = _dispatcher.get_load_id();
    this._check_load_id = true;
};

List_collection.prototype.check_load_id = function (_load_id) {
    if (this._check_load_id === true) {
		if ($.is_null(_load_id)) {
			return (this._load_id_dispatcher.get_load_id() == this._load_id);
		}
		else {
			return (this._load_id_dispatcher.get_load_id() == _load_id);
		}
	}
	else {
		return true;
	}
};


List_collection.prototype.setup_load_list = function (_data, _callback) {
    
    //$.test_msg('List_coll.setup_load_list()', _data);
    //$.test_msg('List_coll.setup_load_list()', $.is_array(_data.annotation_collection));
    
    if (this._check_login() === false) {
        $.trigger_callback(_callback);
        return this;
    }
    
    var _this = this;
    
    /**
     * 讀取完成的動作
     */
    var _setup_list_complete = function () {
        
        if (typeof(_data.totally_loaded) === 'boolean' 
                && _data.totally_loaded === true) {
            _this._totally_loaded = _data.totally_loaded;
        }

        //_this._ready = true;
        _this._check_load_id = false;
        
        if (_this._set_focus_param !== null) {
            _this.focus(_this._set_focus_param, _this._set_focus_scrollto);
            
            _this._set_focus_param = null;
            _this._set_focus_scrollto = null;
        }
        $.trigger_callback(_callback);
    };
    
    if ($.is_array(_data.annotation_collection)) {
        //要先把_data.annotation_collection轉換成Anntation_collection_param()
        
        var _loop_annotation_complete = function () {
            _this._mark_first();
        
            var _length = _annotation_coll.length();
            
            if (_this._offset === null) {
				_this._offset = 0;
			}
            _this._offset = _this._offset + _length;
            
            //$.test_msg('List_collection.setup_load_list()', 'before complete');
            
            _setup_list_complete();
        };
        
        var _annotation_coll = new Annotation_collection_param(_data.annotation_collection);
        
        /*
        for (var _i = 0; _i < _annotation_coll.length(); _i++) {
            var _param = _annotation_coll.get(_i);
            var _list_item = this.add_list_item(_param);
            
            //if (typeof(_list_item.respond_list) != 'undefined'
            //    && _list_item.respond_list != null)
            //{
            //    //$.test_msg('List_collection.setup_load_list() listen respond list', _param.annotation_id);
            //    _list_item.respond_list.add_listener(function (_respond_list) {
            //        //$.test_msg('List_collection.setup_load_list() _respond_list.is_ready()', _respond_list.is_ready());
            //        if (_respond_list.is_ready())
            //        {
            //            _this.notify_ready();
            //        }
            //    }, true);
            //}
        }
        */
       
        var _load_id = this._load_id;
        var _loop_annotation = function (_i) {
            if (_this.check_load_id(_load_id) === false) {
                //$.test_msg('List_collection.setup_load_list()', 'lost load id');
                return;
            }
            
            if (_i < _annotation_coll.length()) {
                var _param = _annotation_coll.get(_i);
                //var _list_item = _this.add_list_item(_param);

                if (KALS_context.policy.allow_show_navigation() === false) {
                    var _user_name = KALS_context.user.get_name();
                    //$.test_msg("setup_load_list", _param.user);


                    if (_param.user.name === _user_name) {
                            _this.add_list_item(_param);
                    }
                    else if (typeof(_data.total_count) !== "undefined") {
                        // @20130603 Pudding Chen
                        // 有個Bug，我必須要在這邊說清楚
                        // 當列表未顯示，卻又有超過數量的非自己標註時，數字上就會大於0，Bug就會出現
                        // 目前還沒有想法可以解決，先擺著
                        _data.total_count--;
                    }
                }
                else {
                        _this.add_list_item(_param);
                }
                
                
                setTimeout(function () {
                    _i++;
                    _loop_annotation(_i);
                }, 0);
            }
            else {
                _loop_annotation_complete();
            }
        };
        
        _loop_annotation(0);
    }
    else {
        _setup_list_complete();
    }
    
    return this;
};

/**
 * 將設定回歸原始 
 */
List_collection.prototype.reset = function() {
    if ($.isset(this._list_container)) {
		this._list_container.empty();
	}
    this._list_items = [];
    this._offset = null;
    this._totally_loaded = false;
    this._load_lock = false;
    
    this._set_focus_param = null;
    this._set_focus_scrollto = null;
    
    return this;
};

List_collection.prototype.reload = function(_callback) {
    this.reset();
    return this.load_list(_callback);
};

/**
 * 根據this._$target_topic來判斷要建立哪一種物件
 * @param {Annotation_param} _param
 * @type {List_item_topic|List_item_repond|List_item} 
 */
List_collection.prototype.create_list_item = function(_param) {
    if (this._$target_topic === true) {
		return new List_item_topic(_param);
	}
	//else if (this._$target_topic === false)
	//    return new List_item_respond(_param);
	else {
		return new List_item(_param);
	}
};

/**
 * 
 * @param {Boolean} _is_totally
 */
List_collection.prototype._set_is_totally = function(_is_totally) {
    this._totally_loaded = _is_totally;
};

List_collection.prototype.is_totally_loaded = function() {
    return this._totally_loaded;
};

List_collection.prototype.set_topic_id = function(_id) {
    this._$topic_id = _id;
    
    return this;
};

// --------
// Setup List
// --------

/**
 * 新增時從頭新增嗎？
 * @type boolean true=從頭; false=從尾巴
 */
List_collection.prototype._$default_add_item_from_head = false;

/**
 * 
 * @param {Annotation_param} _param
 * @param {Boolean} _from_head = false; 是否從頭加入，或是從尾加入
 */
List_collection.prototype.add_list_item = function(_param, _from_head) {
    var _list_item = this.create_list_item(_param);
    
    if (_list_item !== null) {
        this._list_items.push(_list_item);
        
        var _list_item_ui = _list_item.get_ui();
        
        //if ($.is_null(_from_head) || _from_head === false) {
		
        var _ui = this.get_ui();
		//$.test_msg('add_list_item', _ui.html());
		if (this._$default_add_item_from_head === false) {
			this._list_container.append(_list_item_ui);
        }
        else {
            this._list_container.prepend(_list_item_ui);
        }
        
    }
    return _list_item;
};

List_collection.prototype.set_annotation_collection = function (_coll) {
	
	//$.test_msg('set anno coll', _coll);
	
	if ($.is_class(_coll, 'Annotation_collection_param') === false) {
		return this;
	}
	
	this.reset();
	var _annotations = _coll.get_annotations();
	for (var _i in _annotations) {
		var _annotation = _annotations[_i];
		//$.test_msg('set anno coll', _annotation);
		//$.test_msg('is_null', $.is_null(_annotation));
        if ($.is_null(_annotation) === false) {
            this.add_list_item(_annotation);
		}
	}
	
	return this;
};

List_collection.prototype.editor_add_list_item = function (_param, _from_head) {
    this._set_focus_param = null;
    this._set_focus_scrollto = null;
    return this.add_list_item(_param, _from_head);
};

/**
 * 移除指定的List_item
 * @param {Annotation_param|number} _param
 */
List_collection.prototype.remove_list_item = function (_param) {
    
    var _delete_index;
    for (var _i in this._list_items) {
        var _list_item = this._list_items[_i];
        if (_list_item.equals(_param)) {
            _list_item.remove();
            _delete_index = _i;
            break;
        }
    }
    
    if ($.isset(_delete_index)) {
        this._list_items = $.array_remove(this._list_items, _delete_index);
    }
    return this;
};

/**
 * 找尋指定的List_item
 * @param {Annotation_param|number} _param
 */
List_collection.prototype.get_list_item = function(_param){
	
    //$.test_msg("list count", this.count_list_item());
    //$.test_msg("list get", _param);
    for (var _i in this._list_items) {
        var _list_item = this._list_items[_i];
        if (_list_item.equals(_param)) {
            //_list_item.remove();
            //_delete_index = _i;
            return _list_item;
            //break;
        }
		
        if (typeof(_list_item.respond_list) !== 'undefined') {
            var _respond_list = _list_item.respond_list;
            var _result = _respond_list.get_list_item(_param);
            if (_result !== null) {
                return _result;
            }
        }
    }
    
    return null;
};

/**
 * 取得標註資料集
 * @returns {Annotation_collection_param}
 */
List_collection.prototype.get_annotation_collection_param = function () {
    var _coll = new Annotation_collection_param();
    
    for (var _i in this._list_items) {
        var _list_item = this._list_items[_i];
        var _param = _list_item.get_annotation_param();
        _coll.add(_param);
    }
    
    return _coll;
};

/**
 * 
 * @param {Annotation_param|Number} _param
 * @type {List_item|null} 找不到的話就會回傳null
 */
List_collection.prototype.focus = function(_param, _scrollto) {
    if ($.is_null(_param)) {
		return null;
	}
    
    for (var _i in this._list_items) {
        var _list_item = this._list_items[_i];
        /*
        var _list_id = _list_item.get_annotation_id();
        
        if (_list_id == _annotation_id) {
            var _list_item_ui = _list_item.get_ui();
            
            //讓他focus
            _list_item_ui.attr('scrollIntoView')(true);
            
            return _list_item;
        }
        */
        if (_list_item.equals(_param)) {
            //2010.10.29 這些工作交給List_item.focus()去做
            //var _list_item_ui = _list_item.get_ui();
            
            //讓他focus
            //_list_item_ui.attr('scrollIntoView')(true);
            
            //$.test_msg('List_collection.focus() match item', [_list_item.get_annotation_id(), _scrollto]);
            _list_item.focus(_scrollto);
            
            return _list_item;
        }
        else if (typeof(_list_item.respond_list) != 'undefined'
            && _list_item.respond_list !== null) {
            //$.test_msg('List_collection.focus() has respond list', _list_item.get_annotation_id());
            var _result = _list_item.respond_list.focus(_param, _scrollto);
            if (_result !== null) {
				return _result;
			}
        }
		
    }
    
    //如果到最後都沒找到的話
    return null;
};

List_collection.prototype._set_focus_param = null;
List_collection.prototype._set_focus_scrollto = null;

List_collection.prototype.set_focus = function(_param, _scroll_to) {
    this._set_focus_param = _param;
    this._set_focus_scrollto = _scroll_to;
};

List_collection.prototype.set_scope_coll = function (_scope_coll) {
    this._scope_coll = _scope_coll;
    return this;
};

List_collection.prototype.count_list_item = function () {
    if (this._list_items === null) {
		return 0;
	}
	else {
		return this._list_items.length;
	}
};

List_collection.prototype._is_marked_first = false;

List_collection.prototype._mark_first = function () {
    if (this._is_marked_first === true) {
		return this;
	}
    
    if (this._list_items.length > 0) {
        var _list_item = this._list_items[0];
        _list_item.get_ui().addClass('first');
        this._is_marked_first = true;    
    }   
    return this; 
};

/**
 * @deprecated
 */
//List_collection.prototype._ready = false;

/**
 * @deprecated
 */
/*
List_collection.prototype.is_ready = function () {
    if (this._ready === false)
        return false;
    
    for (var _i in this._list_items) {
        if (this._list_items[_i].is_ready() === false)
            return false;
    }
    
    return true;
};
*/

/**
 * @deprecated
 */
/*
List_collection.prototype.notify_ready = function () {
    this._ready = true;
    return this.notify_listeners();
};
*/

/**
 * 編輯中的標註
 * @type {Annotation_param}
 */
List_collection.prototype._editing_param = null;

/**
 * 設為編輯對象
 * @param {Object} _editing_param
 */
List_collection.prototype.set_editing_param = function (_editing_param) {
    this._editing_param = _editing_param;
};

/* End of file List_collection */
/* Location: ./system/application/views/web_apps/List_collection.js *//**
 * List_collection_like
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 09:03:09
 * @extends {List_collection}
 */
function List_collection_like() {
    
    List_collection.call(this);
    
}

List_collection_like.prototype = new List_collection();

List_collection_like.prototype._$name = 'like';

List_collection_like.prototype._$target_like = true;

List_collection_like.prototype._$limit = null;

List_collection_like.prototype._$target_topic = true;

List_collection_like.prototype._$target_my = false;

List_collection_like.prototype._$enable_check_login = true;

List_collection_like.prototype._$need_login = true;

/* End of file List_collection_like */
/* Location: ./system/application/views/web_apps/List_collection_like.js *//**
 * List_collection_my
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 09:03:09
 * @extends {List_collection}
 */
function List_collection_my() {
    
    List_collection.call(this);
    
}

List_collection_my.prototype = new List_collection();

List_collection_my.prototype._$name = 'my';

List_collection_my.prototype._$target_my = true;

List_collection_my.prototype._$limit = null;

List_collection_my.prototype._$order_by = 'create';

List_collection_my.prototype._$enable_check_login = true;

List_collection_my.prototype._$need_login = true;

/**
 * 新增時從頭新增嗎？
 * @type boolean true=從頭; false=從尾巴
 */
List_collection_my.prototype._$default_add_item_from_head = true;

/* End of file List_collection_my */
/* Location: ./system/application/views/web_apps/List_collection_my.js *//**
 * List_collection_other
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 09:03:09
 * @extends {List_collection}
 */
function List_collection_other() {
    
    List_collection.call(this);
    
}

List_collection_other.prototype = new List_collection();

List_collection_other.prototype._$name = 'other';

List_collection_other.prototype._$target_my = false;

List_collection_other.prototype._$target_like = false;

List_collection_other.prototype._$enable_check_login = true;

List_collection_other.prototype._$need_login = true;

/* End of file List_collection_other */
/* Location: ./system/application/views/web_apps/List_collection_other.js *//**
 * List_collection_anonymous
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 09:03:09
 * @extends {List_collection}
 */
function List_collection_anonymous() {
    
    List_collection.call(this);
    
}

List_collection_anonymous.prototype = new List_collection();

List_collection_anonymous.prototype._$name = 'anonymous';

List_collection_anonymous.prototype._$enable_check_login = true;

List_collection_anonymous.prototype._$need_login = false;

/* End of file List_collection_anonymous */
/* Location: ./system/application/views/web_apps/List_collection_anonymous.js *//**
 * Respond_list_collection
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/8 下午 03:19:55
 * @extends {List_collection}
 * @param {List_item_topic} _topic_item
 */
function Respond_list_collection(_topic_item) {
    
    List_collection.call(this);
    
    this._set_topic_item(_topic_item);
    //$.test_msg('Respond_list_collection()');
}

Respond_list_collection.prototype = new List_collection();

/**
 * @type {List_item_topic}
 */
Respond_list_collection.prototype._topic_item = null;

/**
 * @param {List_item_topic} _topic_item
 */
Respond_list_collection.prototype._set_topic_item = function (_topic_item) {
    if ($.isset(_topic_item)) {
        this._topic_item = _topic_item;
        
        this._$topic_id = _topic_item.get_annotation_id();
    }
    return this;
};

Respond_list_collection.prototype._$limit = 5;

Respond_list_collection.prototype._$target_topic = false;

Respond_list_collection.prototype._$order_by = 'create';

Respond_list_collection.prototype._$topic_id = null;

Respond_list_collection.prototype._$enable_check_login = false;

// --------
// UI
// --------

Respond_list_collection.prototype._$create_ui = function () {
    var _ui = List_collection.prototype._$create_ui.call(this);
    
    _ui.addClass('respond-list-collection');
    
	var _skip = this._create_skip_component();
    _skip.prependTo(_ui);
	
    var _view = this._create_view_component();
    _view.appendTo(_ui);
    
    return _ui;
};

/**
 * 檢視全部回應
 * @type {jQuery}
 */
Respond_list_collection.prototype._view_component = null;

Respond_list_collection.prototype._create_view_component = function () {
    var _component = $('<div></div>')
        .addClass('view-component');
    
	var _message = $('<span></span>')
	   .addClass("message")
	   .appendTo(_component);
	
    var _msg1 = $('<span></span>')
        .appendTo(_message);
    
    var _lang1 = new KALS_language_param(
        'View All ',
        'respond_list_collection.view_thread.1'
    );
    
    KALS_context.lang.add_listener(_msg1, _lang1);
    
    var _count = $('<span></span>')
        .addClass('respond-count')
        .appendTo(_message);
    
    var _msg2 = $('<span></span>')
        .appendTo(_message);
    
    var _lang2 = new KALS_language_param(
        ' messages',
        'respond_list_collection.view_thread.2'
    );
    
    KALS_context.lang.add_listener(_msg2, _lang2);
    
    _component.hide();
    
    var _topic_item = this._topic_item;
    _component.click(function () {
        _topic_item.view_thread();
    });
    
    _component.setup_hover();
    
    this._view_component = _component;
    return _component;
};

/**
 * 設定全部回應的數量
 * @param {number} _respond_count
 */
Respond_list_collection.prototype._set_respond_count = function (_respond_count) {
    
    var _item_count = this.count_list_item();
    
    if (_respond_count > _item_count) {
        this._view_component.find('.respond-count:first').html(_respond_count);    
        this._view_component.show();
		
	    var _skip_count = _respond_count - this._$limit;
	    this._set_skip_count(_skip_count);
    }
    else {
        this._view_component.hide();
    }
	
    return this;
};

// --------------------------------------------------

/**
 * 省略回應
 * @type {jQuery}
 */
Respond_list_collection.prototype._skip_component = null;

/**
 * 建立省略的元件
 */
Respond_list_collection.prototype._create_skip_component = function () {
    var _component = $('<div></div>')
        .addClass('skip-component');
    
    var _message = $('<span></span>')
       .addClass("message")
       .appendTo(_component);
	   
    var _msg1 = $('<span></span>')
        .appendTo(_message);
    
    var _lang1 = new KALS_language_param(
        'Skip ',
        'respond_list_collection.skip_message.1'
    );
    
    KALS_context.lang.add_listener(_msg1, _lang1);
    
    var _count = $('<span></span>')
        .addClass('skip-count')
        .appendTo(_message);
    
    var _msg2 = $('<span></span>')
        .appendTo(_message);
    
    var _lang2 = new KALS_language_param(
        ' messages',
        'respond_list_collection.view_thread.2'
    );
    
    KALS_context.lang.add_listener(_msg2, _lang2);
    
    _component.hide();
    
    var _topic_item = this._topic_item;
    _component.click(function () {
        _topic_item.view_thread();
    });
    
    _component.setup_hover();
    
    this._skip_component = _component;
    return _component;
};

/**
 * 設定省略回應的數量
 * @param {number} _respond_count
 */
Respond_list_collection.prototype._set_skip_count = function (_skip_count) {
    
    if (_skip_count > 0) {
        this._skip_component.find('.skip-count:first').html(_skip_count);    
        this._skip_component.show();
    }
    else {
        this._skip_component.hide();
    }
    
    return this;
};

// ------------------------

Respond_list_collection.prototype.get_search_data = function () {
    var _data = List_collection.prototype.get_search_data.call(this);
    
    _data.show_total_count = true;
    
    //$.test_msg('Respond_list_collection.get_search_data()', _data);
    
    return _data;
};

Respond_list_collection.prototype.setup_load_list = function (_data, _callback) {
    
    var _this = this;
    List_collection.prototype.setup_load_list.call(this, _data, function () {
        var _respond_count = _data.total_count;
        if (_respond_count === 0) {
            _this.hide();
        }
        else {
            _this._set_respond_count(_respond_count);
        }
        
        //_this.notify_ready();    
        $.trigger_callback(_callback);
    });
    
    return this;
};

Respond_list_collection.prototype.create_list_item = function(_param) {
    return new List_item_respond(_param, this._topic_item);
};

Respond_list_collection.prototype.hide = function () {
    var _ui = this.get_ui();
    _ui.hide();
    return this;
};

/**
 * 新增時從頭新增嗎？
 * @type boolean
 */
Respond_list_collection.prototype._$default_add_item_from_head = true;

/*
Respond_list_collection.prototype.is_ready = function () {
    return this._ready;
};
*/

/* End of file Respond_list_collection */
/* Location: ./system/application/views/web_apps/Respond_list_collection.js *//**
 * Topic_list
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 08:51:16
 * @extends {Event_dispatcher}
 */
function Topic_list() {
    
    Event_dispatcher.call(this);
    this._list_colls = [];
}

Topic_list.prototype = new Event_dispatcher();

/**
 * @type {List_collection[]}
 */
Topic_list.prototype._list_colls = [];

/**
 * @type {List_collection_my}
 */
Topic_list.prototype.my = null;

/**
 * Create UI
 * @memberOf {Topic_list}
 * @type {jQuery} UI
 */
Topic_list.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('topic-list');
    
    var _loading = this._create_loading_component();
    _loading.appendTo(_ui);
    
    var _my = new List_collection_my();
    _my.get_ui().appendTo(_ui);
    this._list_colls.push(_my);
    this.child('my', _my);
    
    var _like = new List_collection_like();
	var _like_ui = _like.get_ui();
    _like_ui.appendTo(_ui);
    this._list_colls.push(_like);
    
    var _other = new List_collection_other();
	var _other_ui = _other.get_ui();
    _other_ui.appendTo(_ui);
    this._list_colls.push(_other);
	
    var _anonymous = new List_collection_anonymous();
	var _anonymous_ui = _anonymous.get_ui(); 
    _anonymous_ui.appendTo(_ui);
    this._list_colls.push(_anonymous);
    
	// @20130603 Pudding Chen
	// Isolation Mode
	if (KALS_context.policy.allow_show_navigation() === false) {
		_like_ui.hide();
		_other_ui.hide();
		_anonymous_ui.hide();
	}
	
    var _blank = this._create_blank_component();
    _blank.appendTo(_ui);
    
    var _complete = this._create_complete_component();
    _complete.appendTo(_ui);
    
    var _this = this;
    
    var _endless_scroll_callback = function (p) {
        if (_this.is_totally_loaded() === false) {
            if (_this.is_loading() === false) {
                clearTimeout(_this._endless_scroll_timer);
                _this._endless_scroll_timer = null;
                
                _this.load_list();
            }
            else {
                _this._endless_scroll_timer = setTimeout(_endless_scroll_callback, 3000);
            }
        }
        else {
            clearTimeout(_this._endless_scroll_timer);
            _this._endless_scroll_timer = null;
        }   
    };
    
    _ui.endlessScroll({
        bottomPixels: 50,
        fireOnce: false,
        fireDelay: false,
        callback: _endless_scroll_callback 
    });
    
    return _ui;
};

Topic_list.prototype._endless_scroll_timer = null;

// --------
// UI Components
// --------

Topic_list.prototype._loading_component = null;

Topic_list.prototype._create_loading_component = function () {
    var _ui = $('<div></div>')
        .addClass('topic-list-loading');
        
    var _lang = new KALS_language_param(
        'NOW LOADING',
        'list_collection.loading'
    );
    
    KALS_context.lang.add_listener(_ui, _lang);
    
    this._loading_component = _ui;
    
    return _ui;
};

Topic_list.prototype._toggle_loading = function (_is_loading, _callback) {
    
    var _loading_classname = 'loading';
    var _ui = this.get_ui();
    
    if ($.is_null(_is_loading)) {
		_is_loading = !(_ui.hasClass(_loading_classname));
	}
        
    if (_is_loading === true) {
		_ui.addClass(_loading_classname);
	}
	else {
		this._loading_component.slideUp(function(){
			$(this).removeAttr('style');
			_ui.removeClass(_loading_classname);
			$.trigger_callback(_callback);
		});
	}        
    
    return this;
};

Topic_list.prototype.is_loading = function () {
    var _loading_classname = 'loading';
    var _ui = this.get_ui();
    return _ui.hasClass(_loading_classname);
};

Topic_list.prototype._complete_component = null;

Topic_list.prototype._create_complete_component = function () {
    var _ui = $('<div></div>')
        .addClass('topic-list-complete');
        
    var _lang = new KALS_language_param(
        'THERE IS ALL.',
        'list_collection.complete'
    );
    
    KALS_context.lang.add_listener(_ui, _lang);
    
    this._complete_component = _ui;
        
    return _ui;
};

Topic_list.prototype._toggle_complete = function (_is_complete) {
    
    var _classname = 'complete';
    var _ui = this.get_ui();
    
    if ($.is_null(_is_complete)) {
		_is_complete = !(_ui.hasClass(_classname));
	}
        
    if (_is_complete === true) {
        this._complete_component.hide();
        _ui.addClass(_classname);
        this._complete_component.fadeIn('fast', function () {
            $(this).removeAttr('style');
        });
        
    }   
    else {
        _ui.removeClass(_classname);
    }   
    
    return this;
};

Topic_list.prototype._blank_component = null;

Topic_list.prototype._create_blank_component = function () {
    var _ui = $('<div></div>')
        .addClass('topic-list-blank');
        
    var _lang = new KALS_language_param(
        'There is no annotation.',
        'list_collection.blank'
    );
    
    KALS_context.lang.add_listener(_ui, _lang);
    
    this._blank_component = _ui;
    
    return _ui;
};

Topic_list.prototype._toggle_blank = function (_is_blank) {
    
    var _classname = 'blank';
    var _ui = this.get_ui();
    
    if ($.is_null(_is_blank)) {
		_is_blank = !(_ui.hasClass(_classname));
	}
        
    if (_is_blank === true) {
		this._blank_component.hide();
		_ui.addClass(_classname);
		this._blank_component.fadeIn('fast', function(){
			$(this).removeAttr('style');
		});
	}
	else {
		_ui.removeClass(_classname);
	}
    
    return this;
};

Topic_list.prototype.is_totally_loaded = function () {
    for (var _i in this._list_colls) {
        var _coll = this._list_colls[_i];
        if (_coll.is_totally_loaded() === false) {
            //$.test_msg(_coll._$name);
            return false;
        }
    }
    return true;
};

// --------
// Methods
// --------

/**
 * 
 * @param {Annotation_param|Number} _param
 * @type {List_item}
 */
Topic_list.prototype.focus = function(_param, _scollto) {
    this.reset_focus();
    
    //$.test_msg('Topic_list.focus()', [_scollto, this.is_overflow()]);
    if (this.is_overflow() === false) {
		_scollto = false;
	}
    
    var _list_item;
    for (var _i in this._list_colls) {
        var _list_coll = this._list_colls[_i];
        
        /*
        _list_coll.add_once_listener(function (_list_coll) {
            var _list_item = _list_coll.focus(_param);
            
            if ($.is_function(_callback)) {
                _callback(_list_item);
            }
        });
        */
        _list_item = _list_coll.focus(_param, _scollto);
        if ($.isset(_list_item)) {
            //_callback(_list_item);
            //return this;
            return _list_item;
        }
    }
    //如果到最後都沒找到的話
    return null;
};

Topic_list.prototype._set_focus_param = null;
Topic_list.prototype._set_focus_scrollto = null;
Topic_list.prototype._set_focus_callback = null;

Topic_list.prototype.set_focus = function(_param, _scroll_to, _callback) {
    this._set_focus_param = _param;
    this._set_focus_scrollto = _scroll_to;
    this._set_focus_callback = _callback;
};

Topic_list.prototype.reset_focus = function() {
    //$.test_msg('Topic_list.reset_focus()');
    this._set_focus_param = null;
    this._set_focus_scrollto = null;
    this._set_focus_callback = null;
};

/**
 * 
 * @param {Annotation} _param
 * @param {String} _name
 */
Topic_list.prototype.move = function(_param, _name) {
    for (var _i in this._list_colls) {
        var _list_coll = this._list_colls[_i];
        var _list_coll_name = _list_coll.get_name();
        
        if (_list_coll_name == _name) {
            _list_coll.add_list_item(_param, true);
        }
        else {
            _list_coll.remove_list_item(_param);
        }
    }
};

/**
 * 設定範圍
 * @param {Scope_collection_param} _scope_coll
 */
Topic_list.prototype.set_scope_coll = function (_scope_coll) {
    for (var _i in this._list_colls) {
        var _list_coll = this._list_colls[_i];
        _list_coll.set_scope_coll(_scope_coll);
    }
    return this;
};

Topic_list.prototype.reset = function () {
	//$.test_msg('Topic_list_reset()', window.location.hash);
	
    KALS_text.selection.select.clear();
    KALS_text.selection.view.clear();
    
    this._first_load = true;
    this._toggle_blank(false);
    this._toggle_loading(true);
    this._toggle_complete(false);
    this._reset_load_id();
    
    this._set_focus_param = null;
    this._set_focus_scrollto = null;
    
    for (var _i in this._list_colls) {
        var _list_coll = this._list_colls[_i];
        _list_coll.reset();
    }
    return this;
};

/**
 * Reload是保留tool原本的位置，直接讀取標註的內容
 */
Topic_list.prototype.reload = function (_callback) {
    this._toggle_blank(false);
    this._toggle_loading(true);
    this._toggle_complete(false);
    
    /*
    for (var _i in this._list_colls) {
        var _coll = this._list_colls[_i];
        _coll.reload();
    }
    */
    for (var _i in this._list_colls) {
        var _list_coll = this._list_colls[_i];
        _list_coll.reset();
    }
    
    this.load_list(_callback);
    
    return this;
};


// --------
// Load
// --------

Topic_list.prototype._first_load = true;

Topic_list.prototype._load_id = null;

Topic_list.prototype.get_load_id = function () {
    return this._load_id;
};
Topic_list.prototype._reset_load_id = function () {
    this._load_id = null;
    return this;
};

Topic_list.prototype.load_list = function (_callback) {
    
    if (this._first_load === true) {
        this._toggle_blank(false);
        this._toggle_loading(true);
    }
    
    // 2010.11.11 改用一個load一個的作法
    /*
    var _count = 0;
    var _limit = this._list_colls.length - 1;
    
    var _this = this;
    var _call_complete = function () {
        _count++;
        
        if (_count == _limit
            || _count > _limit) {
            _this._first_load = false;
            
            _this._load_list_complete(_callback);
        }
    };
    
    for (var _i in this._list_colls) {
        var _list_coll = this._list_colls[_i];
        _list_coll.load_list(function () {
            _call_complete();
        });
    }
    */
    
    this._load_id = $.create_id();
    //$.test_msg('Topic_list.load_list() set load id', this._load_id);
    var _this = this;
    var _loop = function (_i, _load_id) {
        //$.test_msg('Topic_list.load_list()', [_load_id, _this._load_id]);
        if (_load_id != _this._load_id || _this._load_id === null) {
			return;
		}
        
        if (_i < _this._list_colls.length) {
            var _coll = _this._list_colls[_i];
            _coll.set_load_id(_this); 
            _coll.load_list(function () {
                setTimeout(function () {
                    _i++;
                    _loop(_i, _load_id);
                }, 0);
            });
        }
        else {
            _this._load_list_complete(_callback);
        }
    };
    _loop(0, this._load_id);
   
    return this;
};

Topic_list.prototype._load_list_complete = function (_callback) {
    //自動重新讀取，避免endless scroll無法觸發的情況
    if (this.is_overflow() === false && this.is_totally_loaded() === false) {
        this.load_list(_callback);
    }
    else {
        var _this = this;
        setTimeout(function() {
            if (_this.has_list_item() === false) {
				_this._toggle_blank(true);
			}
            
            //$.test_msg([_this.has_list_item() , _this.is_totally_loaded()]);
            
            if (_this.has_list_item() && _this.is_totally_loaded()) {
				_this._toggle_complete(true);
			}
            
            _this.check_editing();
            _this._toggle_loading(false, function () {
                
                //$.test_msg('Topic_list._load_list_complete()', _this._set_focus_param);
                
                if (_this._set_focus_param !== null) {
                    
                    var _item = _this.focus(_this._set_focus_param, _this._set_focus_scrollto);
                    if ($.is_function(_this._set_focus_callback)) {
                        _this._set_focus_callback(_item);
                    }
                    
                    _this.reset_focus();
                }
                
                $.trigger_callback(_callback);
                _this.notify_listeners();    
                
            });
            
        }, 1000);
    }
};

/**
 * @param {Annotation_param} _param
 */
Topic_list.prototype.add_list_item = function (_param, _scrollto) {
    
    this._set_focus_param = null;
    this._set_focus_scrollto = null;
    
    if ($.is_null(_scrollto)) {
		_scrollto = true;
	}
    
    this._toggle_blank(false);
    
    //加在List_collection_my的範圍
    var _item = this.my.add_list_item(_param, true);
    
    if (_scrollto === true) {
		this.my.focus(_param, true);
	}
    return _item;
};

Topic_list.prototype.editor_add_list_item = function (_param) {
    return this.add_list_item(_param, false);
};

Topic_list.prototype.is_overflow = function () {
    
    var _max_height = this.get_ui().css('max-height');
    _max_height = $.strip_unit(_max_height);
    
    var _colls_height = 0;
    
    for (var _i in this._list_colls) {
        var _coll = this._list_colls[_i];
        var _coll_height = _coll.get_ui().height();
        _colls_height = _colls_height + _coll_height;
    }
    
    //$.test_msg('Topic_list.is_overflow()', [_colls_height, _max_height, (_colls_height < _max_height || _colls_height == _max_height)]);
    
    if (_colls_height < _max_height ||
	_colls_height == _max_height) {
		return false;
	}
	else {
		return true;
	}
    
};

Topic_list.prototype.has_list_item = function () {
    return (this.count_list_item() > 0);
};

Topic_list.prototype.count_list_item = function () {
    var _count = 0;
    
    for (var _i in this._list_colls) {
        var _coll = this._list_colls[_i];
        var _coll_count = _coll.count_list_item();
        _count = _count + _coll_count;
    }
    
    return _count;
};

/**
 * 編輯中的標註
 * @type {Annotation_param}
 */
Topic_list.prototype._editing_param = null;

/**
 * 設為編輯對象
 * @param {Object} _editing_param
 */
Topic_list.prototype.set_editing_param = function (_editing_param) {
    this._editing_param = _editing_param;
    KALS_text.tool.editor_container.toggle_loading(true);
};

Topic_list.prototype.check_editing = function () {
    
    if ($.isset(this._editing_param)) {
        var _list_item = this.focus(this._editing_param, false);
        
        if ($.isset(_list_item)) {
            _list_item.edit_annotation();
            KALS_text.tool.editor_container.toggle_loading(false);
        }
        
        this._editing_param = null;
    }
    return this;
    
};

/* End of file Topic_list */
/* Location: ./system/application/views/web_apps/Topic_list.js *//**
 * List_timestamp_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 05:03:49
 * @extends {KALS_user_interface}
 * @param {List_item} _item
 */
function List_timestamp_component(_item, _full_display) {
    
    KALS_user_interface.call(this);
    
    if ($.isset(_item)) {
		this._item = _item;
	}
	
	if ($.is_boolean(_full_display)) {
		this.full_display = _full_display;
	}
}

// Extend from KALS_user_interface
List_timestamp_component.prototype = new KALS_user_interface();

/**
 * @type {List_item}
 */
List_timestamp_component.prototype._item = null;

/**
 * 是否要顯示完整日期
 * @type {boolean} = false，預設顯示相對日期
 */
List_timestamp_component.prototype.full_display = false;

/**
 * Create UI
 * @memberOf {List_timestamp_component}
 * @type {jQuery} UI
 */
List_timestamp_component.prototype._$create_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-timestamp-component');
    
    var _this = this;
    setTimeout(function () {
        _this.set_timestamp();
    }, 0);    
    
    return _ui;
};

List_timestamp_component.prototype.set_timestamp = function (_timestamp) {
    
    if ($.is_null(_timestamp)) {
        _timestamp = this._item.get_data().timestamp;
    }
    
    var _until_time = $.get_interval_time(_timestamp);
    
	var _message = KALS_context.lang.get_fulldate(_timestamp);
	if (this.full_display === false) {
		_message = KALS_context.lang.get_interval_message(_timestamp);
	}
	
    
    var _ui = this.get_ui();
    _ui.html(_message);
    
    return this;
};


/* End of file List_timestamp_component */
/* Location: ./system/application/views/web_apps/List_timestamp_component.js *//**
 * List_menu
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 05:03:09
 * @extends {Tooltip_modal}
 * @param {List_item} _item
 * @param {String[]} _disable_option
 */
function List_menu(_item, _disable_option) {
    
    Tooltip_modal.call(this);
    
    this._set_list_item(_item, _disable_option);
}

List_menu.prototype = new Tooltip_modal();

// --------
// List Item
// --------

/**
 * @type {List_item}
 */
List_menu.prototype._item = null;

List_menu.prototype._disable_option = [];

List_menu.prototype._set_list_item = function (_item, _disable_option) {
    if ($.isset(_item))
    {
        var _this = this;
        
        this._item = _item;
        this._item.add_listener('set', function (_item) {
            _this.set_data();
        });
        
        this._disable_option = _disable_option;
    }
    return this;
};

List_menu.prototype.set_data = function () {
    this._toggle_is_my();
    this._listen_auth();
};

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {List_menu}
 * @type {jQuery} UI
 */
List_menu.prototype._$create_ui = function ()
{
    var _writable = KALS_context.policy.writable();
    
    var _ui = $('<div><table cellpadding="0" cellspacing="0" align="right"><tbody><tr></tr></tbody></table><span>&nbsp;</span></div>')
        .addClass('list-menu')
        .addClass(this._not_login_classname);
    
    var _tr = _ui.find('tr:first');
    
    if (this.is_enable('edit') && _writable === true) {
        var _edit = this._create_edit_ui();
        _edit.appendTo(_tr);
    }
    
    if (this.is_enable('delete') && _writable === true) {
        var _delete = this._create_delete_ui();
        _delete.appendTo(_tr);
    }
    
    if (this.is_enable('respond') && _writable === true) {
        var _respond = this._create_respond_ui();
        _respond.appendTo(_tr);    
    }
    
    //$.test_msg('List_menu._$create_ui() this._enable_view_thread', this._enable_view_thread);
    //if (this._enable_view_thread == true)
    if (this.is_enable('view')) {
        var _view = this._create_view_ui();
        _view.appendTo(_tr);    
    }
    if (this.is_enable('review')) {
        var _review = this._create_review_ui();
        _review.appendTo(_tr);    
    }
    
    if (this.is_enable('select')) {
        if (KALS_text.selection.select.equals(this._item.get_scope_coll()) === false) {
            var _select = this._create_select_ui();
            _select.appendTo(_tr);    
        }   
    }
    
    var _timestamp = this._setup_timestamp();
    _timestamp.get_ui().prependTo(_tr);
    
    return _ui;
};

List_menu.prototype.is_enable = function (_option_name) {
    if (_option_name === undefined || _option_name === null || this._disable_option === null || this._disable_option === undefined || this._disable_option.length === 0) {
        return true;
    }
    else {
        return ($.inArray(_option_name, this._disable_option) === -1);
    }
};

// --------
// List_timestamp_component
// --------

/**
 * @type {List_timestamp_component}
 */
List_menu.prototype.timestamp = null;
List_menu.prototype.timestamp_full_dispaly = false;

List_menu.prototype._setup_timestamp = function () {
    var _component = new List_timestamp_component(this._item, this.timestamp_full_dispaly);
    this.child('timestamp', _component);
    return _component;
};

// -------
// Other UI
// -------

List_menu.prototype._create_edit_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-menu-option')
        .addClass('edit');
        
    var _lang = new KALS_language_param(
        'EDIT',
        'list_menu.edit'
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
    _ui.click(function (_e) {
        _this.edit_annotation();
        _this.close();
        _e.preventDefault();
        return false;
    });
    
    _ui.setup_hover();
    
    return _ui;
};

List_menu.prototype._create_delete_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-menu-option')
        .addClass('delete');
        
    var _lang = new KALS_language_param(
        'DELETE',
        'list_menu.delete'
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
    _ui.click(function (_e) {
        _this.delete_annotation();
        _e.preventDefault();
        return false;
    });
    
    _ui.setup_hover();
    
    return _ui;
};

List_menu.prototype._create_respond_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-menu-option')
        .addClass('respond');
        
    var _lang = new KALS_language_param(
        'RESPOND',
        'list_menu.respond'
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
    _ui.click(function () {
        _this.respond_annotation();
    });
    
    _ui.setup_hover();
    
    this.child("respond", _ui);
    
    return _ui;
};

List_menu.prototype._create_view_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-menu-option')
        .addClass('view');
        
    var _lang = new KALS_language_param(
        'VIEW',
        'list_menu.view'
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
    _ui.click(function () {
        //_this.view_thread();
        _this.respond_annotation();
    });
    
    _ui.setup_hover();
    
    this.child("view", _ui);
    
    return _ui;
};

List_menu.prototype._create_review_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-menu-option')
        .addClass('review');
        
    var _lang = new KALS_language_param(
        'REVIEW',
        'list_menu.review'
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
    _ui.click(function () {
        $.test_msg("click review_ui");
        _this.view_thread();
    });
    
    _ui.setup_hover();
    
    return _ui;
};

/**
 * 選擇位置的按鈕
 * @author 20131115 Pulipuli Chen
 */
List_menu.prototype._create_select_ui = function () {
    var _ui = $('<td></td>')
        .addClass('list-menu-option')
        .addClass('select');
        
    var _lang = new KALS_language_param (
        'SELECT',
        'list_menu.select'
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
    _ui.click(function () {
        _this.select();
    });
    
    _ui.setup_hover();
    
    return _ui;
};


// --------
// Get Data Methods
// --------

/**
 * @type {Annotation_editor}
 */
List_menu.prototype.get_editor = function () {
    //return KALS_text.tool.editor_container.editor;
    return this._item.get_editor();
};

/**
 * 取得標註的ID
 * @returns {Number}
 */
List_menu.prototype.get_annotation_id = function () {
    return this._item.get_data().annotation_id;
};


/**
 * 取得標註參數
 * @returns {Annotation_param}
 */
List_menu.prototype.get_annotation_param = function () {
    return this._item.get_data();
};

/**
 * 顯示討論視窗
 * @param {function} _callback
 */
List_menu.prototype.view_thread = function (_callback) {
    if ($.isset(this._item)) {
        // @20130604 Pudding Chen
        // 不知道為什麼關掉這串就會恢復正常
        this._item.view_thread(_callback);
        this.close();
    }   
    return this;
};

/**
 * 選擇標註所在的指定位置
 * @param {function} _callback
 */
List_menu.prototype.select = function (_callback) {
    if ($.isset(this._item))
    {
        this._item.select(_callback);
        this.close();
    }   
    return this;
};

List_menu.prototype.get_topic_id = function () {
    return this._item.get_topic_id();
};

List_menu.prototype.is_my_annotation = function () {
    return this._item.get_data().is_my_annotation();
};


// --------
// Public Methods
// --------

List_menu.prototype.edit_annotation = function () {
    this._item.edit_annotation();
    return this;
};

List_menu.prototype.respond_annotation = function () {
    
    this._item.respond_annotation();
    
    return this;
};

// --------
// Delete Method
// --------

List_menu.prototype._delete_url = 'annotation_setter/delete';

List_menu.prototype._delete_lock = false;


/**
 * 刪除標註
 * @returns {List_menu}
 */
List_menu.prototype.delete_annotation = function () {
    
    if (this.is_loading() === true) {
        return this;
    }
    
    var _annotation_id = this.get_annotation_id();
    var _annotation_param = this.get_annotation_param();
    
    if ($.is_null(_annotation_id)) {
        return this;
    }
        
    var _this = this;
    
    var _callback = function (_data) {
        //回傳的資料是重新讀取的my annotation範圍，回傳資料的形態請參考annotation_getter/my
        if (_data !== false) {   //如果是錯誤的狀況，才會回傳false
            
            //因為範圍改變了，所以需要重新讀取
            KALS_text.load_my.reload(_data, function () {
                _this._item.remove();
                
                //$.test_msg('Item remove()');
                
                var _lang = new KALS_language_param(
                    'Annotation is deleted.',
                    'list_menu.delete_complete'
                );
                KALS_util.notify(_lang);
                
                _this._toggle_loading(false);
                
                var _editor = _this.get_editor();
                if ($.isset(_editor._editing_param)
                    && _editor._editing_param.annotation_id === _annotation_id)
                {
                    _editor.reset();
                }
            });
            
            if (typeof(_data.nav) !== 'undefined') {
                var _nav_data = _data.nav;
                if (KALS_context.user.get_anchor_navigation_type() === 'all') {
                    KALS_text.load_navigation.reload(_nav_data);
                }
            }
            
            // 設定計數
            _this._set_anntation_count_reduce(_annotation_param);
        }
    };
    
    var _config = {
        data: _annotation_id,
        url: this._delete_url,
        callback: _callback
    };
    
    this._toggle_loading(true);
    
    //_callback({}); return;
    
    KALS_util.ajax_get(_config);
    return this;
};

/**
 * 減少Context_user的標註次數
 * @param {Annotation_param} _annotation_param
 * @returns {List_menu}
 */
List_menu.prototype._set_anntation_count_reduce = function (_annotation_param) {
    
    // ------------------------
    // 加入Context_user的計數
    /*
    var _is_respond = _annotation_param.is_respond();
    var _annotation_type_param = _annotation_param.type;
    if (_is_respond === false) {
        //$.test_msg("create callback", _annotation_type_param);
        KALS_context.user.set_topic_annotation_count_reduce(_annotation_type_param);
    } 
    else {
        var _topic_annotation_param = _annotation_param.topic;
        var _is_my_topic = _topic_annotation_param.is_my_annotation();
        
        if (_is_my_topic) {
            KALS_context.user.set_respond_to_my_annotation_count_reduce(_annotation_type_param);
        }
        else {
            KALS_context.user.set_respond_to_other_annotation_count_reduce(_annotation_type_param);
        }
    }
    */
    KALS_context.user.set_annotation_count_reduce_by_param(_annotation_param);
    return this;
};

// --------
// My & Login
// --------

List_menu.prototype._is_my_classname = 'is-my';

List_menu.prototype._toggle_is_my = function (_is_my) {
    
    if ($.is_null(_is_my))
    {
        _is_my = this.is_my_annotation();
    }
    
    var _ui = this.get_ui();
    if (_is_my === true)
    {
        _ui.addClass(this._is_my_classname);
    }
    else
    {
        _ui.removeClass(this._is_my_classname);
    }
    return this;
};

List_menu.prototype._not_login_classname = 'not-login';

List_menu.prototype._listen_auth = function () {
    var _not_login_classname = this._not_login_classname;
    var _ui = this.get_ui();
    
    /*
    KALS_context.auth.add_listener(function (_auth) {
        if (_auth.is_login() == true)
        {
            _ui.removeClass(_not_login_classname);
        }
        else
        {
            _ui.addClass(_not_login_classname);
        }
    }, true);
    */
    KALS_context.policy.add_attr_listener('write', function (_policy) {
        if (_policy.writable() === true)
        {
            _ui.removeClass(_not_login_classname);
        }
        else
        {
            _ui.addClass(_not_login_classname);
        }
    }, true);
};

// --------
// Loading Methods
// -------- 

List_menu.prototype._loading_classname = 'loading';
List_menu.prototype._toggle_loading = function (_is_loading) {
    
    if ($.is_null(_is_loading)) {
		_is_loading = !(this.is_loading());
	}
    
    var _ui = this.get_ui();
    if (_is_loading === true) {
		_ui.addClass(this._loading_classname);
	}
	else {
		_ui.removeClass(this._loading_classname);
	}
    return this;
};

List_menu.prototype.is_loading = function () {
    var _ui = this.get_ui();
    return _ui.hasClass(this._loading_classname);
};

// ----------------------
// set_respond_wrtiable
// Context_policy
// ----------------------

/**
 * 禁止回應標註
 * @type String
 */
List_menu.prototype._deny_respond_writable_classname = "deny-respond-writable";

/**
 * 設定可否執行「回應」與「留言」
 * @param {Boolean} _writable
 * @returns {List_menu.prototype}
 */
List_menu.prototype.set_respond_writable = function (_writable) {
    var _ui = this.get_ui();
    if (_writable === true) {
        _ui.removeClass(this._deny_respond_writable_classname);
    }
    else {
        _ui.addClass(this._deny_respond_writable_classname);
    }
    
    return this;
};

/* End of file List_menu */
/* Location: ./system/application/views/web_apps/List_menu.js *//**
 * List_menu_tooltip
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 08:11:03
 * @extends {List_menu}
 * @param {List_item} _item
 * @param {String[]} _disable_option
 */
function List_menu_tooltip(_item, _disable_option) {
    
    List_menu.call(this, _item, _disable_option);
    
    if ($.isset(_item)) {
        var _annotation_id = _item.get_annotation_id();
        this._$tooltip_id = this._$tooltip_id + '_' + _annotation_id; 
    }
}

List_menu_tooltip.prototype = new List_menu();

List_menu_tooltip.prototype._$modal_name = 'List_menu_tooltip';

List_menu_tooltip.prototype._$tooltip_id = 'list_menu_tooltip';

/**
 * Create UI
 * 建立時預設是隱藏的。等待別人呼叫tooltip()來召喚他。
 * @memberOf {List_menu_tooltip}
 * @type {jQuery} UI
 */
List_menu_tooltip.prototype._$create_ui = function () {
    var _ui = List_menu.prototype._$create_ui.call(this);
    
    var _tooltip = this._create_tooltip_prototype({
        content: _ui,
        classname: 'list-menu-tooltip kals-modal'
    });
    
    _tooltip.hide();
    
    return _tooltip;
};

List_menu_tooltip.prototype._$get_config = function (_selector) {
    
    var _config = Tooltip_modal.prototype._$get_config.call(this, _selector);
    
    var _this = this;
    
    var _onbeforeshow = $.get_parameter(_config, 'onBeforeShow');
    
    _config.onBeforeShow = function () {
        //$.test_msg('List_menu_tooltip._$get_config() onBeforeShow', _this._item.get_menu_style());
        
        var _menu_style = _this._item.get_menu_style();
        if (_menu_style == 'block') {
			return false;
		}
        
        //先找到其他顯示的tooltip，並把他們關掉
        //$('.list-menu-tooltip:not(#'+_this._$tooltip_id+')').fadeOut();
        
        var _other_trigger_selector = '.list-item.' + _this._$modal_name + '_trigger';
        var _other_trigger = $(_other_trigger_selector);
        //$.test_msg('List_menu_tooltip._$get_config()', [_other_trigger_selector, _other_trigger.length]);
        if (_other_trigger.length > 0) {
            var _api = _other_trigger.data('tooltip');
            _api.hide();    
        }
                   
        //確認tip不要超過畫面右方
        var _tooltip = this.getTip();
        var _trigger = this.getTrigger();
        
        var _tooltip_width = _tooltip.width();
        //var _trigger_left = _trigger.offset().left;
        var _trigger_left = $.get_offset_left(_trigger);
        
        var _trigger_width = _trigger.width();
        var _trigger_padding_left = $.strip_unit(_trigger.css('padding-left'));
        var _trigger_padding_right = $.strip_unit(_trigger.css('padding-right'));
        _trigger_width = _trigger_width + _trigger_padding_left + _trigger_padding_right;
		
       
        //確認tip不要超過畫面左方
        var _tooltip_left = _trigger_left - _tooltip_width;
        
        if (_tooltip_left < 0) {
			// @20130602 Pudding Chen
			// 不知道為什麼+20之後會出問題，現在先關掉
            //_tooltip_left = _trigger_width + 20;
			_tooltip_left = _trigger_width;
            
            var _tooltip_right = _tooltip_left + _tooltip_width;
            
            //$.test_msg('List_menu_tooltip._$get_config()', [_tooltip_left, _trigger_left, _tooltip_width, _trigger_width
            //    , (_tooltip_right < $('body').width()), _tooltip_right]);
                    
            
            if (_tooltip_right < $('body').width()) {
				_tooltip.css("visibility", "hidden");
                setTimeout(function () {
                    _tooltip.css('left', _tooltip_left + 'px');   
                    _tooltip.css('width', _tooltip_width + 'px');
					_tooltip.css("visibility", "visible"); 
                }, 0);
            }
        }
        
        _this.get_ui().show();
        
        if ($.is_function(_onbeforeshow)) {
            _onbeforeshow.call(this);
        }
        
        //2010.11.11 測試用
        //setTimeout(function () {
        //    _this.get_ui().appendTo($('body')).show();
        //}, 1000);
    };
    
    //方向
    _config.position = 'top left';
    //_config.position = 'center left';
    
    _config.relative = true;
    
    _config.offset = [31, -5];
    //_config.offset = [0, -5];
    
    _config.delay = 5000; 
    
    _config.events = {
        def: 'mouseover click focus, blur mouseout'
    };
    
    _config.tip = '#' + this._$tooltip_id;
    //$.test_msg('List_menu_tooltip._$get_config()', _config.tip);
    
    return _config;
};

/* End of file List_menu_tooltip */
/* Location: ./system/application/views/web_apps/List_menu_tooltip.js *//**
 * List_menu_block
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 08:11:03
 * @extends {List_menu}
 * @param {List_item} _item
 * @param {String[]} _disable_option
 */
function List_menu_block(_item, _disable_option) {
    
    List_menu.call(this, _item, _disable_option);
    
}

List_menu_block.prototype = new List_menu();

/**
 * 顯示完整的日期
 */
List_menu_block.prototype.timestamp_full_dispaly = true;

/**
 * Create UI
 * @memberOf {List_menu_block}
 * @type {jQuery} UI
 */
List_menu_block.prototype._$create_ui = function () {
    var _ui = List_menu.prototype._$create_ui.call(this);
    _ui.addClass('list-menu-block');
    return _ui;
};

/* End of file List_menu_block */
/* Location: ./system/application/views/web_apps/List_menu_block.js *//**
 * List_like_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 02:24:45
 * @extends {JSONP_dispatcher}
 * @param {List_item}
 */
function List_like_component(_item) {
    
    JSONP_dispatcher.call(this);
    
	//$.test_msg("set item了嗎？", $.isset(_item));
    this._set_list_item(_item);
}

List_like_component.prototype = new JSONP_dispatcher();

// --------
// List Item
// --------

/**
 * List_item
 * @type List_item
 */
List_like_component.prototype._item = null;

List_like_component.prototype._set_list_item = function (_item) {
	//$.test_msg("set item了嗎？", this._item._annotation_param.annotation_id);
    if ($.isset(_item)) {
        this._item = _item;
        var _this = this;
        this._item.add_listener('set', function (_item) {
            _this.set_param();
        });
        //$.test_msg("設進去了嗎？set item了嗎？", $.isset(this._item._annotation_param.annotation_id));
    }
    return this;
};

/**
 * 設定參數
 * @returns {List_like_component}
 */
List_like_component.prototype.set_param = function () {
    var _param = this._item.get_data();
    var _is_like = _param.is_like;
    this._toggle_like(_is_like);
    this._set_like_count(_param.like_count);
    return this;
};

// --------
// Private Attributes
// --------

List_like_component.prototype._$load_url = 'annotation_setter/like';

List_like_component.prototype.like_classname = 'liked';

List_like_component.prototype._hover_classname = 'hover';

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {List_like_component}
 * @type {jQuery} UI
 */
List_like_component.prototype._$create_ui = function () {
    var _ui = $('<span></span>')
        .addClass('list-like-component');
    
    var _hover_classname = this._hover_classname;
    _ui.hover(function () {
        $(this).addClass(_hover_classname);
    }, function () {
        $(this).removeClass(_hover_classname);
    });
    
    var _icon = this._create_icon_component();
    _icon.appendTo(_ui);
    
    var _count = this._create_count_component();
    _count.prependTo(_ui);
    
    //如果沒有登入，則不顯示like
    var _this = this;
    
    _ui.click(function () {
        _this.set_is_like();
    });
    
    setTimeout(function () {
        _this._init_policy_listener();
    }, 0);
    
    return _ui;
};

List_like_component.prototype._count_component = null;

List_like_component.prototype._create_count_component = function () {
    
    var _ui = $('<span></span>')
        .addClass('count-component');
    this._count_component = _ui;
    return _ui;
};

List_like_component.prototype._icon_component = null;

List_like_component.prototype._create_icon_component = function () {
    
    var _ui = $('<span></span>')
        .addClass('icon-component');
    this._icon_component = _ui;
    return _ui;
};

/**
 * @param {boolean} _is_like
 * @returns {List_like_component} description
 */
List_like_component.prototype.set_is_like = function (_is_like) {
    
    if (this._lock === true) {
        return this;
    }
    
    if (this._enable === false) {
        return this;
    }
	
    if ($.is_null(_is_like)) {
        _is_like = !(this.is_liked());
    }
    
    //$.test_msg("set_is_like", [_is_like, this.is_liked()]);
                
    var _annotation_id = this._item.get_annotation_id();
    
    var _data = {
        is_like: _is_like,
        annotation_id: _annotation_id
    };
    
    this._lock = true;
    
        
    /**
     * @type {Context_user} _context_user
     */
    var _context_user = KALS_context.user;

    //調整次數
    if (_is_like === true) {
        this.add_like_count();
        _context_user.set_like_to_count_add();
    }
    else {
        this.reduce_like_count();
        _context_user.set_like_to_count_reduce();
    }

    //_this._toggle_like(_is_like);

    //var _param = _this._item.get_data();
    var _lang;
    if (_is_like === true) {
        _lang = this._lang.set_like;
    }
    else {
        _lang = this._lang.set_not_like;
    }

    KALS_util.notify(_lang);
        
    this.load(_data, function (_this, _data) {
        
        if (_this._lock === false) {
            return;
        }

        _this._lock = false;
    });
    return this;
};

List_like_component.prototype._lock = false;

List_like_component.prototype._lang = {
    'set_like': new KALS_language_param(
            'Add to like list',
            'list_like_component.set_like'
        ),
    'set_not_like': new KALS_language_param(
            'Remove from like list',
            'list_like_component.set_not_like'
        )
}; 


List_like_component.prototype.is_liked = function () {
    var _ui = this.get_ui();
    return _ui.hasClass(this.like_classname);
};

List_like_component.prototype._toggle_like = function (_is_like) {
    
    var _ui = this.get_ui();
    //$.test_msg('List_like_component.toggle_like 1', [_is_like, _ui.hasClass(this.like_classname), this.is_liked()]);
    
    if ($.is_null(_is_like)) {
        _is_like = (!(this.is_liked()));
    }
	
    if (_is_like === true) {
        _ui.addClass(this.like_classname);
    }
    else {
        _ui.removeClass(this.like_classname);
    }
        
    //$.test_msg('List_like_component.toggle_like 2', [_is_like, _ui.hasClass(this.like_classname), this.is_liked()]);
    
    return this;
};

List_like_component.prototype._like_count = 0;

List_like_component.prototype._set_like_count = function (_count) {
    if ($.is_null(_count) || _count < 1) {
        this._count_component.hide();
        this._count_component.empty();
        this._like_count = 0;
    }
    else {
        this._count_component.show();
        
        var _lang = new KALS_language_param(
            '{0} like',
            'list_like_component.like_count',
            _count
        );
        
        var _msg = KALS_context.lang.line(_lang);
        
        this._count_component.html(_msg);
        this._like_count = _count;
		
        //要修改item的param參數
        //var _param = this._item.get_annotation_param();
        //_param.like_count = _count;
        //this._item.editor_set_data(_param);
    }
    return this;
};

/**
 * 增加喜愛的計數
 * @returns {List_like_component}
 */
List_like_component.prototype.add_like_count = function () {
    this._like_count++;
    this._toggle_like(true);
    this._set_list_item_count();
    return this._set_like_count(this._like_count);
}; 

List_like_component.prototype.reset_like_count = function () {
    return this._set_like_count(0);
};

List_like_component.prototype.reduce_like_count = function () {
    this._like_count--;
    this._toggle_like(false);
    this._set_list_item_count();
    return this._set_like_count(this._like_count);
};

/**
 * 設定list item的參數
 * @param {number} _count
 */
List_like_component.prototype._set_list_item_count = function () {
    if ($.is_null(this._item)) {
        return this;
    }
    var _count = this._like_count;
    var _param = this._item.get_annotation_param();
    _param.like_count = _count;
    _param.is_like = this.is_liked();
    this._item.editor_set_data(_param);
	
    return this;
};

// --------------------------------------
// 權限設定

/**
 * 偵測是否是respond
 * 
 * @todo 20140512
 * @returns {Boolean}
 */
List_like_component.prototype._is_respond = function () {
    return this._item.is_respond();
};

/**
 * 初始化權限監聽器
 * @returns {List_like_component}
 */
List_like_component.prototype._init_policy_listener = function () {
    
    var _this = this;
    if (this._is_respond()) {
        KALS_context.policy.add_attr_listener('able_like_respond', function (_policy) {
            var _enable = _policy.able_like_respond();
            _this.toggle_enable(_enable);
        });
    }
    else {
        KALS_context.policy.add_attr_listener('able_like_topic', function (_policy) {
            var _enable = _policy.able_like_topic();
            _this.toggle_enable(_enable);
        });
    }    
    
    return this;
};

/**
 * 設定是否啟用
 * @param {Boolean} _enable
 * @returns {List_like_component}
 */
List_like_component.prototype.toggle_enable = function (_enable) {
    
    var _ui = this.get_ui();
    
    var _disable_classname = "disable-like";
    
    var _title = KALS_context.lang.line(new KALS_language_param(
                "Your like function is disabled.",
                "list_like_component.disable_like"
            ));
    
    if (_enable === true) {
        _ui.removeClass(_disable_classname);
        _ui.removeAttr("title");
    }
    else {
        _ui.addClass(_disable_classname);
        _ui.attr("title", _title);
    }
    this._enable = _enable;
    
    return this;
};

/**
 * 是否啟用
 * @type Boolean
 */
List_like_component.prototype._enable = true;

/* End of file List_like_component */
/* Location: ./system/application/views/web_apps/List_like_component.js *//**
 * List_header_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 02:24:39
 * @extends {KALS_user_interface}
 * @param {List_item} _item
 */
function List_header_component(_item) {
    
    KALS_user_interface.call(this);
    
    this._set_list_item(_item);    
}

// Extend from KALS_user_interface
List_header_component.prototype = new KALS_user_interface();

// --------
// List Item
// --------

/**
 * @type {List_item}
 */
List_header_component.prototype._item = null;

List_header_component.prototype._set_list_item = function (_item) {
    if ($.isset(_item)) {
        this._item = _item;
        var _this = this;
        this._item.add_listener('set', function (_item) {
            _this.set_data();
        });
    }
    return this;
};

List_header_component.prototype.set_data = function () {
	//this.set_respond();
    this.set_user_name();
    this.set_is_my();
    this.set_type();
    this.set_has_recommend();
    this.set_policy_type();
};

/**
 * Create UI
 * @memberOf {List_header_component}
 * @type {jQuery} UI
 */
List_header_component.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('list-header-component');
    
    var _like_component = this._setup_like_component();
    _like_component.get_ui().appendTo(_ui);
    
    if (this._item.is_enable('like') === false) {
        _like_component.get_ui().hide();
    }
    
    var _respond_indicator = $('<span></span>')
        .addClass('respond-indicator')
                .html("&gt;")
        .appendTo(_ui);

    this._respond_indicator = _respond_indicator;
	
    var _name_container = $('<span></span>')
        .addClass('name-container')
        .appendTo(_ui);
    
    this._name_container = _name_container;
    
    var _type_container = $('<span></span>')
        .addClass('type-container')
        .appendTo(_ui);
    
    this._type_container = _type_container;
    
    var _lock_component = this._create_lock_component();
    _lock_component.prependTo(_ui);
    
    if (this._item.is_enable('policy') === false) {
        //_lock_component.hide();
    }
    
    var _recommend_component = this._create_recommend_component();
    _recommend_component.prependTo(_ui);
    
    if (this._item.is_enable('recommend') === false
        || KALS_CONFIG.enable_annotation_recommend === false) {
        _recommend_component.hide();
    }
    
    var _id_component = this._create_id_component();
    _id_component.prependTo(_ui);
    
    //2010.11.1 測試用的偵錯訊息
    //var _param = this._item.get_data();
    //_ui.append('<span> ['+_param.annotation_id+'] </span>');
    
    //_ui.append('<span>'+_param.get_interval_time() + ' - ' + _param.timestamp 
    //    + ' - ' + parseInt((new Date()).getTime()/1000) + ' : ' + (parseInt((new Date()).getTime()/1000) - _param.timestamp) + '</span>');
    
    //var _this = this;
    /*
    setTimeout(function () {
        _this.set_user_name();
        _this.set_is_my();
        _this.set_type();
        _this.set_has_recommend();
        _this.set_policy_type();
    }, 0);
    */
    return _ui;
};
// --------
// Respond
// --------

/**
 *標示這是不是一個回應的標註 
 * @type jQuery
 */
List_header_component.prototype._respond_indicator = null;

/**
 *設定這是一個回應的標註或不是
 * 根據annotation_param來設定
 * @deprecated 20131115 不使用 Pulipuli
 */
/*
List_header_component.prototype.set_respond = function () {
	var _param = this._item.get_annotation_param();
	var _is_respond = _param.is_respond();
	if (_is_respond) {
		this._respond_container.show();
	}
	else {
		this._respond_container.hide();
	}
	return this;
};
*/

// --------
// User Name
// --------

List_header_component.prototype._name_container = null;

List_header_component.prototype.set_user_name = function (_name) {
    if ($.is_null(_name)) {
        var _param = this._item.get_data();
        if ($.isset(_param) && $.isset(_param.user)) {
            _name = _param.user.get_name();
        }
        else {
            return this;
        }
    }
    
    if ($.is_null(this._name_container)) {
        this.get_ui();
    }

    this._name_container.html(_name);
};

// --------
// Is My Annotation?
// --------

List_header_component.prototype.is_my_classname = 'is-my';

/**
 * 設定是我的
 * @param {Boolean} _is_my
 * @returns {List_header_component}
 */
List_header_component.prototype.set_is_my = function (_is_my) {
    if ($.is_null(_is_my)) {
        var _param = this._item.get_data();
        if ($.isset(_param)) {
            _is_my = _param.is_my_annotation();
        }
        else {
            return this;
        }
    }
    
    var _ui = this.get_ui();
    
    if (_is_my === true) {
        _ui.addClass(this.is_my_classname);
    }
    else {
        _ui.removeClass(this.is_my_classname);
    }
    
    return this;
};

List_header_component.prototype.is_my = function () {
    var _ui = this.get_ui();
    return _ui.hasClass(this.is_my_classname);
};

// --------
// Recommend
// --------

List_header_component.prototype._recommend_component = null;

List_header_component.prototype._create_recommend_component = function () {
    var _recommend_img = KALS_context.get_image_url('has-recommend.gif');
    
    var _this = this;
    _recommend_img.addClass('header-option')
        .addClass('recommend')
        .click(function () {
            KALS_text.tool.recommend.setup_recommend(_this._item.get_annotation_param());
            //KALS_text.tool.recommend.get_ui().scrollIntoView();
        });
    this._recommend_component = _recommend_img;
    return _recommend_img;
};

List_header_component.prototype.has_recommend_classname = 'has-recommend';

/**
 * @param {Boolean} _is_my
 */
List_header_component.prototype.set_has_recommend = function (_has_recommend) {
    if ($.is_null(_has_recommend)) {
        var _param = this._item.get_data();
        if ($.isset(_param)) {
            _has_recommend = _param.has_recommend();
        }
        else {
            return this;
        }
    }
    
    var _ui = this.get_ui();
    
    if (_has_recommend === true) {
        _ui.addClass(this.is_has_recommend);
    }
    else {
        _ui.removeClass(this.is_has_recommend);
    }
    
    return this;
};

List_header_component.prototype.has_recommend = function () {
    var _ui = this.get_ui();
    return _ui.hasClass(this.has_recommend_classname);
};

// --------
// Annotation Type
// --------

List_header_component.prototype._type_container = null;

/**
 * 
 * @param {Annotation_type_param} _type
 */
List_header_component.prototype.set_type = function (_type) {
    //$.test_msg('List_header_component.set_type', _type);
    
    if ($.is_null(_type)) {
        var _param = this._item.get_data();
        if ($.isset(_param)) {
            _type = _param.type;
        }
        else {
            return this;
        }
    }
    
    //$.test_msg('List_header_component.set_type [is_null]', _type);
    
    if ($.is_null(this._type_container)) {
		this.get_ui();
	}
    
    this._type_container.empty();
    
    /*
    //20111105 把建立type_option的工作都統一到某人身上吧
    var _option = $('<span></span>')
        .addClass('type-option')
        .addClass(_type.get_classname())
        .appendTo(this._type_container);
    
    if (_type.is_basic() === false) {
        _option.attr('style', _type.get_menu_style());
    }
    
    var _type_lang_header = Type_menu.prototype._type_lang_header;
    var _type_name = _type.get_type_name();
    if (_type.is_custom()) {
        var _custom_name = _type.get_type_name();
        
        if ($.isset(_custom_name)) {
            _option.html(_custom_name);
            _option.addClass('other');    
        }
        else {
            var _lang = new KALS_language_param(
                _type_name,
                _type_lang_header + _type_name
            );
            
            KALS_context.lang.add_listener(_option, _lang);
        }
    }
    else {
        var _lang = new KALS_language_param(
            _type_name,
            _type_lang_header + _type_name
        );
        
        KALS_context.lang.add_listener(_option, _lang);
    }
    */
   
    var _option = KALS_context.predefined_type.get_type_option(_type);
    _option.appendTo(this._type_container);
    
    return this;
};

// -------
// Recommend
// -------

List_header_component.prototype.has_recommend_classname = 'has-recommend';

/**
 * @param {Boolean} _has_recommend
 */
List_header_component.prototype.set_has_recommend = function (_has_recommend) {
    //只有我的標註才要設置recommend的喔！
    if (this.is_my() === false) {
        return this;
    }
    
    if ($.is_null(_has_recommend)) {
        var _param = this._item.get_data();
        if ($.isset(_param)) {
            _has_recommend = _param.has_recommend();
        }
        else {
            return this;
        }
    }
    
    var _ui = this.get_ui();
    
    if (_has_recommend === true) {
        _ui.addClass(this.has_recommend_classname);
    }
    else {
        _ui.removeClass(this.has_recommend_classname);
    }
    
    return this;
};

List_header_component.prototype.has_recommend = function () {
    var _ui = this.get_ui();
    return _ui.hasClass(this.has_recommend_classname);
};

// --------
// Policy Type
// --------

/**
 * @type {jQuery}
 */
List_header_component.prototype._lock_component = null;

List_header_component.prototype._create_lock_component = function () {
    var _lock_img = KALS_context.get_image_url('policy-lock.gif');
    _lock_img.addClass('header-option')
        .addClass('lock');
    var _msg = KALS_context.lang.line("policy_type.private");
    _lock_img.attr("title", _msg);
    this._lock_component = _lock_img;
    return _lock_img;
};

List_header_component.prototype.set_policy_type = function (_policy_type) {
    
    if ($.is_null(_policy_type)) {
        var _param = this._item.get_data();
        if ($.isset(_param)) {
            _policy_type = _param.policy_type;
        }
        else {
            return this;
        }
    }
    
    var _ui = this.get_ui();
    var _lock_classname = 'policy-type-lock';
    if (_policy_type === 'private' 
            || _policy_type === 'share') {
        _ui.addClass(_lock_classname);
    }
    else {
        _ui.removeClass(_lock_classname);
    }
    return this;
};

// --------
// Like
// --------

/**
 * @type {List_like_component}
 */
List_header_component.prototype.like = null;

List_header_component.prototype._setup_like_component = function () {
    var _component = new List_like_component(this._item);
    this.child('like', _component);
    return _component;
};

// --------
// ID
// --------

List_header_component.prototype._id_component = null;

/**
 * 建立顯示ID的元件
 * @return {jQuery}
 */
List_header_component.prototype._create_id_component = function () {
    var _component = $('<span></span>')
        .addClass('id-component');
        
    var _param = this._item.get_data();
    if ($.isset(_param)) {
        _component.html('#' + _param.annotation_id);
    }
    
    this._id_component = _component;
    return _component;
};

/* End of file List_header_component */
/* Location: ./system/application/views/web_apps/List_header_component.js *//**
 * List_note_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 05:02:59
 * @extends {KALS_user_interface}
 * @param {List_item} _item
 * @param {boolean} _show_fulltext 
 */
function List_note_component(_item, _show_fulltext) {
    
    KALS_user_interface.call(this);
    
    this._set_list_item(_item);   
    
	// 20130507 Pudding Chen
	// 測試一下
	//_show_fulltext = true;
	
    if ($.isset(_show_fulltext)) {
		this._show_fulltext = _show_fulltext;
	}
}

// Extend from KALS_user_interface
List_note_component.prototype = new KALS_user_interface();

// --------
// List Item
// --------

/**
 * @type {List_note_component}
 */
List_note_component.prototype._item = null;

List_note_component.prototype._set_list_item = function (_item) {
    if ($.isset(_item)) {
        this._item = _item;
        var _this = this;
        this._item.add_listener('set', function (_item) {
            //_this.item = _item;
            _this.set_data();
        });
    }
};

List_note_component.prototype.set_data = function () {
    //this._show_fulltext = this._item.note_show_fulltext;
    this.set_note();
    this.set_respond_to_coll();
};

// -------
// Private Attributes
// -------

List_note_component.prototype._simple_classname = 'simple';

List_note_component.prototype._show_fulltext = false;

List_note_component.prototype._simple_max_length = KALS_CONFIG.annotation_list.note.simple_max_length;

/**
 * @type {Annotation_collection_param}
 */
List_note_component.prototype._respond_to_coll = null;

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {List_note_component}
 * @type {jQuery} UI
 */
List_note_component.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('list-note-component');
    
    if (this._show_fulltext === false) {
		_ui.addClass('simple');
	}
    
    var _respond = this._create_respond_container();
    _respond.appendTo(_ui);
    
    var _note = this._create_note_container();
    _note.appendTo(_ui);
    
    var _deny_readable = this._create_deny_readable_component();
    _deny_readable.appendTo(_ui);
    
    /*
    var _this = this;
    setTimeout(function () {
        _this.set_note();
        _this.set_respond_to_coll();
    }, 0);
    */
    return _ui;
};

// --------
// Respond to collection
// --------

List_note_component.prototype._respond_container = null;

List_note_component.prototype._create_respond_container = function () {
    var _container = $('<div></div>')
        .addClass('respond-container');
    this._respond_container = _container;
    return _container;
};

/**
 * @param {Annotation_param} _param
 * @type {jQuery}
 */
List_note_component.prototype._create_respond_ui = function(_param) {
    var _ui = $('<span></span>')
        .addClass('respond-to');
    
    var _name = _param.user.get_name();
    var _respond_id = _param.annotation_id;
    _ui.html(_name + ' #' + _respond_id);
    
    _ui.attr('respond_to', _param.annotation_id);
    var _this = this;
    _ui.click(function () {
        var _respond_to_id = $(this).attr('respond_to');
        _this.focus_respond(_respond_to_id);
    });
    
    return _ui;
};

List_note_component.prototype._create_respond_comma = function () {
    var _ui = $('<span>,</span>')
        .addClass('comma');
    return _ui;
};

/**
 * 
 * @param {Annotation_collection_param} _respond_to_coll
 */
List_note_component.prototype.set_respond_to_coll = function (_respond_to_coll) {
    if ($.is_null(_respond_to_coll)) {
        _respond_to_coll = this._item.get_data().respond_to_coll;
    }
    
    if ($.is_null(_respond_to_coll)) {
		return this;
	}
    
    if ($.is_null(this._respond_container)) {
		this.get_ui();
	}
    
    this._respond_container.empty();
    
    for (var _i = 0; _i < _respond_to_coll.length(); _i ++) {
        if (_i > 0) {
            var _comma = this._create_respond_comma();
            _comma.appendTo(this._respond_container);
        }
        
        var _param = _respond_to_coll.get(_i);
        var _respond_to = this._create_respond_ui(_param);
        _respond_to.appendTo(this._respond_container);
    }
    
    if (_respond_to_coll.length() > 0) {
        var _to = $('<span></span>')
            .addClass('to')
            .prependTo(this._respond_container);
        var _to_lang = new KALS_language_param(
            'To: ',
            'list_note_component.to'
        );
        KALS_context.lang.add_listener(_to, _to_lang);
    }
    
    return this;
    
};

List_note_component.prototype.focus_respond = function (_respond_to_id) {
    
    //var _list = this._item.get_list();
    
    //var _result = _list.focus(_respond_to_id, true);
    //_list.get_ui().css('color', 'blue');
    //$.test_msg('List_note_component.focus_respond()', [_respond_to_id, $.isset(_result)]);
    
    //_list.focus(_respond_to_id, true);
    
    this._item.focus_respond(_respond_to_id);
    
    return this;
};

// --------
// Note
// --------

List_note_component.prototype._note_container = null;

List_note_component.prototype._create_note_container = function () {
    var _container = $('<div></div>')
        .addClass('note-container');
    this._note_container = _container;
    return _container;
};

/**
 * 把筆記的內容放到List當中
 * @param {String} _note
 */
List_note_component.prototype.set_note = function (_note, _callback) {
    if ($.is_null(_note)) {
        _note = this._item.get_data().note;
        //if (this._show_fulltext === true) {
        //	$.test_msg("List_note_component.set_note(), get_data", _note);
        //}
    }
    
    if ($.is_null(_note)) {
        _note = '';
    }
    
    //$.test_msg('List_note.set_note()', [_note, typeof(_note)]);
    
    if ($.is_null(this._note_container)) {
        this.get_ui();
    }
    
	
    //$.test_msg("List_note_component.set_note()", _note);
    //_note = $(_note);
    if (this._show_fulltext === false) {
        _note = this.extract_abstract(_note);
    }
	
	//if ($.is_string(_note)) {
    //    $.test_msg('note', _note);
	//	this._note_container.html(_note);
	//}
    //else {
	//	this._note_container.append(_note);
	//}
    this._note_container.html(_note);
    
	var _this = this;
        _this.adjust_note();
		
    if (true) {
		setTimeout(function () {
            _this.adjust_note(function () {
                $.trigger_callback(_callback);
            });
        }, 200);
	}
		
    
    return this;
};

/**
 * 篩選摘要
 * @author Pulipuli Chen 20131117
 * @param {String} _note
 * @type {String|jQuery}
 */
List_note_component.prototype.extract_abstract = function (_note) {
	//var _text = this._note_container.text();
    var _text = _note;
    var _origin_text = _text;
    var _allow_html_tags = KALS_CONFIG.annotation_list.note.allow_html_tags;
    _text = $.strip_html_tag(_text, _allow_html_tags);
    _text = $.trim(_text);
	
	var _plain_text = $.strip_html_tag(_text);
	
	var _result = _text;
    if (_plain_text.length > this._simple_max_length) {
		_result = $('<span></span>').html(_origin_text);
		/*
		
        if (_text.length > this._simple_max_length) {
            _abstract = _text.substr(0, this._simple_max_length) + '...';
            //this._note_container.html(_abstract);
			_result.html(_abstract);
        } 
        
        var _view = this._create_view_thread(_origin_text.length);
        //_view.appendTo(this._note_container);
		_view.appendTo(_result);
		*/
		
		var _abstract = null;
		
		// 先選出有影片的
		if (_abstract === null) {
			var _video = _result.find('object, iframe').eq(0);
			if (_video.length > 0) {
				_abstract = _video;
			}
		}
		
		// 再選出圖片
		if (_abstract === null) {
			var _img = _result.find('img').eq(0);
            if (_img.length > 0) {
                _abstract = _img;
            }
		}
		
		// 如果沒有只好選出文字
		if (_abstract === null) {
            var _head_part = parseInt((this._simple_max_length * 2 / 3), 10);
			var _foot_part = this._simple_max_length - _head_part;
			 
			_abstract =  _plain_text.substr(0, _head_part)
			     + '...'
				 + _plain_text.substr(_plain_text.length - _foot_part, _foot_part);
				 
			_abstract = $('<span>' + _abstract + '</span>');
        }
		
		if (_abstract !== null) {
			_result = _abstract;
		}
		
		var _view = this._create_view_thread(_plain_text.length);
		_view.appendTo(_result);
    }
	else {
		_result = $('<span>'+_origin_text+'</span>');
	}
	
	//var _max_width = this.get_ui().parents('.KALS').width();
	
	//_result.appendTo($('body'));
	
	_result.addClass('note-content');
	
	return _result;   
};

/**
 * 縮小圖片
 * @param {jQuery} _result 要調整的筆記名稱
 * @param {function} _callback 回呼函數
 */
List_note_component.prototype.adjust_note = function (_result, _callback) {
    //if (this._note_container.hasClass('adjusted')) {
    //	return this;
    //}

    //$.test_msg('adjust note start', [typeof(_result), typeof(_callback)]);

    if (_callback === undefined
            && $.is_function(_result)) {
        
        if ($.is_function(_result)) {
            _callback = _result;
        }
    }
    
    if (!$.is_jquery(_result)) {
        _result = this._note_container;
    }
    //else {
    //    _result.css("border", "1px solid blue");
    //    $.test_msg("result width", _result.width());
    //}
	
	/*
	var _text = _result.html();
	_text = $.find_and_replace_youtube_links(_text);
	_result.html(_text);
	*/
	
	/*
	_result.find('.note-content:first').contents().each(function() {
	
	    // Skip non text nodes.
	    if (this.nodeType !== 3) {
	        return true;
	    }
	
	    // Grab text
	    var matches = $(this).html().match(/(?:https:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=)?(.+)/g);
	
	    if (!matches) {
	        return true;
	    }
	
	    var iframe = $('<iframe width="420" height="345" frameborder="0" allowfullscreen />', {
	        src: 'http://www.youtube.com/embed/' + matches[1]
	    });
	
	    iframe.insertAfter(this);
	
	    $(this).remove();
	
	});
	*/
     
    // 幫超連結加上target=_blank
    _result.find('a, img').each(function (_index, _a) {
		
        _a = $(_a);
		
        if (_a.hasClass('link-setted')) {
            return;
        }
		
        //_a.attr('target', '_blank');
        //_a.css('border', '1px solid red');
        
        var _link;
        if (_a.hasAttr('src')) {
                _link = _a.attr('src');
        }
        else if (_a.hasAttr('href')) {
            _link = _a.attr('href');
        }
		
        //防止點選時跳出網頁
        _a.click(function (_e) {
            window.open(_link, '_blank');
            _e.preventDefault();
        });
		
        _a.addClass('link-setted');
    });

    var _max_width = _result.width();
    if (_max_width === 0) {
        //return this;
        
        /**
         * 貼到外圍去，可是似乎是沒有作用
         * @author Pulipuli Chen 20131230
         */
        //this._note_container.wrap("<span></span>");
        //var _parent = this._note_container.parent();
        //this._note_container.appendTo("body");
        //_max_width = this._note_container.width();
        //this._note_container.appendTo(_parent);
        //$.test_msg("note container not setted", _max_width);
        
        
        /**
         * 延後調整，但是成效不彰
         * @author Pulipuli Chen 20131230
         */
        //setTimeout(function () {
        //    _this.adjust_note;
        //}, 100);
        //$.test_msg('adjust_note', _max_width);
        //this._note_container.ready(function () {
        //  setTimeout(function () {
        //  	_this.adjust_note();
        //  }, 100);
        //});
   
        /**
         * 放棄不做調整，不行，還是要列出最大寬度
         * @author Pulipuli Chen 20131230
         */
        //var _this = this;
        //$.trigger_callback(_callback);
        //return this;

        /**
         * 限制最大寬度
         */
        //_max_width = 195;
        _max_width = 450;
    }
	//var _safe_margin = 25;
	//_max_width = _max_width - _safe_margin;
    // 縮小筆記內的資料
    _result.find('img, iframe, object, embed').each(function (_index, _ele) {
        _ele = $(_ele);
        //_ele.css('border', '1px solid red');
        var _width = _ele.width();
        //$.test_msg("ele width", _width);
        
        //$.test_msg('縮小圖片', [_width, _max_width]);
        if (_width > _max_width) {
            var _height = _ele.height();
            
            var _width_ratio = (_max_width / _width);
            var _adjusted_height = parseInt(_height * _width_ratio, 10);
            
            var _final_width = _max_width;
            var _final_height = _adjusted_height;
            //if (_ele.hasAttr('width')) {
                //_ele.attr('width', _final_width).attr('height', _final_height);
            //}
            //else {
                //_ele.css('width', _final_width + 'px').css('height', _final_height + 'px');
            //}
            _ele.css('width', _final_width + 'px').css('height', _final_height + 'px');
        }
    });
    
    //this._note_container.addClass('adjusted');

    $.trigger_callback(_callback);
    return this;
};

/**
 * 建立 (詳細內容) 的按鈕
 * @param {number} _word_count
 * @type {jQuery}
 */
List_note_component.prototype._create_view_thread = function (_word_count) {
    var _ui = $('<span></span>')
        .addClass('view-thread');
    
    var _lang = new KALS_language_param(
        '(FULL DETAIL {0} WORDS)',
        'list_note_component.view_thread',
        [_word_count]
    );
    
    var _msg = KALS_context.lang.line(_lang);
    _ui.html(_msg);
    
    var _this = this;
	
    //_ui.click(function () {
    //    _this.view_thread();
    //});
    
    return _ui;
};

List_note_component.prototype.view_thread = function (_callback) {
    if ($.isset(this._item)) {
        this._item.view_thread(_callback);
    }
    return this;
};

/**
 * 禁止閱讀的參數
 * @type String
 */
List_note_component.prototype._deny_readable_classname = "deny-readable";

/**
 * 設定是否可以閱讀
 * @version 20140512 Pulipuli Chen
 * @param {Boolean} _readable
 * @returns {List_note_component}
 */
List_note_component.prototype.set_readable = function (_readable) {
    var _ui = this.get_ui();
    
    if (_readable === true) {
        _ui.removeClass(this._deny_readable_classname);
    }
    else {
        _ui.addClass(this._deny_readable_classname);
    }
    
    return this;
};

/**
 * 禁止閱讀元件的classname
 * @type String
 */
List_note_component.prototype._deny_readable_component_classname = "deny-readable-component";

/**
 * 建立禁止閱讀元件
 * @returns {jQuery}
 */
List_note_component.prototype._create_deny_readable_component = function () {
    var _lang = new KALS_language_param(
        "You cannot read this note",
        "list_note_component.deny_readable"
    );
    
    var _ui = KALS_context.lang.create_listener(_lang);
    _ui.addClass(this._deny_readable_component_classname);
    
    return _ui;
};

/* End of file List_note_component */
/* Location: ./system/application/views/web_apps/List_note_component.js *//**
 * List_item
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 上午 11:23:45
 * @extends {Multi_event_dispatcher}
 * @param {Annotation_param} _param
 */
function List_item(_param) {
    
    Multi_event_dispatcher.call(this);
    
    if ($.isset(_param)) {
        this.set_annotation_param(_param);
        
        if ($.browser.msie) {
            this._menu_style_default = 'block';
        }
    }
}

// Extend from KALS_user_interface
List_item.prototype = new Multi_event_dispatcher();

/**
 * @type {Annotation_param}
 */
List_item.prototype._annotation_param = null;


// --------
// UI Methods
// --------

List_item.prototype._classname = 'list-item';

/**
 * Create UI
 * @memberOf {List_item}
 * @type {jQuery} UI
 */
List_item.prototype._$create_ui = function () {
    var _this = this;
    
    var _ui = $('<div></div>')
        .addClass(this._classname)
        .addClass('list-item');
    
    if ($.isset(this._annotation_param)) {
        _ui.attr('annotation_id', this._annotation_param.annotation_id);
        
        var _topic_id = this.get_topic_id();
        _ui.attr('topic_id', _topic_id);
    }
    
    var _header = this._setup_header();
    _header.get_ui().appendTo(_ui);
    
	//var _anchor_text = this._setup_anchor_text_component()
	//	.get_ui().appendTo(_ui);
	
    var _note = this._setup_note();
    _note.get_ui().appendTo(_ui);
    
    var _menu_block, _menu_tooltip;
    if (this._menu_style_default === null) {
        _menu_block = this._setup_menu_block();
        _menu_block.get_ui().appendTo(_ui);
        
        _menu_tooltip = this._setup_menu_tooltip();
        _menu_tooltip.get_ui().appendTo(_ui);
    }
    else if (this._menu_style_default === 'block') {
        _menu_block = this._setup_menu_block();
        _menu_block.get_ui().appendTo(_ui);
    }
    
    _ui.mouseover(function() {
        _this.focus(false);
    });
    _ui.mouseout(function () {
        _this.blur();
    }); 
    
    // @20130609 Pudding Chen
    // 只有在不顯示全文的情況下，按下內容才會顯示thread
    if (this._note_show_fulltext === false) {
        _ui.find(".name-container, .type-container, .list-note-component").click(function () {
            _this.view_thread();
        });
    }       
	
    setTimeout(function() {
        //$.test_msg('List_item._$create_ui()', _config);
        
        if (_this._menu_style_default === null 
            || _this._menu_style_default === 'tooltip') {
            var _config = _menu_tooltip._$get_config();
            _ui.tooltip(_config);        
        }
            
        _this._toggle_menu_style();
    }, 0);
    
    
    this.notify_listeners('set');
    
    /**
     * @version 20140512 Pulipuli Chen
     * 初始化權限監聽器
     */
    setTimeout(function () {
        _this._init_readable_policy_listener();
        _this._init_writable_policy_listener();
    }, 0);
    
    
    //this._ready = true;
    
    return _ui;
};


/**
 * @type {List_header_component}
 */
List_item.prototype.header = null;


/**
 * @type {List_header_component}
 */
List_item.prototype._setup_header = function () {
    var _header = new List_header_component(this);
    this.child('header', _header);
    return _header;
};


/**
 * @type {List_note_component}
 */
List_item.prototype.note = null;

List_item.prototype._note_show_fulltext = false;

/**
 * 設定筆記顯示的元件
 * @type {List_note_component}
 */
List_item.prototype._setup_note = function () {
    var _component = new List_note_component(this, this._note_show_fulltext);
    this.child('note', _component);
    return _component;
};

List_item.prototype._$max_width = 300;

/**
 * 調整筆記的內容
 */
List_item.prototype.adjust_note = function (_callback) {
    if (this.note !== null) {
        this.note.adjust_note(_callback);
    }
    return this;
};

// --------
// Menu
// --------

List_item.prototype.menu_block = null;

List_item.prototype.menu_tooltip = null;

List_item.prototype._menu_style_classname = 'menu-style-block';

List_item.prototype._menu_style_default = null;

List_item.prototype._disable_option = [];

List_item.prototype._setup_menu_block = function () {
    var _component = new List_menu_block(this, this._disable_option);
    this.child('menu_block', _component);
    return _component;  
};

List_item.prototype._setup_menu_tooltip = function () {
    var _component = new List_menu_tooltip(this, this._enable_view_thread);
    this.child('menu_tooltip', _component);
    return _component;  
};

/**
 * 茅點文字最大長度
 * @type {int}
 */
List_item.prototype.max_anchor_text_length = 20;

/**
 * 設定Anchor Text
 * @type {List_anchor_text}
 */
List_item.prototype._setup_anchor_text_component = function () {
    var _component = new List_anchor_text_component(this);
    this.child('anchor_text', _component);
    return _component;  
};

List_item.prototype.is_enable = function (_option_name) {
    if (_option_name === null || this._disable_option === null) {
		return true;
	}
	else {
		return ($.inArray(_option_name, this._disable_option) == -1);
	}
};

List_item.prototype._$onviewportmove = function (_ui) {
    
    if ($.is_null(this._menu_style_default)) {
        if ($.is_small_width()) {
            this._toggle_menu_style('block');
        }
        else {
            this._toggle_menu_style('float');
        }   
    }
};

List_item.prototype.get_list_item_ui = function () {
    var _ui = this.get_ui('.list-item:first');
    if (_ui.length === 0) {
		_ui = this.get_ui();
	}
    return _ui;
};

List_item.prototype._toggle_menu_style = function (_style) {
    
    if ($.isset(this._menu_style_default)) {
		_style = this._menu_style_default;
	}
    if ($.is_null(_style) || _style == 'none') {
		return this;
	}
    
    var _block_classname = this._menu_style_classname;
    var _ui = this.get_list_item_ui();
    if (_style == 'block') {
        _ui.addClass(_block_classname);
    }
    else {
        _ui.removeClass(_block_classname);
    }
    return this;
};

// --------
// Other Methods
// --------

/**
 * @param {Annotation_param} _param
 */
List_item.prototype.set_annotation_param = function (_param) {
    this._annotation_param = _param;
    return this;
};

/**
 * 取得標註參數
 * @returns {Annotation_param}
 */
List_item.prototype.get_annotation_param = function () {
    return this._annotation_param;
};

List_item.prototype.get_annotation_id = function () {
    
    if ($.is_class(this._annotation_param, 'Annotation_param')) {
        return this._annotation_param.annotation_id;
    }
    else {
        return null;
    }
};

List_item.prototype.get_topic_param = function () {
    return this.get_annotation_param();
};

List_item.prototype.get_topic_id = function () {
    return this.get_annotation_id();
};

/**
 * 是否是回應
 * @returns {Boolean}
 */
List_item.prototype.is_respond = function () {
    if (this._annotation_param === null) {
        return false;
    }
    else {
        return this._annotation_param.is_respond();
    }
};

List_item.prototype.get_menu_style = function () {
    var _style = 'tooltip';
    
    var _ui = this.get_ui();
    if (_ui.hasClass(this._menu_style_classname)) {
		_style = 'block';
	}
    return _style;
};

/**
 * 取得標註參數
 * @returns {Annotation_param}
 */
List_item.prototype.get_data = function () {
    return this.get_annotation_param();
};

List_item.prototype.set_data = function (_param) {
    this.set_annotation_param(_param);
    this.notify_listeners('set');
    return this;
};

List_item.prototype.editor_set_data = function (_param) {
    return this.set_data(_param);
};

List_item.prototype.get_scope_coll = function () {
    if ($.is_class(this._annotation_param, 'Annotation_param')) {
        return this._annotation_param.scope;
    }
    else {
        return null;
    }
};

/**
 * 選擇指定的位置
 */
List_item.prototype.set_selection = function () {
    var _scope = this.get_scope_coll();
	//$.test_msg('List_item.set_selection', _scope);
    KALS_text.selection.view.set_scope_coll(_scope);
    return this;
};

List_item.prototype.clear_selection = function () {
    KALS_text.selection.view.clear();
    return this;
};

/**
 * 擺放標註位置
 */
List_item.prototype.select = function () {
    var _scope = this.get_scope_coll();
    
    KALS_text.tool.close();
    //$.test_msg('List_item.select', this.get_annotation_param());
    KALS_text.tool.list.set_focus(this.get_annotation_param(), true);
	
    KALS_text.selection.select.set_scope_coll(_scope);
    
    return this;
};

/**
 * 
 * @param {Annotation_list|List_item|Number} _param
 */
List_item.prototype.equals = function (_param) {
    var _annotation_id;
    if ($.is_class(_param, 'Annotation_param')) {
        _annotation_id = _param.annotation_id;
    }
    else if ($.is_number(_param)) {
        _annotation_id = _param;
    }
    else 
    if ($.is_string(_param)) {
        _annotation_id = parseInt(_param, 10);
    }
    else if ($.is_class(_param, 'List_item')) {
        _annotation_id = _param.get_annotation_id();
    }
				
    return (_annotation_id === this.get_annotation_id());
};

List_item.prototype._focus_classname = 'focus';

List_item.prototype.focus = function (_scrollto) {
    
    if ($.is_null(_scrollto)) {
        _scrollto = false;
    }
    
    var _ui = this.get_ui('.list-item:first');
    if (_ui.length === 0) {
        _ui = this.get_ui();
    }
    
    //如果已經是在focus狀態，則不做任何事情
    if (_ui.hasClass(this._focus_classname)) {
        return this;
    }
    
    this.blur_other_focus();
    this.set_selection();
    
    _ui.addClass(this._focus_classname);
    
    if (_scrollto === true) {
        _ui.scrollIntoView();
    }
    return this;
};

/**
 * 寫成靜態物件，用來取消選取範圍的定時器。
 */
List_item._blur_timer = null;

List_item.prototype.blur = function () {
    
    if (List_item._blur_timer !== null) {
		clearTimeout(List_item._blur_timer);
	}
    
    var _this = this;
    List_item._blur_timer = setTimeout(function () {
        _this.blur_other_focus();
        
        List_item._blur_timer = null;
    }, 5000);
};

List_item.prototype.blur_other_focus = function () {
    //先檢查是否有其他的focus
    var _other_focus = this.get_other_focus();
    
    if (_other_focus.length > 0) {
        _other_focus.removeClass(this._focus_classname);
    }
    
    //$.test_msg('List_item.blur_other_focus()', this.clear_selection);
    
    return this.clear_selection();
};

List_item.prototype.get_other_focus = function () {
    //檢查是否有其他的focus
    var _selector = '.' + 'list-item' + '.' + this._focus_classname;
    var _other_focus = $(_selector);
    return _other_focus;
};

List_item.prototype.remove = function () {
    KALS_text.selection.view.clear();
    return KALS_user_interface.prototype.remove.call(this);
};

// ---------
// Edit Respond View
// ---------

List_item.prototype.get_editor = function () {
    return KALS_text.tool.editor_container.editor;
};

List_item.prototype.get_list = function () {
    return KALS_text.tool.list;
};

List_item.prototype.set_editing = function() {
    var _ui = this.get_ui();
    var _editing_classname = 'editing';
    
    if (_ui.hasClass(_editing_classname)) {
		return this;
	}
    
    //將其他為編輯中的item取消
    var _selector = '.' + this._classname + '.' + _editing_classname;
    $(_selector).removeClass(_editing_classname);
    
    _ui.addClass(_editing_classname);
    return this;
};

List_item.prototype.view_thread = function (_callback) {
    
    //$.test_msg('TODO List_item.view_thread()', _callback);
    
    var _content = KALS_text.tool.view;
    var _topic_param = this.get_topic_param();
    _content.set_topic_param(_topic_param);
    KALS_window.setup_window(_content);
    return this;
};

//List_item.prototype._ready = false;

//List_item.prototype.is_ready = function () {
//    return this._ready = true;
//};


List_item.prototype.focus_respond = function (_respond_to_id) {
    
    var _list = this.get_list();
    
    var _result = _list.focus(_respond_to_id, true);
    
    if ($.is_null(_result)
        && this.is_enable('view')) {
        var _content = KALS_text.tool.view;
        _content.set_focus_id(_respond_to_id);
        
        this.view_thread();
    }
    return this;
};

/**
 * 從列表中回應標註
 */
List_item.prototype.respond_annotation = function () {
    
    var _respond_to = this.get_data();
    
    var _editor = this.get_editor();
    
    if ($.isset(_respond_to)) {
        _editor.respond_coll.add_respond_to(_respond_to);
    }
    
    return this;
};

List_item.prototype.edit_annotation = function () {
    
    //var _param = this.get_data();
    //var _editor = this.get_editor();
    
    //_editor.set_editing(_param);
    
    var _editor = this.get_editor();
    
    var _param = this.get_data();
    _editor.set_editing(_param);
    
    _editor.set_editing_item(this);    
    return this;
};

// ---------------------------------

/**
 * 設定Note是否閱讀
 * @param {Boolean} _readable 設定是否可閱讀
 * @returns {List_item.prototype}
 */
List_item.prototype.set_note_readable = function (_readable) {
    this.note.set_readable(_readable);
    return this;
};

/**
 * 是我的標註
 * @returns {Boolean}
 */
List_item.prototype.is_my_annotation = function () {
    return this._annotation_param.is_my_annotation();
};

/**
 * 初始化讀取權限監聽器
 * @returns {List_item}
 */
List_item.prototype._init_readable_policy_listener = function () {
    
    var _readable_policy_name;
    if (this.is_my_annotation() && this.is_respond()) {
        _readable_policy_name = "my_respond_readable";
    }
    else if (this.is_my_annotation() === false) {
        if (this.is_respond()) {
            _readable_policy_name = "other_respond_readable";
        }
        else {
            _readable_policy_name = "other_topic_readable";
        }
    }

    var _this = this;
    if (_readable_policy_name !== undefined) {
        KALS_context.policy.add_attr_listener(_readable_policy_name, function (_policy) {
            var _enable = _policy[_readable_policy_name]();
            _this.set_note_readable(_enable);
        });
    }
    
    return this;
};

/**
 * 初始化撰寫權限監聽器
 * @returns {List_item}
 */
List_item.prototype._init_writable_policy_listener = function () {
    
    var _policy_name;
    if (this.is_my_annotation()) {
        _policy_name = "respond_my_topic_wrtiable";
    }
    else {
        _policy_name = "respond_other_topic_wrtiable";
    }
    
    var _this = this;
    if (_policy_name !== undefined) {
        KALS_context.policy.add_attr_listener(_policy_name, function (_policy) {
            var _enable = _policy[_policy_name]();
            _this.set_respond_writable(_enable);
        });
    }
    return this;
};

/**
 * 設定是否可以撰寫標註
 * @param {Boolean} _readable 設定是否可閱讀
 * @returns {List_item.prototype}
 */
List_item.prototype.set_respond_writable = function (_writable) {
    /*
    var _ui = this.get_ui().find(".list-item:first");
    $.test_msg("List_item.set_respond_writable", [_writable, this._deny_respond_writable_classname]);
    if (_writable === true) {
        _ui.removeClass(this._deny_respond_writable_classname);
    }
    else {
        _ui.addClass(this._deny_respond_writable_classname);
    }
    */
    if (this.menu_block !== null) {
        this.menu_block.set_respond_writable(_writable);
    }
    if (this.menu_tooltip !== null) {
        this.menu_tooltip.set_respond_writable(_writable);
    }
    return this;
};

/* End of file List_item */
/* Location: ./system/application/views/web_apps/List_item.js *//**
 * List_item_topic
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 11:31:40
 * @extends {List_item}
 */
function List_item_topic(_param) {
    
    List_item.call(this, _param);
    
}

List_item_topic.prototype = new List_item();


/**
 * Create UI
 * @memberOf {List_item_topic}
 * @type {jQuery} UI
 */
List_item_topic.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('list-item-topic');
    
    var _item = List_item.prototype._$create_ui.call(this);
    _item.appendTo(_ui);
    
    var _respond_list = this._setup_respond_list();
    //$.test_msg('List_item_topic._$create_ui()', [$.isset(_respond_list), $.get_class(_respond_list)]);
    _respond_list.get_ui().appendTo(_ui);
    
    if (this._$respond_force_load === false) {
        var _param = this.get_data();
        //$.test_msg('List_item_topic._$create_ui()', _param.respond_list);
        
        if ($.isset(_param.respond_list)) {
			_respond_list.load_list(_param.respond_list);
		}    
    }
    else {
        _respond_list.load_list();
    }
    
    /*
    this._ready = false;
    var _this = this;
    _respond_list.add_listener(function (_respond_list) {
        _this.ready = true;
    }, true);
    */
    return _ui;
};

List_item_topic.prototype.show_recommend = function (_callback) {
    
    var _param = this.get_data();
    
    if (_param.has_recommend() === false) {
        $.trigger_callback(_callback);
        return this;
    }
    
    //var _recommnend_by = _param.recommend_by;
    //$.test_msg('TODO List_item_topic.show_recommend(_callback)', _recommnend_by.export_json());
    
    KALS_text.tool.recommend_hint.setup_recommend(this.get_annotation_param());
    
    return this; 
};

// ---------
// Respond List
// ---------

List_item_topic.prototype._$respond_force_load = false;

/**
 * @type {Respond_list_collection}
 */
List_item_topic.prototype.respond_list = null;

List_item_topic.prototype._setup_respond_list = function () {
    var _component = new Respond_list_collection(this);
    this.child('respond_list', _component);
    return _component;
};

// --------
// Overrider Other Methods
// --------

List_item_topic.prototype.focus = function (_scrollto) {
    
    List_item.prototype.focus.call(this, _scrollto);
    
    var _param = this.get_data();
    
    if (_param.is_my_annotation()) {
		this.show_recommend();
	}
        
    return this; 
};

List_item_topic.prototype.blur_other_focus = function () {
    
    KALS_text.tool.recommend_hint.close();
    
    return List_item.prototype.blur_other_focus.call(this);
};

/*
List_item_topic.prototype.set_selection = function () {
    
    List_item.prototype.set_selection.call(this);
    
    //var _param = this.get_data();
    //if (_param.has_recommend())
    //{
    //    var _recommend_by_scope = _param.recommend_by.scope;
    //    KALS_text.selection.recommend.set_scope_coll(_recommend_by_scope);
    //}
    return this;
};
*/

List_item_topic.prototype.clear_selection = function () {
    
    List_item.prototype.clear_selection.call(this);
    
    KALS_text.selection.recommend.clear();
    
    return this;
};

//List_item_topic.prototype._classname = 'list-item';

/**
 * 回應標註
 */
List_item_topic.prototype.respond_annotation = function () {
    return List_item_respond.prototype.respond_annotation.call(this);
};


/* End of file List_item_topic */
/* Location: ./system/application/views/web_apps/List_item_topic.js *//**
 * List_item_respond
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 11:31:58
 * @extends {List_item}
 */
function List_item_respond(_param, _topic_item) {
    
    List_item.call(this, _param);

    this._set_topic_item(_topic_item);
}

List_item_respond.prototype = new List_item();

List_item_respond.prototype._classname = 'list-item-respond';

/**
 * @type {List_item_topic}
 */
List_item_respond.prototype._topic_item = null;

List_item_respond.prototype._set_topic_item = function (_topic_item) {
    if ($.isset(_topic_item)) {
        this._topic_item = _topic_item;
    }
    return this;
};

List_item_respond.prototype.get_topic_param = function () {
    return this._topic_item.get_annotation_param();
};

List_item_respond.prototype.get_topic_id = function () {
    return this._topic_item.get_annotation_id();
};

List_item_respond.prototype.view_thread = function (_focus_id, _callback) {
    
    if ($.is_function(_focus_id) && $.is_null(_callback)) {
        _callback = _focus_id;
        _focus_id = null;
    }
    
    var _content = KALS_text.tool.view;
    if ($.is_null(_focus_id)) {
		_content.set_focus_id(this.get_annotation_id());
	}
	else {
		_content.set_focus_id(_focus_id);
	}
    
    return List_item.prototype.view_thread.call(this, _callback);
};

List_item_respond.prototype.focus_respond = function (_respond_to_id) {
    
    var _list = this.get_list();
    
    var _result = _list.focus(_respond_to_id, true);
    
    if ($.is_null(_result)
        && this.is_enable('view')) {
        var _content = KALS_text.tool.view;
        _content.set_focus_id(_respond_to_id);
        
        this.view_thread(_respond_to_id);
    }
    return this;
};


List_item_respond.prototype._disable_option = [
    //'like', 
    'policy'
];

/**
 * 從回覆列表中，回應指定標註
 * 會開啟Window_view
 */
List_item_respond.prototype.respond_annotation = function () {
    var _respond_to = this.get_data();
    
    var _content = KALS_text.tool.view;
    _content.set_respond_param(_respond_to);
	_content._respond_param = _respond_to;
    _content.set_focus_id(_respond_to.annotation_id);
	
    return this.view_thread();
};

List_item_respond.prototype.edit_annotation = function () {
    
    var _param = this.get_data();
    var _content = KALS_text.tool.view;
    _content.set_edit_param(_param);
    
    return this.view_thread(_param.annotation_id);
};

/* End of file List_item_respond */
/* Location: ./system/application/views/web_apps/List_item_respond.js *//**
 * View_annotation
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2013/11/19 下午 07:27:52
 * @extends {List_item}
 * @param {Annotation_param} _annotation_param
 */
function View_annotation(_annotation_param) {
    
    List_item.call(this, _annotation_param);
}

View_annotation.prototype = new List_item();

/**
 * 繼承自KALS_controller，要結合起來
 */
var _prototype = new KALS_controller();
    
for (var _i in _prototype) {
	if (typeof(View_annotation.prototype[_i]) === 'undefined') {
		View_annotation.prototype[_i] = _prototype[_i];
	}
}

View_annotation.prototype._$name = 'view-annotation';

View_annotation.prototype._$create_ui = function () {
	var _ui = List_item.prototype._$create_ui.call(this);
	_ui.addClass(this._$name);
	return _ui;
};

/* End of file View_annotation */
/* Location: ./system/application/views/web_apps/kals_framework/View_annotation.js *//**
 * Recommend_hint
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/12 上午 11:07:59
 * @extends {Overlay_modal}
 */
function Recommend_hint() {
    
    Overlay_modal.call(this);
}

Recommend_hint.prototype = new Overlay_modal();

Recommend_hint.prototype._$modal_name = 'Recommend_hint';

Recommend_hint.prototype._$exposable = false;

Recommend_hint.prototype._$tooltip_id = 'recommend_hint';

/**
 * @type {List_item_topic}
 */
//Recommend_hint.prototype._recommended_item = null;

/**
 * @type {Annotation_param}
 */
Recommend_hint.prototype._recommended = null;

// ---------
// Recommended Setup
// --------

/**
 * @param {List_item}
 */
Recommend_hint.prototype.setup_recommend = function(_recommended) {
    
    if (KALS_CONFIG.enable_annotation_recommend === false) {
        /**
         * 如果允許建議的話，再讓他可以用標註
         */
        return this;
    }
    
    if ($.isset(_recommended)) {   
        //this._recommended_item = _recommended_item;
        //this._recommended = _recommended_item.get_annotation_param();
        this._recommended = _recommended;
        
        if (this.has_recommend() === false) {
			return this;
		}
        
        this._setup_position_words();
        this.setup_position();
        
        this.close();
        
        this.open();
    }
    return this;
};

/**
 * 是否有建議標註？
 * @return {boolean}
 */
Recommend_hint.prototype.has_recommend = function () {
    
    if ($.is_null(this._recommended)) {
		return false;
	}
    //$.test_msg('Recommend_hint.has_reocmmend()', this._recommended.recommend);
    //$.test_msg('Recommend_hint.has_reocmmend()', [(this.has_recommend_by() || this.has_tips()), this.has_recommend_by(), this.has_tips()]);
    return (this.has_recommend_by() || this.has_tips());
};


Recommend_hint.prototype.has_recommend_by = function () {
    return ($.isset(this._recommended)
        && typeof(this._recommended.recommend) != 'undefined'
        && this._recommended.recommend !== null
        && typeof(this._recommended.recommend.recommend_by) == 'object'
        && $.is_class(this._recommended.recommend.recommend_by, 'Annotation_param'));
};


Recommend_hint.prototype.has_tips = function () {
    return ($.isset(this._recommended)
        && $.isset(this._recommended.recommend)
        && typeof(this._recommended.recommend.tips) == 'object'
        && this._recommended.recommend.tips.length > 0);
};

Recommend_hint.prototype.get_recommended_id = function () {
    if ($.is_null(this._recommended)) {
		return null;
	}
	else {
		return this._recommended.annotation_id;
	}
};

/**
 * 取得被建議的標註
 * @return {Annotation_param}
 */
Recommend_hint.prototype.get_recommend_by = function () {
    if (this.has_recommend_by()) {
		return this._recommended.recommend.recommend_by;
	}
	else {
		return null;
	}
};

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {Recommend_hint}
 * @type {jQuery} UI
 */
Recommend_hint.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('tooltip recommend-hint')
        .appendTo($('body'))
        .hide();
    
    var _content = $('<div class="tip-content kals-modal"></div>')
        .appendTo(_ui);
    
    var _recommend_content = this._create_recommend_content();
    _recommend_content.appendTo(_content);
    
    // ---------
    
    var _needle_top = $('<div class="tip-needle top"></div>')
        .prependTo(_ui);
    var _needle_bottom = $('<div class="tip-needle bottom"></div>')
        .appendTo(_ui);
    
    var _this = this;
    _ui.click(function () {
        $.test_msg('Recommend_hint._$create_ui() click', $.isset(_this._recommended));
        KALS_text.tool.recommend.setup_recommend(_this._recommended);
    });
    
    return _ui;
};

Recommend_hint.prototype._create_recommend_content = function () {
    
    var _content = $('<div></div>')
        .addClass('recommend-hint');
    
    var _recommend_img = KALS_context.get_image_url('has-recommend.gif')
        .appendTo(_content);
    
    return _content;
};

// ---------
// POSITION
// ---------

Recommend_hint.prototype.word_id_prefix = 'kals_word_';

Recommend_hint.prototype._first_word = null;
Recommend_hint.prototype._last_word = null;

Recommend_hint.prototype._setup_position_words = function () {
    
    if (this.has_recommend() === false) {
		return this;
	}
    
    var _scope = this._recommended.scope;
    var _first_index = _scope.get_first_index();
    var _last_index = _scope.get_last_index();
    
    this._first_word = $('#' + this.word_id_prefix + _first_index);
    this._last_word = $('#' + this.word_id_prefix + _last_index);
    
    return this;
};

Recommend_hint.prototype._$default_position = 'top';

Recommend_hint.prototype._touch_top = function () {
    var _ui = this.get_ui();
    var _ui_height = _ui.height();
    var _first_word = this._first_word;
    //var _first_word_top = _first_word.offset().top;
    var _first_word_top = $.get_offset_top(_first_word);
    
    var _body_top = 0;
    if ($.is_small_height() === false) {
		_body_top = KALS_toolbar.get_ui().height();
	}
    //$.test_msg('Recommend_hint._touch_top()', [_body_top, _first_word_top, _ui_height]);
    return (_first_word_top - _ui_height - 5 < _body_top);
};

Recommend_hint.prototype._touch_bottom = function () {
    var _ui = this.get_ui();
    var _ui_height = _ui.height();
    
    var _last_word = this._last_word;
    //var _last_word_bottom = _last_word.offset().top + _last_word.height();
    var _last_word_bottom = $.get_offset_bottom(_last_word);
    
    var _body_bottom = $('body').height();
    //$.test_msg('Recommend_hint._touch_bottom()', [_body_bottom, _last_word_bottom, _ui_height, _last_word_bottom + _ui_height, ( _last_word_bottom + _ui_height > _body_bottom )]);
    return ( _last_word_bottom + _ui_height + 5 > _body_bottom );
};

Recommend_hint.prototype.setup_position = function (_callback) {
    
    if (KALS_CONFIG.enable_annotation_recommend === false) {
        $.trigger_callback(_callback);
        return;
    }
    
    if (this.has_recommend() === false) {
        //$.test_msg('Recommend_hint.setup_position()'
        //    , [this.has_recommend(), this.has_recommend_by(), this.has_tips()]);
        return this;
    }
    
    var _pos = this._$default_position;
    //$.test_msg('Recommend_hint.setup_position() decide pos', [_pos, this._touch_top(), this._touch_bottom()]);
    if (_pos === 'top'
        && (this._touch_top() === true && this._touch_bottom() === false)) {
        _pos = 'bottom';
    }
    else if (_pos === 'bottom'
        && (this._touch_bottom() === true && this._touch_top() === false)) {
        _pos = 'top';
    }
    //$.test_msg('Recommend_hint.setup_position() final pos', _pos);
    
    var _tooltip_bottom_classname = 'bottom';
    var _ui = this.get_ui();
    
    var _get_center = function (_obj) {
        var _obj_width = _obj.width();
        //var _obj_left = _obj.offset().left;
        var _obj_left = $.get_offset_left(_obj);
        return _obj_left + (_obj_width / 2);
    };
    
    //$.test_msg('Recommend_hint.setup_position()', _pos, this._last_word.css('color', 'blue'));
    
    //var _ui_offset = _ui.offset();
    var _ui_offset = $.get_offset(_ui);
    var _ui_width = _ui.width();
    var _center, _ui_left, _ui_top;
    if (_pos === 'bottom') {     
       /*
       $.test_msg('Recommend_hint.setup_position() bottom before', [_ui.css('position'), _ui.offset().top, this._last_word.offset().top]);
        _ui.position({
            of: this._last_word,
            my: 'center top',
            at: 'center bottom',
            offset: '0 5'
        });
        $.test_msg('Recommend_hint.setup_position() bottom after', [_ui.offset().top, this._last_word.offset().top]);
        */
        _center = _get_center(this._last_word);
        
        //_ui_top = this._last_word.offset().top + this._last_word.height();
        _ui_top = $.get_offset_bottom(this._last_word);
        _ui_top = _ui_top + 10; 
        
        _ui.addClass(_tooltip_bottom_classname);
    }
    else {
        /*
        _ui.position({
            of: this._first_word,
            my: 'center bottom',
            at: 'center top',
            offset: '0 -5'
        });
        */
        _center = _get_center(this._first_word);
        //_ui_top = this._first_word.offset().top - _ui.height() - 10;
        _ui_top = $.get_offset_top(this._first_word);
        _ui_top = _ui_top - _ui.height() - 10;
       
        _ui.removeClass(_tooltip_bottom_classname);
    }
    
    _ui_left = _center - (_ui_width / 2);
    _ui.css({
        top: _ui_top + 'px',
        left: _ui_left + 'px'
    });
    
    
    //修正左右
    if (_ui_offset.left < 0) {
		_ui.css('left', '0px');
	}
    var _body_right = $('body').width();
    if (_ui_offset.left + _ui_width > _body_right) {
        _ui_left = _body_right - _ui_width;
        _ui.css('left', _ui_left + 'px');
    }
    
    //修正最上方
    var _body_top = 0;
    if ($.is_small_height() === false) {
		_body_top = KALS_toolbar.get_ui().height();
	}
    if (_ui_offset.top < _body_top) {
		_ui.css('top', _body_top + 'px');
	}
    
    $.trigger_callback(_callback);
    
    return this;
};

//2010.11.18 因為允許移動，所以不固定
Recommend_hint.prototype._$onviewportmove = function () {
    return this.setup_position();
};
/* End of file Recommend_hint */
/* Location: ./system/application/views/web_apps/Recommend_hint.js *//**
 * Recommend_tooltip
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/12 上午 11:07:59
 * @extends {Recommend_hint}
 */
function Recommend_tooltip() {
    
    Recommend_hint.call(this);
    
}

Recommend_tooltip.prototype = new Recommend_hint();

Recommend_tooltip.prototype._$modal_name = 'Recommend_tooltip';

Recommend_tooltip.prototype._$tooltip_id = 'recommend_tooltip';

// ---------
// Recommended Setup
// --------

/**
 * @param {Annotation_param}
 */
Recommend_tooltip.prototype.setup_recommend = function(_recommended, _scroll_to) {
    if ($.isset(_recommended)) {   
        if ($.is_number(_recommended) || $.is_string(_recommended)) {
            return this.load_recommend(_recommended);
        }
    
        this._recommended = _recommended;
        
        //$.test_msg('Recommend_tooltip.setup_recommend()', this.has_recommend());
        if (this.has_recommend() === false) {
			return this;
		}
            
        if (this.recommended_item === null) {
			var _recommended_item = this._setup_recommended_item(_recommended);
			_recommended_item.get_ui().appendTo(this._recommended_item_container);
		}
		else {
			this.recommended_item.set_data(_recommended);
		}
        
        this.setup_recommend_by();
        this.setup_tips();
        this._setup_has_recommend_by();
        
        this._setup_position_words();
        this.toggle_submit_loading(false);
        
        //關掉其他的
        KALS_text.tool.close();
        KALS_text.tool.recommend_hint.close();
        
        //設定選取範圍
        var _recommended_scope = this._recommended.scope;
        KALS_text.selection.recommended.set_scope_coll(_recommended_scope);
        if ($.isset(_scroll_to) && _scroll_to === true) {
			//KALS_text.selection.recommended.scroll_into_view();
		}
        
        KALS_context.hash.set_field('recommend', this._recommended.annotation_id);
        
        this.setup_position();
        var _this = this;
        this.open();
        this.setup_position();
        
    }
    return this;
};

Recommend_tooltip.prototype.load_recommend = function (_annotation_id, _callback) {
    
    var _this = this;
    //$.test_msg('Recommend_tooltip.load_recommend() id', _annotation_id);
    KALS_text.tool.load_annotation_param(_annotation_id, function (_param) {
        
        //$.test_msg('Recommend_tooltip.load_recommend()', _param);
        //$.test_msg('Recommend_tooltip.load_recommend() param', _param.export_json());
        _this.setup_recommend(_param, true);
        $.trigger_callback(_callback);
    });
    return false;
};

Recommend_tooltip.prototype.setup_recommend_by = function () {
    if (this.has_recommend_by() === false) {
		return this;
	}
    
    var _recommend_by = this._recommended.recommend.recommend_by;
    if ($.is_class(_recommend_by, 'Annotation_param')) {
        if (this.recommend_by_item === null) {
			var _recommend_by_item = this._setup_recommend_by_item(_recommend_by);
			_recommend_by_item.get_ui().appendTo(this._recommend_by_item_container);
		}
		else {
			this.recommend_by_item.set_data(_recommend_by);
		}
        
        //設定選取範圍
        var _recommend_by_scope = _recommend_by.scope;
        KALS_text.selection.recommend_by.set_scope_coll(_recommend_by_scope);
    }
    return this;
};

Recommend_tooltip.prototype._has_recommend_by_classname = 'has-recommend-by';

Recommend_tooltip.prototype._setup_has_recommend_by = function () {
    
    var _ui = this.get_ui();
    if (this.has_recommend_by()) {
		_ui.addClass(this._has_recommend_by_classname);
	}
	else {
		_ui.removeClass(this._has_recommend_by_classname);
	}
    return this;
};

Recommend_tooltip.prototype.setup_tips = function () {
    var _tips = this._recommended.recommend.tips;
    
    if ($.is_array(_tips) && _tips.length > 0 && _tips[0] !== false) {
        this._tips_heading.show();
        this._tips_container.show().empty();
        //$.test_msg('Recommend_tooltip.setup_tips()', _tips.length);
        for (var _i in _tips) {
            var _tip_list = this._create_tip_list(_tips[_i]);
            if ($.isset(_tip_list)) {
                _tip_list.appendTo(this._tips_container);
            }
        }
    }
    else {
        this._tips_heading.hide();
        this._tips_container.hide();
    }
    
    return this;
};

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {Recommend_tooltip}
 * @type {jQuery} UI
 */
Recommend_tooltip.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('recommend-tooltip tooltip draggable-tool')
        .appendTo($('body'))
        .hide();
    
    var _content = $('<div class="tip-content kals-modal"></div>')
        .appendTo(_ui);
    
    // ---------
    
    var _recommended_item_container = this._create_recommended_item_container();
    _recommended_item_container.appendTo(_content);
    
    var _header = this._create_header_component();
    _header.appendTo(_recommended_item_container);
    
    //var _recommended_item = this._setup_recommended_item();
    //_recommended_item.get_ui().appendTo(_recommended_item_container);
    
    // ---------
    
    var _recommend_content = $('<div></div>')
        .addClass('recommend-content')
        .appendTo(_content);
    
    var _heading = $('<div></div>')
        .addClass('heading')
        .appendTo(_recommend_content);
    
    var _heading_lang = new KALS_language_param(
        'There are some recommend for you:',
        'recommend_tooltip.heading'
    );
    
    KALS_context.lang.add_listener(_heading, _heading_lang);
    
    this._tips_heading = _heading;
    
    // ---------
    
    var _tips_container = this._create_tips_container();
    _tips_container.appendTo(_recommend_content);
    
    var _recommend_by_item_container = this._create_recommend_by_item_container();
    _recommend_by_item_container.appendTo(_recommend_content);
    
    //var _list_item = this._setup_list_item();
    //_list_item.get_ui().appendTo(_list_item_container);
    
    // --------
    
    var _bottom = this._create_bottom_container();
    _bottom.appendTo(_content);
    
    var _submit = this._create_submit_container();
    _submit.appendTo(_bottom);
    
    var _submit_loading = this._create_submit_loading_component();
    _submit_loading.appendTo(_bottom);
    
    var _this = this;
    setTimeout(function () {
        KALS_context.policy.add_attr_listener('write', function (_policy) {
            if (_policy.writable()) {
                //_bottom.show();
            }
            else {
                //_bottom.hide();
                _this.close();
            }
        });
    }, 0);
    
    // ---------
    
    //var _needle_top = $('<div class="tip-needle top"></div>')
    //    .prependTo(_ui);
    //var _needle_bottom = $('<div class="tip-needle bottom"></div>')
    //    .appendTo(_ui);
    
    //設定可拖曳
    var _draggable_config = {
        handle: 'div.annotation-tool-header'
    };
    
    if ($('body').height() > _ui.height() + 100) {
        _draggable_config.containment = 'parent';
    }
    
    _ui.draggable(_draggable_config);
    
    _ui.bind('dragstop', function(_event) {
        var _body_top = 0;
        if ($.is_small_height() === false) {
            _body_top = KALS_toolbar.get_ui().height();
        }
        //if (_ui.offset().top < _body_top) {
        if ($.get_offset_top(_ui) < _body_top) {
            _ui.css('top', _body_top + 'px');
        } 
    });
    
    _this = this;
    _ui.mouseover(function () {
        $('.draggable-tool.hover').removeClass('hover');
        $(this).addClass('hover');
    });
    
    return _ui;
};

Recommend_tooltip.prototype._header_component = null;

/**
 * 用Annotation_tool._create_header_component()
 */
Recommend_tooltip.prototype._create_header_component = function () {
    return Annotation_tool.prototype._create_header_component.call(this);
};    

/**
 * @type {jQuery}
 */
Recommend_tooltip.prototype._tips_heading = null;

/**
 * @type {jQuery}
 */
Recommend_tooltip.prototype._tips_container = null;

Recommend_tooltip.prototype._create_tips_container = function () {
    var _ui = $('<ul></ul>')
        .addClass('tips-container');
    this._tips_container = _ui;
    return _ui;
};

Recommend_tooltip.prototype._create_tip_list = function (_tip) {
    
    if ($.is_null(_tip)) {
		return null;
	}
    
    var _ui = $('<li></li>')
        .addClass('tip-list');
    
    _ui.html(_tip);
    
    return _ui;
};

/**
 * @type {jQuery}
 */
Recommend_tooltip.prototype._recommended_item_container = null;

Recommend_tooltip.prototype._create_recommended_item_container = function () {
    var _ui = $('<div></div>')
        .addClass('recommended-item-container');
        
    this._recommended_item_container = _ui;
    return _ui;
};

/**
 * @type {jQuery}
 */
Recommend_tooltip.prototype._recommend_by_item_container = null;

Recommend_tooltip.prototype._create_recommend_by_item_container = function () {
    var _ui = $('<div></div>')
        .addClass('recommend-by-item-container');
    
    var _heading = $('<div></div>')
        .addClass('heading')
        .appendTo(_ui);
    
    var _heading1 = $('<span></span>')
        .appendTo(_heading);
    
    var _heading1_lang = new KALS_language_param(
        'There is',
        'recommend_tooltip.recommend_by.heading1'
    );
    
    var _heading2 = $('<span></span>')
        .addClass('recommend-by-annotation')
        .appendTo(_heading);
    
    var _heading2_lang = new KALS_language_param(
        'a recommend annotation (with green color)',
        'recommend_tooltip.recommend_by.heading2'
    );
    
    var _heading3 = $('<span></span>')
        .appendTo(_heading);
    
    var _heading3_lang = new KALS_language_param(
        'for you:',
        'recommend_tooltip.recommend_by.heading3'
    );
    
    KALS_context.lang.add_listener(_heading1, _heading1_lang);
    KALS_context.lang.add_listener(_heading2, _heading2_lang);
    KALS_context.lang.add_listener(_heading3, _heading3_lang);
        
    this._recommend_by_item_container = _ui;
    return _ui;
};


/**
 * @type {Recommend_list_item}
 */
Recommend_tooltip.prototype.recommended_item = null;

Recommend_tooltip.prototype._setup_recommended_item = function (_param) {
    //var _param = this._recommended;
    var _component = new Recommend_list_item(_param);
    this.child('recommended_item', _component);
    _component.add_class('recommended-item');
    return _component;
};

/**
 * @type {Recommend_list_item}
 */
Recommend_tooltip.prototype.recommend_by_item = null;

Recommend_tooltip.prototype._setup_recommend_by_item = function (_param) {
    var _component = new Recommend_list_item(_param);
    this.child('recommend_by_item', _component);
    _component.add_class('recommend-by-item');
    return _component;
};



// --------
// Submit
// --------

Recommend_tooltip.prototype._bottom_container = null;

Recommend_tooltip.prototype._create_bottom_container = function () {
    var _ui = $('<div></div>')
        .addClass('bottom-container');
    
    this._bottom_container = _ui;
    return _ui;
};

Recommend_tooltip.prototype._submit_container = null;

Recommend_tooltip.prototype._create_submit_container = function () {
    var _ui = $('<div></div>')
        .addClass('submit-container');
    
    var _heading = $('<div></div>')
        .addClass('submit-heading')
        .appendTo(_ui);
    
    var _heading_lang = new KALS_language_param(
        'Base on this recommend, you can do following options:',
        'recommend_tooltip.submit.heading'
    );
    
    KALS_context.lang.add_listener(_heading, _heading_lang);
    
    // --------
        
    var _this = this;
    
    var _accept_delete_submit = $('<button type="button"></button>')
        .addClass('accept-delete submit-option')
        .click(function () {
            _this.accept();
        })
        .appendTo(_ui);
    
    var _accept_delete_lang = new KALS_language_param(
        'DELETE YOUR ANNOTATION',
        'recommend_tooltip.submit.accept_delete'
    );
    
    KALS_context.lang.add_listener(_accept_delete_submit, _accept_delete_lang);
    
    // ---------
    
    var _accept_recommend_submit = $('<button type="button"></button>')
        .addClass('accept-recommend submit-option')
        .click(function () {
            _this.accept();
        })
        .appendTo(_ui);
    
    var _accept_recommend_lang = new KALS_language_param(
        'REWRITE YOUR ANNOTATION',
        'recommend_tooltip.submit.accept_recommend'
    );
    
    KALS_context.lang.add_listener(_accept_recommend_submit, _accept_recommend_lang);
    
    // ---------
    
    var _reject_submit = $('<button type="button"></button>')
        .addClass('reject submit-option')
        .click(function () {
            _this.reject();
        })
        .appendTo(_ui);
    
    var _reject_lang = new KALS_language_param(
        'REJECT RECOMMEND',
        'recommend_tooltip.submit.reject'
    );
    
    KALS_context.lang.add_listener(_reject_submit, _reject_lang);
    
    _accept_delete_submit.setup_hover();
    _accept_recommend_submit.setup_hover();
    _reject_submit.setup_hover();
    
    this._submit_container = _ui;
    
    return _ui;
};

Recommend_tooltip.prototype._$default_position = 'bottom'; 

// ---------
// Loading
// ---------

Recommend_tooltip.prototype._loading_classname = 'loading';

Recommend_tooltip.prototype._submit_loading_component = null;

Recommend_tooltip.prototype._create_submit_loading_component = function () {
    var _component = $('<div></div>')
        .addClass('submit-loading-component')
        .hide();
        
    this._loading_component = _component;
    
    var _lang = new KALS_language_param(
        'Now Loading...',
        'recommend_tooltip.loading'
    );
    
    KALS_context.lang.add_listener(_component, _lang);
    
    this._submit_loading_component = _component;
    
    return _component;
};

Recommend_tooltip.prototype.toggle_submit_loading = function (_is_loading, _callback) {
    
    var _ui = this.get_ui();
    if ($.is_null(_is_loading)) {
        _is_loading = !(this.is_loading());
    }
    
    if (_is_loading) {
        _ui.addClass(this._loading_classname);
        
        var _this = this;
        this._submit_container.fadeOut('fast', function () {
            _this._submit_loading_component.fadeIn('fast', function () {
                $.trigger_callback(_callback);
            });
        });
    }
    else {
        _ui.removeClass(this._loading_classname);
        
        if (this._submit_loading_component === null) {
			return this;
		}
        this._submit_container.show();
        this._submit_loading_component.hide();
        $.trigger_callback(_callback);
    }
    return this;
};

/**
 * 是否正在讀取推薦提交中
 * @return {boolean}
 */
Recommend_tooltip.prototype.is_submit_loading = function () {
    var _ui = this.get_ui();
    return (_ui.hasClass(this._loading_classname));
};


// --------
// Submit
// --------

Recommend_tooltip.prototype._accept_url = 'annotation_setter/recommend_accept';

Recommend_tooltip.prototype.accept = function () {
    if (this.is_submit_loading()) {
		return this;
	}
    
    var _this = this;
    //注意的是，accept_recommend回傳的資料是更新過後的資料喔！
    var _callback = function (_data) {
        
        KALS_text.selection.select.clear();
        
        if (_data !== false)    //如果是錯誤的狀況，才會回傳false
        {
            var _reload_my_callback = function () {
                
                var _lang;
                if (typeof(_data.annotation_id) != 'undefined') {
                    //將新增的標註作為修改對象
                    var _annotation_id = _data.annotation_id;
                    KALS_text.tool.list.set_editing_param(_annotation_id);
                    
                    //先改變選取位置
                    var _recommend_by = _this.get_recommend_by();
                    var _recommend_by_scope = _recommend_by.scope;
                    KALS_text.selection.select.set_scope_coll(_recommend_by_scope);
                    
                    _lang = new KALS_language_param(
                        'Your annotation has been moved to recommend annotation\'s scope. You can edit it!',
                        'recommend_tooltip.submit.accept_recommend.notify'
                    );    
                }
                else {
                    _lang = new KALS_language_param(
                        'Your annotation has been deleted. Try to write another better!',
                        'recommend_tooltip.submit.accept_delete.notify'
                    );
                }
                KALS_util.notify(_lang);
                
                _this.close();
            };
            
            //因為範圍改變了，所以需要重新讀取
            if (typeof(_data.my) != 'undefined') {
				KALS_text.load_my.reload(_data.my, _reload_my_callback);
				
				if (typeof(_data.nav) != 'undefined') {
					KALS_text.load_navigation.reload(_data.nav);
				}
			}
			else {
				_reload_my_callback();
			}
        }
    };
    
    var _config = {
        url: this._accept_url,
        data: this.get_recommended_id(),
        callback: _callback
    };
    
    this.toggle_submit_loading(true, function () {
        //2010.11.14 測試用
        //_callback({annotation_id: 1212});return this;
        
        KALS_util.ajax_get(_config);
    });    
    
    return this;
};

Recommend_tooltip.prototype._reject_url = 'annotation_setter/recommend_reject';

Recommend_tooltip.prototype.reject = function () {
    if (this.is_submit_loading()) {
		return this;
	}
    
    var _this = this;
    //var _recommended_list_item = this._recommended_list_item;
    
    var _callback = function (_data) {
        var _recommended = _this._recommended;
        //刪除
        _recommended.recommend = null;
        //_recommended_list_item.set_data(_recommended);
        
        _this.close();
        
        //將新增的標註作為修改對象
        var _annotation_id = _recommended.annotation_id;
        KALS_text.tool.set_editing_param(_annotation_id);
        
        var _recommended_scope = _recommended.scope;
        KALS_text.selection.select.set_scope_coll(_recommended_scope);
    };
    
    var _config = {
        url: this._reject_url,
        data: this.get_recommended_id(),
        callback: _callback
    };
    
    this.toggle_submit_loading(true, function () {
        //2010.11.14 測試用
        //_callback(); return this;
        
        KALS_util.ajax_get(_config);    
    });
    return this;
};

Recommend_tooltip.prototype.close = function (_callback) {
    KALS_text.selection.recommend_by.clear();
    KALS_text.selection.recommended.clear();
    KALS_context.hash.delete_field('recommend');
    
    Overlay_modal.prototype.close.call(this, _callback);
};
Recommend_tooltip.prototype._$onviewportmove = null;

/* End of file Recommend_tooltip */
/* Location: ./system/application/views/web_apps/Recommend_tooltip.js *//**
 * Recommend_list_item
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/13 上午 12:09:12
 * @extends {List_item}
 */
function Recommend_list_item(_param) {
    
    List_item.call(this, _param);
    
}

Recommend_list_item.prototype = new List_item();

Recommend_list_item.prototype._menu_style_default = 'block';
Recommend_list_item.prototype._disable_option = ['respond', 'edit', 'delete', 'recommend'];

Recommend_list_item.prototype._$create_ui = function () {
    
    var _ui = List_item.prototype._$create_ui.call(this);
    
    var _menu_block = this.menu_block;
    _menu_block.get_ui().prependTo(_ui);
    
    return _ui;
};

Recommend_list_item.prototype.focus = function () {
    //什麼都不做
    return this;
};

Recommend_list_item.prototype.view_thread = function (_callback) {
    
    var _content = KALS_text.tool.view;
    _content.set_stop_select();
    _content.set_temp_logout();
    
    return List_item.prototype.view_thread.call(this, _callback);
};

/* End of file Recommend_list_item */
/* Location: ./system/application/views/web_apps/Recommend_list_item.js *//**
 * View_anchor_text_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/6 下午 10:30:46
 * @extends {KALS_user_interface}
 * @param {Annotation_param} _topic_param
 */
function View_anchor_text_component(_topic_param) {
    
    KALS_user_interface.call(this);
    
    this.set_topic_param(_topic_param);
}

// Extend from KALS_user_interface
View_anchor_text_component.prototype = new KALS_user_interface();

/**
 * @type {Annotation_param}
 */
View_anchor_text_component.prototype._topic_param = null;

/**
 * @type {Scope_collection_param}
 */
View_anchor_text_component.prototype._scope_coll = null;

/**
 * @type {String}
 */
View_anchor_text_component.prototype._anchor_text = null;

View_anchor_text_component.prototype.set_topic_param = function (_topic_param) {
    if ($.is_class(_topic_param, 'Annotation_param')) {
        this._topic_param = _topic_param;
        var _anchor_text = this.get_anchor_text(_topic_param.scope);
        this.set_anchor_text(_anchor_text);
    }
    return this;
};

/**
 * 取得標註範圍文字
 * @param {Array} _scope_coll
 */
View_anchor_text_component.prototype.get_anchor_text = function (_scope_coll) {
    
    var _text = KALS_text.selection.text;
    
    var _recommend_scope_coll = _text.get_recommend_scope_coll(_scope_coll);
    var _focused_anchor_text = _text.get_display_anchor_text(_recommend_scope_coll, _scope_coll);
    
    return _focused_anchor_text;
};

View_anchor_text_component.prototype.set_anchor_text = function (_anchor_text) {
    this._anchor_text = _anchor_text;
    var _text_container = this._create_text_container();
    if ($.isset(_anchor_text)) {
		_text_container.html(_anchor_text);
	}
	else {
		_text_container.empty();
	}
    return this;
};

View_anchor_text_component.prototype.clear_anchor_text = function () {
    return this.set_anchor_text(null);
};

// --------
// UI
// --------

View_anchor_text_component.prototype._classname = 'view-anchor-text-component';

/**
 * Create UI
 * @memberOf {View_anchor_text_component}
 * @type {jQuery} UI
 */
View_anchor_text_component.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass(this._classname)
        .addClass('kals-paragraph');
    
    var _text_container = this._create_text_container();
    _text_container.appendTo(_ui);
        
    return _ui;
};

/**
 * @type {jQuery}
 */
View_anchor_text_component.prototype._text_container = null;

/**
 * @type {jQuery}
 */
View_anchor_text_component.prototype._create_text_container = function () {
   if ($.is_null(this._text_container)) {
       var _ui = $('<div></div>')
           .addClass('text-container');
       this._text_container = _ui;
   } 
   return this._text_container;
};

View_anchor_text_component.prototype.reset = function () {
    return this.clear_anchor_text();
};

View_anchor_text_component.prototype.focus = function () {
    var _anchor = this.get_ui();
    //$.test_msg("View_anchor_text_component", "focus");
    _anchor.scrollIntoView();
};

/* End of file View_anchor_text_component */
/* Location: ./system/application/views/web_apps/View_anchor_text_component.js *//**
 * View_list_collection
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/6 下午 10:31:08
 * @extends {List_collection}
 * @param {Annotation_param} _topic_param
 */
function View_list_collection(_topic_param) {
    
    List_collection.call(this);
    
    this.set_topic_param(_topic_param);
}

View_list_collection.prototype = new List_collection();

View_list_collection.prototype._$name = "view-list";

View_list_collection.prototype._$topic_id = null;

View_list_collection.prototype._$enable_check_login = false;

View_list_collection.prototype._$target_topic = true;

/**
 * 預設讀取的回應標註
 * @type {number|null} 如果是null，表示讀取全部
 */
View_list_collection.prototype._$respond_limit = null;

/**
 * 排序的方向。
 * @type {string} desc|asc，如果是null，則由系統預設
 */
View_list_collection.prototype._$direction = 'asc';

/**
 * 回應的排序方向。
 * @type {string} desc|asc，如果是null，則由系統預設
 */
View_list_collection.prototype._$respond_direction = 'asc';

/**
 * @type {Annotation_param}
 */
View_list_collection.prototype._topic_param = null;

View_list_collection.prototype.set_topic_param = function (_topic_param) {
    if ($.isset(_topic_param)) {
        this._topic_param = _topic_param;
        
        var _topic_id = _topic_param.annotation_id;
        this._$topic_id = _topic_id;
        
        this.load_list(_topic_param);
    }
    return this;
};

View_list_collection.prototype.create_list_item = function(_param) {
    if (this._$target_topic === true) {
        return new View_list_item_topic(_param, this._topic_param);
    }
    else {
        return new View_list_item_respond(_param, this._topic_param);
    }
};

/**
 * 如果底下有respond_list的話，則順延到底下的respond_list去。
 * @param {Annotation_param} _param
 * @param {boolean} _from_head
 */
View_list_collection.prototype.add_list_item = function(_param, _from_head) {
    if ($.is_class(_param.topic, 'Annotation_param')) {
        var _topic_param = _param.topic;
        
        //$.test_msg('View_list_colleciton.add_list_item() add repsond param', _topic_param.export_json());
        
        var _topic_item = this.focus(_topic_param, false);
        
        if (typeof(_topic_item.respond_list) == 'object'
            && _topic_item.respond_list !== null) {
            _topic_item.respond_list.add_list_item(_param, false);
            _topic_item.respond_list.get_ui().show();
        }
        
        return this;
    }
    else {
        return List_collection.prototype.add_list_item.call(this, _param, _from_head);
    }
};

/*
View_list_collection.prototype.editor_add_list_item = function (_param, _from_head) {
    //KALS_text.tool.view.set_modified();
    return List_collection.prototype.editor_add_list_item.call(this, _param, _from_head);
};
*/
/*
View_list_collection.prototype.remove_list_item = function () {
    //KALS_text.tool.view.set_modified();
    return List_collection.prototype.remove_list_item.call(this);
};
*/
/* End of file View_list_collection */
/* Location: ./system/application/views/web_apps/View_list_collection.js *//**
 * View_list_item_topic
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/6 下午 10:31:03
 * @extends {List_item_topic}
 * @param {Annotation_param} _param
 */
function View_list_item_topic(_param) {
    
    List_item_topic.call(this, _param);
}

View_list_item_topic.prototype = new List_item_topic();


/**
 * @type {View_respond_list_collection}
 */
View_list_item_topic.prototype.respond_list = null;

View_list_item_topic.prototype._setup_respond_list = function () {
    var _component = new View_respond_list_collection(this);
    this.child('respond_list', _component);
    return _component;
};

View_list_item_topic.prototype._$respond_force_load = true;

View_list_item_topic.prototype._menu_style_default = 'block';

View_list_item_topic.prototype._note_show_fulltext = true;

View_list_item_topic.prototype._disable_option = ['view', 'respond', 'recommend'];

/*
View_list_item_topic.prototype.editor_set_data = function (_param) {
    KALS_text.tool.view.set_modified();
    return this.set_data(_param);
};
*/

View_list_item_topic.prototype.get_editor = function () {
    return KALS_text.tool.view.editor_container.editor;
};

View_list_item_topic.prototype.get_list = function () {
    return KALS_text.tool.view.list;
};

View_list_item_topic.prototype.set_selection = function () {
    //不做任何事情
    return this;
};

View_list_item_topic.prototype.show_recommend = function () {
    //不做任何事情
    return this;
};

/* End of file View_list_item_topic */
/* Location: ./system/application/views/web_apps/View_list_item_topic.js *//**
 * View_list_item_respond
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/8 下午 11:42:54
 * @extends {List_item_respond}
 * @param {JSON} _param
 * @param {List_item} _topic_item
 */
function View_list_item_respond(_param, _topic_item) {
    
    List_item_respond.call(this, _param, _topic_item);
    
}

View_list_item_respond.prototype = new List_item_respond();

View_list_item_respond.prototype._menu_style_default = 'block';

View_list_item_respond.prototype._note_show_fulltext = true;

View_list_item_respond.prototype._disable_option = [
    'view'
    //, 'like'
];

/*
View_list_item_respond.prototype.editor_set_data = function (_param) {
    KALS_text.tool.view.set_modified();
    return this.set_data(_param);
};
*/

View_list_item_respond.prototype.get_editor = function () {
    return KALS_text.tool.view.editor_container.editor;
};

View_list_item_respond.prototype.get_list = function () {
    return KALS_text.tool.view.list;
};

/**
 * 使用最原始的List_item.respond_annotation()
 */
View_list_item_respond.prototype.respond_annotation = function () {
    
    //先將Window_view的editor打開吧
    KALS_text.tool.view.editor_container.toggle_container(true);
    
    return List_item.prototype.respond_annotation.call(this);
};

/**
 * 使用最原始的List_item.edit_annotation()
 */
View_list_item_respond.prototype.edit_annotation = function () {
    return List_item.prototype.edit_annotation.call(this);
};

View_list_item_respond.prototype.set_selection = function () {
    //不做任何事情
    return this;
};
    

/* End of file View_list_item_respond */
/* Location: ./system/application/views/web_apps/View_list_item_respond.js *//**
 * View_editor_container
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/6 下午 10:32:12
 * @extends {Editor_container}
 * @param {Annotation_param} _topic_param
 * @param {View_list_collection} _list_coll
 */
function View_editor_container(_topic_prarm, _list_coll) {
    
    Editor_container.call(this, _list_coll);
    
    if ($.isset(_topic_prarm)) {
        this.set_topic_param(_topic_param);
    }
}

View_editor_container.prototype = new Editor_container();

/**
 * @type {Annotation_param}
 */
View_editor_container.prototype._topic_param = null;

View_editor_container.prototype._toggle_position = 'top';

View_editor_container.prototype._disable_option = ['policy_changable', 'note_allow_empty'];

View_editor_container.prototype.get_parent_container = function () {
    return this.get_ui().parents('.window-view-content:first');
};

View_editor_container.prototype.set_topic = function (_topic_param) {
    if ($.is_class(_topic_param, 'Annotation_param')) {
        this._topic_param = _topic_param;
        var _editor = this._setup_editor();
        _editor.set_topic(_topic_param);
        
        //設定policy
        _editor.policy.set_data(_topic_param);
        
        this.check_policy();
    }
    return this;
};

/**
 * @param {Annotation_param} _respond_param
 */
View_editor_container.prototype.add_respond_to = function (_respond_param) {
    if ($.is_class(_respond_param, 'Annotation_param')) {
        var _editor = this._setup_editor();
        _editor.respond_coll.add_respond_to(_respond_param);
    }
    else if ($.is_array(_respond_param)) {
        for (var _i in _respond_param) {
            this.add_respond_to(_respond_param[_i]);
        }
    }
	
	//$.test_msg("add_respond_to");
    this.toggle_container(true);
    return this;
};


/**
 * 預設的開啟狀態
 * @tyep boolean true=開啟; false=關閉
 */
View_editor_container.prototype._$default_toggle = false;

/* End of file View_editor_container */
/* Location: ./system/application/views/web_apps/View_editor_container.js *//**
 * View_respond_list_collection
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/8 下午 04:23:50
 * @extends {Respond_list_collection}
 */
function View_respond_list_collection(_topic_item) {
    
    Respond_list_collection.call(this, _topic_item);

}

View_respond_list_collection.prototype = new Respond_list_collection();

View_respond_list_collection.prototype._$limit = null;

View_respond_list_collection.prototype.create_list_item = function(_param) {
    return new View_list_item_respond(_param, this._topic_item);
};

/**
 * 排序的方向。
 * @type {string} desc|asc，如果是null，則由系統預設
 */
View_respond_list_collection.prototype._$direction = 'asc';

View_respond_list_collection.prototype._$enable_check_login = false;

/**
 * 新增時從頭新增嗎？
 * @type boolean
 */
View_respond_list_collection.prototype._$default_add_item_from_head = false;

/* End of file View_respond_list_collection */
/* Location: ./system/application/views/web_apps/View_respond_list_collection.js *//**
 * Window_view
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/6 下午 10:30:51
 * @extends {Window_content}
 */
function Window_view() {
    
    Window_content.call(this);
    
    var _this = this;
    setTimeout(function () {
        _this.get_ui().appendTo($('body')).hide();
    }, 1000);
}

Window_view.prototype = new Window_content();

Window_view.prototype.name = 'View';

Window_view.prototype.heading = new KALS_language_param (
    'Annotation Thread',
    'window.view.heading'
);

//Window_view.prototype.width = 640;
Window_view.prototype.height = 480;


// --------
// Topic Param
// --------

/**
 * @type {Annotation_param}
 */
Window_view.prototype._topic_param = null;

/**
 * @type {number}
 */
Window_view.prototype._focus_id = null;

Window_view.prototype.set_focus_id = function (_annotation_id) {
	//$.test_msg("view focus", _annotation_id);
    this._focus_id = _annotation_id;
    return this;
};

/**
 * @type {Annotation_param}
 */
Window_view.prototype._respond_param = null;

Window_view.prototype.set_respond_param = function (_param) {
	//$.test_msg("view set respond", _param.annotation_id);
    this._respond_param = _param;
    return this;
};

/**
 * @type {Annotation_param}
 */
Window_view.prototype._edit_param = null;

Window_view.prototype.set_edit_param = function (_param) {
    this._edit_param = _param;
    return this;
};

Window_view.prototype._stop_select = false;

Window_view.prototype.set_stop_select = function () {
    this._stop_select = true;
    return this;
};

Window_view.prototype._temp_logout = false;
Window_view.prototype.set_temp_logout = function () {
    this._temp_logout = true;
    return this;
};


// --------
// Topic Param
// --------

Window_view.prototype._load_url = 'annotation_getter/list';

/**
 * @param {number|Annotation_param} _topic_id
 */
Window_view.prototype.load_topic_param = function (_topic_id) {
    if ($.isset(this._topic_param)) {
		return this;
	}
    
    if ($.is_number(_topic_id) || $.is_string(_topic_id)) {
        try {
            _topic_id = parseInt(_topic_id, 10);
        }
        catch (e) {}
        
        var _data = {
            target_id: _topic_id
        };
        
        var _this = this;
        var _config = {
            url: this._load_url,
            data: _data,
            callback: function (_data) {
                if (typeof(_data.annotation_collection) != 'undefined'
                    && $.is_array(_data.annotation_collection)
                    && _data.annotation_collection.length > 0) {
                    var _topic_data = _data.annotation_collection[0];
					var _topic_param = _data;
					if ($.is_class(_topic_data, 'Annotation_param') === false) {
						_topic_param = new Annotation_param(_topic_param); 
					}
					
                    _this.set_topic_param(_topic_param);    
                }
            }
        };
    }
    else if ($.is_class(_topic_param, 'Annotation_param')) {
        this.set_topic_param(_topic_id);
    }
    
    return this;
};

Window_view.prototype.load_view = function (_annotation_id, _callback) {
    var _this = this;
    
    KALS_text.tool.load_annotation_param(_annotation_id, function (_param) {
        
        if (_param.is_respond() === false) {
            _this.set_topic_param(_param);
            KALS_window.setup_window(_this, function () {
                //KALS_context.hash.set_field('view', _param.annotation_id);
                $.trigger_callback(_callback);
            });
        }
        else {
            var _topic_id = _param.topic.annotation_id;
            
            _this.set_focus_id(_param.annotation_id);
            _this.load_view(_topic_id, function () {
                //KALS_context.hash.set_field('view', _param.annotation_id);
                $.trigger_callback(_callback);
            });
        }
    });
    
    return this;
};

Window_view.prototype.set_topic_param = function (_topic_param) {
    
    this._topic_param = _topic_param;
    
    this.anchor.set_topic_param(_topic_param);
    this.list.set_topic_param(_topic_param);
    this.editor_container.set_topic(_topic_param);
    
    //this.set_selection();
    KALS_context.hash.set_field('view', _topic_param.annotation_id);
    
    return this;
};

Window_view.prototype.set_selection = function () {
    
    if ($.isset(this._topic_param)) {
        var _this = this;
        setTimeout(function () {
            KALS_text.selection.select.set_scope_coll(_this._topic_param.scope);
        }, 1000);
    }
    
    return this;
};

Window_view.prototype.reset = function () {
    
    var _topic_param = this._topic_param; 
    this._topic_param = null;
    this._focus_id = null;
    this._respond_param = null;
    this._modified = false;
    
    this.anchor.reset();
    this.list.reset();
    this.editor_container.reset();
    
    this._loaded = false;
    
    //if (this._modified === true)
    if (KALS_context.policy.writable()) {
        //連帶Annotation_tool的list也reset吧
        var _this = this;
        KALS_text.tool.list.set_focus(_topic_param, true);
        KALS_text.tool.list.reload(function () {
            //KALS_text.tool.list.focus(_topic_param, true);
        });
    }
    else {
        KALS_text.tool.list.focus(_topic_param, true);
    }
    
    KALS_context.hash.delete_field('view');
    
    return this;
};

/*
Window_view.prototype._modified = false;

Window_view.prototype.set_modified = function () {
    this._modified = true;
    return this;
};
*/
Window_view.prototype.onclose = function () {
    this.reset();
};

// --------
// UI
// --------

Window_view.prototype._classname = 'window-view-content';

/**
 * Create UI
 * @memberOf {Window_view}
 * @type {jQuery} UI
 */
Window_view.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass(this._classname);
    
    var _container = this._create_list_container();
    _container.appendTo(_ui);
    
    var _anchor = this._setup_anchor();
    _anchor.get_ui().appendTo(_container);
    
    var _list = this._setup_list();
    _list.get_ui().appendTo(_container);
    
    var _editor_container = this._setup_editor_container();
    _editor_container.get_ui().appendTo(_ui);
    
    var _not_login_classname = 'not-login';
    /*
    KALS_context.auth.add_listener(function (_auth) {
        if (_auth.is_login())
            _ui.removeClass(_not_login_classname);
        else
            _ui.addClass(_not_login_classname);
    }, true);
    */
    KALS_context.policy.add_attr_listener('write', function (_policy) {
        if (_policy.writable()) {
			_ui.removeClass(_not_login_classname);
		}
		else {
			_ui.addClass(_not_login_classname);
		}
    }, true);
    
    return _ui;
};


/**
 * @type {View_anchor_text_component}
 */
Window_view.prototype.anchor = null;

Window_view.prototype._setup_anchor = function () {
    if ($.is_null(this.anchor)) {
        this.anchor = new View_anchor_text_component(this._topic_param);
    }
    return this.anchor;
};

Window_view.prototype._list_container = null;

Window_view.prototype._create_list_container = function () {
    if ($.is_null(this._list_container)) {
        var _ui = $('<div></div>')
            .addClass('view-list-container');
        
        this._list_container = _ui;    
    }
    return this._list_container;
};

/**
 * @type {View_list_collection}
 */
Window_view.prototype.list = null;

Window_view.prototype._setup_list = function () {
    if ($.is_null(this.list)) {
        this.list = new View_list_collection(this._topic_param);
        
        /*
        var _this = this;
        this.list.add_listener(function (_list) {
            if (_list.is_totally_load())
                _this.onload();
        });
        */
    }
    return this.list;
};

/**
 * @type {View_editor_container}
 */
Window_view.prototype.editor_container = null;

Window_view.prototype._setup_editor_container = function () {
    if ($.is_null(this.editor_container)) {
        var _list = this._setup_list();
        this.editor_container = new View_editor_container(this._topic_param, _list);
    }
    return this.editor_container;
};

Window_view.prototype._loaded = false;

Window_view.prototype.onload = function () {
    
    //$.test_msg('設定！！')
    this.editor_container.editor.note.set_text(' ');    
    
    
    //$.test_msg('Window_view.onload()');
    
    var _focus_anchor = true;
    if ($.isset(this._focus_id)) {
        var _result = this.list.focus(this._focus_id, true);
        //var _result = this.list.focus(this._focus_id);
        //if (_result != null)
        //    _result.get_ui().css('color', 'red');
        
        //$.test_msg('Window_view.onload() focus id', $.isset(_result));
        //_result.get_ui().css('color', 'red');
        
        if ($.isset(_result)) {
            _focus_anchor = false;
            KALS_context.hash.set_field('view', this._focus_id);
        }
        
        this._focus_id = null;
    }
    
    if (_focus_anchor === true) {
        this.anchor.focus();
    }
    
    //$.test_msg("isset respond_param", $.isset(this._respond_param));
    if ($.isset(this._respond_param)) {
		
		this.editor_container.add_respond_to(this._respond_param);
		this.editor_container.toggle_container(true);
		
        this._respond_param = null;
    }
    else if ($.isset(this._edit_param)) {
		//var _editor = this.editor_container.editor; 
        //_editor.set_editing(this._edit_param);
		//_editor.set_editing(this._edit_param);
		
		var _item = this.list.get_list_item(this._edit_param);
		if (_item !== null) {
			_item.edit_annotation();
		}
		
        this._edit_param = null;
    }            
    
    this._loaded = true;
    
    if (this._stop_select === false) {
		this.set_selection();
	}
	else {
		this._stop_select = false;
	}
    
    var _ui = this.get_ui();
    var _temp_logout = 'temp-logout';
    if (this._temp_logout === true) {
        _ui.addClass(_temp_logout);
        this._temp_logout = false;
    }
    else {
        _ui.removeClass(_temp_logout);
    }
    
    if ($.isset(this._topic_param)) {
        KALS_text.selection.select.set_scope_coll(this._topic_param.scope);
        //KALS_text.selection.select.scroll_into_view();
    }
	
    return this;
};

Window_view.prototype.setup_content = function (_callback) {
    /*    
    var _this = this;
    this.list.add_listener(function (_list) {
       
       $.test_msg('Window_view.setup_content() ', _list.is_ready());
       if (_list.is_ready()) {
           _this.onload();
       }
        
    });
    */
   
    var _this = this;
    setTimeout(function () {
       Window_content.prototype.setup_content.call(_this, _callback);
       _this.onload();
    }, 500);
    
    return this;
};

// --------
// Public Methods
// --------

Window_view.prototype.focus = function (_param) {
    
    if (this._loaded === false) {
        this.set_focus_id(_param);
    }
    else {
        this.list.focus(_param);
    }
    return this;
};

Window_view.prototype.add_respond_to = function (_param) {
    
    this.editor_container.add_respond_to(_param);
    
    return this;
};

/* End of file Window_view */
/* Location: ./system/application/views/web_apps/Window_view.js *//**
 * Annotation_tool
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/16 下午 09:46:28
 * @extends {Overlay_modal}
 * @param {jQuery} _selector
 */
function Annotation_tool(_selector) {
    
    Overlay_modal.call(this);
    
    if ($.isset(_selector)) {
        this._text = _selector;
        //this.child('list', new Topic_list);
        
        var _this = this;
        setTimeout(function () {
            
            
            //$.test_msg('Annotation_tool onselect listen', $.isset(_selector));
            KALS_text.selection.select.add_listener('select', function () {
                //$.test_msg('Annotation_tool onselect listen', $.isset(_selector));
                
				_this.onselect();
            });
            
            KALS_text.selection.select.add_listener('clear', function () {
                _this.onselectcancel();
            });
            
            _this.get_ui();
            
        }, 0);    
    }
}

Annotation_tool.prototype = new Overlay_modal();


/**
 * 選取的範圍
 * @type {jQuery}
 */
Annotation_tool.prototype._text = null;

Annotation_tool.prototype._$modal_name = 'Annotation_tool';

Annotation_tool.prototype._$exposable = false;

/**
 * 編輯器
 * @type {Editor_container}
 */
Annotation_tool.prototype.editor_container = null;

/**
 * 標註清單
 * @type {Topic_list}
 */
Annotation_tool.prototype.list = null;

/**
 * Create UI
 * @memberOf {Annotation_tool}
 * @type {jQuery} UI
 */
Annotation_tool.prototype._$create_ui = function () {
    //var _ui = $('<table height="100%"><tbody>'
    //        + '<tr><td class="editor"></td></tr>'
    //        + '<tr><td class="list"></td></tr>'
    //        + '</tbody></table>')
    var _ui = $('<div></div>')
        .addClass('annotation-tool')
        .addClass('draggable-tool')
        .addClass('kals-modal')
		.addClass("KALS")
        .hide()
        .insertBefore($('.selectable-text:first'));
        
    var _config = this._$get_config();
    
    //$.test_msg('Annotation_tool._$create_ui()', _config.onBeforeLoad);
    
    _ui.overlay(_config);
    
    //建立標註列表
    // TODO Annotation_tool._$create_ui() _list_group
    var _topic_list = this.setup_list();
    
    var _editor_tool = $('<div></div>')
        .addClass('editor-tool')
        .appendTo(_ui);
    
    //設置標頭
    var _header = this._create_header_component()
        .appendTo(_editor_tool);
    
    //設置編輯器
    var _editor = this._setup_editor(_topic_list);
    //$.test_msg('Annotation_tool._$create_ui [Editor_container]');
    var _editor_ui = _editor.get_ui();
    _editor_ui.addClass('annotation-tool-editor')
        .appendTo(_editor_tool);
    
    //設置標註列表
    var _topic_list_ui = _topic_list.get_ui();
    _topic_list_ui.addClass('annotation-tool-list')
        .appendTo(_ui);
        
    //2010.10.29 替代 List_collection的設置
    /*
    var _padding = ''
    for (var _i = 0; _i < 20; _i++)
        _padding = _padding + ' '+_i+' <br />';
    _ui.append('<div class="annotation-tool-list">' + _padding + '</div>');
    */
   
    //this.setup_list_menu_tooltip();
   
    //設定可拖曳
    var _draggable_config = {
        handle: 'div.annotation-tool-header'
    };
    
    if ($('body').height() > _ui.height() + 100) {
        _draggable_config.containment = 'parent';
    }
    
    _ui.draggable(_draggable_config);
    
    _ui.bind('dragstop', function(_event) {
        var _body_top = 0;
        if ($.is_small_height() === false) {
            _body_top = KALS_toolbar.get_ui().height();
        }
        var _ui_top = $.get_offset_top(_ui);
        if (_ui_top < _body_top) {
            _ui.css('top', _body_top + 'px');
        } 
    });
    
    var _this = this;
    _ui.mouseover(function () {
        $('.draggable-tool.hover').removeClass('hover');
        $(this).addClass('hover');
        //_this.recommend.get_ui().removeClass('tool-hover');
    });
    
    var _not_login = 'not-login';
    
    KALS_context.auth.add_listener(function (_auth) {
        //if (_auth.is_login_checked()) {
        //if (this._first_open === false) {
        //$.test_msg("gogo close");
        _this.reopen();
        //}
        //}
    });
        
    
    KALS_context.policy.add_attr_listener('write', function (_policy) {
        if (_policy.writable()) {
            _ui.removeClass(_not_login);
        }
        else {
            _ui.addClass(_not_login);
        }
            
        _topic_list.reload();
    }, true);
    
    this.setup_view();
    
    this._setup_recommend();
    this._setup_recommend_hint();
    
    /**
     * @20131113 Pulipuli Chen
     * 修正他的功能
     */
    
    
    return _ui;
};

Annotation_tool.prototype.setup_list = function () {
    var _component = new Topic_list();
    this.child('list', _component);
	
    var _tool = this;
    //註冊一下
    _component.add_listener(function () {
        //$.test_msg("Annotation_tool.setup_list", [_component.is_totally_loaded(), _component.has_list_item()]);
        if (_component.is_totally_loaded() && _component.has_list_item() === false) {
                _tool.editor_container.toggle_container(true);
        }
        //else {
        //	_tool.editor_container.toggle_container(false);
        //}
    });
    return _component;
};

Annotation_tool.prototype._$get_config = function () {
    var _config = Overlay_modal.prototype._$get_config.call(this);
    _config.fixed = false;
    return _config;
};

/**
 * @type {jQuery}
 */
Annotation_tool.prototype._header_component = null;

Annotation_tool.prototype._create_header_component = function () {
    
    var _ui = $('<div></div>')
        .addClass('annotation-tool-header');
    
    var _move = $('<span></span>')
        .addClass('move')
        .addClass('dialog-option')
        .setup_hover()
        .appendTo(_ui);
    
    var _move_lang = new KALS_language_param(
        'MOVE',
        'modal.move'
    );
    
    KALS_context.lang.add_listener(_move, _move_lang);
    
    var _this = this;
    var _close = new Dialog_close_link(function () {
        _this.close();
    });
    _close.get_ui().appendTo(_ui);
    _close.add_class('last');
    
    this._header_component = _ui;
    
    return _ui;
};

/**
 * 設置編輯器
 * @param {Topic_list} _list
 */
Annotation_tool.prototype._setup_editor = function (_list) {
    
    this.child('editor_container', new Editor_container(_list));
    return this.editor_container;
};

/*
Annotation_tool.prototype._$onviewportmove = function (_ui) {
    
    var _this = this;
    setTimeout(function () {
        _this.setup_position();
    }, 10);
    
};
*/

Annotation_tool.prototype.onselect = function () {
    var _this = this;
    //$.test_msg('Annotation_tool.onselect() before reset');
        
    //$.save_scroll_position();
    
    this.editor_container.reset(function () {
        //$.test_msg('Annotation_tool.onselect() open');
        //_this.open(function() {
        //    $.load_scroll_position();    
        //});
        
        _this.open();
        
    }, false);
    
    return this;
};

Annotation_tool.prototype.onselectcancel = function () {
    
    //$.test_msg('Annotation_tool.onselectcancel()', typeof(this.close));
    
    return this.close();    
};

/**
 * 是否是第一次開啟
 * @type Boolean
 */
//Annotation_tool.prototype._first_open = true;

/**
 * 開啟動作
 * 
 * 覆寫了KALS_modal的open，比較複雜
 * @param {Function} _callback
 * @returns {Annotation_tool}
 */
Annotation_tool.prototype.open = function (_callback) {
    
    this.setup_position();
    
    var _scope_coll = KALS_text.selection.select.get_scope_coll();
    this.list.set_scope_coll(_scope_coll);
    
    var _this = this;
    this.list.load_list(function () {
        _this.check_editing();
    });
	
    /**
     * 20121224 Pulipuli Chen
     * 開啟時自動關閉Editor_contrainer
     */
    this.editor_container.toggle_container(false);
	
    KALS_modal.prototype.open.call(this, function () {
        _this.scroll_into_view();
        //_this._first_open = false;
        $.trigger_callback(_callback);
    });
    
    return this;
};

/**
 * 重新開啟
 * @param {Function} _callback
 * @returns {Annotation_tool}
 */
Annotation_tool.prototype.reopen = function (_callback) {
    if (this.is_opened()) {
        //$.test_msg("Annotation_tool.reopen");
        var _scope_coll = KALS_text.selection.select.get_scope_coll();
        this.close();
        KALS_text.selection.select.set_scope_coll(_scope_coll);
    }
    return this;
};

Annotation_tool.prototype.scroll_into_view = function () {
    //var _offset = this.get_ui().offset();
    var _offset = $.get_offset(this.get_ui());
    var _position = {
        y: _offset.top - 60
    };
	//$.test_msg("Annotation_tool.scroll_into_view", _position);
    $.scroll_to(_position);
};

Annotation_tool.prototype.close = function (_callback) {
    
    this.list.reset();
    //KALS_modal.prototype.close.call(this, _callback);
    
    var _ui = this.get_ui();
    _ui.css('top', '-1000px');
    _ui.css('left', '-1000px');
    
    $.trigger_callback(_callback);
};

/**
 * 設置標註工具的位置
 */
Annotation_tool.prototype.setup_position = function () {
    
    //$.test_msg('Annotation_tool.setup_position()');
    
    var _ui = this.get_ui();
    if ($.is_small_width()) {
        _ui.css('top', '0px');
        _ui.css('left', '0px');
        return this;
    }
    else {
        var _mode = 'foot';
        
        var _tool_height = _ui.height();
        var _tool_width = _ui.width();
        /**
         * @type {Selection_select} _selection
         */
        var _selection = KALS_text.selection.select;
        
        //檢測是否有要更改_mode
        var _selection_bottom = _selection.get_offset_bottom();
        
        //$.test_msg('Annotation_tool.setup_position() _selection_bottom', _selection_bottom);
        
        //如果沒有選取，就不會有_selection_bottom，也就不用定位
        if (_selection_bottom === null) {
            _ui.css('top', '0px');
            _ui.css('left', '0px');
            _ui.hide();
            return this;
        }
        
        var _body_bottom = $('body').height();
        var _margin_bottom = _body_bottom - _selection_bottom;
        
        //如果底下寬度不足的話
        if (_margin_bottom < _tool_height) {
            var _selection_top = _selection.get_offset_top();
            
            //如果上面寬度夠高，則定位於head
            if (_selection_top > _tool_height) {
                //$.test_msg('Annotation_tool.setup_position() head', [ _margin_bottom, _tool_height, _selection_top ]);
                _mode = 'head';
            }   
            //否則仍定位在foot
        }
        
        var _l, _t, _margin = 10;
        if (_mode === 'foot') {
            _t = _selection_bottom + _margin;
            
            var _last_right = _selection.get_offset_last_right();
            var _left = _selection.get_offset_left();
            var _bottom_width = _last_right - _left;
            
            //$.test_msg([_bottom_width , _tool_width]);
            if (_bottom_width > _tool_width) {
                _l = _last_right - _tool_width;
            }
            else {
                _l = _left; 
            }
        }
        else {
            _t = _selection_top - _tool_height - _margin;
            
            var _first_left = _selection.get_offset_first_left();
            //var _right = _selection.get_offset_right();
            //var _top_width = _right - _first_left;
            
            /*
            if (_top_width > _tool_width) {
                _l = _first_left;
            }
            else {
                _l = _right - _tool_width; 
            }
            */
           
            //2010.11.1 一律置左
            _l = _first_left;
        }
        
        //為了防止超出畫面左右的設置
        var _body_right = $('body').width();
        if (_l < 0) {
            _l = 0;
        }
        else if (_l + _tool_width > _body_right) {
            _l = _body_right - _tool_width;
        }
        
        if (_t < 0) {
            _t = 0;
        }
        else if ($.is_small_height() === false 
                && _t < KALS_toolbar.get_ui().height()) {
            _t = KALS_toolbar.get_ui().height();
        }
        
        _ui.css('top', _t + 'px')
            .css('left', _l + 'px');
    
        //$.test_msg('Annotation_tool.setup_position() 最後定位', [_t, _l]);
    }
};

/**
 * 取得標註工具的寬度
 * @returns {Int}
 */
Annotation_tool.prototype.get_width = function () {
    var _ui = this.get_ui();
    return _ui.width();
    
};

// --------
// List_menu_tooltip
// --------

/**
 * @type {List_menu_tooltip}
 */
/*
Annotation_tool.prototype.list_menu_tooltip = null;

Annotation_tool.prototype.setup_list_menu_tooltip = function () {
    var _component = new List_menu_tooltip();
    this.child('list_menu_tooltip', _component);
    return _component;
};
*/

// --------
// Annotation View
// --------

/**
 * @type {Window_view}
 */
Annotation_tool.prototype.view = null;

Annotation_tool.prototype.setup_view = function () {
    if ($.is_null(this.view)) {
        var _view = new Window_view();
        this.child('view', _view);
    }
    return this.view;
};

Annotation_tool.prototype._setup_recommend = function () {
    var _component = new Recommend_tooltip();
    this.child('recommend', _component);
    _component.get_ui();
    return _component;
};

Annotation_tool.prototype._setup_recommend_hint = function () {
    var _component = new Recommend_hint();
    this.child('recommend_hint', _component);
    _component.get_ui();
    return _component;
};

Annotation_tool.prototype.load_annotation_param = function (_annotation_id, _callback) {
    
    if ($.is_string(_annotation_id)) {
        try {
            _annotation_id = parseInt(_annotation_id, 10);
        }
        catch(e) {
            _annotation_id = null;
        }
    }        
    
    if ($.is_null(_annotation_id)) {
        $.trigger_callback(_callback);
        return this;
    }
    else if ($.is_class(_annotation_id, 'Annotation_param')) {
        $.trigger_callback(_callback, _annotation_id);
        return this;
    }
    
    var _load_callback = function (_param) {
        
        if (_param !== false) {
            _param = new Annotation_param(_param);
            $.trigger_callback(_callback, _param);    
        }
        else {
            _exception_handle();
        }
    };
    
    var _exception_handle = function () {
        
        var _exception_heading = new KALS_language_param('Sorry! System has got some trouble!', 'exception.alert.heading');
        var _no_annotaiton = new KALS_language_param (
            'ID {0} Annotation is not found. Maybe it is not existed or deleted.',
            'annotation_tool.load_annotation_param.annotation_not_found',
            _annotation_id
        );
        
        KALS_util.alert(_exception_heading, _no_annotaiton);
    };
    
    var _config = {
        url: 'annotation_getter/load_annotation_param',
        data: _annotation_id,
        callback: _load_callback
    };
    
    KALS_util.ajax_get(_config);
    return this;
};

Annotation_tool.prototype._editing_param = null;

/**
 * 設為編輯對象
 * @param {Object} _editing_param
 */
Annotation_tool.prototype.set_editing_param = function (_editing_param) {
    this._editing_param = _editing_param;
    this.editor_container.toggle_loading(true);
};

Annotation_tool.prototype.check_editing = function () {
    
    if ($.isset(this._editing_param)) {
        var _list_item = this.list.focus(this._editing_param, false);
        
        if ($.isset(_list_item)) {
            _list_item.edit_annotation();
        }
        this.editor_container.toggle_loading(false);
        this._editing_param = null;
    }
    return this;
    
};

/* End of file Annotation_tool */
/* Location: ./system/application/views/web_apps/Annotation_tool.js *//**
 * Annotation_scope_loader
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 06:39:55
 * @extends {JSONP_dispatcher}
 */
function Annotation_scope_loader() {
    
    JSONP_dispatcher.call(this);
    
}

Annotation_scope_loader.prototype = new JSONP_dispatcher();

Annotation_scope_loader.prototype._refresh_timer = null;

/**
 * 間隔確認時間，預設是5分鐘(5*60*1000)
 * @type {number}
 */
Annotation_scope_loader.prototype._refresh_interval = 30 * 60 * 1000;

Annotation_scope_loader.prototype._last_check_time = null;

Annotation_scope_loader.prototype.setup_loader = function (_data, _callback) {
    
    var _this = this;
    
    if ($.is_function(_data) && $.is_null(_callback)) {
        _callback = _data;
        _data = null;
    }
    
    var _interval_action = function (_c) {
        
        //$.test_msg('Annotation_scope_loader.setup_loader()', _this._refresh_interval);
        
        _this.load(function () {
            $.trigger_callback(_c);
        });
    };
    
    if ($.isset(this._refresh_timer)) {
		this.stop_loader();
	}
    
    this._refresh_timer = setInterval(_interval_action, this._refresh_interval);
    
    if ($.is_null(_data)) {
        _interval_action(_callback);
    }
    else {
        _this._load_callback(null, _data, _callback);
    }
    
    
    return this;
    
};

Annotation_scope_loader.prototype.stop_loader = function () {
    
    if ($.is_null(this._refresh_timer)) {
		return this;
	}
    
    clearInterval(this._refresh_timer);
    this._refresh_timer = null;
    
    //$.test_msg('Annotation_scope_loader.stop_loader()', typeof(this._refresh_interval));
    
    return this;
    
};

Annotation_scope_loader.prototype._loaded = false;

Annotation_scope_loader.prototype.is_loaded = function () {
    return this._loaded;
};

Annotation_scope_loader.prototype.load = function (_callback) {
    
    var _time = this._last_check_time;
    
    var _this = this;
    JSONP_dispatcher.prototype.load.call(this, _time, function (_dispatcher, _data) {
        _this._load_callback(_dispatcher, _data, _callback);
    });
    return this;
};

Annotation_scope_loader.prototype._load_callback = function (_dispatcher, _data, _callback) {
    
    var _this = this;
    this._loaded = true;
    return this.load_annotation(_data, function () {
        //_this._last_check_time = (new Date()).getTime();
        _this._last_check_time = $.get_epoch_time();
    
        $.trigger_callback(_callback);    
    });
};

/**
 * 讀取標註並設置。請子類別覆寫此方法。
 */
Annotation_scope_loader.prototype.load_annotation = function () {
    return this;
};

/**
 * 清除標註。請子類別覆寫此方法。
 */
Annotation_scope_loader.prototype.clear = function () {
    return this;
};

Annotation_scope_loader.prototype.reload = function (_data, _callback) {
    
    this.stop_loader();
    this.clear();
    this.setup_loader(_data, _callback);
    
    return this;
};

Annotation_scope_loader.prototype.reset = function () {
    
    this.stop_loader();
    this._last_check_time = null;
    this._loaded = false;
    this.clear();
    
    return this;
    
};

Annotation_scope_loader.prototype.is_initialized = function () {
    return (this._last_check_time !== null);
};

/* End of file Annotation_scope_loader */
/* Location: ./system/application/views/web_apps/Annotation_scope_loader.js *//**
 * My_annotation_loader
 * 負責做My_basic_annotation_loader跟My_custom_annotation_loader的中介者
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2011/11/06 上午 00:19:07
 * @extends {Annotation_scope_loader}
 */
function My_annotation_loader() {
    
    Annotation_scope_loader.call(this);
    
    this.basic = new My_basic_annotation_loader();
    this.custom = new My_custom_annotation_loader();
	
	return this;
}

My_annotation_loader.prototype = new Annotation_scope_loader();

/**
 * @return {My_basic_annotation_loader}
 */
My_annotation_loader.prototype.basic = null;

/**
 * @return {My_custom_annotation_loader}
 */
My_annotation_loader.prototype.custom = null;

//----------------------------

My_annotation_loader.prototype.setup_loader = function (_data, _callback) {
    var _this = this;
    var _basic_data = _data.basic;
    var _custom_data = _data.custom;
    this.basic.setup_loader(_basic_data, function () {
        _this.custom.setup_loader(_custom_data, function(){
			
			if ($.is_function(_callback)) {
				_callback();
			}
			
		});
    });
    return this;
};

My_annotation_loader.prototype.stop_loader = function () {
    this.basic.stop_loader();
    this.custom.stop_loader();
    return this;
};

My_annotation_loader.prototype.is_loaded = function () {
    return (this.basic.is_loaded() && this.custom.is_loaded());
};

My_annotation_loader.prototype.load = function (_callback) {
    var _this = this;
    this.basic.load(function () {
        _this.custom.load(_callback);
    });
    return this;
};

My_annotation_loader.prototype.load_annotation = function () {
    this.basic.load_annotation();
    this.custom.load_annotation();
    return this;
};

My_annotation_loader.prototype.clear = function () {
    this.basic.clear();
    this.custom.clear();
    return this;
};

My_annotation_loader.prototype.reset = function () {
    this.basic.reset();
    this.custom.reset();
    return this;
};

My_annotation_loader.prototype.initialize = function () {
    this.basic.initialize();
    this.custom.initialize();
};

My_annotation_loader.prototype.reload = function (_data, _callback) {
    var _this = this;
	var _basic_data, _custom_data;
	
	//$.test_msg("My_annotation_loader.reload()", _data);
	
	if (typeof(_data) != "undefined") {
		if (typeof(_data.my_basic) != "undefined") {
			_basic_data = _data.my_basic;	
		}
		if (typeof(_data.my_custom) != "undefined") {
			_custom_data = _data.my_custom;	
		}
	}
	
    this.basic.reload(_basic_data, function () {
        _this.custom.reload(_custom_data, _callback);
    });
    return this;
};

My_annotation_loader.prototype.is_initialized = function () {
    return (this.basic.is_initialized() && this.custom.is_initialized());
};

/* End of file My_annotation_loader */
/* Location: ./system/application/views/web_apps/My_annotation_loader.js *//**
 * My_basic_annotation_loader
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 06:40:07
 * @extends {Annotation_scope_loader}
 */
function My_basic_annotation_loader() {
    
    Annotation_scope_loader.call(this);
	
}

My_basic_annotation_loader.prototype = new Annotation_scope_loader();

/**
 * @type {Selection_my_manager}
 */
My_basic_annotation_loader.prototype._selection = null;

My_basic_annotation_loader.prototype._$load_url = 'annotation_getter/my_basic';

/**
 * 讀取標註資料並且設置
 * @param {Object} _data 預設的樣子如下：
 * _data = {
 *     1:    //類型代號，表示importance 
 *     [    //Scope_collection_param的JSON型態
 *         [1, 2],    //Scope_param的JSON型態
 *         [6, 9]
 *     ],
 *     2: [
 *     ]
 * }
 * @param {function} _callback
 */
My_basic_annotation_loader.prototype.load_annotation = function (_data, _callback) {
    
	//$.test_msg("My_basic_annotation_loaer", _data);
	
    if ($.is_function(_data) && $.is_null(_callback)) {
        _callback = _data;
        _data = null;
    }
    
    //$.test_msg('My_annotation_loader.load_annotation() data', _data);
    var _is_initialize = !(this.is_initialized());
    
    var _basic_scope = _data;
    for (var _i in _basic_scope) {
        var _type_id = _i;
        var _scope_coll_json = _basic_scope[_i];
        
        if (_scope_coll_json === null ||
		_scope_coll_json.length === 0) {
			continue;
		}
        
        //$.test_msg('My_annotation_loader.load_annotation()', $.is_array(_scope_coll_json[0]));
        
        var _scope_coll = new Scope_collection_param(_scope_coll_json);
        
        //$.test_msg('My_annotation_loader.load_annotation() _scope_coll', [_scope_coll.length(), _is_initialize]); 
        
        this._selection.set_scope_coll(_type_id, _scope_coll, _is_initialize);
    }
    
    //if (this.is_initialized() === false)
    //{
        //回報已經完成初始化
    //    KALS_context.init_profile.complete('my_annotation');
    //}
    
    $.trigger_callback(_callback);
    
    return this;
};

My_basic_annotation_loader.prototype.clear = function () {
    //$.test_msg('My_annotation_loader.clear()');
    this._selection.clear();
    
};

My_basic_annotation_loader.prototype.initialize = function () {
    
    //$.test_msg('My_annotation_loader.initialize()', typeof(KALS_text));
    
    if (typeof(KALS_text) == 'object') {
        this._selection = KALS_text.selection.my_basic;
        
        var _this = this;
        //KALS_context.auth.add_listener(function (_auth, _data) {
        KALS_context.policy.add_attr_listener('my_basic', function(_policy) {
            
            var _my_basic = _policy.get_my_basic();
            var _is_login = KALS_context.auth.is_login();
            
            //$.test_msg('My_annotation_loader.init()', ($.isset(_my_basic) && _is_login));
            
            if ($.isset(_my_basic) && _is_login) {
                if (_this.is_loaded()) {
					return;
				}
                    
                //_this.setup_loader(_my_basic);
                
                _this.setup_loader(_my_basic, function () {
                    _this.stop_loader();
                });
            }
            else {
                //$.test_msg('My_basic_annotation_loader', "reset()");
				
                //_this.stop_loader();
                //_this._selection.clear();
                
                //_this.stop_loader();
                //_this.clear();
                _this.reset();
                
            }
        });
    }
	return this;
};

My_basic_annotation_loader.prototype._$exception_handle = function (_data) {
    
    if (this.is_initialized() === false) {
        //$.test_msg('My_annotation_loader._$exception_handle()');
        
        var _this = this;
        setTimeout(function () {
            _this.setup_loader(function () {
                KALS_context.init_profile.complete('my_basic_annotation');
            });    
        }, 5000);
        
    }
    
};

/* End of file My_annotation_loader */
/* Location: ./system/application/views/web_apps/My_annotation_loader.js *//**
 * My_custom_annotation_loader
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 06:40:07
 * @extends {Annotation_scope_loader}
 */
function My_custom_annotation_loader() {
    
    Annotation_scope_loader.call(this);
    
}

My_custom_annotation_loader.prototype = new Annotation_scope_loader();

/**
 * @type {Selection_my_custom_manager}
 */
My_custom_annotation_loader.prototype._selection = null;

My_custom_annotation_loader.prototype._$load_url = 'annotation_getter/my_custom';

/**
 * 讀取標註資料並且設置
 * @param {Object} _data 預設的樣子如下：
 * _data = {
 *     1:    //類型代號，表示importance 
 *     [    //Scope_collection_param的JSON型態
 *         [1, 2],    //Scope_param的JSON型態
 *         [6, 9]
 *     ],
 *     2: [
 *     ]
 * }
 * @param {function} _callback
 */
My_custom_annotation_loader.prototype.load_annotation = function (_data, _callback) {
    
    if ($.is_function(_data) && $.is_null(_callback)) {
        _callback = _data;
        _data = null;
    }
    
    var _is_initialize = !(this.is_initialized());
    
    var _custom_scope = _data;
    
    //$.test_msg('My_custom_annotation_loader.load_annotation() data', _data);
    
    for (var _i in _custom_scope) {
        var _type_id = _i;
        var _scope_coll_json = _custom_scope[_i];
        
        //$.test_msg('My_custom_annotation_loader.load_annotation() for', [_type_id, typeof(_scope_coll_json), _scope_coll_json.length]);
        
        if (_scope_coll_json === null ||
		_scope_coll_json.length === 0) {
			continue;
		}
        
        var _scope_coll = new Scope_collection_param(_scope_coll_json);
        this._selection.set_scope_coll(_type_id, _scope_coll, _is_initialize);
        
        
        //$.test_msg('My_custom_annotation_loader.load_annotation() for', [_type_id, typeof(_scope_coll_json), _scope_coll_json.length]);
        
    }
    
    $.trigger_callback(_callback);
    
    return this;
};

My_custom_annotation_loader.prototype.clear = function () {
    this._selection.clear();
};

My_custom_annotation_loader.prototype.initialize = function () {
    
    if (typeof(KALS_text) == 'object') {
        this._selection = KALS_text.selection.my_custom;
        
        var _this = this;
        
        KALS_context.policy.add_attr_listener('my_custom', function(_policy) {
            
            var _my = _policy.get_my_custom();
            var _is_login = KALS_context.auth.is_login();
            
            //$.test_msg('my_custom initialize', [$.isset(_my), _is_login]);
            
            if ($.isset(_my) && _is_login) {
                if (_this.is_loaded()) {
					return;
				}
                _this.setup_loader(_my, function () {
                    _this.stop_loader();
                });
            }
            else {
                _this.reset();
            }
        });
    }
};

My_custom_annotation_loader.prototype._$exception_handle = function (_data) {
    if (this.is_initialized() === false) {
        var _this = this;
        setTimeout(function () {
            _this.setup_loader(function () {
                KALS_context.init_profile.complete('my_custom_annotation');
            });    
        }, 5000);
    }
};

/* End of file My_annotation_loader */
/* Location: ./system/application/views/web_apps/My_annotation_loader.js *//**
 * Navigation_loader
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/24 下午 06:40:07
 * @extends {Annotation_scope_loader}
 */
function Navigation_loader() {
    
    Annotation_scope_loader.call(this);
    
	if (KALS_CONFIG.anchor_navigation_type == "disable") {
		KALS_CONFIG.anchor_navigation_type = "none";
	}
	this._$load_url = this._$load_url + KALS_CONFIG.anchor_navigation_type;
}

Navigation_loader.prototype = new Annotation_scope_loader();

/**
 * @type {Selection_navigation}
 */
Navigation_loader.prototype._selection = null;

Navigation_loader.prototype._$load_url = 'annotation_getter/navigation_';

/**
 * 讀取標註資料並且設置
 * @param {Object} _data 預設的樣子如下：
 * _data = [    //Scope_collection_param的JSON型態
 *         [1, 2],    //Scope_param的JSON型態
 *         [6, 9]
 * ]
 * @param {function} _callback
 */
Navigation_loader.prototype.load_annotation = function (_data, _callback) {
    
    if ($.is_function(_data) && $.is_null(_callback)) {
        _callback = _data;
        _data = null;
    }
    
    //$.test_msg('Navigation_loader.load_annotation() data', _data);
    
    var _is_initialize = !(this.is_initialized());
    
    for (var _i in _data) {
        var _type_id = _i;
        var _scope_coll_json = _data[_i];
        
        if (_scope_coll_json === null ||
		_scope_coll_json.length === 0) {
			continue;
		}
        
        //$.test_msg('Navigation_loader.load_annotation()', [$.is_array(_scope_coll_json[0]), _i]);
        
        var _scope_coll = new Scope_collection_param(_scope_coll_json);
        
        //$.test_msg('My_annotation_loader.load_annotation() _scope_coll', [_scope_coll.length(), _is_initialize]); 
        
        this._selection.set_scope_coll(_type_id, _scope_coll, _is_initialize);
    }
    
    $.trigger_callback(_callback);
    
    return this;
};

Navigation_loader.prototype.clear = function () {
    this._selection.clear();
    
};

Navigation_loader.prototype.initialize = function () {
    
    //$.test_msg('Navigation_loader.initialize()', typeof(KALS_text));
    
    if (typeof(KALS_text) == 'object') {
        this._selection = KALS_text.selection.navigation;
        
        var _this = this;
		
		var _setup = setTimeout(function () {
            
			var _policy = KALS_context.policy;
            //$.test_msg('Navigation_loader.initialize()', [_policy.allow_show_navigation(), _policy.get_navigation_data()]);
            if (_policy.allow_show_navigation() === false) {
                _this.reset();
                return;
            }
            else {
                var _navigation_data = _policy.get_navigation_data();
                if ($.isset(_navigation_data)) {       
				
					//$.test_msg('Navigation_loader.initialize()', "start load");         
                    //var _navigation_data = _data.Navigation_loader;
                    _this.setup_loader( _navigation_data , function () {
                        //KALS_context.init_profile.complete('navigation_annotation');
                        //_this.stop_loader();
                    });
                }
                else {
					//$.test_msg('Navigation_loader.initialize()', "nothing");
					_this.setup_loader( );
                }    
            }
        }, 0);
		
		KALS_context.add_listener(function () {
			KALS_context.policy.add_attr_listener('show_navigation', function () {
            	_setup();
	        }, true);
			_setup();
		});
    }
    
    KALS_context.init_profile.complete('navigation_annotation');
    return this;
};

Navigation_loader.prototype._$exception_handle = function (_data) {
    
    if (this.is_initialized() === false) {
        $.test_msg('Navigation_loader._$exception_handle()');
        
        var _this = this;
        setTimeout(function () {
            _this.setup_loader(function () {
                KALS_context.init_profile.complete('navigation_annotation');
            });    
        }, 5000);
        
    }
    
};

/* End of file Navigation_loader */
/* Location: ./system/application/views/web_apps/Navigation_loader.js *//**
 * Init_text
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/15 下午 04:55:55
 * @extends {Task_event_dispatcher}
 */
function Init_text(_onstart, _oncomplete) {
    
    Task_event_dispatcher.call(this, _onstart, _oncomplete);
    
    this._$schedule_task = [
        'Selection_manager',
        'Annotation_tool'
    ];
    
}

Init_text.prototype = new Task_event_dispatcher();

Init_text.prototype._$onstart = function () {
    
    //$.test_msg('Init_text._$onstart() is completed?', [this.is_completed(), this.completed]);
        
    KALS_text.selection.initialize();
    //KALS_text.init.complete('Selection_manager');
    
    //等CKEditor初始化完成之後才算是整個完成
    //KALS_text.init.complete('Annotation_tool');
};

/**
 * 完成時，呼叫KALS_context.init_component！
 */
Init_text.prototype._$oncomplete = function () {
    
    //$.test_msg('Init_text._$oncomplete()');
    
    KALS_context.init_component.complete('KALS_text');
    
};

/* End of file Init_text */
/* Location: ./system/application/views/web_apps/Init_text.js *//**
 * KALS_text
 * 實體化交給KALS_context.init_component吧！
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/15 下午 04:06:28
 * @extends {KALS_user_interface}
 * @param {String|jQuery} _selector 標註範圍
 */
function KALS_text(_selector) {
    
    KALS_user_interface.call(this);
    
    this.child('text_selector', new Text_selector());
    if (_selector === undefined) {
        this.text_selector.check_text_selector();
        _selector = this.get_selector();	
    }
    //$.test_msg('KALS_text()', _selector.length);
    
    _selector = this.filter_selector(_selector);
    
    this.child('init', new Init_text());
    this.child('selection', new Selection_manager(_selector));
    this.child('load_my', new My_annotation_loader());
    this.child('load_navigation', new Navigation_loader());
    this.child('tool', new Annotation_tool(_selector));
    this.child('guide', new Reading_guide());
    
    var _this = this;
    setTimeout(function() {
        _this.init_start();
        
        //_this.load_my.initialize();
    }, 0);
}

// Extend from KALS_user_interface
KALS_text.prototype = new KALS_user_interface();

/**
 * @type {Selection_manager}
 */
KALS_text.prototype.selection = null;

/**
 * @type {Text_margin}
 * @deprecated 2010.10.21 因為改變了定位型態
 */
//KALS_text.prototype.margin = null;

/**
 * @type {My_annotation_loader}
 */
KALS_text.prototype.load_my = null;

/**
 * @type {My_basic_annotation_loader}
 */
KALS_text.prototype.load_my_basic = null;

/**
 * @type {My_custom_annotation_loader}
 */
KALS_text.prototype.load_my_custom = null;

/**
 * @type {Recommend_loader}
 */
KALS_text.prototype.load_recommend = null;

/**
 * 導讀精靈
 * @type {Reading_guide}
 */
KALS_text.prototype.guide = null;

/**
 * @type {Text_selector}
 */
KALS_text.prototype.text_selector = null;

KALS_text.prototype.init_start = function () {
    
    this.init.start();
    
    return this;
};

/**
 * 
 * @param {type} _callback
 */
KALS_text.prototype.get_selector = function (_callback) {
    return this.text_selector.get_text_selector(_callback);
};

/**
 * 確認選取範圍是否正確
 * @param {jQuery|String} _selector
 * @return {jQuery}
 * @version 2010 Pudding Chen
 */
KALS_text.prototype.filter_selector = function (_selector) {
    
    var _exception = null;
    
    if ($.is_string(_selector)) {
        _selector = $(_selector);
    }
    else if ($.is_jquery(_selector)) {
        //_selector = _selector;
        //不做任何事情，因為他本來就是jQuery型態           
    }
    else {
        //丟出錯誤
        _exception = new KALS_exception('kals_text.exception.selector_not_exist');
        KALS_util.show_exception(_exception);
        return null;
    }
    
    if (_selector.length > 0) {
            return _selector;
    }
    else {
        //找不到_selector，丟出錯誤
        _exception = new KALS_exception('kals_text.exception.selector_not_exist');
        KALS_util.show_exception(_exception);
        return null;
    }
};

/**
 * 根據頁面條件，強制調整網頁的樣式
 * 
 * 但是應該寫成獨立物件
 * @20131113 Pulipuli Chen
 * @deprecated 20131227 寫成了Site_reform，不使用了
 */
/*
KALS_text.prototype.style_adapter = function () {
    
    // PDF2HTML EX
    if ($("#sidebar").length == 1 && $("#page-container").length == 1
        && $("#pf1").length > 0) {
        
        $("body").css("background-color", "#2f3236");
        $("#page-container").css("position", "relative");
    }
};
*/

/**
 * 讀取指定的標註
 * @param {Int} _annotation_id
 */
KALS_text.prototype.load_annotation = function (_annotation_id) {
	KALS_text.tool.view.load_view(_annotation_id);
};

/**
 * 選擇物件
 * @param {Scope_collection_param} _scope_coll
 * @param {boolean} _scroll_into_view 是否捲動過去
 * @returns {KALS_text}
 * @author Pulipuli Chen 20131230
 */
KALS_text.prototype.set_select = function (_scope_coll, _scroll_into_view) {
    this.selection.select.set_scope_coll(_scope_coll);
    if (_scroll_into_view !== undefined && _scroll_into_view === true) {
        this.selection.select.scroll_into_view();
    }
    return this;
};

KALS_text.prototype.get_sentence_structure = function () {
    return this.selection.text.sentence.get_structure();
};

/* End of file KALS_text */
/* Location: ./system/application/views/web_apps/KALS_text.js *//**
 * Window_style
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 10:56:17
 * @extends {Window_content}
 */
function Window_style() {
    
    Window_content.call(this);
    
    this.submit = new Window_style_submit();
    
}

Window_style.prototype = new Window_content();

Window_style.prototype.name = 'Login';

Window_style.prototype.lang = new KALS_language_param (
    'Style Setting',
    'window.style.heading'
);

Window_style.prototype.nav_heading = new KALS_language_param (
    'Style Setting',
    'window.style.nav_heading'
);

Window_style.prototype._$create_ui = function () {
    
    var _ui = $('<div>' + 'Window_style' +  '</div>');
    
    // TODO Window_style._$create_ui();
    
    return _ui;
};

/* End of file Window_style */
/* Location: ./system/application/views/web_apps/Window_style.js *//**
 * Window_style_submit
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:46
 * @extends {Window_content_submit}
 */
function Window_style_submit() {
    
    Window_content_submit.call(this);
    
}

Window_style_submit.prototype = new Window_content_submit();

Window_style_submit.prototype.url = 'authentication/register';

Window_style_submit.prototype.lang = new KALS_language_param(
    'Save',
    'window.save'
);

/*
Window_style_submit.prototype.get_data = function () {
    //TODO Window_login_submit.get_data();
};
*/

/*
Window_style_submit.prototype.submit = function () {
    // TODO Window_login_submit.submit()
};
*/

/*
Window_style_submit.prototype.exception_handle = function (_data) {
    
    // TODO Window_login_submit.exception_handle()
    
};
*/

/* End of file Window_style_submit */
/* Location: ./system/application/views/web_apps/Window_style_submit.js *//**
 * Initialization_progress
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals
 * @version    1.0 2013/12/27 下午 08:10:10
 * @extends {Event_dispatcher}
 */
function Initialization_progress() {
    
    Event_dispatcher.call(this);
    
    this._start_timestamp = (new Date()).getTime();
}

/**
 * 繼承自Task_event_dispatcher
 */
Initialization_progress.prototype = new Event_dispatcher();

/**
 * 開始時間
 * @type Number
 */
Initialization_progress.prototype._start_timestamp;

/**
 * 記數
 * @type Number
 */
Initialization_progress.prototype._progress_count = 0;

/**
 * 最大數量
 * @type Number
 */
Initialization_progress.prototype._progress_total = 0;

/**
 * 最後一次計算時的進度百分比
 * @type Number
 */
Initialization_progress.prototype._last_progress_percent = 0;

/**
 * 要顯示的最小底限百分比
 * @type Number
 */
Initialization_progress.prototype._display_min_percent = 0;

/**
 * 要顯示的最大底限百分比，超過這個百分比就先等待finish完成
 * @type Number
 * @deprecated 使用_slow_rate
 */
Initialization_progress.prototype._display_max_percent = 99;

/**
 * 增加速率變緩
 * @type Number
 */
Initialization_progress.prototype._slow_rate = 0.8;

/**
 * 是否已經完成
 * @type Boolean
 */
Initialization_progress.prototype._is_finished = false;

/**
 * 設定總數
 * @param {number} _total
 * @returns {Initialization_progress}
 */
Initialization_progress.prototype.set_total = function (_total) {
    
    if (_total > this._progress_total) {
        this._progress_total = _total;
    }
    
    return this;
};

/**
 * 增加記數
 * @param {Int} _count 額外增加的次數，預設是加1次
 * @returns {Initialization_progress.prototype}
 */
Initialization_progress.prototype.add_count = function (_count) {
    
    if (_count === undefined 
            || $.is_number(_count) === false) {
        _count = 1;
    }
    this._progress_count = this._progress_count + _count;
    
    var _percent = this.get_percent();
    
    if (_percent > this._display_min_percent && 
            _percent > this._last_progress_percent) {
        
        if (_percent > this._display_max_percent) {
            //超過比例，那就不做任何事情
            //$.test_msg("init progress: over max percent", this.get_percent(true));
        }
        else {
            //$.test_msg("init progress", this.get_percent(true));
            this.notify_listeners();    //通知大家改變了
        }
        
        this._last_progress_percent = _percent;
    }
    
    return this;
};

/**
 * 輸出百分比
 * @param {boolean} _with_unit 是否伴隨「%」符號，預設是false只顯示數字
 * @returns {String|Number}
 */
Initialization_progress.prototype.get_percent = function (_with_unit) {
    
    var _percent = 0;
    
    if (this._is_finished === true) {
        _percent = this._display_max_percent;
    }
    else if (this._progress_total !== 0) {
        // 計算
        _percent = (this._progress_count / this._progress_total) * 100;
        
        _percent = _percent * this._slow_rate;
        
        _percent = parseInt( _percent, 10 );
        
        
        if (_percent > this._display_max_percent) {
            _percent = this._display_max_percent;
        }
    }
    
    // 輸出
    if (_with_unit !== undefined && _with_unit === true) {
        return _percent + "%";
    }
    else {
        return _percent;
    }
    
};

/**
 * 設定已完成
 * @returns {Initialization_progress}
 */
Initialization_progress.prototype.set_finished = function () {
    this._is_finished = true;
    
    this.notify_listeners();    //通知大家改變了
    
    // 計算耗費時間
    var _timestamp = (new Date()).getTime();
    var _cost = _timestamp - this._start_timestamp;
    
    _cost = parseInt(_cost / 60, 10);    
    $.test_msg("init progress finished", _cost);
    
    return this;
};

/* End of file Initialization_progress */
/* Location: ./system/application/views/web_apps/Initialization_progress.js *//**
 * KALS_hotkey_manager
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/8/21 下午 02:28:30
 * @extends {Multi_event_dispatcher}
 */
function KALS_hotkey_manager(){
   
   Event_dispatcher.call(this);
   
   // 建立之初就進行初始化動作
   this.init_hotkey();
}

KALS_hotkey_manager.prototype = new Multi_event_dispatcher(); 

/**
 * 註冊熱鍵動作
 * @param {Number} _hotkey
 * @param {function} _listener
 * @returns {KALS_hotkey_manager}
 */
KALS_hotkey_manager.prototype.register_hotkey = function (_hotkey, _listener) {
    _hotkey = _hotkey + "";
    return this.add_listener(_hotkey, _listener);
};

/**
 * 初始化熱鍵
 * @returns {KALS_hotkey_manager}
 */
KALS_hotkey_manager.prototype.init_hotkey = function () {
    var _this = this;
   setTimeout(function () {
       $("body").keydown(function (_event) {
           var _key = _event.which;
           //$.test_msg('hotkey', [_key, _this.has_type(_key)]);
           if (_this.has_type(_key)) {
               _this.notify_listeners(_key);
               _event.preventDefault();
           }
           else if (_this.has_type(_key + '')) {
               _this.notify_listeners(_key);
               _event.preventDefault();
           }
       });
   }, 0);
   return this;
};

/* End of file KALS_hotkey_manager */
/* Location: ./system/application/views/web_apps/KALS_hotkey_manager.js *//**
 * Text_selector
 *
 * 分擔KALS_context中關於網址部分的工作
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2014, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2014/5/19 下午 03:36:17
 * @extends {Multi_event_dispatcher}
 */
function Text_selector(){
   
   Event_dispatcher.call(this);
   
}

Text_selector.prototype = new Multi_event_dispatcher(); 

/**
 * @type {jQuery|null}
 * @version 20111105 Pudding Chen
 */
Text_selector.prototype._text_selector = null;

/**
 * 確保選取位置。
 * 必須要在所有元件加入body之前確保完畢
 * @param {function} _callback 回呼函數
 * @version 20111105 Pudding Chen
 */
Text_selector.prototype.check_text_selector = function (_callback) {
    
    if (this._text_selector === null) {
        // TODO 2010.10.16 KALS_context._text_selector：測試時設置預設值
        //this._text_selector = '#selectable';
        
        //this._text_selector = 'body';
        
        //$.test_msg('KALS_context.check_text_selector()', $('.selectable-text').legnth);
        if ($('#articleContent').length !== 0) {
            //this._text_selector = $('#articleContent');
            /*
            var _text_container = $('<div></div>')
                .addClass('selectable-text')
                .($('body'));
        
            $('body').find('#articleContent')
                .appendTo(_text_container);
            //$('body').children('p')
            //    .appendTo(_text_container);
            */
            this._text_selector = $('#articleContent').addClass('selectable-text');
        }
        else if ($('.selectable-text').length === 0) {
            /*
            var _text_container = $('<div></div>')
                .addClass('selectable-text')
                .prependTo($('body'));
        
            var _move = function (_selector) {
                var _content = $('body').children(_selector);
                
                _content.find('script').remove();
                
                _content.appendTo(_text_container);
            };
            
            //_move('div:not(.selectable-text)');
            //_move('p');
            //_move('table');
            for (var _i in KALS_CONFIG.selectable_text) {
                _move(KALS_CONFIG.selectable_text[_i]);
            }
            */
           
            
            var _text_container;
            
            var _default_scope = function () {
                var _text_container = $('<div></div>')
                    .addClass('selectable-text');
        
                var _content = $('body').children(":not(.selectable-text):not(script)");
                _content.find('script').remove();
                _content.appendTo(_text_container);
                
                _text_container.appendTo($('body'));
                return _text_container;
            };
            
            if (KALS_CONFIG.annotation_scope_selector === null) {
                _text_container = _default_scope();
            }
            else {
                var _scope_selector = KALS_CONFIG.annotation_scope_selector;
                var _scope_content = $(_scope_selector);
                
                if (_scope_content.length === 0) {
                    _text_container = _default_scope();
                }
                else if (_scope_content.length > 1) {
                    _scope_content = _scope_content.filter(':first');
                }
                
                var _children_content = _scope_content.children();
                
                _text_container = $('<div></div>')
                    .addClass('selectable-text');
                
                _children_content.find('script').remove();
                
                //_text_container.insertBefore(_scope_content);
                //_scope_content.appendTo(_text_container);
                
                _text_container.prependTo(_scope_content);
                _children_content.appendTo(_text_container);
                
                /*
                else if (_scope_content.length == 1) {
                    _text_container = $('<div></div>')
                        .addClass('selectable-text');
                    
                    _scope_content.find('script').remove();
                    
                    _text_container.insertBefore(_scope_content);
                    _scope_content.appendTo(_text_container);
                }
                else {
                    for (var _i = 0; _i < _scope_content.length; _i++) {
                        var _content = _scope_content.eq(_i);
                        
                        var _container = $('<div></div>')
                            .addClass('selectable-text');
                        
                        _content.find('script').remove();
                        _container.insertBefore(_content);
                        _content.appendTo(_container);
                    }
                    
                    _text_container = $('.selectable-text');
                }
                */
            }
            
            this._text_selector = _text_container;
        }
        else {
            this._text_selector = $('.selectable-text:last');
        }
    }
    
    //this.init_context.complete('selector');
    
    $.trigger_callback(_callback);
    return this;
};


/**
 * 取得可選取的文字區
 * @retrun {jQuery} 要選取的範圍
 * @version 20111105 Pudding Chen
 */
Text_selector.prototype.get_text_selector = function () {
    return this._text_selector;
};

/**
 * 設定可選取的文字區
 * @param {Object} _selector
 */
Text_selector.prototype.set_text_selector = function (_selector) {
    this._text_selector = _selector;
    return this;
};

/* End of file Text_selector */
/* Location: ./system/application/views/web_apps/Text_selector.js *//**
 * Dashboard
 *
 * 結合樣板的控制器
 * KALS Framework的Controller示範
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/11/19 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function Dashboard() {
    // 繼承宣告的步驟之一
    KALS_controller_window.call(this);
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
Dashboard.prototype = new KALS_controller_window();

/**
 * 指定Module的名稱
 * 
 * 也是顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type String
 */
Dashboard.prototype.name = 'dashboard';

/**
 * ====================
 * View設定
 * ====================
 */

/**
 * 指定View
 * @type String
 */
Dashboard.prototype._$view = 'modules/example/view/Dashboard';

/**
 * 初始化View
 * 
 * 如果要在Controller啟動時為UI做設定，請覆寫這個方法
 * 這個方法只會執行一次
 */
Dashboard.prototype._$initialize_view = function () {
    
    // 設置熱鍵
    //this.init_hotkey();
    
    var _types = this.get_annotation_types();
    //this.set_field('annotation_type', ['1', '2', '3']);
    //_types = _types.question;
    //this.debug('init view', typeof(_types.get_ui));
    this.set_field('annotation_type', _types);
    
    // 設定連結
    var _mobile_topics_link = KALS_context.get_base_url("mobile_apps/annotation_topics", true);
    this.find("a.mobile-topics-link").attr("href", _mobile_topics_link);
    
    var _rss_feed_link = KALS_context.get_base_url("/rss");
    this.find("a.rss-feed-link").attr("href", _rss_feed_link);
    
    
};

/**
 * ====================
 * Model設定
 * ====================
 */

/**
 * 指定Model
 * @type String
 */
Dashboard.prototype._$model = 'dashboard';

/**
 * 初始化物件時執行的Action
 * @type String|null null=不執行任何action
 */
Dashboard.prototype._$init_request_action = null;

/**
 * open()時執行的Action
 * @type String|null null=不執行任何action
 */
Dashboard.prototype._$open_request_action = 'open';

/**
 * close()時執行的Action
 * @type String|null null=不執行任何action
 */
Dashboard.prototype._$close_request_action = null;


/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
Dashboard.prototype._$enable_debug = true;

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 啟用權限檢查機制
 * @type {Boolean}
 */
Dashboard.prototype._$enable_auth_check = true;

/**
 * 權限檢查
 * 
 * 請用KALS_controller提供的兩個參數，以及其他自己設定的資料
 * 來決定是否要讓權限檢查通過
 * 
 * 舉例：
 * 
 * 不允許未登入的人使用
 * return _is_login;
 * 
 * 不允許已登入的人使用
 * retunr !(_is_login);
 * 
 * @param {boolean} _is_login 是否已經登入
 * @param {User_param} _user 現在登入的使用者，沒有登入的情況會是null
 * @returns {boolean} true=通過;false=未通過
 */
Dashboard.prototype._$auth_check = function (_is_login, _user) {
    //this.debug('auth check: has login', _is_login);
    //return _is_login;
    return true;
};

/**
 * ====================
 * KALS_controller_window設定
 * ====================
 */

/**
 * 獨立視窗功能
 * @type Boolean true=開啟獨立視窗|false=依附在KALS_window底下
 */
Dashboard.prototype._$absolute = false;

/**
 * 視窗的Class Name
 * @type String
 */
Dashboard.prototype._$name = 'Dashboard';

/**
 * 視窗的標題
 * 
 * @type KALS_language_param
 * 對應到樣板的語系檔
 */
Dashboard.prototype._$heading = 'heading';

/**
 * 視窗位於導覽列的按鈕名稱
 * 
 * @type KALS_language_param|String
 * 對應到樣板的語系檔
 */
Dashboard.prototype._$nav_heading = 'heading';

/**
 * 設定視窗的寬度
 * @type Number 單位是px，null表示不設定
 */
Dashboard.prototype._$width = 400;

/**
 * 設定視窗的高度
 * @type Number 單位是px，null表示不設定
 */
Dashboard.prototype._$height = null;


/**
 * 設定視窗的左右位置
 * 
 * 可用參數：
 *  null: 預設center
 *  left: 置左
 *  right: 置右
 *  center: 置中
 *  middle: 置中
 *  10px: 靠左距離10px
 *  -10px: 靠右距離10px
 *  10%: 靠左距離視窗寬度的10%
 *  -10%: 靠右距離視窗寬度的10%
 * @type String
 */
Dashboard.prototype._$position_left = null;

/**
 * 設定視窗的上下位置
 * 
 * 可用參數：
 *  null: 預設10%
 *  top: 置頂
 *  bottom: 置底
 *  center: 置中
 *  middle: 置中
 *  10px: 靠頂距離10px
 *  -10px: 靠底距離10px
 *  10%: 靠頂距離視窗寬度的10%
 *  -10%: 靠底距離視窗寬度的10%
 * @type String
 */
Dashboard.prototype._$position_top = null;

/**
 * ====================
 * 導覽列相關的設定
 * ====================
 */

/**
 * 導覽列相關的設定
 * @type JSON
 */

Dashboard.prototype.nav_config = {
    /**
     * 顯示資料
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * ====================
 * Action設定
 * ====================
 */

/**
 * 開啟視窗時的載入動作
 * 
 * @returns {Dashboard}
 */
Dashboard.prototype._$onopen = null;

/**
 * 開啟最新的標註
 * 
 * 這是kals-event-field-set的範例
 * 
 * @param {jQuery} _ele
 * 由於是kals-event-field-set事件，所以固定會回傳觸發事件的jQuery物件
 * @returns {Dashboard}
 */
Dashboard.prototype.setup_activity = function (_ele) {
    if (this.has_field("activity")) {
        var _activity = this.get_field('activity').toLowerCase();
        _ele.attr('className', 'activity-' + _activity);
    }
    return this;
};

/**
 * 開啟最近的標註
 * @returns {Dashboard}
 */
Dashboard.prototype.open_recent_annotation = function() {
    if (this.is_opened()) {
        this.close(function () {
            KALS_context.search.open_recent_annotation();
        });
    }
    else {
        KALS_context.search.open_recent_annotation();
    }
        
    return this;
};

/**
 * 這是一個action
 * 
 * function的細節
 * 
 * @param {JSON} _param 傳入的參數
 * @returns {Boolean} true=成功;false=失敗
 * @author Pulipuli Chen 20131122
 */
Dashboard.prototype.action = function (_param) {
    
    /**
     * @type {boolean} 這個變數的名字
     */
    var _param2 = true;
    
    
    return false;
};

/**
 * 使用Hotkey的範例
 * http://unixpapa.com/js/key.html
 * 
 * 這是this.set_hotkey()的範例
 * 
 * @returns {Dashboard}
 */
Dashboard.prototype.init_hotkey = function () {
    // 65表示A
    // 按鍵對應的編號請參考http://unixpapa.com/js/key.html
    var _hotkey = 65;   
    
    var _this = this;    
    this.set_hotkey(_hotkey, function () {
        _this.open();
    });
    
    return this;
};

/**
 * 選擇指定標註的action
 * 
 * 這是this.select_annotation()的範例
 * 
 * @param {jQuery} _ele
 * @returns {Dashboard}
 */
Dashboard.prototype.select = function (_ele) {
    this.debug('select', this._data);
    var _annotation_id = this.get_field('last_annotation_id');
    this.select_annotation(_annotation_id);
    return this;
};

/* End of file Dashboard */
/* Location: ./system/application/views/web_apps/extension/dashboard/Dashboard.js *//**
 * Annotation_navigation_map
 *
 * 結合樣板的控制器
 * KALS Framework的Controller示範
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/11/19 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function Annotation_navigation_map() {
    KALS_controller_window.call(this);
    
    //this.init_tabs();
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
Annotation_navigation_map.prototype = new KALS_controller_window();

/**
 * 指定Module的名稱
 * 
 * 也是顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type String
 */
Annotation_navigation_map.prototype.name = 'annotation_navigation_map';

/**
 * ====================
 * 來自KALS_CONFIG設定
 * ====================
 */

/**
 * 搜尋結果是否依照章節順序排序
 * 
 * 這個設定會受到KALS_CONFIG的影響
 * @type Boolean
 */
Annotation_navigation_map.prototype.order_by_article = false;

/**
 * ====================
 * View設定
 * ====================
 */

/**
 * 指定View
 * @type String
 */
Annotation_navigation_map.prototype._$view = 'modules/map/view/Annotation_navigation_map';


/**
 * 初始化View
 * 
 * 如果要在Controller啟動時為UI做設定，請覆寫這個方法
 * 這個方法只會執行一次
 * 
 * 請覆寫這個方法
 * @return {KALS_controller}
 */
Annotation_navigation_map.prototype._$initialize_view = function () {
    //$.test_msg("Annotation_navigation_map 初始化");
    
    this.init_tabs();
};

/**
 * ====================
 * Model設定
 * ====================
 */

/**
 * 指定Model
 * @type String
 */
Annotation_navigation_map.prototype._$model = 'annotation_navigation_map';

/**
 * 初始化物件時執行的Action
 * @type String|null null=不執行任何action
 */
Annotation_navigation_map.prototype._$init_request_action = null;

/**
 * open()時執行的Action
 * @type String|null null=不執行任何action
 */
Annotation_navigation_map.prototype._$open_request_action = 'open';

/**
 * close()時執行的Action
 * @type String|null null=不執行任何action
 */
Annotation_navigation_map.prototype._$close_request_action = null;


/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
Annotation_navigation_map.prototype._$enable_debug = true;

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 啟用權限檢查機制
 * @type {Boolean}
 */
Annotation_navigation_map.prototype._$enable_auth_check = true;

/**
 * 權限檢查
 * 
 * 請用KALS_controller提供的兩個參數，以及其他自己設定的資料
 * 來決定是否要讓權限檢查通過
 * 
 * 舉例：
 * 
 * 不允許未登入的人使用
 * return _is_login;
 * 
 * 不允許已登入的人使用
 * retunr !(_is_login);
 * 
 * @param {boolean} _is_login 是否已經登入
 * @param {User_param} _user 現在登入的使用者，沒有登入的情況會是null
 * @returns {boolean} true=通過;false=未通過
 */
Annotation_navigation_map.prototype._$auth_check = function (_is_login, _user) {
    //this.debug('auth check: has login', _is_login);
    //return _is_login;
    return true;
};

/**
 * ====================
 * KALS_controller_window設定
 * ====================
 */

/**
 * 獨立視窗功能
 * @type Boolean true=開啟獨立視窗|false=依附在KALS_window底下
 */
Annotation_navigation_map.prototype._$absolute = true;

/**
 * 視窗的Class Name
 * @type String
 */
Annotation_navigation_map.prototype._$name = 'Annotation_navigation_map';

/**
 * 視窗的標題
 * 
 * @type KALS_language_param
 * 對應到樣板的語系檔
 */
Annotation_navigation_map.prototype._$heading = 'heading';

/**
 * 視窗位於導覽列的按鈕名稱
 * 
 * @type KALS_language_param|String
 * 對應到樣板的語系檔
 */
Annotation_navigation_map.prototype._$nav_heading = 'heading';

/**
 * 設定視窗的寬度
 * @type Number 單位是px，null表示不設定
 */
Annotation_navigation_map.prototype._$width = 400;

/**
 * 設定視窗的高度
 * @type Number 單位是px，null表示不設定
 */
Annotation_navigation_map.prototype._$height = null;

/**
 * 導覽列相關的設定
 * @type JSON
 */
Annotation_navigation_map.prototype.nav_config = {
    /**
     * 顯示資料
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * ====================
 * Action設定
 * ====================
 */

/**
 * 開啟最新的標註
 * 
 * 這是kals-event-field-set的範例
 * 
 * @param {jQuery} _ele
 * 由於是kals-event-field-set事件，所以固定會回傳觸發事件的jQuery物件
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype.setup_activity = function (_ele) {
    if (this.has_field("activity")) {
        var _activity = this.get_field('activity').toLowerCase();
        _ele.attr('className', 'activity-' + _activity);
    }
    return this;
};

/**
 * 開啟最近的標註
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype.open_recent_annotation = function() {
    if (this.is_opened()) {
        this.close(function () {
            KALS_context.search.open_recent_annotation();
        });
    }
    else {
        KALS_context.search.open_recent_annotation();
    }
        
    return this;
};

/**
 * 這是一個action
 * 
 * function的細節
 * 
 * @param {JSON} _param 傳入的參數
 * @returns {Boolean} true=成功;false=失敗
 * @author Pulipuli Chen 20131122
 */
Annotation_navigation_map.prototype.action = function (_param) {
    
    /**
     * @type {boolean} 這個變數的名字
     */
    var _param2 = true;
    
    
    return false;
};

/**
 * 使用Hotkey的範例
 * http://unixpapa.com/js/key.html
 * 
 * 這是this.set_hotkey()的範例
 * 
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype.init_hotkey = function () {
    // 65表示A
    // 按鍵對應的編號請參考http://unixpapa.com/js/key.html
    var _hotkey = 65;   
    
    var _this = this;
    this.set_hotkey(_hotkey, function () {
        _this.open();
    });
    
    return this;
};

/**
 * 選擇指定標註的action
 * 
 * 這是this.select_annotation()的範例
 * 
 * @param {jQuery} _ele
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype.select = function (_ele) {
    this.debug('select', this._data);
    var _annotation_id = this.get_field('last_annotation_id');
    this.select_annotation(_annotation_id);
    return this;
};

Annotation_navigation_map.prototype.change_tab = function (_ele) {
    
    //var _current_type = _ele.attr("kals-field-repeat-index");
    
    //this.find("button");
    this.find("span.type-navigation.selected").removeClass('selected');
    this.find("span.type-navigation").addClass('non-selected');
    _ele.find("span.type-navigation").removeClass('non-selected');
    _ele.find("span.type-navigation").addClass('selected');
    
    //var _current_type = _ele.find("[kals-field='annotation_type']").attr("type-name");
    var _navigation = _ele.find(".type-navigation");
    var _current_type = _navigation.attr("type-id");
    var _query_type = _current_type;
    if (_navigation.hasAttr("custom-name")) {
        _query_type = _navigation.attr("custom-name");
    }
    //$.test_msg("current-type", _current_type);
    
    
    //var _chapter = KALS_text.selection.text.chapter;
    //var _structure = _chapter.get_structure();
    //var _heading_list = _chapter.get_heading_list(); 
    
    // [標題1, 標題2, 標題3]
    //$.test_msg("chapter heading", _heading_list[2].text());
 
    // [0, 1063, 5200]
    // chapter1: 0-1062
    // chapter2: 1063-5199
    // chapter3: 5200-
    //$.test_msg("chapter structure", _structure);
    
    //this.debug(_ele.html());
/**    
    var _data = {
        0: {
            1: 5,
            2: 4,
            3: 3,
            4: 6,
            5: 5,
            6: 7,
            7: 3
        },
        
        
        1: {
            1: 5,
            2: 4,
            3: 3,
            4: 6,
            5: 5,
            6: 7,
            7: 3
        },
        
        2: {
            1: 5,
            2: 4,
            3: 3,
            4: 6,
            5: 5,
            6: 7,
            7: 3
        },
        
        
        3: {    // Title No.4
            1: 4,   // Annotation Important has 4 annotations
            2: 3,
            3: 2,
            4: 1,
            5: 3,
            6: 7,
            7: 3
        },
        4: {
            1: 6,
            2: 5,
            3: 4,
            4: 3,
            5: 2,
            6: 1,
            7: 0
        },
        
        5: {
            1: 6,
            2: 5,
            3: 4,
            4: 3,
            5: 2,
            6: 1,
            7: 0
        }        
        
 
    };
 */   
  
    
    
    this.find(".list").css("display", "none");
    
    //$.test_msg(".list.type-"+_current_type);
    
    
    //var _lists = [];
    
 
/**
    for (var _i in _types){
        var _type = _types[_i] ;
        var _type_id = _type.get_id(); //取得標註類別id: 1~7
        _type_numbers[_type_id] = _i;
        
        var _type_lang = _type.get_type_name_lang();
        var _class = _type.get_classname(); //取得類別class名稱 question, important...
        //var _type_id = _type.get_id();
        
        _type_classes [_type_id] = _class; //_type_classes[1~7] = question, important...
        //_type_display_names [_type_id] = KALS_context.lang.line(_type_lang); //類別中文名稱

        
    }
 */
 
 
    var _list = this.find(".list.type-"+_current_type).show();
    _list.empty();
    var _this = this; 
    this._request_heading_data(_query_type, function (_data) {
        _this._change_tab_process_data(_data, _query_type, _current_type, _list);
    });
};

/**
 * 取得資料之後的後續處理
 * @param {JSON} _data 來自資料庫的資料
 * @param {String} _current_type 現在的類型
 * @param {jQuery} 目前顯示的表單
 */
Annotation_navigation_map.prototype._change_tab_process_data = function (_data, _type_id, _type_name, _list) {
    //$.test_msg("get_heading_data", _data);
    
    
    var _types = this.get_annotation_types(); //取得所有標註的種類 
    //var _type_numbers = [];
    var _type_display_names = this.get_annotation_type_display_name_array();
    var _type_classes = this.get_annotation_type_class_array();
    var _type_styles = this.get_style_array();
    
    var _chapter = KALS_text.selection.text.chapter;
    //var _structure = _chapter.get_structure();
    var _heading_list = _chapter.get_heading_list(); 
   
    var _list_content;
    if (this.order_by_article === true) {
        _list_content= $('<ol></ol>');
    }
    else {
        _list_content= $('<ul></ul>');
    }
    _list_content.addClass("list-content");
    
    var _this = this;
    
    var _data_empty = true;

    for (var _index in _data.heading_data) {
        _data_empty = false;
        
        var _heading_number = _data.heading_data[_index].heading_number;
        var _heading_annotations = _data.heading_data[_index].type_count;
        
        //var _heading_text = this.get_heading_text(_heading_number);
        
        var _list_item = $("<li></li>");
        
        //$.test_msg("[_heading_count]"+_heading_number);
        
        //_list_item.html("<div class='list-header-component'>" + _heading_text + " <span class='current-type'>"+ _current_type+"</span> </div>");
        
        // var _heading_ele = $("<div class='list-header-component '>" + _heading_text + " <span class='current-type'></span> </div>");
        //_list_item.append(_heading_ele);
        //_list_item.append("<div class='list-header-component other-type'></div>");
        
        var _heading_div = $("<div class='list-header-component'></div>");
        var _heading_text = _heading_list[_heading_number].text();
        var _heading_btn = $("<span "  
                 + " type_id='" + _type_id + "' "
                 + "heading_id='" + _heading_number +"' >" 
                    + _heading_text 
                 + "</span>");
        //var _heading_offset = $(".kals-heading-"+_heading_number ).offset().top;

        _heading_btn.click(function () {
            _this._click_map_list_item(this);
        });
        
        _heading_div.append(_heading_btn);
        _heading_div.append("<span class='current-type'></span>");
        _list_item.append(_heading_div);
        
        //_list_item.append("<div class='list-header-component other-type'></div>");

        //var _heading_annotations = _data[_heading_number];
        //$.test_msg("[_heading_annotations]"+_heading_annotations);
        var _current_type_container = _list_item.find(".current-type");
        //var _other_type_container = _list_item.find(".other-type");
        
        var _annotation_type_count = _heading_annotations;
        var _annotation_type_name = _type_name;
        //$.test_msg("[_annotation_type_count]"+_annotation_type_count);
        
        
        var _button = $("<span class='" + _type_classes [_annotation_type_name] 
                + " type-navigation type-option heading-button'"
                + _type_styles[_annotation_type_name]
                + " type_id='" + _type_id 
                + "' heading_id='" + _heading_number + "' >" 
                + _type_display_names [_annotation_type_name] 
                + ":" + _annotation_type_count + "</span>");
        
        _button.click(function () {
            _this._click_map_list_item(this);
        });

        if (_annotation_type_name === _type_name 
                && _annotation_type_count !== 0) {
            _button.appendTo(_current_type_container);
        }
        
        _list_item.appendTo(_list_content);
        
    }
    
    /**
     * @author Pulipuli Chen 20140502
     * 不要在程式中直接寫中文，要改成用語系檔顯示
     */
    //if (_data_empty === true) {
    if (_data.total_count === 0) {
        // 提示空資料的訊息，加入到list_content
        //_list_content = $("<span class='hint'>這個分類目前還沒有標註喔!</span>");
        this._not_found_hint_show();
    }
    else {
        this._not_found_hint_hide();
    }
   

    _list_content.appendTo(_list);   
};

/**
 * 顯示沒有找到訊息的提示
 * @author 20140502 Pulipuli Chen
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype._not_found_hint_show = function () {
    this.find(".not-found-hint").show();
    return this;
};

/**
 * 隱藏沒有找到訊息的提示
 * @author 20140502 Pulipuli Chen
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype._not_found_hint_hide = function () {
    this.find(".not-found-hint").hide();
    return this;
};

/**
 * 點下按鈕之後的事件
 * @param {jQuery} _btn
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype._click_map_list_item = function (_btn) {
    var _btn = $(_btn);
    this._scroll_to_heading(_btn.attr("heading_id") );
    this._search_annotation(_btn.attr("type_id") );
    
    // 關掉標註地圖
    this.close();
    
    return this;
};

/**
 * 跳到指定的標題位置
 * @param {type} _current_heading_number
 * @returns {undefined}
 */
Annotation_navigation_map.prototype._scroll_to_heading = function (_current_heading_number) {
    /*
    var _heading = $(".kals-heading-"+_current_heading_number );
    
    $.test_msg("_jump_to_heading", ".kals-heading-"+_current_heading_number );
    
    if (_heading.length > 0) {
        //var _heading_offset = $(".kals-heading-"+_current_heading_number ).offset().top;
        var _heading_offset = $.get_offset_top(_heading);
        //$.test_msg("[_heading_offset]"+_heading_offset);
        $(window).scrollTop(_heading_offset-50);
    
        // 關掉標註地圖
        this.close();
    }
    else {
        KALS_util.show_exception("Heading not found");
    }
    */
    KALS_text.selection.text.chapter.scroll_to(_current_heading_number);
    //KALS_text.selection.text.word.scroll_to(55);
    return this;
    
    
};

/**
 * 進行搜尋
 * @param {String} _type_id_selected
 * @returns {Annotation_navigation_map.prototype}
 */
Annotation_navigation_map.prototype._search_annotation = function (_type_id_selected) {
    /*var _current_heading_number = $(_btn).attr("heading_id");
    var _heading_offset = $(".kals-heading-"+_current_heading_number ).offset().top;
    $(window).scrollTop(_heading_offset-50);

    var _type_id_selected = $(_btn).attr("type-id");
    */
    KALS_context.search.search({
        search_range: "annotation_type",
        keyword:_type_id_selected,
        order_by: "update|create"
    }, false);
    
    return this;
};
Annotation_navigation_map.prototype.get_annotation_type_class_array = function () {
    
    var _types = this.get_annotation_types(); //取得所有標註的種類 
    //var _type_numbers = [];
    //var _type_display_names = [];
    var _type_classes = [];
 
    for (var _i in _types){
        var _type = _types[_i] ;
        var _type_id = _type.get_id(); //取得標註類別id: 1~7
        //_type_numbers[_type_id] = _i;
        
        //var _type_lang = _type.get_type_name_lang();
        var _class = _type.get_classname(); //取得類別class名稱 question, important...
        //var _type_id = _type.get_id();
        
        _type_classes [_type_id] = _class; //_type_classes[1~7] = question, important...
        //_type_display_names [_type_id] = KALS_context.lang.line(_type_lang); //類別中文名稱

        
    }
    
    return _type_classes;
};

Annotation_navigation_map.prototype.get_style_array = function () {
    
    var _types = this.get_annotation_types(); //取得所有標註的種類
    var _type_styles = [];
    
        for (var _i in _types){
        var _type = _types[_i] ;
        var _type_id = _type.get_id(); //取得標註類別id: 1~7
        
        _type_styles[_type_id] = "";
        var _style = "";
        
        if (_type.is_basic() === false) {
            _style = _type.get_option_style();
            _style = ' style="' + _style + '"';
            _type_styles[_type_id] = _style;
        }
        
        //$.test_msg(_type_id + "[_type_styles[_type_id]]"+_type_styles[_type_id]);
    }
    
    return _type_styles;
};

Annotation_navigation_map.prototype.get_annotation_type_display_name_array = function () {
    
    var _types = this.get_annotation_types(); //取得所有標註的種類
    var _type_display_names = [];
    
        for (var _i in _types){
        var _type = _types[_i] ;
        var _type_id = _type.get_id(); //取得標註類別id: 1~7
        
        //var _type_lang = _type.get_type_name_lang();

        //_type_display_names [_type_id] = KALS_context.lang.line(_type_lang); //類別中文名稱
        _type_display_names [_type_id] = _type.get_type_name_display();

    }
    
    return _type_display_names;
};

/**
 * 從伺服器取得資料
 * @param {String} _current_type 要查詢的標註類型
 * @param {Function} _callback
 */
Annotation_navigation_map.prototype._request_heading_data = function (_current_type, _callback) {
    
    /**
     * @author Pulipuli Chen 20140502
     * 假資料，用不到了
     */
    /*
    var _data = [
        {
            heading_number: 4,
            type_count: 5
        },
 
        {
            heading_number: 2,
            type_count: 1
        },
        
        {
            heading_number: 0,
            type_count: 2
        },        
        
        {
            heading_number: 3,
            type_count: 3
        },
               
        {
            heading_number: 1,
            type_count: 4
        },
        
        {
            heading_number: 5,
            type_count: 5
        } 
    ];
    */
    // --------------------------------
    
    var _chapter = KALS_text.selection.text.chapter;
    var _structure = _chapter.get_structure();
    
    //var _order_by_article = KALS_CONFIG.modules.Annotation_navigation_map.order_by_article;
    var _order_by_article = this.order_by_article;
    
    var _action = "get_heading_annotation";
    var _send_data = {
        structure: _structure,
        current_type: _current_type,
        order_by_article: _order_by_article
    };
    this.request_get(_action, _send_data, function (_data) {
        if (typeof(_callback) === "function") {
            _callback(_data);
        }
    });
    
    return _data;
};   

/**
 * 取得指定編號的標題的內文
 * @param {int} _heading_number
 * @returns {String}
 * @deprecated 20140502 Pulipuli Chen
 */
/*
Annotation_navigation_map.prototype.get_heading_text = function (_heading_number) {
    
    var _heading_text_data = {
        0: "標題1",
        1: "標題1-1",
        2: "標題1-2",
        3: "標題2",
        4: "標題2-1",
        5: "標題2-2"
    }
    
    return _heading_text_data[_heading_number];
};
*/

/**
 * 變更按鈕的類型
 * @param {jQuery} _ele
 * @returns {Annotation_navigation_map}
 */
Annotation_navigation_map.prototype.change_tab_btn = function (_ele) {
    //將類別按鈕加在被排序的標題後
    //var _current_type = _ele.find("[kals-field='annotation_type']").attr("kals-field-repeat-index");
    
    var _types = this.get_annotation_types();
    var _btn_array = [];
    
    var _btn_array_main = [];
    
    var _count = 0;
    
    
    for (var _i in _types) {
        // Annotation_type_param
        
        
        var _type = _types[_i];
        
        var _lang = _type.get_type_name_lang();
        var _name = _type.get_id();
        var _class = _type.get_classname();
        
        var _display_name = KALS_context.lang.line(_lang);
         
        //var _btn = '<span class='+ _class +'>' + _types[_i].get_name() + '</span>';
        //var _btn = '<span class='+ _class +'>' + _display_name + '</span>';
        
        if( _count !== _ele ){

            var _btn = '<span class='+ _class +' type-name="'+_name+'">'+_name + _display_name + '</span>';
            _btn_array.push(_btn);
        } else{
            var _btn = '<span class="'+ _class +'" style="display:block" type-name="'+_name+'">'+_name+ + _display_name + '</span>';
            _btn_array_main.unshift(_btn);
          }
        
        _count ++;

    }
    
    // get_annotation_types()
    
    
    this.set_field("annotation_type_main",  _btn_array_main);
    this.set_field("annotation_type_sub",  _btn_array);
    
    this.set_field("types", _types);
    return this;
};

/**
 * 依照所選類別切換列出該類別之標題排名
 * @param {jQuery} _ele
 * @returns {Annotation_navigation_map}
 */
Annotation_navigation_map.prototype.change_tab_heading = function (_ele) {
    
    //依照所選類別切換列出該類別之標題排名

    var _types = this.get_annotation_types();
    var _heading_array = [];
    
    for (var _i in _types) {
        // Annotation_type_param

        var _type = _types[_i];
        
        var _lang = _type.get_type_name_lang();
        var _class = _type.get_classname();
        
        var _display_name = KALS_context.lang.line(_lang);
 
        var _heading = '<a>' + _display_name + '</a>';
        
        _heading_array.push(_heading);

    }
 
    this.set_field("annotation_map_heading",  _heading_array);
    
    return this;
};

/**
 * 初始化標註類型
 * @returns {undefined}
 */
Annotation_navigation_map.prototype.init_tabs = function () {

    var _types = this.get_annotation_types();
    
    //var _ui = this.get_ui().css("border", "3px solid red").appendTo("body");
    //$.test_msg("Annotation_navigation_map.init_tabs()");
    //var _types_name = 'web_apps.annotation.type'._types;  
    
    var _btn_array = [];
    var _div_array = [];
    
    var _count = 0;
    var _type_num_array = [];
    
    var _first_class = null;
    
    for (var _i in _types) {
        // Annotation_type_param
        var _type = _types[_i];

        var _display_name = _type.get_type_name_display();
       
        var _class = _type.get_classname();
        var _type_id = _type.get_id();

        
        if(_count === 0){
            _first_class = _class;
            _count = _count + 1;
        }
        
        //var _display_name = KALS_context.lang.line(_lang);

        
        // ---------------------------
        // 如果是自訂標註的話，現在要幫標註畫上按鈕顏色
        var _style = "";
        if (_type.is_basic() === false) {
            _style = _type.get_option_style();
            _style = ' style="' + _style + '"';
        }
        
        // ---------------------------
        
        //var _btn = '<span class='+ _class +'>' + _types[_i].get_name() + '</span>';
        
        var _custom_name_attr = "";
        if (_type.is_basic() === false) {
            _custom_name_attr = 'custom-name="' + _display_name + '"';
        }
        
        var _btn = '<span class="'+ _class +' type-navigation type-option non-selected" ' 
                + _style
                + _custom_name_attr
                + 'type-id="' + _type_id + '">' 
                + _display_name + '</span>';
        
        _btn_array.push(_btn);
        
        
        //var _type_num = _type.get_id();
        //var _type_num = _count;
        
        
        /**
         * @author Pulipuli Chen 20140502 ul多餘了，刪掉
         * //var _list = '<ul class="list type-' + _type_num +  '"><li>' + _type_num + '</li></ul>';
         * //var _list = '<ul class="list type-' + _type_id +  '"><li>' + _type_id + '</li></ul>';
         */
        var _list = '<div class="list type-' + _type_id +  '">' + _type_id + '</div>';
        
        _type_num_array.push(_list);
        //_type_num_array[_type_num] = "test";
        _count++ ;
    }

    this.set_field("annotation_type_num", _type_num_array);
    

    this.find(".list").css("display", "none");
    
    //$.test_msg("anno map", this.find(".list").length);
    
    // get_annotation_types()
    
    this.set_field("annotation_type",  _btn_array);
    
    this.set_field("");

    //var _this = this;
    //setTimeout(function () {
        this.find(".list-header-component .type-navigation.type-option:first").click();
    //}, 100);
    //this.set_field("annotation_type", ["全部", "重要", "困惑", "質疑", "舉例"]);
    
    //$.test_msg("Annotation_navigation_map.init_tabs() end");
};

/* End of file Annotation_navigation_map */
/* Location: ./system/application/views/web_apps/extension/dashboard/Annotation_navigation_map.js *//**
 * Frag_reading
 * 閱讀進度
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/11/19 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function Frag_reading() {
    // 繼承宣告的步驟之一
    KALS_controller_window.call(this);
    
    // 初始化要做的動作
    var _this = this;
    if (typeof(KALS_context) === "object") {
        // 讀取完KALS_context後
        KALS_context.add_listener(function () {
            _this.initialize_save_reading_progress();
            
            // 暫時使用
            _this.save_reading_progress();
        });
    }
        
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
Frag_reading.prototype = new KALS_controller_window();

/**
 * 指定Module的名稱
 * 
 * 也是顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type String
 */
//Frag_reading.prototype.prototype.name = 'frag_reading';

/**
 * ====================
 * View設定
 * ====================
 */

/**
 * 指定View
 * @type String
 */
Frag_reading.prototype._$view = 'modules/frag_reading/view/Frag_reading';

/**
 * 初始化View
 * 
 * 如果要在Controller啟動時為UI做設定，請覆寫這個方法
 * 這個方法只會執行一次
 */
Frag_reading.prototype._$initialize_view = function () {
    
    // 打開ui後要做的事情
    var _word_id = KALS_text.selection.text.word.get_current_progress_word();
    var _position = $(window).scrollTop();
    
    this.set_field("position",  _position);
    this.set_field('word_id', _word_id);  
};

/**
 * ====================
 * Model設定
 * ====================
 */

/**
 * 指定Model
 * @type String
 */
Frag_reading.prototype._$model = 'frag_reading';

/**
 * 初始化物件時執行的Action
 * @type String|null null=不執行任何action
 */
Frag_reading.prototype._$init_request_action = null;

/**
 * open()時執行的Action
 * @type String|null null=不執行任何action
 */
Frag_reading.prototype._$open_request_action = null;

/**
 * close()時執行的Action
 * @type String|null null=不執行任何action
 */
Frag_reading.prototype._$close_request_action = null;


/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
Frag_reading.prototype._$enable_debug = true;

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 啟用權限檢查機制
 * @type {Boolean}
 */
Frag_reading.prototype._$enable_auth_check = true;

/**
 * 權限檢查
 * 
 * 請用KALS_controller提供的兩個參數，以及其他自己設定的資料
 * 來決定是否要讓權限檢查通過
 * 
 * 舉例：
 * 
 * 不允許未登入的人使用
 * return _is_login;
 * 
 * 不允許已登入的人使用
 * retunr !(_is_login);
 * 
 * @param {boolean} _is_login 是否已經登入
 * @param {User_param} _user 現在登入的使用者，沒有登入的情況會是null
 * @returns {boolean} true=通過;false=未通過
 */
Frag_reading.prototype._$auth_check = function (_is_login, _user) {
    //this.debug('auth check: has login', _is_login);
    //return _is_login;
    return true;
};

/**
 * ====================
 * KALS_controller_window設定
 * ====================
 */

/**
 * 獨立視窗功能
 * @type Boolean true=開啟獨立視窗|false=依附在KALS_window底下
 */
Frag_reading.prototype._$absolute = false;

/**
 * 視窗的Class Name
 * @type String
 */
Frag_reading.prototype._$name = 'Frag_reading';

/**
 * 視窗的標題
 * 
 * @type KALS_language_param
 * 對應到樣板的語系檔
 */
Frag_reading.prototype._$heading = 'heading';

/**
 * 視窗位於導覽列的按鈕名稱
 * 
 * @type KALS_language_param|String
 * 對應到樣板的語系檔
 */
Frag_reading.prototype._$nav_heading = 'heading';

/**
 * 設定視窗的寬度
 * @type Number 單位是px，null表示不設定
 */
Frag_reading.prototype._$width = 400;

/**
 * 設定視窗的高度
 * @type Number 單位是px，null表示不設定
 */
Frag_reading.prototype._$height = null;


/**
 * 設定視窗的左右位置
 * 
 * 可用參數：
 *  null: 預設center
 *  left: 置左
 *  right: 置右
 *  center: 置中
 *  middle: 置中
 *  10px: 靠左距離10px
 *  -10px: 靠右距離10px
 *  10%: 靠左距離視窗寬度的10%
 *  -10%: 靠右距離視窗寬度的10%
 * @type String
 */
Frag_reading.prototype._$position_left = null;

/**
 * 設定視窗的上下位置
 * 
 * 可用參數：
 *  null: 預設10%
 *  top: 置頂
 *  bottom: 置底
 *  center: 置中
 *  middle: 置中
 *  10px: 靠頂距離10px
 *  -10px: 靠底距離10px
 *  10%: 靠頂距離視窗寬度的10%
 *  -10%: 靠底距離視窗寬度的10%
 * @type String
 */
Frag_reading.prototype._$position_top = null;

/**
 * ====================
 * 導覽列相關的設定
 * ====================
 */

/**
 * 導覽列相關的設定
 * @type JSON
 */

Frag_reading.prototype.nav_config = {
    /**
     * 顯示資料 
     * @type Boolean
     */
    // 先不顯示在上方列
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "login",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * ====================
 * Action設定
 * ====================
 */

/**
 * 開啟最新的標註
 * 
 * 這是kals-event-field-set的範例
 * 
 * @param {jQuery} _ele
 * 由於是kals-event-field-set事件，所以固定會回傳觸發事件的jQuery物件
 * @returns {Dashboard.prototype}
 */
Frag_reading.prototype.setup_activity = function (_ele) {
    if (this.has_field("activity")) {
        var _activity = this.get_field('activity').toLowerCase();
        _ele.attr('className', 'activity-' + _activity);
    }
    return this;
};

/**
 * 開啟最近的標註
 * @returns {Dashboard.prototype}
 */
Frag_reading.prototype.open_recent_annotation = function() {
    if (this.is_opened()) {
        this.close(function () {
            KALS_context.search.open_recent_annotation();
        });
    }
    else {
        KALS_context.search.open_recent_annotation();
    }
        
    return this;
};

/**
 * 這是一個action
 * 
 * function的細節
 * 
 * @param {JSON} _param 傳入的參數
 * @returns {Boolean} true=成功;false=失敗
 * @author Pulipuli Chen 20131122
 */
Frag_reading.prototype.action = function (_param) {
    
    /**
     * @type {boolean} 這個變數的名字
     */
    var _param2 = true;
    
    
    return false;
};

/**
 * 使用Hotkey的範例
 * http://unixpapa.com/js/key.html
 * 
 * 這是this.set_hotkey()的範例
 * 
 * @returns {Dashboard.prototype}
 */
Frag_reading.prototype.init_hotkey = function () {
    // 65表示A
    // 按鍵對應的編號請參考http://unixpapa.com/js/key.html
    var _hotkey = 65;   
    
    var _this = this;    
    this.set_hotkey(_hotkey, function () {
        _this.open();
    });
    
    return this;
};

/**
 * 選擇指定標註的action
 * 
 * 這是this.select_annotation()的範例
 * 
 * @param {jQuery} _ele
 * @returns {Dashboard.prototype}
 */
Frag_reading.prototype.select = function (_ele) {
    this.debug('select', this._data);
    var _annotation_id = this.get_field('last_annotation_id');
    this.select_annotation(_annotation_id);
    return this;
};

/*
Frag_reading.prototype._$onopen = function () {
    $.test_msg("onopen");
};
*/

/**
 * 設定自動save_reading_progress的時間頻率
 * @type Number
 */
Frag_reading.prototype.interval_span = 10;

/**
 * 頁面停止時延遲的增加時間
 * @type Number
 */
Frag_reading.prototype.increase_interval_span = 10;

/**
 * initialize_save_reading_progress()
 * 初始化載入完KALS_context後要做的事情
 * 
 */
Frag_reading.prototype.initialize_save_reading_progress = function(){
    var _this = this;
    var _interval_span = this.interval_span *1000;
    var _check_interval_span = this.interval_span *2000;
    var _current_word = null;
    var _before_word = null;
    
    
    var _check_progress = function (){
        //現在的word_id不等於之前的word_id
        //alert('start');
        
        if (typeof(KALS_text) !== "object" 
                || typeof(KALS_text.selection) !== "object" 
                || typeof(KALS_text.selection.text) !== "object" 
                || typeof(KALS_text.selection.text.word) !== "object"
                || typeof(KALS_text.selection.text.word.get_current_progress_word) !== "function") {
            return this;
        }
        
        _current_word = KALS_text.selection.text.word.get_current_progress_word();
        //進入if之前的值
        //$.test_msg('before IF, before_word, current word', [_before_word, _current_word]); 
        
        
        //var _check_timer;
        if ( _current_word !== _before_word || _before_word === null) {
            _interval_span = this.interval_span *1000;
            /*
            _check_timer = setTimeout(function(){
                alert('1!');
                _interval_span = KALS_CONFIG.modules.Frag_reading.interval_span *1000;
                //_this.save_reading_progress();
                alert('this.save_reading_progress!');
                $.test_msg('before, current, interval', [ _before_word, _current_word, _interval_span]);  
            }
            , _interval_span);  //_basic_timer = setTimeout(function(){
            */
           
           //$.test_msg('save_reading_progress before, current, interval', [ _before_word, _current_word, _interval_span]);  
           _this.save_reading_progress(_current_word);
        }
        else {
            //alert('else');
            _interval_span = _interval_span 
                    + this.increase_interval_span *1000;
            /*
            _check_timer = setTimeout(function(){
                //_this.save_reading_progress();
                $.test_msg('add interval', [_interval_span, _current_word, _before_word]);
            }
            , _interval_span);  //_basic_timer = setTimeout(function(){
            */
           //$.test_msg('else before, current, interval', [ _before_word, _current_word, _interval_span]);  
        }  
        _before_word = _current_word; 
        //alert('back');
        
        //var _interval_span = _check_progress();
        setTimeout(function () {
           _check_progress(); 
        }, _interval_span);
    };
    
    
    var _check_timer = setTimeout(function () {
        _check_progress();
    }, _check_interval_span);
    
    $(window).unload(function (){
        _this.save_reading_progress();}
    );
  
};

/**
 * 儲存現在的閱讀進度
 * 
 * @param {Int} _current_word 現在進度的word_id
 */
Frag_reading.prototype.save_reading_progress = function(_current_word){
    
    // 未登入時不使用
    if (KALS_context.auth.is_login() === false
            || _current_word === undefined
            || _current_word === false
            || _current_word === null) {
        return this;
    }
    
    if (typeof(KALS_text) !== "object" 
            || typeof(KALS_text.selection) !== "object"
            || typeof(KALS_text.selection.text) !== "object") {
        return this;
    }
    
    // 取得現在頁面上的第一個字的word_id
    var _word_id = KALS_text.selection.text.word.get_current_progress_word();    
    //$.test_msg("save_reading_progress word_id", _word_id);
    
    var _action = 43; //"Frag_reading.save"
    var _message = {
        current_word: _current_word
    };
    KALS_util.log(_action, _message, function () {
        $.test_msg("儲存完成");
    });
    //$.test_msg('current_scroll', _current_scroll);
    //context_complete();    
    return this;
};

/* End of file Dashboard */
/* Location: ./system/application/views/web_apps/extension/dashboard/Dashboard.js *//**
 * Open_mobile_apps
 *
 * 結合樣板的控制器
 * KALS Framework的Controller示範
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/11/19 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function Open_mobile_apps() {
    // 繼承宣告的步驟之一
    KALS_controller_window.call(this);
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
Open_mobile_apps.prototype = new KALS_controller_window();

/**
 * 指定Module的名稱
 * 
 * 也是顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type String
 */
Open_mobile_apps.prototype.name = 'Open_mobile_apps';

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
Open_mobile_apps.prototype._$enable_debug = true;

/**
 * 指定View
 * @type String
 */
Open_mobile_apps.prototype._$view = 'modules/open_mobile_apps/view/Open_mobile_apps';

/**
 * 獨立視窗功能
 * @type Boolean true=開啟獨立視窗|false=依附在KALS_window底下
 */
Open_mobile_apps.prototype._$absolute = true;

/**
 * ====================
 * KALS_controller_window設定
 * ====================
 */

/**
 * 視窗的Class Name
 * @type String
 */
Open_mobile_apps.prototype._$name = 'Open_mobile_apps';

/**
 * 視窗位於導覽列的按鈕名稱
 * 
 * @type KALS_language_param|String
 * 對應到樣板的語系檔
 */
Open_mobile_apps.prototype._$nav_heading = 'heading';

/**
 * ====================
 * 導覽列相關的設定
 * ====================
 */

/**
 * 導覽列相關的設定
 * @type JSON
 */

Open_mobile_apps.prototype.nav_config = {
    /**
     * 顯示資料
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "mobile",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * ====================
 * Action設定
 * ====================
 */

/**
 * 開啟視窗時的載入動作
 * 
 * @returns {Open_mobile_apps}
 */
Open_mobile_apps.prototype._$nav_click_callback = function () {
    KALS_context.redirect("/mobile_apps/annotation_topics", true);
};

/* End of file Open_mobile_apps */
/* Location: ./system/application/views/web_apps/extension/Open_mobile_apps/Open_mobile_apps.js *//**
 * KALS_stamp
 *
 * 結合樣板的控制器
 * KALS Framework的Controller示範
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/11/19 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function KALS_stamp() {
    // 繼承宣告的步驟之一
    KALS_controller_window.call(this);
    
    var _this = this;
    
    KALS_context.add_listener(function () {
        _this._init_listener();
    });
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
KALS_stamp.prototype = new KALS_controller_window();

/**
 * 指定Module的名稱
 * 
 * 也是顯示在Hash的名稱。如果是null，則會顯示KALS_modal._$modal_name
 * @type String
 */
KALS_stamp.prototype.name = 'KALS_stamp';

/**
 * ====================
 * View設定
 * ====================
 */

/**
 * 指定View
 * @type String
 */
KALS_stamp.prototype._$view = 'modules/kals_stamp/view/KALS_stamp';

/**
 * 初始化View
 * 
 * 如果要在Controller啟動時為UI做設定，請覆寫這個方法
 * 這個方法只會執行一次
 */
KALS_stamp.prototype._$initialize_view = function () {
    
    // @TODO 20140516 Pulipuli Chen
    // 載入KALS_stamp.html的初始化訊息
    
};

/**
 * ====================
 * Model設定
 * ====================
 */

/**
 * 指定Model
 * @type String
 */
KALS_stamp.prototype._$model = 'KALS_stamp';

/**
 * 初始化物件時執行的Action
 * @type String|null null=不執行任何action
 */
KALS_stamp.prototype._$init_request_action = null;

/**
 * open()時執行的Action
 * @type String|null null=不執行任何action
 */
KALS_stamp.prototype._$open_request_action = null;

/**
 * close()時執行的Action
 * @type String|null null=不執行任何action
 */
KALS_stamp.prototype._$close_request_action = null;


/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
KALS_stamp.prototype._$enable_debug = true;

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 啟用權限檢查機制
 * @type {Boolean}
 */
KALS_stamp.prototype._$enable_auth_check = true;

/**
 * 權限檢查
 * 
 * 請用KALS_controller提供的兩個參數，以及其他自己設定的資料
 * 來決定是否要讓權限檢查通過
 * 
 * 舉例：
 * 
 * 不允許未登入的人使用
 * return _is_login;
 * 
 * 不允許已登入的人使用
 * retunr !(_is_login);
 * 
 * @param {boolean} _is_login 是否已經登入
 * @param {User_param} _user 現在登入的使用者，沒有登入的情況會是null
 * @returns {boolean} true=通過;false=未通過
 */
KALS_stamp.prototype._$auth_check = function (_is_login, _user) {
    if (_is_login === false) {
        return false;
    }
    else {
        return true;
    }
};

/**
 * ====================
 * KALS_controller_window設定
 * ====================
 */

/**
 * 獨立視窗功能
 * @type Boolean true=開啟獨立視窗|false=依附在KALS_window底下
 */
KALS_stamp.prototype._$absolute = true;

/**
 * 視窗的Class Name
 * @type String
 */
KALS_stamp.prototype._$name = 'KALS_stamp';

/**
 * 視窗的標題
 * 
 * @type KALS_language_param
 * 對應到樣板的語系檔
 */
KALS_stamp.prototype._$heading = 'heading';

/**
 * 視窗位於導覽列的按鈕名稱
 * 
 * @type KALS_language_param|String
 * 對應到樣板的語系檔
 */
KALS_stamp.prototype._$nav_heading = 'heading';

/**
 * 設定視窗的寬度
 * @type Number 單位是px，null表示不設定
 */
KALS_stamp.prototype._$width = 400;

/**
 * 設定視窗的高度
 * @type Number 單位是px，null表示不設定
 */
KALS_stamp.prototype._$height = null;


/**
 * 設定視窗的左右位置
 * 
 * 可用參數：
 *  null: 預設center
 *  left: 置左
 *  right: 置右
 *  center: 置中
 *  middle: 置中
 *  10px: 靠左距離10px
 *  -10px: 靠右距離10px
 *  10%: 靠左距離視窗寬度的10%
 *  -10%: 靠右距離視窗寬度的10%
 * @type String
 */
KALS_stamp.prototype._$position_left = null;

/**
 * 設定視窗的上下位置
 * 
 * 可用參數：
 *  null: 預設10%
 *  top: 置頂
 *  bottom: 置底
 *  center: 置中
 *  middle: 置中
 *  10px: 靠頂距離10px
 *  -10px: 靠底距離10px
 *  10%: 靠頂距離視窗寬度的10%
 *  -10%: 靠底距離視窗寬度的10%
 * @type String
 */
KALS_stamp.prototype._$position_top = null;

/**
 * ====================
 * 導覽列相關的設定
 * ====================
 */

/**
 * 導覽列相關的設定
 * @type JSON
 */

KALS_stamp.prototype.nav_config = {
    /**
     * 顯示資料
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "login",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * ====================
 * Action設定，跟view相關的action
 * ====================
 */

/**
 * 開啟時的載入動作
 * 
 * 開啟KALS_stamp的視窗時，跟伺服器請求資訊，以載入必要資料到view上顯示的動作
 * 
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype._$onopen = function () {
    
    this.set_stamp_statistic();
    this.set_stamp_qualified();
    this.set_stamp_qualification();
    
    return this;
};

/**
 * 設定目前閱讀的進度
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype.set_stamp_statistic = function() {
    
    // @TODO 20140516 Pulipuli Chen
    // 這邊設定的是假資料，請把它改成真的資料
    
    var _statistic_config = {
        "statistic_topic_annotation_count": KALS_context.user.get_topic_annotation_count()
    };
    
    var _container_selector = ".stamp-statistic";
    var _container = this.find(_container_selector)
            .empty();
    
    for (var _statistic_title in _statistic_config) {
        var _li = $("<li></li>").appendTo(_container);
        var _title_lang = this.get_view_lang_line(_statistic_title);
        
        var _title = $("<strong></strong>").html(_title_lang + ": ")
                .appendTo(_li);
        var _qualified_message = _statistic_config[_statistic_title];
        var _message = $("<span></span>").html(_qualified_message)
                .appendTo(_li);
    }
        
    return this;
};

/**
 * 設定已經獲得的獎章
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype.set_stamp_qualified = function() {
    
    // @TODO 20140516 Pulipuli Chen
    // 這邊設定的是假資料，請把它改成真的資料
    
    var _qualified_config = {
        "獎章1": "您已經獲得了獎章1，歡迎來到KALS標註系統，希望您在這裡能夠愉快地閱讀。",
        "獎章2": "您已經獲得了獎章2，可以開啟某某功能。您做得很棒喔！"
    };
    
    var _qualified_container = this.find(".stamp-qualified")
            .empty();
    
    for (var _stamp_title in _qualified_config) {
        var _title = $("<dt></dt>").html(_stamp_title)
                .appendTo(_qualified_container);
        var _qualified_message = _qualified_config[_stamp_title];
        var _message = $("<dd></dd>").html(_qualified_message)
                .appendTo(_qualified_container);
    }
        
    return this;
};

/**
 * 設定尚未獲得的獎章
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype.set_stamp_qualification = function() {
    
    // @TODO 20140516 Pulipuli Chen
    // 這邊設定的是假資料，請把它改成真的資料
    
    var _qualification_config = {
        "獎章3": "您必須與其他朋友多多互動。多多回應朋友或按下其他人的喜愛按鈕吧！",
        "獎章4": "您必須讓其他朋友與您互動，如果您被回應的篇數及喜愛的篇數夠多，您就能獲得這個獎章！"
    };
    
    var _qualification_container = this.find(".stamp-qualification")
            .empty();
    
    for (var _stamp_title in _qualification_config) {
        var _title = $("<dt></dt>").html(_stamp_title)
                .appendTo(_qualification_container);
        var _qualification_message = _qualification_config[_stamp_title];
        var _message = $("<dd></dd>").html(_qualification_message)
                .appendTo(_qualification_container);
    }
        
    return this;
};

/**
 * ====================
 * 獎章資格設定
 * ====================
 */

/**
 * 取得設定
 * 
 * 請從KALS_CONFIG中取得獎章模組的資格設定
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype._init_config = function() {
    
    // @TODO 20140516 Pulipuli Chen
    
    return this;
};

/**
 * 初始化Context_user的監聽功能
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype._init_listener = function() {
    
    // @TODO 20140516 Pulipuli Chen
    // 這邊只有監聽部分屬性，請把它擴增其他監聽的事件
    
    var _this = this;
    KALS_context.user.add_attr_listener("topic_annotation_count", function (_user) {
        _this.check_qualification(_user);
    });
    
    return this;
};

/**
 * 檢查是否獲得獎章資格
 * 
 * 要考慮已經獲得的資格，以及從無到有獲得資格的時候
 * @param {Context_user} _user 可以從Context_user取得統計資料
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype.check_qualification = function(_user) {
    
    // @TODO 20140516 Pulipuli Chen
    // 這邊只有檢查部分資格
    var _total_annotation_count = _user.get_topic_annotation_count();
    KALS_util.notify("您已經撰寫了" + _total_annotation_count + "並獲得了獎章1！");
    this.open();
    
    return this;
};

/**
 * 獲得資格後的動作
 * 
 * @returns {KALS_stamp.prototype}
 */
KALS_stamp.prototype.qualify = function() {
    
    // @TODO 20140516 Pulipuli Chen
    // 這邊只有檢查部分資格
    
    return this;
};

/* End of file KALS_stamp */
/* Location: ./system/application/views/web_apps/extension/KALS_stamp/KALS_stamp.js *//**
 * Reading_guide
 *
 * 導讀功能
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <pulipuli.chen@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://github.com/pulipulichen/kals/
 * @version    1.0 2013/12/30 下午 03:36:17
 * @extends {KALS_controller_window}
 */
function Reading_guide() {
    // 繼承宣告的步驟之一
    KALS_controller_window.call(this);
}

/**
 * ===========================
 * 開頭宣告
 * ===========================
 */

/**
 * 繼承自KALS_controller_window
 * 
 * KALS_controller 是部分元件
 * KALS_controller_window 是獨立視窗
 */
Reading_guide.prototype = new KALS_controller_window();

Reading_guide.prototype._$default_status_loading = true;

/**
 * 初始化View
 * 
 * 如果要在Controller啟動時為UI做設定，請覆寫這個方法
 * 這個方法只會執行一次
 * @return {Reading_guide}
 */
Reading_guide.prototype._$initialize_view = function () {
    var _this = this;
    return this._init_default_algorithm(function () {
        _this.toggle_loading(false);
    });
};


/**
 * ====================
 * View設定
 * ====================
 */

/**
 * 指定View
 * @type String
 */
Reading_guide.prototype._$view = 'modules/reading_guide/view/Reading_guide';

/**
 * 初始化View
 * 
 * 如果要在Controller啟動時為UI做設定，請覆寫這個方法
 * 這個方法只會執行一次
 */
//Reading_guide.prototype._$initialize_view = function () {
//};

/**
 * ====================
 * Model設定
 * ====================
 */

/**
 * 指定Model
 * @type String
 */
Reading_guide.prototype._$model = "reading_guide";

/**
 * 初始化物件時執行的Action
 * @type String|null null=不執行任何action
 */
Reading_guide.prototype._$init_request_action = null;

/**
 * open()時執行的Action
 * @type String|null null=不執行任何action
 */
Reading_guide.prototype._$open_request_action = null;

/**
 * close()時執行的Action
 * @type String|null null=不執行任何action
 */
Reading_guide.prototype._$close_request_action = null;


/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 是否開啟偵錯功能
 * @type Boolean
 */
Reading_guide.prototype._$enable_debug = true;

/**
 * ====================
 * Controller設定
 * ====================
 */

/**
 * 啟用權限檢查機制
 * @type {Boolean}
 */
Reading_guide.prototype._$enable_auth_check = false;

/**
 * ====================
 * KALS_controller_window設定
 * ====================
 */

/**
 * 獨立視窗功能
 * @type Boolean true=開啟獨立視窗|false=依附在KALS_window底下
 */
Reading_guide.prototype._$absolute = true;

/**
 * 視窗的Class Name
 * @type String
 */
Reading_guide.prototype._$name = 'Reading_guide';

/**
 * 視窗的標題
 * 
 * @type KALS_language_param
 * 對應到樣板的語系檔
 */
Reading_guide.prototype._$heading = 'heading';

/**
 * 視窗位於導覽列的按鈕名稱
 * 
 * @type KALS_language_param|String
 * 對應到樣板的語系檔
 */
Reading_guide.prototype._$nav_heading = 'nav_heading';

/**
 * 設定視窗的寬度
 * @type Number 單位是px，null表示不設定
 */
Reading_guide.prototype._$width = 300;

/**
 * 設定視窗的高度
 * @type Number 單位是px，null表示不設定
 */
Reading_guide.prototype._$height = null;

/**
 * 設定視窗的左右位置
 * 
 * 可用參數：
 *  null: 預設center
 *  left: 置左
 *  right: 置右
 *  center: 置中
 *  middle: 置中
 *  10px: 靠左距離10px
 *  -10px: 靠右距離10px
 *  10%: 靠左距離視窗寬度的10%
 *  -10%: 靠右距離視窗寬度的10%
 * @type String
 */
Reading_guide.prototype._$position_left = "-50px";

/**
 * 設定視窗的上下位置
 * 
 * 可用參數：
 *  null: 預設10%
 *  top: 置頂
 *  bottom: 置底
 *  center: 置中
 *  middle: 置中
 *  10px: 靠頂距離10px
 *  -10px: 靠底距離10px
 *  10%: 靠頂距離視窗寬度的10%
 *  -10%: 靠底距離視窗寬度的10%
 * @type String
 */
Reading_guide.prototype._$position_top = null;


/**
 * 導覽列相關的設定
 * @type JSON
 */
Reading_guide.prototype.nav_config = {
    /**
     * 顯示資料 
     * @type Boolean
     */
    display: true,
    
    /**
     * 決定顯示導覽列的位置
     * 
     * 類型包括：
     * - common: 不管什麼類型都會顯示(在以下三種類型中都會顯示)
     * - login: 已經登入的使用者就會顯示
     * - profile: 以手動登入的使用者才會顯示
     * - embed: 以內嵌登入的使用者才會顯示
     * - anonymous: 未登入的使用者才會顯示
     * @type String
     */
    nav_type: "common",
    
    /**
     * 排序順序
     * 
     * 數字越大，越往左邊靠
     * 數字最小的是1
     * @type Number
     */
    order: 1
};

/**
 * ====================
 * Action設定
 * ====================
 */

/**
 * 設定步驟參數
 * 
 * 20140119 Setup不open了
 * 
 * @param {Annotation_collection_param} _coll
 * @returns {Reading_guide}
 */
Reading_guide.prototype.setup_steps = function (_coll) {
    
    if ($.is_array(_coll) === false || _coll.lenght === 0) {
        return this;
    }
    
    //this.set_field("step_index", -1);
    this.reset_step_index();
    
    _coll = this._filter_scope_coll(_coll);
    
    //$.test_msg("設定步驟參數", _coll.annotations.length);
    
    var _output_scope_coll = [];
    
    for (var _i in _coll) {
        var _scope = _coll[_i];
        var _step_list = this.create_step_list(_scope, _i);
        _output_scope_coll.push(_step_list);
    }
    this.set_field("step_list", _output_scope_coll);
    
   //this.set_field("annotation_step", "12112");
    
    // @20140119 Pulipuli Chen
    // 設定完步驟之後，不預設開啟
    // 要open請自行呼叫
    
    //var _this = this;
    //this.open(function () {
        //_this.set_field("annotation_step", "12112");
    //});
    return this;
};

Reading_guide.prototype._filter_scope_coll = function (_coll) {
    
    var _output_coll = [];
    if ($.is_array(_coll) 
            && _coll.length > 0 
            && typeof(_coll[0]) !== "undefined"
            && _coll[0] !== null
            && typeof(_coll[0].annotation_id) !== "undefined") {
        //$.test_msg("是JSON陣列嗎？", _coll);
        _coll = new Annotation_collection_param(_coll);
    }
    
    if ($.is_class(_coll, "Annotation_collection_param")) {
        //var _scope_coll = _coll.export_scope_colleciotn_json();
        var _scope_coll = _coll.get_scope_colleciotn_param_array();
        //$.test_msg("匯出位置參數", _scope_coll.length);
        
        var _last_scope_json = null;
        for (var _s in _scope_coll) {
            var _scope_coll_param = _scope_coll[_s];
            var _scope_json = _scope_coll_param.export_json(false); //$.json_encode(_scope_array);
            _scope_json = $.json_encode(_scope_json);
            if (_scope_json === _last_scope_json) {
                continue;
            }
            
            _output_coll.push(_scope_coll_param);
            
            _last_scope_json = _scope_json;
        }
    }
    else if ($.is_array(_coll)) {
        //$.test_msg('是普通的陣列嗎？');
        for (var _c in _coll) {
            var _from = _coll[_c][0];
            var _to = _coll[_c][1];
            var _scope_coll = new Scope_collection_param(_from, _to);
            _output_coll.push(_scope_coll);
        }
        
    }
    
    return _output_coll;
};

/**
 * 建立步驟的選單
 * @param {Scope_collection_param} _scope_coll_param
 * @param {Number} _index
 * @returns {jQuery}
 */
Reading_guide.prototype.create_step_list = function (_scope_coll_param, _index) {

    var _scope_json = _scope_coll_param.export_json(false); //$.json_encode(_scope_array);
    _scope_json = $.json_encode(_scope_json);
            
    // 取出文字
    var _text = KALS_text.selection.text;
    var _anchor_text = _text.get_abbreviated_anchor_text(_scope_coll_param);
    var _step_list = _anchor_text;
    //_step_list = _step_list + ", " + _scope_json;    
    
    this._scope_coll_array.push(_scope_coll_param);
    
    //_step_list.attr("scope", _scope_json);
    //_step_list.attr("step-index", _index);
    
    return _step_list;
};

Reading_guide.prototype._scope_coll_array = [];

Reading_guide.prototype.select_this_step = function (_step_list) {
    
    //var _stpe_list = this.get_ui(".step-list").eq(_index);
    
    if (_step_list.length === 0) {
        return this;
    }
    
    this.clear_read_now();
    
    _step_list.addClass("read")
            .addClass("now");
    //var _index = _step_list.find.attr("kals-field-repeat-index");
    //_step_list.css("border", "1px solid red");
    var _index = this.get_ui(".step-list").index(_step_list);
    //$.test_msg("select_step", _index);
    var _scope_coll_param = this._scope_coll_array[_index];
    //$.test_msg("select_step", _scope_coll_param.export_json());
    KALS_text.set_select(_scope_coll_param, true);
    
    // -------------
    // 內部也捲動到這個位置
    _step_list.scrollIntoView();
    
    // --------------
    
    //this.set_field("step_index", _index);
    this.set_step_index(_index);
    
    return this;
};

Reading_guide.prototype.clear_read_now = function () {
    this.get_ui(".read.now").removeClass("now");
    return this;
};

Reading_guide.prototype.select_step = function (_step_index) {
    var _step_list = this.get_ui(".step-list").eq(_step_index);
    return this.select_this_step(_step_list);
};

Reading_guide.prototype.reset_steps = function () {
    //this.set_field("step_index", -1);
    this.reset_step_index();
    
    this.get_ui(".step-list.read").removeClass('read');
    
    return this;
};

Reading_guide.prototype.goto_next_step = function () {
    var _index = this.get_field("step_index");
    _index++;
    if (_index < this.get_ui(".step-list").length) {
        this.select_step(_index);
    }
    return this;
};

/**
 * 前往下一步
 * @returns {Reading_guide.prototype}
 */
Reading_guide.prototype.goto_prev_step = function () {
    var _index = this.get_field("step_index");
    
    _index--;
    if (_index === -1) {
        //this.set_field("step_index", _index);
        //this.reset_step_index();
    }
    else if (_index > -1) {
        this.select_step(_index);
    }
    return this;
};

Reading_guide.prototype.set_step_index = function (_index) {
    this.set_field("step_index", _index);
    this.set_field("step_index_display", (_index+1));
    return this;
};

Reading_guide.prototype.reset_step_index = function () {
    this.set_field("step_index_display", "-");
    this.set_field("step_index", -1);
    return this;
};

Reading_guide.prototype.get_step_index = function () {
    return this.get_field("step_index");
};

/**
 * ================================================
 * 所有導讀都會用到的功能
 * ================================================
 */

/**
 * 開啟所有標註
 * @param {String} _algorithm 可接受參數有
 *  whole_annotations
 *  whole_annotations_by_sentence 預設值
 *  apriori_all
 *  
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype.open_guide_reading = function (_algorithm, _callback) {
    var _default_algorithm = this._default_algorithm;
    if (_algorithm === undefined) {
        _algorithm = _default_algorithm;
    }
    if ($.is_function(_algorithm) && $.is_undefined(_callback)) {
        _callback = _algorithm;
        _algorithm = _default_algorithm;
    }
    
    var _this = this;
    var _method_name = "_init_" + _algorithm;
    this[_method_name](function () {
        _this.open(function () {
            $.trigger_callback(_callback);
        });
    });
    return this;
};

/**
 * 
 * @type String預設使用的演算法
 *  whole_annotations
 *  whole_annotations_by_sentence
 *  apriori_all
 */
Reading_guide.prototype._default_algorithm = "apriori_all";

/**
 * 預設初始化的演算法
 * @param {type} _callback
 * @returns {Reading_guide.prototype}
 */
Reading_guide.prototype._init_default_algorithm = function (_callback) {
    var _method_name = "_init_" + this._default_algorithm;
    this[_method_name](function () {
        $.trigger_callback(_callback);
    });
    return this;
};

/**
 * ================================================
 * 導讀開啟：open_whole_annotations
 * ================================================
 */

/**
 * 所有標註的標題
 * @type String
 */
Reading_guide.prototype._heading_open_whole_annotations = "open_whole_annotations";

/**
 * 讀取所有的標註
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype._init_whole_annotations = function (_callback) {
    //$.test_msg("準備開啟所有標註", _structure);
    var _data = {};
    var _this = this;
    this.request_get("whole_annotations", _data, function (_data) {
        var _steps = _data.steps;
        
        var _lang = _this._heading_open_whole_annotations_by_sentence_title;
        _lang = _this.get_view_lang(_lang);
        _this.set_heading(_lang);
        
        _this.setup_steps(_steps);
        $.trigger_callback(_callback);
    });
    
    return this;
};

/**
 * 開啟所有標註
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype.open_whole_annotations = function (_callback) {
    return this.open_guide_reading("whole_annotations", _callback);
};

/**
 * ================================================
 * 導讀開啟：open_whole_annotations_by_sentence_title
 * ================================================
 */

/**
 * 句子標註的標題
 * @type String
 */
Reading_guide.prototype._heading_open_whole_annotations_by_sentence_title = "open_whole_annotations_by_sentence_title";

/**
 * 開啟所有的標註，以句子切割
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype._init_whole_annotations_by_sentence = function (_callback) {
    
    var _structure = KALS_text.get_sentence_structure();
    //$.test_msg("準備開啟所有標註", _structure);
    var _data = {
        "sentence_structure": _structure
    };
    var _this = this;
    this.request_post("whole_annotations_by_sentence", _data, function (_data) {
        var _steps = _data.steps;
        
        //$.test_msg("讀取到了什麼呢？ from_index", _data.from_index_array);
        //$.test_msg("讀取到了什麼呢？ scope", _steps);
        var _lang = _this._heading_open_whole_annotations_by_sentence_title;
        _lang = _this.get_view_lang(_lang);
        _this.set_heading(_lang);
        
        _this.setup_steps(_steps);
        $.trigger_callback(_callback);
    });
    
    return this;
};

/**
 * 開啟所有標註
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype.open_whole_annotations_by_sentence = function (_callback) {
    return this.open_guide_reading("whole_annotations_by_sentence", _callback);
};

/**
 * ================================================
 * 導讀開啟：open_whole_annotations_by_sentence_title
 * ================================================
 */

/**
 * Apriori all標註的標題
 * @type String
 */
Reading_guide.prototype._heading_open_apriori_all = "open_apriori_all";

/**
 * 開啟Apriopri ALL演算法的標註
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype._init_apriori_all = function (_callback) {
    
    var _structure = KALS_text.get_sentence_structure();
    //$.test_msg("準備開啟 apriori_all", _structure);
    var _data = {
        "sentence_structure": _structure
    };
    var _this = this;
    this.request_post("apriori_all", _data, function (_data) {
        var _steps = _data.steps;
        
        //$.test_msg("讀取到了什麼呢？ scope", _steps);
        var _lang = _this._heading_open_apriori_all;
        _lang = _this.get_view_lang(_lang);
        _this.set_heading(_lang);
        
        _this.setup_steps(_steps);
        $.trigger_callback(_callback);
    });
    
    return this;
};

/**
 * 開啟所有標註
 * @param {function} _callback
 * @returns {Reading_guide}
 */
Reading_guide.prototype.open_apriori_all = function (_callback) {
    return this.open_guide_reading("apriori_all", _callback);
};

/* End of file Reading_guide */
/* Location: ./system/application/views/web_apps/extension/Reading_guide/Reading_guide.js *//**
 * List_anchor_text_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 05:02:59
 * @extends {KALS_user_interface}
 * @param {List_item} _item
 * @param {boolean} _show_fulltext 
 */
function List_anchor_text_component(_item) {
    
    KALS_user_interface.call(this);
    
    this._set_list_item(_item);
}

// Extend from KALS_user_interface
List_anchor_text_component.prototype = new KALS_user_interface();

// --------
// List Item
// --------

/**
 * @type {List_anchor_text_component}
 */
List_anchor_text_component.prototype._item = null;

List_anchor_text_component.prototype._set_list_item = function (_item) {

    //$.test_msg("List_anchor_text, _set_list_item");
	
    if ($.isset(_item)) {
        this._item = _item;
        var _this = this;
        this._item.add_listener('set', function (_item) {
            //$.test_msg("List_anchor_text", "set_data");
            _this.set_data();
        });
        this.set_data();
    }
};

/**
 * 設定資料
 */
List_anchor_text_component.prototype.set_data = function () {
    var _text = this.get_anchor_text();
	this.set_anchor_text(_text);
};

// --------
// UI
// --------

/**
 * Create UI
 * @memberOf {List_anchor_text_component}
 * @type {jQuery} UI
 */
List_anchor_text_component.prototype._$create_ui = function () {
    var _ui = $('<div></div>')
        .addClass('list-anchor-text-component');
    return _ui;
};

/**
 * 取得設定標註範圍文字
 * @type {String} 範圍文字
 */
List_anchor_text_component.prototype.get_anchor_text = function(){
    var _param = this._item.get_annotation_param();
    var _scope = _param.scope;

    var _text = KALS_text.selection.text;

    //$.test_msg("get_anchor_text scope", _scope);
    var _anchor_text = _text.get_anchor_text(_scope);
    //$.test_msg("get_anchor_text text", _anchor_text);
    return _anchor_text;
};


/**
 * 設定標註範圍文字
 * @param {String} _note
 */
List_anchor_text_component.prototype.set_anchor_text = function (_text) {
    //$.test_msg("set_anchor_text text", _text);
    //$.test_msg("set_anchor_text ui", this.get_ui().length);

    if (this._item.max_anchor_text_length != null) {
        var _max = this._item.max_anchor_text_length;

        if (_text.length > _max) {
            var _half = parseInt(_max / 2);

            var _first_part = _text.substr(0, _half);
            var _last_part = _text.substr(_text.length - _half, _half);
            _text = _first_part + "..." + _last_part; 
        }
    }
	
	_text = '"' + _text + '"'; 
    this.get_ui().html(_text);
    return this;
};


/* End of file List_anchor_text_component */
/* Location: ./system/application/views/web_apps/List_anchor_text_component.js *//**
 * List_menu_search
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/30 下午 08:11:03
 * @extends {List_menu}
 * @param {List_item} _item
 * @param {String[]} _disable_option
 */
function List_menu_search(_item, _disable_option) {
    
    List_menu.call(this, _item, _disable_option);
    
}

List_menu_search.prototype = new List_menu();

/**
 * 顯示完整的日期
 */
List_menu_search.prototype.timestamp_full_dispaly = true;

/**
 * Create UI
 * @memberOf {List_menu_search}
 * @type {jQuery} UI
 */
List_menu_search.prototype._$create_ui = function () {
    var _ui = List_menu.prototype._$create_ui.call(this);
    _ui.addClass('list-menu-block');
    return _ui;
};

/* End of file List_menu_search */
/* Location: ./system/application/views/web_apps/List_menu_search.js *//**
 * List_item_search_topic
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/6 下午 10:31:03
 * @extends {List_item_topic}
 * @param {Annotation_param} _param
 */
function List_item_search_topic(_param) { 
    
    List_item_topic.call(this, _param);
	
}

List_item_search_topic.prototype = new List_item_topic();

List_item_search_topic.prototype._setup_menu_block = function () {
    var _component = new List_menu_search(this, this._disable_option);
    this.child('menu_block', _component);
    return _component;
};

//List_item_search_topic.prototype._$respond_force_load = true;

List_item_search_topic.prototype._menu_style_default = 'block';

// 開啟留言的瀏覽討論
List_item_search_topic.prototype._note_show_fulltext = false; 


List_item_search_topic.prototype._disable_option = ['edit','delete','view','recommend', "respond" ];

// 重新覆寫一個ui，在裡面修改功能
List_item_search_topic.prototype._$create_ui = function(){

	//View_list_item_topic.prototype._$create_ui(this);
	var _ui = List_item_topic.prototype._$create_ui.call(this);
	
	var _anchor_text = this._setup_anchor_text_component()
		.get_ui().insertBefore(_ui.find(".list-note-component"));
	
	_ui.addClass("list-item-search-topic");
	//只有改topic的部分
	//_ui.find(".list-menu-option").css("border-left","none");
	
	//_ui.css("clear","right"); 
	//_ui.find(".list-menu.list-menu-block").css("padding","5px");

	return _ui;
};

/**
 * 顯示詳細視窗
 * @author Pulipuli Chen 20131113
 */
List_item_search_topic.prototype.view_thread = function (_callback) {
    var _param = this.get_annotation_param();
    
    //$.test_msg("List_item_search_topic _param.is_respond()", _param.is_respond());
    var _topic_annotation_id = _param.annotation_id;
    if (_param.is_respond()) {
        _topic_annotation_id = _param.topic.annotation_id;
    }
    //$.test_msg("List_item_search_topic _topic_annotation_id", _topic_annotation_id);
    
    // 鎖住黑色背景的變換
    KALS_context.overlay.lock_mask();
	
    KALS_text.tool.view.load_view(_topic_annotation_id, function () {
        KALS_context.overlay.unlock_mask();
    });
};

/* End of file List_item_search_topic */
/* Location: ./system/application/views/web_apps/List_item_search_topic.js *//**
 * View_list_item_respond
 *
 * @package    KALS

 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/11/8 下午 11:42:54
 * @extends {List_item_respond}
 */
function List_item_search_respond(_param) { 
    
    List_item_respond.call(this, _param);
	
}

List_item_search_respond.prototype = new List_item_respond();

List_item_search_respond.prototype._$create_ui = function(){
    
    //var _ui = KALS_window.ui.panel('no-result');
    var _ui = List_item_respond.prototype._$create_ui.call(this);
    
	var _anchor_text = this._setup_anchor_text_component()
		.get_ui()
		.insertBefore(_ui.find(".list-note-component"));
	
	/*
	var _factory = KALS_window.ui;
	
    var _no_result_row = _factory.row(
	    new KALS_language_param('no-result','window.content.noresult'),'1'
	).appendTo(_ui); 
	*/
		
    return _ui;	
};

List_item_search_respond.prototype.get_topic_param = function () {
    return this.get_annotation_param();
};

List_item_search_respond.prototype.get_topic_id = function () {
    return this.get_annotation_id();
};

List_item_search_respond.prototype._disable_option = ['edit','delete','view','recommend', 'respond'];

List_item_search_respond.prototype._setup_menu_block = function () {
  
    var _component = new List_menu_search(this, this._disable_option);
    this.child('menu_block', _component);
    return _component;  
};

List_item_search_respond.prototype._menu_style_default = 'block';

// 開啟留言的瀏覽討論
List_item_search_respond.prototype._note_show_fulltext = false;

/**
 * 顯示標註細節，顯示的方式跟預設的有些不同
 * 直接引用List_item_search_topic的作法
 * @author Pulipuli Chen 20131113
 */
List_item_search_respond.prototype.view_thread = function () {
	return List_item_search_topic.prototype.view_thread.call(this);
};

/**
 * 設定menu的部份
 */
List_item_search_respond.prototype._setup_menu_block = function () {
    return List_item_search_topic.prototype._setup_menu_block.call(this);
};

/* End of file View_list_item_respond */
/* Location: ./system/application/views/web_apps/View_list_item_respond.js *//**
 * Search_form_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/16 上午 10:57:50
 * @extends {KALS_user_interface}
 */
function Search_form_component() {
    
    KALS_user_interface.call(this);

}

Search_form_component.prototype = new KALS_user_interface();

/**
 * 開始繪製表單
 */
Search_form_component.prototype._$create_ui = function () {
    
    var _ui = $('<table class="search-form"><tbody><tr></tr></tbody></table>')
		.addClass("search-component");
    
	if ($.is_null(this._window_search)) {
		this._window_search = new Window_search();
	}
	
	var _tr = _ui.find("tr:first");
	
	//var _range_td = $("<td></td>")
	//	.addClass("range")
	//	.appendTo(_tr); 
	
	var _input_td = $("<td></td>")
		.addClass("input")
		.appendTo(_tr);
	
	var _range = this._create_range_ui()
		.appendTo(_input_td);
	
	var _type = this._create_type_ui()
		.hide()
		.appendTo(_input_td);
		
    var _input = this._create_input()
		.appendTo(_input_td);
    
    var _submit = this._create_submit()
		.appendTo(_input_td);
    
	/*
	var _advanced_td = $("<td></td>")
		.addClass("advanced")
		.appendTo(_tr);
    var _advanced = this._create_advanced_link()
		.appendTo(_advanced_td);
	*/
    // TODO Search_form_component search事件
    
    return _ui;
};

/**
 * 開啟搜尋視窗按鈕
 * @author Pulipuli Chen 20131113
 * @return {jQuery}
 */
Search_form_component.prototype._create_advanced_link = function () {
    
    var _ui = $('<span class="link"></span>');
    
    KALS_context.lang.add_listener(_ui, new KALS_language_param('ADVANCED SEARCH'
        , 'toolbar.search.advanced_search'));
    
    _ui.addClass('advanced-link');
	
	var _this = this;
	_ui.click(function () {
		//$.test_msg("Search_component advanced");
		_this._window_search.open_window();
	});
	
    return _ui;
};

/**
 * 搜尋視窗
 * @type {Window_search}
 */
Search_form_component.prototype._window_search = null;


/**
 * 建立輸入框
 * 
 * 採用Window_search.create_keyword_ui
 * @author 20131114 Pulipuli Chen
 * @type {jQuery}
 */
Search_form_component.prototype._create_input = function () {
    return this._window_search.create_keyword_ui();
	/*
    var _input = $('<input type="text" placeholder="Search..." name="keyword" class="search-form-input" />');
    
    KALS_context.lang.add_listener(_input, new KALS_language_param('Search...'
        , 'toolbar.search.input_placeholder'));
    
    _input.placeHeld();
    
    return _input;
    */
};

Search_form_component.prototype._create_submit = function () {
    var _submit = (new Dialog_option()).get_ui();
	_submit.empty()
	   .addClass("search-form-submit");
	
    //var _submit = $('<button type="button" class="search-form-submit"></button>')
    //    .append(KALS_context.get_image_url('search.gif'));
    
	var _this = this;
	_submit.click(function () {
		//$.test_msg("Search_component advanced");
		//_this._window_search.open_window();
		
		var _ui = _this.get_ui();
		
		var _range = _ui.find("[name='search_range']").val();
		var _type = _ui.find("[name='type']").val();
		var _keyword = _ui.find("[name='keyword']").val();
		
		if (_keyword !== "") {
			_this._window_search.search({
				"search_range": _range,
				"keyword": _keyword,
				"type": _type
			});	
		}
		else {
			_this._window_search.open_window();
		}
		
	});
    
	return _submit;
};

/**
 * 建立搜尋範圍的選單
 * @tyep {jQuery}
 */
Search_form_component.prototype._create_range_ui = function () {
	
	var _search = this._window_search;
	
	var _search_range = _search.create_range_ui("dropdown");
	
	return _search_range;
};

/**
 * 建立標註類別的選單
 * @tyep {jQuery}
 */
Search_form_component.prototype._create_type_ui = function () {
	
	var _search = this._window_search;
	
	var _search_type = _search.create_annotation_type_ui("dropdown").hide();
	
	return _search_type;
};

/* End of file Search_form_component */
/* Location: ./system/application/views/web_apps/Search_form_component.js *//**
 * Selection_search
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/20 下午 08:42:59
 * @extends {Selection}
 * @param {Selectable_text} _text
 */
function Selection_search(_text) {
    
    Selection.call(this, _text);
    
    var _this = this;
    KALS_context.auth.add_listener(function (_auth) {
        _this.clear();
    }, true);
}

Selection_search.prototype = new Selection();

Selection_search.prototype._$name = 'search_result';

/* End of file Selection_search */
/* Location: ./system/application/views/web_apps/Selection_search.js *//**
 * List_collection_search-由此送出做查尋並接收result畫出無限捲軸
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/27 下午 09:03:09
 * @extends {List_collection}
 */
function List_collection_search() {
    
    List_collection.call(this);
    
}

List_collection_search.prototype = new List_collection();

List_collection_search.prototype._$name = 'search';

List_collection_search.prototype._$target_my = false;

List_collection_search.prototype._$target_like = false;

List_collection_search.prototype._$need_login = false;

//接收資料的來源
List_collection_search.prototype._$load_url = 'annotation_getter/search_annotation'; 

List_collection_search.prototype._$limit = null;

/**
 * 是否啟用登入檢查
 * @type boolean
 */
List_collection_search.prototype._$enable_check_login = false;

/**
 * 搜尋範圍
 * @type {String}
 */
List_collection_search.prototype._search_range = null;

/**
 * 關鍵字
 * @type {String}
 */
List_collection_search.prototype._keyword = null;

/**
 * 設定搜尋範圍
 * @param {string} _search_range
 */
List_collection_search.prototype.set_search_range = function (_search_range) {
	this._search_range = _search_range;
};

/**
 * 設定關鍵字
 * @param {string} _keyword
 */
List_collection_search.prototype.set_keyword = function (_keyword) {
	this._keyword = _keyword;
};

/**
 * 設定排序
 * @param {string} _order_by
 */
List_collection_search.prototype.set_order_by = function (_order_by) {
	this._$order_by = _order_by;
};


// 開始建立List_item-topic & respond
List_collection_search.prototype.create_list_item = function(_param) {
    if (_param.is_respond() === false) {
        return new List_item_search_topic(_param);
    }
    else {
        return new List_item_search_respond(_param);
    }
};

List_collection_search.prototype.get_search_data = function () {
    //$.test_msg("List_coll search get_search_data");
    var _search_data = {};
       
    //需要登入身分的兩個參數
    //if (($.isset(this._$target_like) || $.isset(this._$target_my)) &&
    //  KALS_context.auth.is_login() === false) {
    //            return null;
    //}
    
    if ($.isset(this._$target_like)) {
		_search_data.target_like = this._$target_like;
	}
    if ($.isset(this._$target_my)) {
		_search_data.target_my = this._$target_my;
	}
    
    if ($.isset(this._$limit)) {
		_search_data.limit = this._$limit;
	}
    
    if ($.isset(this._$target_topic)) {
		_search_data.target_topic = this._$target_topic;
	}
    if ($.isset(this._$order_by) && this._$order_by !== 'score') {
		_search_data.order_by = this._$order_by;
	}
        
    if ($.isset(this._offset)) {
		_search_data.offset = this._offset;
	}
    
    //$.test_msg('Respond_list_collection.get_search_data()', _data);
    _search_data.search_range = this._search_range;
	_search_data.keyword = this._keyword;
	_search_data.order_by = this._$order_by;
	
    _search_data.show_total_count = true;
    
        //$.test_msg("List_coll get_search_data", _search_data);
	return _search_data;
};

// 呈現結果數量
List_collection_search.prototype.setup_load_list = function(_data, _callback){
	
	// 做一個假的_this，讓function中使用
	var _this = this;
	
        //$.test_msg("search.setup_load_list", _data);
        //$.test_msg("search.setup_load_list", this.get_name());
	return List_collection.prototype.setup_load_list.call(this, _data, function () {

		// 取得UI
	   var _ui = _this.get_ui();
		
	   var _search_count =_data.total_count;
	   var _search_loaded = _data.totally_loaded;
	   
	   //var _show_result_row = _ui.find(".totally-loaded"); //全部讀完
	   var _show_no_result_row = _ui.find(".no-result");  //無查詢結果
	   var _reset_button = _ui.find(".reset-button");  //無查詢結果
	  
	   //顯示查詢訊息
	   if (_search_loaded === true && _search_count === 0){ 
		    _show_no_result_row.show();
			//_show_result_row.hide();
			_reset_button.hide();
		  }
		else if(_search_loaded === true && _search_count !== 0 ) {
		    //_show_result_row.show();
		    _show_no_result_row.hide();
			_reset_button.show();
		}
	
                //顯示查詢結果	
                _ui.find(".result-count-tip").show();
		_ui.find(".result-count-tip .result-count").html(_search_count);
 		
		//$.test_msg('_search_count', _search_count);
		//$.test_msg('_search_loaded',_search_loaded);
		
		// ------------
		
		var _search_scope = _data.scope_collection;
		
		KALS_text.selection.search.set_scope_coll(_search_scope);
		
		_ui.show();
		
		// ------------

		// 要改用$._trigger，以免_callback不是function
		// @20131114 Pulipuli Chen
		$.trigger_callback(_callback);
	});
	
};

/**
 * 這樣可以跑嗎？
 */
List_collection_search.prototype.load_list = function(_data, _callback) {
    if ($.is_function(_data) && $.is_null(_callback)) {
        _callback = _data;
        _data = null;
    }
    
    if ($.isset(_data)) {
        if ($.is_class(_data, 'Annotation_param')) {
            var _annotation_param = _data.export_json();
            _data = {
                annotation_collection: [ _annotation_param ],
                totally_loaded: true
            };    
        }
        else if ($.is_class(_data, 'Annotation_collection_param')) {
            var _coll_param = _data.export_json();
            _data = {
                annotation_collection: _coll_param,
                totally_loaded: true
            };
        }
        
        //$.test_msg('List_collection.load_list() has data', _data);
        
        var _this = this;
        this.setup_load_list(_data, function () {
            $.trigger_callback(_callback);
            _this.notify_listeners(_data);
        });
        
        return this;
    }
    
    if (this.is_totally_loaded() === true
        || this._check_login() === false) {
        $.trigger_callback(_callback);
        //$.test_msg("is_totally_loaded check_login", [this.is_totally_loaded(), this._check_login()]);
        return this;
    }
    
    if (this._load_lock === true) {
        //$.test_msg("_load lock ed");
        return this;
    }
    
    //$.test_msg('List_coll.load_list check pre _search_data', this.get_name());
    
    var _search_data = this.get_search_data();
    
    //$.test_msg('List_coll.load_list check _search_data', [_search_data, this.get_name()]);
    if ($.isset(_search_data)) {
        this._load_lock = true;
        
        //$.test_msg('List_coll.load_list  pre-load()');
        this.load(_search_data, function (_this, _data) {
            //$.test_msg('List_coll.load_list load()', _data);
            _this.setup_load_list(_data, function () {
                $.trigger_callback(_callback);
                _this._load_lock = false;    
            });
        });
        return this;
    }
    
    //$.test_msg("List_coll do nothing");
    return this;
};

/**
 * 設定UI介面
 * @tyep {jQuery}
 */
List_collection_search.prototype._$create_ui = function () {
    
    var _factory = KALS_window.ui; 

    var _ui = $('<div></div>')
    .addClass('list-collection')
    .addClass(this._$name);

    // 搜尋結果標題	 
    var _searchresult_row = _factory.heading_row(new KALS_language_param('Searchresult', 'window.content.searchresult'))
        .appendTo(_ui); //"搜尋結果"標題	
    _searchresult_row.css("font-size","medium");
    
    var _header_panel = _factory.panel("header")
		.appendTo(_ui);

    // 建立清除搜尋結果的按鈕
    var _reset_button = this.create_reset_button();
    _reset_button.appendTo(_header_panel);
    
    // 建立導覽的按鈕
    var _guide_button = this.create_guide_button();
    _guide_button.appendTo(_header_panel);

    //_factory.hr_row().appendTo(_ui);	
    	
    //結果數量
    //var _result_number; 
    var _result_count_tip = _factory.tip(
    new KALS_language_param('Search Result Count','window.content.searchnumber'), '0')
        .addClass('result-count-tip')
        .hide()
        .appendTo(_header_panel); 

    var _result_count = $("<span></span>")
        .addClass("result-count")
        .appendTo(_result_count_tip);
  
    // -------------
    var _container = $('<div></div>')
        .addClass('list-container')
        .appendTo(_ui);
	
	// --------------
  	// _search_number_row.parent(".list-collection search").find('dd').addClass('number');

	var _footer_panel = _factory.panel("footer")
		.appendTo(_ui);
	/*
	var _result_row =_factory.message_row(new KALS_language_param('no-else-result','window.content.loaded_already'))
		.addClass('totally-loaded')
		.addClass('foot-tip')
		.appendTo(_footer_panel);
    */
	var _no_result_row =_factory.message_row(new KALS_language_param('no-result','window.content.noresult'))
		.addClass('no-result')
		.addClass('foot-tip')
		.css("display", "block")
		.appendTo(_footer_panel);
  
	// 隱藏,再由totally_loaded與 total_count來判斷是否顯示
	//_result_row.hide(); 
	_no_result_row.hide();
	
	//_reset_button.clone(true).appendTo(_footer_panel);
	
    this._list_container = _container;

    return _ui;
};

/**
 * 建立清除搜尋結果按鈕
 * @return jQuery
 */
List_collection_search.prototype.create_reset_button = function () {
	var _factory = KALS_window.ui;
	var _button = _factory.button(new KALS_language_param(
		"Clear search result",
		"window.search.clear_search_result"
	))
		.addClass("reset-button");
	
	
	var _this = this;
	_button.click(function () {
		_this.reset();
	});
	
	return _button;
};

/**
 * 建立搜尋結果導讀按鈕
 * @author Pulipuli Chen  
 * @type {jQuery}
 */
List_collection_search.prototype.create_guide_button = function () {
    var _factory = KALS_window.ui;
    var _button = _factory.button(new KALS_language_param(
                "Reading Guide",
                "window.search.reading_guide"
        ))
        .addClass("guide-button");

    var _this = this;
    _button.click(function () {
        //_this.reset();
        var _coll = _this.get_annotation_collection_param();
        
        // @TODO 20131230 要輸出到導讀的功能中
        KALS_text.guide.setup_steps(_coll);
        KALS_window.close();
        
        //$.test_msg("create guiding button", _coll.annotations.length);
    });

    return _button;
};

/**
 * 修改預設的重設動作
 */
List_collection_search.prototype.reset = function () {
    //$.test_msg("List_collection_search.prototype.reset");
    
    this.get_ui().hide();
    KALS_text.selection.search.clear();
    return List_collection.prototype.reset.call(this);
};

/* End of file List_collection_search */
/* Location: ./system/application/views/web_apps/List_collection_search.js *//**
 * Window_profile
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/5 下午 07:51:43
 * @extends {Window_content}
 */
function Window_search() {
    
    Window_content.call(this);
    
    this._setup_submit(new Window_search_submit()); // send keyword and search_range

    this.child("list", new List_collection_search());
}

Window_search.prototype = new Window_content();

Window_search.prototype.name = 'search';

Window_search.prototype.heading = new KALS_language_param (
    'Search',
    'window.search.nav_heading'
);

Window_search.prototype.nav_heading = new KALS_language_param (
    'Search',
    'window.search.nav_heading'
);

Window_search.prototype._$load_config = 'Window_search';

Window_search.prototype.width = 500;

/**
 * 搜尋結果
 * @type {List_collection_search}
 */
Window_search.prototype.list = null;

/**
 * 搜尋的預設值
 */
Window_search.prototype._search_default_option = {
	range: "note",
	type: null,
	order_by: null
};

/**
 * 搜尋功能選項
 */
Window_search.prototype._search_param = {
    /**
     * 搜尋欄位
     */
    range: [ "note","author","annotation_type","annotation_anchor" ],

    /**
     * 排序順序
     * 
     * 由於內文順序的排序尚未完成，所以先關閉
     */
    //order_by: ["update","create","scope"]
    order_by: ["update","create"]	
};

/**
 * Create UI
 * @memberOf {Window_search}
 * @type {jQuery} UI
 */
Window_search.prototype._$create_ui = function (){  //建立UI

    var _ui = KALS_window.ui.panel('window-search');//建立search版面

    var _factory = KALS_window.ui;
      
	// 新增一層subplan來畫SEARCH表單	
	var _subpanel = _factory.subpanel('range').appendTo(_ui);
	var _this = this;
    
   	// search_range為radio選單
   
    // -------------------------
	
	var _search_range_radio = this.create_range_ui("radio");
	
	//將 _search_range_row畫上去 
     var _search_range_row = _factory.row(
         new KALS_language_param('search_range', 'window.content.search_range'),
         _search_range_radio	
       ).appendTo(_subpanel);
	
    _search_range_row.find("dt:first").css("margin-bottom", "1em");


    // --------------------------

    // 標註類型radio選單

    var _type_radio = this.create_annotation_type_ui("radio");

    //_search_range_list.after(_type_radio); //_type_radio緊接在_search_range_list
    var _type_radio_row = _factory.row(
    new KALS_language_param('type_radio', 'window.content.type_radio'),
            _type_radio)
            .addClass("annotation-type-row")
            .appendTo(_ui); 

    // 隱藏標註類型選單 
    _type_radio_row.hide(); // 平常時候把_type_radio隱藏起來
	_type_radio_row.find("dt:first").css("margin-bottom", "1em");
	
	
     // 當使用者有點選動作時的事件
	 /*
	 _search_range_radio.find("input")
		.click(function () {
		
			// 現在在option下用this，去找上面名為.search_range-type的層別，在此層級下找:radio:checked，選擇現在所點選的值
			var _value = $("[name='search_range']:checked").attr("value");
			// 在option下用parents去找上面名為window-panel的層別，在此層級下找到要代入的search-keyword，將value代入
			$(this).parents(".window-panel").find(".search-keyword:first").val(_value);
			
			
			// 如果點選到類別就秀出標註類型radio選單
			var _panel = $(this).parents(".window-panel:first");
			
			if (_value !== "annotation_type") {
		        _type_radio_row.hide();
		        _panel.find(".search-keyword:first").val(""); 
	
		       // $.test_msg("_search_range_list.change", $(this).parents(".window-panel").find(".search-keyword:first").length);
	
		        _searchkey_row.show();
	     
	           } 
   	       else {
               _type_radio_row.show();
		      _searchkey_row.hide();
	
	
	
	      // 切換標註類型選項 
		  
		 if ( _panel.find(".radio-list.list.search-range-type input:radio:first").length === 1){
		 
		 // 預設值   
		    var _type_value =1 ;
		    _panel.find(".search-keyword:first").val(_type_value);
		    
		 // 切換選項	
			_type_radio.click(function (){
		   		  
			    _type_value = _panel.find(".radio-list.list.search-range-type input:radio:checked").val(); //要找到下一層input有點選的部分
			    
				//$.test_msg("_.search_range-type", _panel.find(".radio-list.list.search_range-type input:radio:checked").val() );
				
				_panel.find(".search-keyword:first").val(_type_value);
				
			 });  
		     
			 }
		
	}	
   });
    */
   
   
    // 輸入關鍵字
	var _keyword_input = this.create_keyword_ui();
	
	// 測試
	//_keyword_input.val("test");
	
	var _searchkey_row = _factory.row(
        new KALS_language_param('Searchkey', 'window.content.searchkey'),
        _keyword_input)
		.addClass("keyword-row")
		.appendTo(_ui); //"關鍵字"標題	
    
	
	var _keyword_empty_hint = _factory.tip(new KALS_language_param('Please input keyword', 'window.search.keyword_empty_hint'))
		.addClass("keyword-empty-hint")
		.appendTo(_searchkey_row.find("dd"));
	
	// ------------------
	
	// 選擇排序方式-update,create,scope
	
	_subpanel = _factory.subpanel('order').appendTo(_ui); //新增一層subplan	
  
   // order_by為radio選單

	var _order_by_config = this._search_param.order_by;
	var _order_by_options = [];
	var _order_by_default_value = this._search_default_option.order_by;
	
	for (var _k in _order_by_config) {

		var  _order_by_param = _order_by_config[_k];
		var _value =_order_by_config[_k];
		//預設值
		if ( _order_by_default_value === null) {
			 _order_by_default_value = _value;
		}
		var _lang = new KALS_language_param(
                _value,
                'window.content.oreder_by.' + _value
            );
		var _option = _factory.radio_option(_lang, _value);
		
        _order_by_options.push(_option);
	}
	
	var _order_by_radio = _factory.radio_list('order_by', _order_by_options ,_order_by_default_value);
	_order_by_radio.addClass("order_by");
	
	var _order_by_row = _factory.row(
            new KALS_language_param('order_by', 'window.content.oreder_by'),
            _order_by_radio	
        ).appendTo(_subpanel);
	
  	
 /* 換頁功能 
	var _callback = function (_page) {
		alert(_page);
	};
	
	_factory.create_pager(9, 10, _callback).appendTo(_ui);

*/
   
  	// 搜尋結果數量
	/**
	 * 移至List_collection_search顯示
	 */
    //var _result_number = _search_data.item_number;
	
	/*var _search_number_row = _factory.row(
	    new KALS_language_param('Searchnumber','window.content.searchnumber'), '1'
	).appendTo(_ui); */
   
    var _result = _factory.subpanel("search-result-subpanel")
        .appendTo(_ui)
        .hide();
    
    var _list_ui = this.list.get_ui();
	_list_ui.appendTo(_result);
	
    return _ui;
};



/**
 * 建立搜尋範圍的選單
 * 
 * 注意：這是選單，所以還要搭配_factory.radio_list才能運作
 * 
 * @param _type {String} radio|dropdown 選單類型
 */
Window_search.prototype.create_range_options = function(_type){
    if (_type === undefined) {
        _type = "radio";
    }
	
    var _factory = KALS_window.ui;
	
    var _search_range_options = [];
    var _search_range_default_value = this._search_default_option.range;
    var _search_range_param_list = this._search_param.range;
    var _r;
    for (_r in _search_range_param_list) {
        // _type_param = new Annotation_type_param();
        var _search_range_param = _search_range_param_list[_r];
        var _value = _search_range_param_list[_r];
        //預設值
        if (_search_range_default_value === null) {
            _search_range_default_value = _value;
        }
        var _lang = new KALS_language_param(_value, 'window.content.search.field.' + _value);

        var _option;
        if (_type === "radio") {
            _option = _factory.radio_option(_lang, _value);
        }
        else {
            _option = _factory.dropdown_option(_lang, _value);
        }

        _search_range_options.push(_option);
    }

    return _search_range_options;
};	

/**
 * 建立搜尋選單
 * @param {String} _type radio|dropdown 選單類型
 * @type {jQuery}
 */
Window_search.prototype.create_range_ui = function (_type) {
	
	if (_type === undefined) {
		_type = "radio";
	}
	
    var _factory = KALS_window.ui;
	
	var _options = this.create_range_options(_type);
	
	var _search_range_options = this.create_range_options(_type);
	var _search_range_default_value = this._search_default_option.range;
	
	var _search_range;
	if (_type == "radio") {
		_search_range = _factory.radio_list('search_range', _search_range_options , _search_range_default_value);	
	}
	else if (_type == "dropdown") {
		_search_range = _factory.dropdown('search_range', _search_range_options , _search_range_default_value);
	}
	
	_search_range.addClass(this.range_classname);
	
	
	var _this = this;
	
	var _check_toggle_input = function (_range) {
		
	};
	
	if (_type == "radio") {
		_search_range.find("input").click(function() {
			_this.change_range(this.value);
		});
	}
	else if (_type == "dropdown") {
		_search_range.change(function () {
			_this.change_range(this.value);
		});	
	}
	
	return _search_range;
};

/**
 * 標註範圍的class名稱
 * @type {String}
 */
Window_search.prototype.range_classname = "search-range";

/**
 * 取得標註範圍的UI
 * @type {jQuery}
 */
Window_search.prototype.get_range_ui = function () {
	return $(".KALS ." + this.range_classname);
};

/**
 * 更換選擇範圍
 * @param {String} _range
 */
Window_search.prototype.change_range = function (_range) {
	
	if (this._last_range === null) {
		this._last_range = this._search_default_option.range;
	}
	
	//$.test_msg("change range", [_range, this.is_input_keyword()]);
	if (_range === "annotation_type" && this.is_input_keyword()) {
            this.toggle_input("annotation_type");
	}
	else if (_range !== "annotation_type" && this.is_input_keyword() === false) {
            this.toggle_input("keyword");
	}	
	
	var _range_ui = this.get_range_ui();
	KALS_window.ui.change_list_value(_range_ui, _range);
	
	this._last_range = _range;
	
	this.list.reset();
	
	return this;
};

/**
 * 記錄最後使用的range
 */
Window_search.prototype._last_range = null;

/**
 * 建立標註類型選單
 * @param {String} _type radio|dropdown 選單類型
 * @type {jQuery
 */
Window_search.prototype.create_annotation_type_ui = function (_type) {
	
	if (_type === undefined) {
		_type = "radio";
	}
	
    var _factory = KALS_window.ui;
	
	// 標註類型radio選單
	var _type_param_list = KALS_context.create_type_param_list();
	var _type_options = [];
	var _default_type = this._search_default_option.type;
	for (var _r in _type_param_list) {
		// _type_param = new Annotation_type_param();
		var _type_param = _type_param_list[_r];
		var _value = _type_param.get_id();
                
		if (_type_param.is_basic() === false) {
                    _value = _type_param.get_name();
                }
                
		//預設值
		if (_default_type === null) {
			_default_type = _value;
		}
		
		_lang = _type_param.get_type_name_lang();
		
		var _option;
		if (_type == "radio") {
			_option = _factory.radio_option(_lang, _value);
		}
		else if (_type == "dropdown") {
			_option = _factory.dropdown_option(_lang, _value);
		}
		
        _type_options.push(_option);
	}
	
	var _type_ui;
	
	var _this = this;
	if (_type == "radio") {
		_type_ui = _factory.radio_list('type', _type_options, _default_type);
		
		_type_ui.find("input:radio").click(function () {
			_this.change_annotation_type(this.value);
		});	
	}
	else if (_type == "dropdown") {
		_type_ui = _factory.dropdown('type', _type_options, _default_type);
		
		_type_ui.change(function () {
			_this.change_annotation_type(this.value);
		});	
	}
	
	_type_ui.addClass(this.type_classname);
	
	
	return _type_ui;
};

/**
 * 設定標註類型
 * @param {String} _type
 */
Window_search.prototype.change_annotation_type = function (_type) {
	var _type_ui = this.get_annotation_type_ui();
	
	var _factory = KALS_window.ui;
	_factory.change_list_value(_type_ui, _type);
	
	var _type_value = _factory.get_list_value(_type_ui);
	//$.test_msg("change_annotation_type", _type_value);
	this.set_keyword_value(_type_value); 
	
	this.list.reset();
	
	return;
};

/**
 * 標註類型的class名稱
 * @type {String}
 */
Window_search.prototype.type_classname = "search-range-type";


/**
 * 建立關鍵字輸入框
 * @type {jQuery}
 */
Window_search.prototype.create_keyword_ui = function(){
	
	/*
	var _factory = KALS_window.ui;
	
    // 輸入關鍵字
	var _keyword_input = _factory.input('keyword');
	*/
	var _input = $('<input type="text" placeholder="Search..." name="keyword" class="search-form-input" />');
    
    KALS_context.lang.add_listener(_input, new KALS_language_param('Search...'
        , 'toolbar.search.input_placeholder'));
    
    _input.placeHeld();
	_input.addClass(this.keyword_input_classname);
	
	var _this = this;
	_input.change(function () {
		_this.set_keyword_value(this.value);
	});
	
	return _input;
};

/**
 * 設定關鍵字的值
 * @param {String} _value
 */
Window_search.prototype.set_keyword_value = function (_value) {
	this.get_keyword_ui().val(_value);
	this.list.reset();
	return this;
};

/**
 * 關鍵字輸入框的class名稱
 * @type {String}
 */
Window_search.prototype.keyword_input_classname = "search-keyword";

/**
 * 切換要顯示的輸入框
 * @param {String} _type annotation_type|keyword
 */
Window_search.prototype.toggle_input = function (_type) {
	
	var _keyword_ui = this.get_keyword_ui();
	var _type_ui = this.get_annotation_type_ui();
	
	var _ui = this.get_ui();
	var _keyword_row = _ui.find(".keyword-row");
	var _type_row = _ui.find(".annotation-type-row");
	
	var _factory = KALS_window.ui;
	
	if (_type === "annotation_type") {
		var _keyword_value = _keyword_ui.eq(0).val();
		this._last_keyword_value = _keyword_value;
		
		var _type_value = _factory.get_list_value(_type_ui);
		this.set_keyword_value(_type_value);
		
		_keyword_ui.addClass("use-annotation-type");
		_keyword_ui.hide();
		_keyword_row.hide();
		_type_ui.show();
		_type_row.show();
	}
	else {
		this.set_keyword_value(this._last_keyword_value);
		
		_keyword_ui.removeClass("use-annotation-type");
		_keyword_ui.show();
		_keyword_row.show();
		_type_ui.hide();
		_type_row.hide();
	}
	
	return this;
};

/**
 * 現在是顯示關鍵字輸入框嗎？
 * @type {boolean}
 */
Window_search.prototype.is_input_keyword = function () {
	var _keyword_ui = this.get_keyword_ui().eq(0);
	var _classname = _keyword_ui.attr("className");
	var _is_keyword = (_classname.indexOf("use-annotation-type") === -1);
	//$.test_msg("is_input_keyword", _is_keyword);
	return _is_keyword;
};

/**
 * 最後輸入的關鍵字
 */
Window_search.prototype._last_keyword_value = null;


/**
 * 取得關鍵字的UI
 */
Window_search.prototype.get_keyword_ui = function () {
	return $(".KALS ." + this.keyword_input_classname);
};

/**
 * 取得標註類型的UI
 */
Window_search.prototype.get_annotation_type_ui = function () {
	return $(".KALS ." + this.type_classname);
};

// -------------------------------------------------

/**
 * 顯示最近的標註
 * @memberOf {window_search}
 */
Window_search.prototype.show_recent_annotation = function(_callback){
	var _content = this;
	var _list = _content.list;
	var _data = this.get_data();
	
	//$.test_msg("Window_search_submit.prototype.submit", _data);
	var _default_option = this._search_default_option;
	_list.set_search_range(_default_option.range);
	_list.set_keyword("");
	_list.set_order_by(_default_option.order_by);
	
	_list.reset();
	    
	// 我們要叫List_collection_search進行搜尋
	var _this = this;
        
	_list.load_list(function () {
        //$.test_msg("Window_search_submit.prototype.submit");
        //_this.complete_handle();
        _content.get_ui().find(".search-result-subpanel").show();
        $.trigger_callback(_callback);
	});
};

Window_search.prototype.open_recent_annotation = function (_callback) {
	var _this = this;
    this.show_recent_annotation(function () {
		_this.open_window(function () {
			$.trigger_callback(_callback);
		}); 
    });
    return this;
};




/**
 * 回傳一個目前的狀態
 * @memberOf {window_search}
 * @author Pulipuli Chen 20131113
 */
Window_search.prototype.setup_recent = function(){
	
	this.nav_heading = new KALS_language_param (
	    'Recent',
	    'window.search_recent.nav_heading'
	);
	var _this = this;
	this.onopen = function () {
		
		var _save_input_value = {
			search_range: _this.get_input_value("search_range"),
            keyword: _this.get_input_value("keyword"),
            order_by: _this.get_input_value("order_by")
		};
		
		//$.test_msg("setup_recent", _save_input_value);
		
		//$.test_msg("setup_recent", "keyword *");
		_this.set_input_value({
			search_range: "note",
			keyword: "*",
			order_by: "update"
		});
		
		_this.submit.submit(function () {
			_this.set_input_value(_save_input_value);
		});
	};
};

/**
 * 設置input的值，覆寫Window_content
 * @param {JSON} _data
 */
Window_search.prototype.set_input_value = function(_data){
	if (typeof _data.search_range == 'string') {
		this.toggle_input(_data.search_range);
	}
	
	return Window_content.prototype.set_input_value.call(this, _data);
};

/**
 * 開啟視窗後預設要聚焦的可輸入元件
 * @type {String} jQuery Selector
 */
Window_search.prototype.default_focus_input = '.dialog-content:first input:radio:checked';

/**
 * 執行搜尋
 * @param {JSON} _search_option 搜尋選項
 * _param = {
 *      range: "note","author","annotation_type","annotation_anchor",
 *      keyword:"keyword",
 *      order_by: "update|create"
 * }
 * @paam {Boolean} _open_window 預設是true
 */
Window_search.prototype.search = function (_search_option, _open_window) {
    if (typeof(_search_option) === "object") {
            this.set_input_value(_search_option);
    }

    this.submit.submit();

    if (_open_window === undefined) {
        _open_window = true;
    }

    if (_open_window) {
        this.open_window();
    }
};


/* End of file Window_profile */
/* Location: ./system/application/views/web_apps/Window_profile.js *//**
 * Window_search_submit -啟動List_collection_search來送出查詢
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/10/3 下午 11:04:46
 * @extends {Window_content_submit}
 */
function Window_search_submit() {
    
    Window_content_submit.call(this);
   
    // 送出seatchrange,keyword,order_by
    this._$input_names = ['search_range', 'keyword', 'order_by']; 
}

Window_search_submit.prototype = new Window_content_submit();

//將資料包成json送出的目的路徑-使用annotation_getter
Window_search_submit.prototype.url = 'annotation_getter/search_annotation';
                                                                     
//顯示的文字-查詢
Window_search_submit.prototype.lang = new KALS_language_param(  
    'Send',
    'window.send'
);


/*Window_profile_submit.prototype.complete_notification = new KALS_language_param(
    'Profile updated.',
    'window.profile.submit.complete'
);

Window_profile_submit.prototype.failed_notification = new KALS_language_param(
    'Profile not updated.',
    'window.profile.submit.failed'
);
*/

/**
 * 取得查詢欄位中的資料
 * @param {Object} _data
 * @deprecated Pulipuli 20131119
 */
Window_search_submit.prototype.complete_handle = function () {
	
	// 不做任何事情
	
	//var _search = KALS_context.search;   //in KALS_context
    //_search.set_field(_input_data.search_range); //取得欄位中的值→Context_search.js
    //_search.set_keyword(_input_data.keyword);
    
	
	
	//complete_handle in window_content_submit.js 

    //var _input_data = this.get_data();
        
    
	//_search.set_order_by(_input_data.order_by); 
    
    //return Window_content_submit.prototype.complete_handle.call(this, _data); 
	//因為complete_handle.call做完後會自動關閉視窗，所以不使用
};

/**
 * 把參數丟給List_collection_search，讓他開始送出做查詢
 * 覆寫Window_content_submit-Window_content_submit.prototype.submit
 * @param {function} _callback
 */
Window_search_submit.prototype.submit = function(_callback){

    //$.test_msg("Window_search_submit submit");
    if (this.validate() === false) {
        //$.test_msg("Window_search_submit validate() false");
        return this;
    }
	
    var _content = this._content;
    var _list = _content.list;
    var _data = this.get_data();

    _list.reset();
    //_list.get_ui().show();

    //$.test_msg("Window_search_submit.prototype.submit", _data);
    _list.set_search_range(_data.search_range);
    _list.set_keyword(_data.keyword);
    _list.set_order_by(_data.order_by);

    // 我們要叫List_collection_search進行搜尋
    var _this = this;
    //$.test_msg("Window_search_submit _list.load_list()", _list.get_name());
    _list.load_list(function () {
            //$.test_msg("Window_search_submit.prototype.submit");
            _this.complete_handle();
            _content.get_ui().find(".search-result-subpanel").show();
    });

    $.trigger_callback(_callback);
    return this;
};

/**
 * 檢查是否允許遞交
 * @type {Boolean} 是否通過 
 */
Window_search_submit.prototype.validate = function () {
    
	var _data = this.get_data();
	
	var _result = true;
	
	var _ui = this._get_content_ui();
	var _keyword_empty_hint = _ui.find(".keyword-empty-hint");
	
	if (_data.keyword === "") {
		_result = false;
		_keyword_empty_hint.show();
		this.get_first_input("keyword").focus();
	}
	else {
		_keyword_empty_hint.hide();
	}
    
    return _result;
};

/* End of file Window_profile_submit */
/* Location: ./system/application/views/web_apps/Window_profile_submit.js *//**
 * Search_result_component
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2010, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2010/9/16 下午 09:51:08
 * @extends {KALS_user_interface}
 */
function Search_result_component() {
    
    KALS_user_interface.call(this);
    
}

Search_result_component.prototype = new KALS_user_interface();
    
/**
 * Create UI
 * @memberOf {Search_result_component}
 * @type {jQuery} UI
 */
Search_result_component.prototype._$create_ui = function () {
    var _ui = $('<span class="search-result"></span>');
    
    KALS_context.lang.add_listener(_ui, new KALS_language_param('Search result: ',
        'toolbar.search.search_result'));
    
    return _ui;
};

/* End of file Search_result_component */
/* Location: ./system/application/views/web_apps/Search_result_component.js *//**
 * List_item_tooltip
 *
 * @package    KALS
 * @category   Webpage Application Libraries
 * @author     Pudding Chen <puddingchen.35@gmail.com>
 * @copyright  Copyright (c) 2013, Pudding Chen
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       http://sites.google.com/site/puddingkals/
 * @version    1.0 2013/11/16 下午 11:31:40
 * @extends {List_item}
 */
function List_item_tooltip(_param) {
    
    List_item.call(this, _param);
    
}

List_item_tooltip.prototype = new List_item();

/**
 * Create UI
 * @memberOf {List_item}
 * @type {jQuery} UI
 */
List_item_tooltip.prototype._$create_ui = function () {
    var _this = this;
    
    var _ui = $('<div></div>')
        .addClass(this._classname)
        .addClass('list-item')
		.addClass('list-item-tooltip');
    
    var _header = this._setup_header();
    _header.get_ui().appendTo(_ui);
	
	var _count = this._setup_count();
	_count.prependTo(_header.get_ui());
	
	var _note = this._setup_note();
    _note.get_ui().appendTo(_ui);
	
	_ui.click(function () {
		$.test_msg("List_item_tooltip click", _this.get_scope_coll());
		_this.select();
	});

    return _ui;
};

List_item_tooltip.prototype._$max_width = 200;

/**
 * 顯示標註數量
 */
List_item_tooltip.prototype._setup_count = function () {
	var _ui = $("<div></div>")
	   .addClass("count-component");
	   
	var _message1 = KALS_context.lang.create_listener(new KALS_language_param(
	   '',
	   'selection_manager.select_tooltip.annotation_count1'
	))
	   .appendTo(_ui);
	
	var _count = $("<span></span>")
	   .addClass("count")
	   .appendTo(_ui);
	
	var _message2 = KALS_context.lang.create_listener(new KALS_language_param(
       ' annotations',
       'selection_manager.select_tooltip.annotation_count2'
    ))
       .appendTo(_ui);
	
	return _ui;
};

/**
 * 設定標註數量
 * @param {int} _count
 */
List_item_tooltip.prototype.set_count = function (_count) {
	var _ui = this.get_ui();
	_ui.find(".count-component .count").html(_count);
};

/* End of file List_item_tooltip */
/* Location: ./system/application/views/web_apps/List_item_tooltip.js */// PlaceHeld jQuery plugin by [Max Wheeler](max@makenosound.com)
// 
// Copyright (c) 2010 Max Wheeler. Licensed under the [WTFPL](http://sam.zoy.org/wtfpl/)
// Dependencies: jQuery
//
// Changelog:
// * v1.0.0 (2010-04-21) Initial Version
// * v1.0.1 (2010-04-29) Minified using YUI compressor instead ofo JSMin
// * v1.0.2 (2010-05-10) Removed default text from form submission; moved placeholder support check outside for() loop
// * v1.0.3 (2010-05-14) Added check for "placheld" class before clearing default text on form submission

(function($){
  $.placeHeld = function(el, options){
    var base = this;
    base.$el = $(el);
    base.el = el;
    base.$el.data("placeHeld", base);
    base.placeholderText = base.$el.attr("placeholder");
    
    base.init = function(){
      base.options = $.extend({},$.placeHeld.defaultOptions, options);
      base.$el.bind('blur', base.holdPlace).bind('focus', base.releasePlace).trigger('blur');
      base.$el.parents('form').bind('submit', base.clearPlace);
    };
    // Hold with the default value attribute
    base.holdPlace = function() {
      base.placeholderText = base.$el.attr("placeholder");
      var value = base.$el.val();
      if (!value) base.$el.val(base.placeholderText).addClass(base.options.className);
    };
    // Refill with the default value attribute
    base.releasePlace = function() {
      base.placeholderText = base.$el.attr("placeholder");
      var value = base.$el.val();
      if (value == base.placeholderText) base.$el.val('').removeClass(base.options.className);
    };
    // Refill with the default value attribute
    base.clearPlace = function() {
      base.placeholderText = base.$el.attr("placeholder");
      var value = base.$el.val();
      if (value == base.placeholderText && base.$el.hasClass(base.options.className)) base.$el.val('');
    };
    base.init();
  };
  
  $.placeHeld.defaultOptions = { className: "placeheld" };
  
  $.fn.placeHeld = function(options) {

	// Check for placeholder attribute support
	if (!!("placeholder" in $('<input>')[0])) return;
	
    return this.each(function() {
      (new $.placeHeld(this, options));
    });
  };
})(jQuery);/*
	Base.js, version 1.1a
	Copyright 2006-2010, Dean Edwards
	License: http://www.opensource.org/licenses/mit-license.php
*/

var Base = function() {
	// dummy
};

Base.extend = function(_instance, _static) { // subclass
	var extend = Base.prototype.extend;
	
	// build the prototype
	Base._prototyping = true;
	var proto = new this;
	extend.call(proto, _instance);
  proto.base = function() {
    // call this method from any other method to invoke that method's ancestor
  };
	delete Base._prototyping;
	
	// create the wrapper for the constructor function
	//var constructor = proto.constructor.valueOf(); //-dean
	var constructor = proto.constructor;
	var klass = proto.constructor = function() {
		if (!Base._prototyping) {
			if (this._constructing || this.constructor == klass) { // instantiation
				this._constructing = true;
				constructor.apply(this, arguments);
				delete this._constructing;
			} else if (arguments[0] != null) { // casting
				return (arguments[0].extend || extend).call(arguments[0], proto);
			}
		}
	};
	
	// build the class interface
	klass.ancestor = this;
	klass.extend = this.extend;
	klass.forEach = this.forEach;
	klass.implement = this.implement;
	klass.prototype = proto;
	klass.toString = this.toString;
	klass.valueOf = function(type) {
		//return (type == "object") ? klass : constructor; //-dean
		return (type == "object") ? klass : constructor.valueOf();
	};
	extend.call(klass, _static);
	// class initialisation
	if (typeof klass.init == "function") klass.init();
	return klass;
};

Base.prototype = {	
	extend: function(source, value) {
		if (arguments.length > 1) { // extending with a name/value pair
			var ancestor = this[source];
			if (ancestor && (typeof value == "function") && // overriding a method?
				// the valueOf() comparison is to avoid circular references
				(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&
				/\bbase\b/.test(value)) {
				// get the underlying method
				var method = value.valueOf();
				// override
				value = function() {
					var previous = this.base || Base.prototype.base;
					this.base = ancestor;
					var returnValue = method.apply(this, arguments);
					this.base = previous;
					return returnValue;
				};
				// point to the underlying method
				value.valueOf = function(type) {
					return (type == "object") ? value : method;
				};
				value.toString = Base.toString;
			}
			this[source] = value;
		} else if (source) { // extending with an object literal
			var extend = Base.prototype.extend;
			// if this object has a customised extend method then use it
			if (!Base._prototyping && typeof this != "function") {
				extend = this.extend || extend;
			}
			var proto = {toSource: null};
			// do the "toString" and other methods manually
			var hidden = ["constructor", "toString", "valueOf"];
			// if we are prototyping then include the constructor
			var i = Base._prototyping ? 0 : 1;
			while (key = hidden[i++]) {
				if (source[key] != proto[key]) {
					extend.call(this, key, source[key]);

				}
			}
			// copy each of the source object's properties to this object
			for (var key in source) {
				if (!proto[key]) extend.call(this, key, source[key]);
			}
		}
		return this;
	}
};

// initialise
Base = Base.extend({
	constructor: function() {
		this.extend(arguments[0]);
	}
}, {
	ancestor: Object,
	version: "1.1",
	
	forEach: function(object, block, context) {
		for (var key in object) {
			if (this.prototype[key] === undefined) {
				block.call(context, object[key], key, object);
			}
		}
	},
		
	implement: function() {
		for (var i = 0; i < arguments.length; i++) {
			if (typeof arguments[i] == "function") {
				// if it's a function, call it
				arguments[i](this.prototype);
			} else {
				// add the interface using the extend method
				this.prototype.extend(arguments[i]);
			}
		}
		return this;
	},
	
	toString: function() {
		return String(this.valueOf());
	}
});
/**
 * 
 * credits for this plugin go to brandonaaron.net
 * 	
 * unfortunately his site is down
 * 
 * @param {Object} up
 * @param {Object} down
 * @param {Object} preventDefault
 */
jQuery.fn.extend({
	mousewheel: function(up, down, preventDefault) {
		return this.hover(
			function() {
				jQuery.event.mousewheel.giveFocus(this, up, down, preventDefault);
			},
			function() {
				jQuery.event.mousewheel.removeFocus(this);
			}
		);
	},
	mousewheeldown: function(fn, preventDefault) {
		return this.mousewheel(function(){}, fn, preventDefault);
	},
	mousewheelup: function(fn, preventDefault) {
		return this.mousewheel(fn, function(){}, preventDefault);
	},
	unmousewheel: function() {
		return this.each(function() {
			jQuery(this).unmouseover().unmouseout();
			jQuery.event.mousewheel.removeFocus(this);
		});
	},
	unmousewheeldown: jQuery.fn.unmousewheel,
	unmousewheelup: jQuery.fn.unmousewheel
});


jQuery.event.mousewheel = {
	giveFocus: function(el, up, down, preventDefault) {
		if (el._handleMousewheel) jQuery(el).unmousewheel();
		
		if (preventDefault === window.undefined && down && down.constructor !== Function) {
			preventDefault = down;
			down = null;
		}
		
		el._handleMousewheel = function(event) {
			if (!event) event = window.event;
			if (preventDefault)
				if (event.preventDefault) event.preventDefault();
				else {
                                    //event.returnValue = false;
                                    event.preventDefault();
                                }
			var delta = 0;
			if (event.wheelDelta) {
				delta = event.wheelDelta/120;
				if (window.opera) delta = -delta;
			} else if (event.detail) {
				delta = -event.detail/3;
			}
			if (up && (delta > 0 || !down))
				up.apply(el, [event, delta]);
			else if (down && delta < 0)
				down.apply(el, [event, delta]);
		};
		
		if (window.addEventListener)
			window.addEventListener('DOMMouseScroll', el._handleMousewheel, false);
		window.onmousewheel = document.onmousewheel = el._handleMousewheel;
	},
	
	removeFocus: function(el) {
		if (!el._handleMousewheel) return;
		
		if (window.removeEventListener)
			window.removeEventListener('DOMMouseScroll', el._handleMousewheel, false);
		window.onmousewheel = document.onmousewheel = null;
		el._handleMousewheel = null;
	}
};/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));
/**
 * Jcrop v.0.9.8 (minimized)
 * (c) 2008 Kelly Hallman and DeepLiquid.com
 * More information: http://deepliquid.com/content/Jcrop.html
 * Released under MIT License - this header must remain with code
 */


(function($){$.Jcrop=function(obj,opt){var obj=obj,opt=opt;if(typeof(obj)!=='object')obj=$(obj)[0];if(typeof(opt)!=='object')opt={};if(!('trackDocument'in opt)){opt.trackDocument=$.browser.msie?false:true;if($.browser.msie&&$.browser.version.split('.')[0]=='8')opt.trackDocument=true;}if(!('keySupport'in opt))opt.keySupport=$.browser.msie?false:true;var defaults={trackDocument:false,baseClass:'jcrop',addClass:null,bgColor:'black',bgOpacity:.6,borderOpacity:.4,handleOpacity:.5,handlePad:5,handleSize:9,handleOffset:5,edgeMargin:14,aspectRatio:0,keySupport:true,cornerHandles:true,sideHandles:true,drawBorders:true,dragEdges:true,boxWidth:0,boxHeight:0,boundary:8,animationDelay:20,swingSpeed:3,allowSelect:true,allowMove:true,allowResize:true,minSelect:[0,0],maxSize:[0,0],minSize:[0,0],onChange:function(){},onSelect:function(){}};var options=defaults;setOptions(opt);var $origimg=$(obj);var $img=$origimg.clone().removeAttr('id').css({position:'absolute'});$img.width($origimg.width());$img.height($origimg.height());$origimg.after($img).hide();presize($img,options.boxWidth,options.boxHeight);var boundx=$img.width(),boundy=$img.height(),$div=$('<div />').width(boundx).height(boundy).addClass(cssClass('holder')).css({position:'relative',backgroundColor:options.bgColor}).insertAfter($origimg).append($img);;if(options.addClass)$div.addClass(options.addClass);var $img2=$('<img />').attr('src',$img.attr('src')).css('position','absolute').width(boundx).height(boundy);var $img_holder=$('<div />').width(pct(100)).height(pct(100)).css({zIndex:310,position:'absolute',overflow:'hidden'}).append($img2);var $hdl_holder=$('<div />').width(pct(100)).height(pct(100)).css('zIndex',320);var $sel=$('<div />').css({position:'absolute',zIndex:300}).insertBefore($img).append($img_holder,$hdl_holder);var bound=options.boundary;var $trk=newTracker().width(boundx+(bound*2)).height(boundy+(bound*2)).css({position:'absolute',top:px(-bound),left:px(-bound),zIndex:290}).mousedown(newSelection);var xlimit,ylimit,xmin,ymin;var xscale,yscale,enabled=true;var docOffset=getPos($img),btndown,lastcurs,dimmed,animating,shift_down;var Coords=function(){var x1=0,y1=0,x2=0,y2=0,ox,oy;function setPressed(pos){var pos=rebound(pos);x2=x1=pos[0];y2=y1=pos[1];};function setCurrent(pos){var pos=rebound(pos);ox=pos[0]-x2;oy=pos[1]-y2;x2=pos[0];y2=pos[1];};function getOffset(){return[ox,oy];};function moveOffset(offset){var ox=offset[0],oy=offset[1];if(0>x1+ox)ox-=ox+x1;if(0>y1+oy)oy-=oy+y1;if(boundy<y2+oy)oy+=boundy-(y2+oy);if(boundx<x2+ox)ox+=boundx-(x2+ox);x1+=ox;x2+=ox;y1+=oy;y2+=oy;};function getCorner(ord){var c=getFixed();switch(ord){case'ne':return[c.x2,c.y];case'nw':return[c.x,c.y];case'se':return[c.x2,c.y2];case'sw':return[c.x,c.y2];}};function getFixed(){if(!options.aspectRatio)return getRect();var aspect=options.aspectRatio,min_x=options.minSize[0]/xscale,min_y=options.minSize[1]/yscale,max_x=options.maxSize[0]/xscale,max_y=options.maxSize[1]/yscale,rw=x2-x1,rh=y2-y1,rwa=Math.abs(rw),rha=Math.abs(rh),real_ratio=rwa/rha,xx,yy;if(max_x==0){max_x=boundx*10}if(max_y==0){max_y=boundy*10}if(real_ratio<aspect){yy=y2;w=rha*aspect;xx=rw<0?x1-w:w+x1;if(xx<0){xx=0;h=Math.abs((xx-x1)/aspect);yy=rh<0?y1-h:h+y1;}
else if(xx>boundx){xx=boundx;h=Math.abs((xx-x1)/aspect);yy=rh<0?y1-h:h+y1;}}else{xx=x2;h=rwa/aspect;yy=rh<0?y1-h:y1+h;if(yy<0){yy=0;w=Math.abs((yy-y1)*aspect);xx=rw<0?x1-w:w+x1;}else if(yy>boundy){yy=boundy;w=Math.abs(yy-y1)*aspect;xx=rw<0?x1-w:w+x1;}}if(xx>x1){if(xx-x1<min_x){xx=x1+min_x;}else if(xx-x1>max_x){xx=x1+max_x;}if(yy>y1){yy=y1+(xx-x1)/aspect;}else{yy=y1-(xx-x1)/aspect;}}else if(xx<x1){if(x1-xx<min_x){xx=x1-min_x}else if(x1-xx>max_x){xx=x1-max_x;}if(yy>y1){yy=y1+(x1-xx)/aspect;}else{yy=y1-(x1-xx)/aspect;}}if(xx<0){x1-=xx;xx=0;}else if(xx>boundx){x1-=xx-boundx;xx=boundx;}if(yy<0){y1-=yy;yy=0;}else if(yy>boundy){y1-=yy-boundy;yy=boundy;}return last=makeObj(flipCoords(x1,y1,xx,yy));};function rebound(p){if(p[0]<0)p[0]=0;if(p[1]<0)p[1]=0;if(p[0]>boundx)p[0]=boundx;if(p[1]>boundy)p[1]=boundy;return[p[0],p[1]];};function flipCoords(x1,y1,x2,y2){var xa=x1,xb=x2,ya=y1,yb=y2;if(x2<x1){xa=x2;xb=x1;}if(y2<y1){ya=y2;yb=y1;}return[Math.round(xa),Math.round(ya),Math.round(xb),Math.round(yb)];};function getRect(){var xsize=x2-x1;var ysize=y2-y1;if(xlimit&&(Math.abs(xsize)>xlimit))x2=(xsize>0)?(x1+xlimit):(x1-xlimit);if(ylimit&&(Math.abs(ysize)>ylimit))y2=(ysize>0)?(y1+ylimit):(y1-ylimit);if(ymin&&(Math.abs(ysize)<ymin))y2=(ysize>0)?(y1+ymin):(y1-ymin);if(xmin&&(Math.abs(xsize)<xmin))x2=(xsize>0)?(x1+xmin):(x1-xmin);if(x1<0){x2-=x1;x1-=x1;}
if(y1<0){y2-=y1;y1-=y1;}if(x2<0){x1-=x2;x2-=x2;}if(y2<0){y1-=y2;y2-=y2;}if(x2>boundx){var delta=x2-boundx;x1-=delta;x2-=delta;}if(y2>boundy){var delta=y2-boundy;y1-=delta;y2-=delta;}if(x1>boundx){var delta=x1-boundy;y2-=delta;y1-=delta;}if(y1>boundy){var delta=y1-boundy;y2-=delta;y1-=delta;}return makeObj(flipCoords(x1,y1,x2,y2));};function makeObj(a){return{x:a[0],y:a[1],x2:a[2],y2:a[3],w:a[2]-a[0],h:a[3]-a[1]};};return{flipCoords:flipCoords,setPressed:setPressed,setCurrent:setCurrent,getOffset:getOffset,moveOffset:moveOffset,getCorner:getCorner,getFixed:getFixed};}();var Selection=function(){var start,end,dragmode,awake,hdep=370;var borders={};var handle={};var seehandles=false;var hhs=options.handleOffset;if(options.drawBorders){borders={top:insertBorder('hline').css('top',$.browser.msie?px(-1):px(0)),bottom:insertBorder('hline'),left:insertBorder('vline'),right:insertBorder('vline')};}if(options.dragEdges){handle.t=insertDragbar('n');handle.b=insertDragbar('s');handle.r=insertDragbar('e');handle.l=insertDragbar('w');}options.sideHandles&&createHandles(['n','s','e','w']);options.cornerHandles&&createHandles(['sw','nw','ne','se']);function insertBorder(type){var jq=$('<div />').css({position:'absolute',opacity:options.borderOpacity}).addClass(cssClass(type));$img_holder.append(jq);return jq;};function dragDiv(ord,zi){var jq=$('<div />').mousedown(createDragger(ord)).css({cursor:ord+'-resize',position:'absolute',zIndex:zi});$hdl_holder.append(jq);return jq;};function insertHandle(ord) {return dragDiv(ord,hdep++).css({top:px(-hhs+1),left:px(-hhs+1),opacity:options.handleOpacity}).addClass(cssClass('handle'));};function insertDragbar(ord){var s=options.handleSize,o=hhs,h=s,w=s,t=o,l=o;switch(ord) {case'n':case's':w=pct(100);break;case'e':case'w':h=pct(100);break;}return dragDiv(ord,hdep++).width(w).height(h).css({top:px(-t+1),left:px(-l+1)});};function createHandles(li){for(i in li)handle[li[i]]=insertHandle(li[i]);};function moveHandles(c){var midvert=Math.round((c.h/2)-hhs),midhoriz=Math.round((c.w/2)-hhs),north=west=-hhs+1,east=c.w-hhs,south=c.h-hhs,x,y;'e'in handle&&handle.e.css({top:px(midvert),left:px(east)})&&handle.w.css({top:px(midvert)})&&handle.s.css({top:px(south),left:px(midhoriz)})&&handle.n.css({left:px(midhoriz)});'ne'in handle&&handle.ne.css({left:px(east)})&&handle.se.css({top:px(south),left:px(east)})&&handle.sw.css({top:px(south)});'b'in handle&&handle.b.css({top:px(south)})&&handle.r.css({left:px(east)});};function moveto(x,y){$img2.css({top:px(-y),left:px(-x)});$sel.css({top:px(y),left:px(x)});};function resize(w,h){$sel.width(w).height(h);};function refresh(){var c=Coords.getFixed();Coords.setPressed([c.x,c.y]);Coords.setCurrent([c.x2,c.y2]);updateVisible();};function updateVisible(){if(awake)return update();};function update(){var c=Coords.getFixed();resize(c.w,c.h);moveto(c.x,c.y);options.drawBorders&&borders['right'].css({left:px(c.w-1)})&&borders['bottom'].css({top:px(c.h-1)});seehandles&&moveHandles(c);awake||show();options.onChange(unscale(c));};function show(){$sel.show();$img.css('opacity',options.bgOpacity);awake=true;};function release(){disableHandles();$sel.hide();$img.css('opacity',1);awake=false;};function showHandles() {if(seehandles){moveHandles(Coords.getFixed());$hdl_holder.show();}};function enableHandles(){seehandles=true;if(options.allowResize){moveHandles(Coords.getFixed());$hdl_holder.show();return true;}};function disableHandles(){seehandles=false;$hdl_holder.hide();};function animMode(v) {(animating=v)?disableHandles():enableHandles();};function done(){animMode(false);refresh();};var $track=newTracker().mousedown(createDragger('move')).css({cursor:'move',position:'absolute',zIndex:360});$img_holder.append($track);disableHandles();return{updateVisible:updateVisible,update:update,release:release,refresh:refresh,setCursor:function(cursor){$track.css('cursor',cursor);},enableHandles:enableHandles,enableOnly:function(){seehandles=true;},showHandles:showHandles,disableHandles:disableHandles,animMode:animMode,done:done};}();var Tracker=function() {var onMove=function(){},onDone=function(){},trackDoc=options.trackDocument;if(!trackDoc) {$trk.mousemove(trackMove).mouseup(trackUp).mouseout(trackUp);}
function toFront() {$trk.css({zIndex:450});if(trackDoc) {$(document).mousemove(trackMove).mouseup(trackUp);}}
function toBack() {$trk.css({zIndex:290});if(trackDoc) {$(document).unbind('mousemove',trackMove).unbind('mouseup',trackUp);}}
function trackMove(e) {onMove(mouseAbs(e));};function trackUp(e) {e.preventDefault();e.stopPropagation();if(btndown) {btndown=false;onDone(mouseAbs(e));options.onSelect(unscale(Coords.getFixed()));toBack();onMove=function(){};onDone=function(){};}
return false;};function activateHandlers(move,done) {btndown=true;onMove=move;onDone=done;toFront();return false;};function setCursor(t){$trk.css('cursor',t);};$img.before($trk);return{activateHandlers:activateHandlers,setCursor:setCursor};}();var KeyManager=function() {var $keymgr=$('<input type="radio" />').css({position:'absolute',left:'-30px'}).keypress(parseKey).blur(onBlur),$keywrap=$('<div />').css({position:'absolute',overflow:'hidden'}).append($keymgr);function watchKeys() {if(options.keySupport) {$keymgr.show();$keymgr.focus();}};function onBlur(e) {$keymgr.hide();};function doNudge(e,x,y) {if(options.allowMove){Coords.moveOffset([x,y]);Selection.updateVisible();};e.preventDefault();e.stopPropagation();};function parseKey(e) {if(e.ctrlKey)return true;shift_down=e.shiftKey?true:false;var nudge=shift_down?10:1;switch(e.keyCode) {case 37:doNudge(e,-nudge,0);break;case 39:doNudge(e,nudge,0);break;case 38:doNudge(e,0,-nudge);break;case 40:doNudge(e,0,nudge);break;case 27:Selection.release();break;case 9:return true;}
return nothing(e);};if(options.keySupport)$keywrap.insertBefore($img);return{watchKeys:watchKeys};}();function px(n){return''+parseInt(n)+'px';};function pct(n){return''+parseInt(n)+'%';};function cssClass(cl){return options.baseClass+'-'+cl;};function getPos(obj) {var pos=$(obj).offset();return[pos.left,pos.top];};function mouseAbs(e) {return[(e.pageX-docOffset[0]),(e.pageY-docOffset[1])];};function myCursor(type) {if(type!=lastcurs) {Tracker.setCursor(type);lastcurs=type;}};function startDragMode(mode,pos) {docOffset=getPos($img);Tracker.setCursor(mode=='move'?mode:mode+'-resize');if(mode=='move')
return Tracker.activateHandlers(createMover(pos),doneSelect);var fc=Coords.getFixed();var opp=oppLockCorner(mode);var opc=Coords.getCorner(oppLockCorner(opp));Coords.setPressed(Coords.getCorner(opp));Coords.setCurrent(opc);Tracker.activateHandlers(dragmodeHandler(mode,fc),doneSelect);};function dragmodeHandler(mode,f) {return function(pos){if(!options.aspectRatio)switch(mode) {case'e':pos[1]=f.y2;break;case'w':pos[1]=f.y2;break;case'n':pos[0]=f.x2;break;case's':pos[0]=f.x2;break;}
else switch(mode) {case'e':pos[1]=f.y+1;break;case'w':pos[1]=f.y+1;break;case'n':pos[0]=f.x+1;break;case's':pos[0]=f.x+1;break;}
Coords.setCurrent(pos);Selection.update();};};function createMover(pos) {var lloc=pos;KeyManager.watchKeys();return function(pos) {Coords.moveOffset([pos[0]-lloc[0],pos[1]-lloc[1]]);lloc=pos;Selection.update();};};function oppLockCorner(ord) {switch(ord) {case'n':return'sw';case's':return'nw';case'e':return'nw';case'w':return'ne';case'ne':return'sw';case'nw':return'se';case'se':return'nw';case'sw':return'ne';};};function createDragger(ord) {return function(e){if(options.disabled)return false;if((ord=='move')&&!options.allowMove)return false;btndown=true;startDragMode(ord,mouseAbs(e));e.stopPropagation();e.preventDefault();return false;};};function presize($obj,w,h) {var nw=$obj.width(),nh=$obj.height();if((nw>w)&&w>0) {nw=w;nh=(w/$obj.width())*$obj.height();}
if((nh>h)&&h>0) {nh=h;nw=(h/$obj.height())*$obj.width();}
xscale=$obj.width()/nw;yscale=$obj.height()/nh;$obj.width(nw).height(nh);};function unscale(c) {return{x:parseInt(c.x*xscale),y:parseInt(c.y*yscale),x2:parseInt(c.x2*xscale),y2:parseInt(c.y2*yscale),w:parseInt(c.w*xscale),h:parseInt(c.h*yscale)};};function doneSelect(pos) {var c=Coords.getFixed();if(c.w>options.minSelect[0]&&c.h>options.minSelect[1]) {Selection.enableHandles();Selection.done();}
else {Selection.release();}
Tracker.setCursor(options.allowSelect?'crosshair':'default');};function newSelection(e) {if(options.disabled)return false;if(!options.allowSelect)return false;btndown=true;docOffset=getPos($img);Selection.disableHandles();myCursor('crosshair');var pos=mouseAbs(e);Coords.setPressed(pos);Tracker.activateHandlers(selectDrag,doneSelect);KeyManager.watchKeys();Selection.update();e.stopPropagation();e.preventDefault();return false;};function selectDrag(pos) {Coords.setCurrent(pos);Selection.update();};function newTracker() {var trk=$('<div></div>').addClass(cssClass('tracker'));$.browser.msie&&trk.css({opacity:0,backgroundColor:'white'});return trk;};function animateTo(a) {var x1=a[0]/xscale,y1=a[1]/yscale,x2=a[2]/xscale,y2=a[3]/yscale;if(animating)return;var animto=Coords.flipCoords(x1,y1,x2,y2);var c=Coords.getFixed();var animat=initcr=[c.x,c.y,c.x2,c.y2];var interv=options.animationDelay;var x=animat[0];var y=animat[1];var x2=animat[2];var y2=animat[3];var ix1=animto[0]-initcr[0];var iy1=animto[1]-initcr[1];var ix2=animto[2]-initcr[2];var iy2=animto[3]-initcr[3];var pcent=0;var velocity=options.swingSpeed;Selection.animMode(true);var animator=function() {return function() {pcent+=(100-pcent)/velocity;animat[0]=x+((pcent/100)*ix1);animat[1]=y+((pcent/100)*iy1);animat[2]=x2+((pcent/100)*ix2);animat[3]=y2+((pcent/100)*iy2);if(pcent<100)animateStart();else Selection.done();if(pcent>=99.8)pcent=100;setSelectRaw(animat);};}();function animateStart() {window.setTimeout(animator,interv);};animateStart();};function setSelect(rect) {setSelectRaw([rect[0]/xscale,rect[1]/yscale,rect[2]/xscale,rect[3]/yscale]);};function setSelectRaw(l) {Coords.setPressed([l[0],l[1]]);Coords.setCurrent([l[2],l[3]]);Selection.update();};function setOptions(opt) {if(typeof(opt)!='object')opt={};options=$.extend(options,opt);if(typeof(options.onChange)!=='function')
options.onChange=function(){};if(typeof(options.onSelect)!=='function')
options.onSelect=function(){};};function tellSelect() {return unscale(Coords.getFixed());};function tellScaled() {return Coords.getFixed();};function setOptionsNew(opt) {setOptions(opt);interfaceUpdate();};function disableCrop() {options.disabled=true;Selection.disableHandles();Selection.setCursor('default');Tracker.setCursor('default');};function enableCrop() {options.disabled=false;interfaceUpdate();};function cancelCrop() {Selection.done();Tracker.activateHandlers(null,null);};function destroy() {$div.remove();$origimg.show();};function interfaceUpdate(alt) {options.allowResize?alt?Selection.enableOnly():Selection.enableHandles():Selection.disableHandles();Tracker.setCursor(options.allowSelect?'crosshair':'default');Selection.setCursor(options.allowMove?'move':'default');$div.css('backgroundColor',options.bgColor);if('setSelect'in options){setSelect(opt.setSelect);Selection.done();delete(options.setSelect);}
if('trueSize'in options){xscale=options.trueSize[0]/boundx;yscale=options.trueSize[1]/boundy;}
xlimit=options.maxSize[0]||0;ylimit=options.maxSize[1]||0;xmin=options.minSize[0]||0;ymin=options.minSize[1]||0;if('outerImage'in options) {$img.attr('src',options.outerImage);delete(options.outerImage);}
Selection.refresh();};$hdl_holder.hide();interfaceUpdate(true);var api={animateTo:animateTo,setSelect:setSelect,setOptions:setOptionsNew,tellSelect:tellSelect,tellScaled:tellScaled,disable:disableCrop,enable:enableCrop,cancel:cancelCrop,focus:KeyManager.watchKeys,getBounds:function(){return[boundx*xscale,boundy*yscale];},getWidgetSize:function(){return[boundx,boundy];},release:Selection.release,destroy:destroy};$origimg.data('Jcrop',api);return api;};$.fn.Jcrop=function(options) {function attachWhenDone(from) {var loadsrc=options.useImg||from.src;var img=new Image();img.onload=function(){$.Jcrop(from,options);};img.src=loadsrc;};if(typeof(options)!=='object')options={};this.each(function() {if($(this).data('Jcrop')) {if(options=='api')return $(this).data('Jcrop');else $(this).data('Jcrop').setOptions(options);}
else attachWhenDone(this);});return this;};})(jQuery);jQuery.fn.scrollIntoView = function() {
    
    //記錄開頭與結尾
    var _view_top = window.pageYOffset;
    var _view_left = window.pageXOffset;
    
    var el = this.get(0);
    
    //$.test_msg('$.fn.scrollIntoView()', el.tagName);
    
    if (el.scrollIntoView) {
        el.scrollIntoView();
    }
    
    //$.scroll_to({x: _view_left, y: _view_top}, 0);
    window.scrollTo(_view_left, _view_top);
    
    //為了避免被toolbar遮掉
    var _top_padding = KALS_toolbar.get_ui().height() + window.pageYOffset;
    if ($(el).offset().top < _top_padding) {
        //$.test_msg('jQuery.fn.scrollIntoView()', _top_padding);
        window.scrollTo(_view_left, _top_padding);
    }
    
    return this;
};
/*
jQuery.fn.disable = function() {
    return this.each(function() {
        $(this).attr('disabled','disabled');
    });
};

jQuery.fn.enable = function() {
    return this.each(function() {
        $(this).removeAttr('disabled');
    });
};

jQuery.fn.astound_draggable = function() {
    return this.each(function() {
        $(this).draggable(
        {
            'stop': function(event,ui) {
                        ui.helper.attr('style','position: relative;');
                        //$('#floatingTagsDivInner').css('overflow','auto');
                    },
            'start': function(event,ui) {
                        study.currentDropTarget = '';
                        if (ui.helper.parents('#thelist').length == 1) {
                            // Is there a way to know if the dialog is already visible?
                            $('#floatingTagsDivOuter').jqmShow(); 
                        }
                        //$('#floatingTagsDivInner').css('overflow','hidden');
                    },
            'helper': 'clone',
            'zIndex': 3001
        });
    });
};

jQuery.fn.astound_droppable = function(dropFunction) {
    return this.each(function() {
        $(this).droppable(
        {
            accept: '.draggable',
            over: function(event,ui) { 
                study.currentDropTarget = this;
                $(this).css('background-color', 'pink'); 
            },
            drop: function(event,ui) { 
                if ((this == study.currentDropTarget) || (study.currentDropTarget === '')) {
                    dropFunction(event,ui,$(this)); 
                }
                $(this).css('background-color',''); 
            },
            out: function(event,ui) { 
                study.currentDropTarget = '';
                $(this).css('background-color',''); 
            }
        });
    });
};

$.astound_ajax = function(args) {
    if (study.social) {
        args.attempts = 0;
        study.ajaxQueue.push(args);
    } else {
        $.ajax(args);
    }
};

$.astound_ajax_get = function(url,data,callback,type) {
    var args = {};
    args.url = url;
    if (typeof(data) != 'undefined') { args.data = data; }
    if (typeof(callback) != 'undefined') { args.success = callback; }
    if (typeof(type) != 'undefined') { args.type = type; }
    return $.astound_ajax(args);
};

$.astound_ajax_getJSON = function(url,data,callback) {
    var args = {};
    args.url = url;
    if (typeof(data) != 'undefined') { args.data = data; }
    if (typeof(callback) != 'undefined') { args.success = callback; }
    args.dataType = 'json';
    return $.astound_ajax(args);
};

jQuery.fn.astound_ajax_load = function(url,data,callback) {
    var args = {};
    args.url = url;
    args.dataType = 'html';
    var that = this;
    if (typeof(data) != 'undefined') { args.data = data; }
    args.success = function(data) {
        that.html(data);
        if (typeof(callback) != 'undefined') {
            callback();
        }
    }
    return $.astound_ajax(args);
};
*/
/* In social.js, we used to wack $.ajax, $.get, $.getJSON, and jQuery.fn.load.  In a shared environment, this might not be a good thing.
 * For example, opensocial containers may be using these functions, so we may be breaking container's functionalities.  We've attempted
 * to fix the issue: in our code we call $.astound_ajax instead of $.ajax, and in $.astound_ajax we check to see if it is running in an
 * opensocial environment, do something, and if it is not in opensocial environment, call $.ajax.  However, this attempt failed because
 * jquery.ui tabs use these functions too.  In order to get jquery.ui tabs to work, we must modify its source.  We decide not to do that.
 * We put back the code that wack these functions.  A possible future alternative is to see if we can setup a callback the would let us
 * know when an ajax call is about to happen, check to see if the ajax call is in an opensocial environment, and is to our server, if so, 
 * queue it and use makeRequest.*//*
 * jQuery Tools 1.2.3 - The missing UI library for the Web
 * 
 * [tabs, tabs.slideshow, tooltip, tooltip.slide, tooltip.dynamic, scrollable, scrollable.autoscroll, scrollable.navigator, overlay, overlay.apple, dateinput, rangeinput, validator, toolbox.flashembed, toolbox.history, toolbox.expose, toolbox.mousewheel]
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/
 * 
 * jquery.event.wheel.js - rev 1 
 * Copyright (c) 2008, Three Dub Media (http://threedubmedia.com)
 * Liscensed under the MIT License (MIT-LICENSE.txt)
 * http://www.opensource.org/licenses/mit-license.php
 * Created: 2008-07-01 | Updated: 2008-07-14
 * 
 * -----
 * 
 * File generated: Tue Jul 27 11:15:57 GMT 2010
 */
(function(c){function p(e,b,a){var d=this,l=e.add(this),h=e.find(a.tabs),i=b.jquery?b:e.children(b),j;h.length||(h=e.children());i.length||(i=e.parent().find(b));i.length||(i=c(b));c.extend(this,{click:function(f,g){var k=h.eq(f);if(typeof f=="string"&&f.replace("#","")){k=h.filter("[href*="+f.replace("#","")+"]");f=Math.max(h.index(k),0)}if(a.rotate){var n=h.length-1;if(f<0)return d.click(n,g);if(f>n)return d.click(0,g)}if(!k.length){if(j>=0)return d;f=a.initialIndex;k=h.eq(f)}if(f===j)return d;
g=g||c.Event();g.type="onBeforeClick";l.trigger(g,[f]);if(!g.isDefaultPrevented()){o[a.effect].call(d,f,function(){g.type="onClick";l.trigger(g,[f])});j=f;h.removeClass(a.current);k.addClass(a.current);return d}},getConf:function(){return a},getTabs:function(){return h},getPanes:function(){return i},getCurrentPane:function(){return i.eq(j)},getCurrentTab:function(){return h.eq(j)},getIndex:function(){return j},next:function(){return d.click(j+1)},prev:function(){return d.click(j-1)},destroy:function(){h.unbind(a.event).removeClass(a.current);
i.find("a[href^=#]").unbind("click.T");return d}});c.each("onBeforeClick,onClick".split(","),function(f,g){c.isFunction(a[g])&&c(d).bind(g,a[g]);d[g]=function(k){c(d).bind(g,k);return d}});if(a.history&&c.fn.history){c.tools.history.init(h);a.event="history"}h.each(function(f){c(this).bind(a.event,function(g){d.click(f,g);return g.preventDefault()})});i.find("a[href^=#]").bind("click.T",function(f){d.click(c(this).attr("href"),f)});if(location.hash)d.click(location.hash);else if(a.initialIndex===
0||a.initialIndex>0)d.click(a.initialIndex)}c.tools=c.tools||{version:"1.2.3"};c.tools.tabs={conf:{tabs:"a",current:"current",onBeforeClick:null,onClick:null,effect:"default",initialIndex:0,event:"click",rotate:false,history:false},addEffect:function(e,b){o[e]=b}};var o={"default":function(e,b){this.getPanes().hide().eq(e).show();b.call()},fade:function(e,b){var a=this.getConf(),d=a.fadeOutSpeed,l=this.getPanes();d?l.fadeOut(d):l.hide();l.eq(e).fadeIn(a.fadeInSpeed,b)},slide:function(e,b){this.getPanes().slideUp(200);
this.getPanes().eq(e).slideDown(400,b)},ajax:function(e,b){this.getPanes().eq(0).load(this.getTabs().eq(e).attr("href"),b)}},m;c.tools.tabs.addEffect("horizontal",function(e,b){m||(m=this.getPanes().eq(0).width());this.getCurrentPane().animate({width:0},function(){c(this).hide()});this.getPanes().eq(e).animate({width:m},function(){c(this).show();b.call()})});c.fn.tabs=function(e,b){var a=this.data("tabs");if(a){a.destroy();this.removeData("tabs")}if(c.isFunction(b))b={onBeforeClick:b};b=c.extend({},
c.tools.tabs.conf,b);this.each(function(){a=new p(c(this),e,b);c(this).data("tabs",a)});return b.api?a:this}})(jQuery);
(function(d){function r(g,a){function p(f){var e=d(f);return e.length<2?e:g.parent().find(f)}var c=this,j=g.add(this),b=g.data("tabs"),h,l,m,n=false,o=p(a.next).click(function(){b.next()}),k=p(a.prev).click(function(){b.prev()});d.extend(c,{getTabs:function(){return b},getConf:function(){return a},play:function(){if(!h){var f=d.Event("onBeforePlay");j.trigger(f);if(f.isDefaultPrevented())return c;n=false;h=setInterval(b.next,a.interval);j.trigger("onPlay");b.next()}},pause:function(){if(!h)return c;
var f=d.Event("onBeforePause");j.trigger(f);if(f.isDefaultPrevented())return c;h=clearInterval(h);m=clearInterval(m);j.trigger("onPause")},stop:function(){c.pause();n=true}});d.each("onBeforePlay,onPlay,onBeforePause,onPause".split(","),function(f,e){d.isFunction(a[e])&&c.bind(e,a[e]);c[e]=function(s){return c.bind(e,s)}});if(a.autopause){var t=b.getTabs().add(o).add(k).add(b.getPanes());t.hover(function(){c.pause();l=clearInterval(l)},function(){n||(l=setTimeout(c.play,a.interval))})}if(a.autoplay)m=
setTimeout(c.play,a.interval);else c.stop();a.clickable&&b.getPanes().click(function(){b.next()});if(!b.getConf().rotate){var i=a.disabledClass;b.getIndex()||k.addClass(i);b.onBeforeClick(function(f,e){if(e){k.removeClass(i);e==b.getTabs().length-1?o.addClass(i):o.removeClass(i)}else k.addClass(i)})}}var q;q=d.tools.tabs.slideshow={conf:{next:".forward",prev:".backward",disabledClass:"disabled",autoplay:false,autopause:true,interval:3E3,clickable:true,api:false}};d.fn.slideshow=function(g){var a=
this.data("slideshow");if(a)return a;g=d.extend({},q.conf,g);this.each(function(){a=new r(d(this),g);d(this).data("slideshow",a)});return g.api?a:this}})(jQuery);
(function(f){function p(a,b,c){var h=c.relative?a.position().top:a.offset().top,e=c.relative?a.position().left:a.offset().left,i=c.position[0];h-=b.outerHeight()-c.offset[0];e+=a.outerWidth()+c.offset[1];var j=b.outerHeight()+a.outerHeight();if(i=="center")h+=j/2;if(i=="bottom")h+=j;i=c.position[1];a=b.outerWidth()+a.outerWidth();if(i=="center")e-=a/2;if(i=="left")e-=a;return{top:h,left:e}}function t(a,b){var c=this,h=a.add(c),e,i=0,j=0,m=a.attr("title"),q=n[b.effect],k,r=a.is(":input"),u=r&&a.is(":checkbox, :radio, select, :button, :submit"),
s=a.attr("type"),l=b.events[s]||b.events[r?u?"widget":"input":"def"];if(!q)throw'Nonexistent effect "'+b.effect+'"';l=l.split(/,\s*/);if(l.length!=2)throw"Tooltip: bad events configuration for "+s;a.bind(l[0],function(d){clearTimeout(i);if(b.predelay)j=setTimeout(function(){c.show(d)},b.predelay);else c.show(d)}).bind(l[1],function(d){clearTimeout(j);if(b.delay)i=setTimeout(function(){c.hide(d)},b.delay);else c.hide(d)});if(m&&b.cancelDefault){a.removeAttr("title");a.data("title",m)}f.extend(c,{show:function(d){if(!e){if(m)e=
f(b.layout).addClass(b.tipClass).appendTo(document.body).hide().append(m);else if(b.tip)e=f(b.tip).eq(0);else{e=a.next();e.length||(e=a.parent().next())}if(!e.length)throw"Cannot find tooltip for "+a;}if(c.isShown())return c;e.stop(true,true);var g=p(a,e,b);d=d||f.Event();d.type="onBeforeShow";h.trigger(d,[g]);if(d.isDefaultPrevented())return c;g=p(a,e,b);e.css({position:"absolute",top:g.top,left:g.left});k=true;q[0].call(c,function(){d.type="onShow";k="full";h.trigger(d)});g=b.events.tooltip.split(/,\s*/);
e.bind(g[0],function(){clearTimeout(i);clearTimeout(j)});g[1]&&!a.is("input:not(:checkbox, :radio), textarea")&&e.bind(g[1],function(o){o.relatedTarget!=a[0]&&a.trigger(l[1].split(" ")[0])});return c},hide:function(d){if(!e||!c.isShown())return c;d=d||f.Event();d.type="onBeforeHide";h.trigger(d);if(!d.isDefaultPrevented()){k=false;n[b.effect][1].call(c,function(){d.type="onHide";k=false;h.trigger(d)});return c}},isShown:function(d){return d?k=="full":k},getConf:function(){return b},getTip:function(){return e},
getTrigger:function(){return a}});f.each("onHide,onBeforeShow,onShow,onBeforeHide".split(","),function(d,g){f.isFunction(b[g])&&f(c).bind(g,b[g]);c[g]=function(o){f(c).bind(g,o);return c}})}f.tools=f.tools||{version:"1.2.3"};f.tools.tooltip={conf:{effect:"toggle",fadeOutSpeed:"fast",predelay:0,delay:30,opacity:1,tip:0,position:["top","center"],offset:[0,0],relative:false,cancelDefault:true,events:{def:"mouseenter,mouseleave",input:"focus,blur",widget:"focus mouseenter,blur mouseleave",tooltip:"mouseenter,mouseleave"},
layout:"<div/>",tipClass:"tooltip"},addEffect:function(a,b,c){n[a]=[b,c]}};var n={toggle:[function(a){var b=this.getConf(),c=this.getTip();b=b.opacity;b<1&&c.css({opacity:b});c.show();a.call()},function(a){this.getTip().hide();a.call()}],fade:[function(a){var b=this.getConf();this.getTip().fadeTo(b.fadeInSpeed,b.opacity,a)},function(a){this.getTip().fadeOut(this.getConf().fadeOutSpeed,a)}]};f.fn.tooltip=function(a){var b=this.data("tooltip");if(b)return b;a=f.extend(true,{},f.tools.tooltip.conf,a);
if(typeof a.position=="string")a.position=a.position.split(/,?\s/);this.each(function(){b=new t(f(this),a);f(this).data("tooltip",b)});return a.api?b:this}})(jQuery);
(function(d){var i=d.tools.tooltip;d.extend(i.conf,{direction:"up",bounce:false,slideOffset:10,slideInSpeed:200,slideOutSpeed:200,slideFade:!d.browser.msie});var e={up:["-","top"],down:["+","top"],left:["-","left"],right:["+","left"]};i.addEffect("slide",function(g){var a=this.getConf(),f=this.getTip(),b=a.slideFade?{opacity:a.opacity}:{},c=e[a.direction]||e.up;b[c[1]]=c[0]+"="+a.slideOffset;a.slideFade&&f.css({opacity:0});f.show().animate(b,a.slideInSpeed,g)},function(g){var a=this.getConf(),f=a.slideOffset,
b=a.slideFade?{opacity:0}:{},c=e[a.direction]||e.up,h=""+c[0];if(a.bounce)h=h=="+"?"-":"+";b[c[1]]=h+"="+f;this.getTip().animate(b,a.slideOutSpeed,function(){d(this).hide();g.call()})})})(jQuery);
(function(g){function j(a){var c=g(window),d=c.width()+c.scrollLeft(),h=c.height()+c.scrollTop();return[a.offset().top<=c.scrollTop(),d<=a.offset().left+a.width(),h<=a.offset().top+a.height(),c.scrollLeft()>=a.offset().left]}function k(a){for(var c=a.length;c--;)if(a[c])return false;return true}var i=g.tools.tooltip;i.dynamic={conf:{classNames:"top right bottom left"}};g.fn.dynamic=function(a){if(typeof a=="number")a={speed:a};a=g.extend({},i.dynamic.conf,a);var c=a.classNames.split(/\s/),d;this.each(function(){var h=
g(this).tooltip().onBeforeShow(function(e,f){e=this.getTip();var b=this.getConf();d||(d=[b.position[0],b.position[1],b.offset[0],b.offset[1],g.extend({},b)]);g.extend(b,d[4]);b.position=[d[0],d[1]];b.offset=[d[2],d[3]];e.css({visibility:"hidden",position:"absolute",top:f.top,left:f.left}).show();f=j(e);if(!k(f)){if(f[2]){g.extend(b,a.top);b.position[0]="top";e.addClass(c[0])}if(f[3]){g.extend(b,a.right);b.position[1]="right";e.addClass(c[1])}if(f[0]){g.extend(b,a.bottom);b.position[0]="bottom";e.addClass(c[2])}if(f[1]){g.extend(b,
a.left);b.position[1]="left";e.addClass(c[3])}if(f[0]||f[2])b.offset[0]*=-1;if(f[1]||f[3])b.offset[1]*=-1}e.css({visibility:"visible"}).hide()});h.onBeforeShow(function(){var e=this.getConf();this.getTip();setTimeout(function(){e.position=[d[0],d[1]];e.offset=[d[2],d[3]]},0)});h.onHide(function(){var e=this.getTip();e.removeClass(a.classNames)});ret=h});return a.api?ret:this}})(jQuery);
(function(e){function n(f,c){var a=e(c);return a.length<2?a:f.parent().find(c)}function t(f,c){var a=this,l=f.add(a),g=f.children(),k=0,m=c.vertical;j||(j=a);if(g.length>1)g=e(c.items,f);e.extend(a,{getConf:function(){return c},getIndex:function(){return k},getSize:function(){return a.getItems().size()},getNaviButtons:function(){return o.add(p)},getRoot:function(){return f},getItemWrap:function(){return g},getItems:function(){return g.children(c.item).not("."+c.clonedClass)},move:function(b,d){return a.seekTo(k+
b,d)},next:function(b){return a.move(1,b)},prev:function(b){return a.move(-1,b)},begin:function(b){return a.seekTo(0,b)},end:function(b){return a.seekTo(a.getSize()-1,b)},focus:function(){return j=a},addItem:function(b){b=e(b);if(c.circular){e(".cloned:last").before(b);e(".cloned:first").replaceWith(b.clone().addClass(c.clonedClass))}else g.append(b);l.trigger("onAddItem",[b]);return a},seekTo:function(b,d,h){if(c.circular&&b===0&&k==-1&&d!==0)return a;if(!c.circular&&b<0||b>a.getSize()||b<-1)return a;
var i=b;if(b.jquery)b=a.getItems().index(b);else i=a.getItems().eq(b);var q=e.Event("onBeforeSeek");if(!h){l.trigger(q,[b,d]);if(q.isDefaultPrevented()||!i.length)return a}i=m?{top:-i.position().top}:{left:-i.position().left};k=b;j=a;if(d===undefined)d=c.speed;g.animate(i,d,c.easing,h||function(){l.trigger("onSeek",[b])});return a}});e.each(["onBeforeSeek","onSeek","onAddItem"],function(b,d){e.isFunction(c[d])&&e(a).bind(d,c[d]);a[d]=function(h){e(a).bind(d,h);return a}});if(c.circular){var r=a.getItems().slice(-1).clone().prependTo(g),
s=a.getItems().eq(1).clone().appendTo(g);r.add(s).addClass(c.clonedClass);a.onBeforeSeek(function(b,d,h){if(!b.isDefaultPrevented())if(d==-1){a.seekTo(r,h,function(){a.end(0)});return b.preventDefault()}else d==a.getSize()&&a.seekTo(s,h,function(){a.begin(0)})});a.seekTo(0,0)}var o=n(f,c.prev).click(function(){a.prev()}),p=n(f,c.next).click(function(){a.next()});!c.circular&&a.getSize()>1&&a.onBeforeSeek(function(b,d){setTimeout(function(){if(!b.isDefaultPrevented()){o.toggleClass(c.disabledClass,
d<=0);p.toggleClass(c.disabledClass,d>=a.getSize()-1)}},1)});c.mousewheel&&e.fn.mousewheel&&f.mousewheel(function(b,d){if(c.mousewheel){a.move(d<0?1:-1,c.wheelSpeed||50);return false}});c.keyboard&&e(document).bind("keydown.scrollable",function(b){if(!(!c.keyboard||b.altKey||b.ctrlKey||e(b.target).is(":input")))if(!(c.keyboard!="static"&&j!=a)){var d=b.keyCode;if(m&&(d==38||d==40)){a.move(d==38?-1:1);return b.preventDefault()}if(!m&&(d==37||d==39)){a.move(d==37?-1:1);return b.preventDefault()}}});
e(a).trigger("onBeforeSeek",[c.initialIndex])}e.tools=e.tools||{version:"1.2.3"};e.tools.scrollable={conf:{activeClass:"active",circular:false,clonedClass:"cloned",disabledClass:"disabled",easing:"swing",initialIndex:0,item:null,items:".items",keyboard:true,mousewheel:false,next:".next",prev:".prev",speed:400,vertical:false,wheelSpeed:0}};var j;e.fn.scrollable=function(f){var c=this.data("scrollable");if(c)return c;f=e.extend({},e.tools.scrollable.conf,f);this.each(function(){c=new t(e(this),f);e(this).data("scrollable",
c)});return f.api?c:this}})(jQuery);
(function(c){var g=c.tools.scrollable;g.autoscroll={conf:{autoplay:true,interval:3E3,autopause:true}};c.fn.autoscroll=function(d){if(typeof d=="number")d={interval:d};var b=c.extend({},g.autoscroll.conf,d),h;this.each(function(){var a=c(this).data("scrollable");if(a)h=a;var e,i,f=true;a.play=function(){if(!e){f=false;e=setInterval(function(){a.next()},b.interval);a.next()}};a.pause=function(){e=clearInterval(e)};a.stop=function(){a.pause();f=true};b.autopause&&a.getRoot().add(a.getNaviButtons()).hover(function(){a.pause();
clearInterval(i)},function(){f||(i=setTimeout(a.play,b.interval))});b.autoplay&&setTimeout(a.play,b.interval)});return b.api?h:this}})(jQuery);
(function(d){function p(c,g){var h=d(g);return h.length<2?h:c.parent().find(g)}var m=d.tools.scrollable;m.navigator={conf:{navi:".navi",naviItem:null,activeClass:"active",indexed:false,idPrefix:null,history:false}};d.fn.navigator=function(c){if(typeof c=="string")c={navi:c};c=d.extend({},m.navigator.conf,c);var g;this.each(function(){function h(a,b,i){e.seekTo(b);if(j){if(location.hash)location.hash=a.attr("href").replace("#","")}else return i.preventDefault()}function f(){return k.find(c.naviItem||
"> *")}function n(a){var b=d("<"+(c.naviItem||"a")+"/>").click(function(i){h(d(this),a,i)}).attr("href","#"+a);a===0&&b.addClass(l);c.indexed&&b.text(a+1);c.idPrefix&&b.attr("id",c.idPrefix+a);return b.appendTo(k)}function o(a,b){a=f().eq(b.replace("#",""));a.length||(a=f().filter("[href="+b+"]"));a.click()}var e=d(this).data("scrollable"),k=p(e.getRoot(),c.navi),q=e.getNaviButtons(),l=c.activeClass,j=c.history&&d.fn.history;if(e)g=e;e.getNaviButtons=function(){return q.add(k)};f().length?f().each(function(a){d(this).click(function(b){h(d(this),
a,b)})}):d.each(e.getItems(),function(a){n(a)});e.onBeforeSeek(function(a,b){setTimeout(function(){if(!a.isDefaultPrevented()){var i=f().eq(b);!a.isDefaultPrevented()&&i.length&&f().removeClass(l).eq(b).addClass(l)}},1)});e.onAddItem(function(a,b){b=n(e.getItems().index(b));j&&b.history(o)});j&&f().history(o)});return c.api?g:this}})(jQuery);
(function(a){function t(d,b){var c=this,i=d.add(c),o=a(window),k,f,m,g=a.tools.expose&&(b.mask||b.expose),n=Math.random().toString().slice(10);if(g){if(typeof g=="string")g={color:g};g.closeOnClick=g.closeOnEsc=false}var p=b.target||d.attr("rel");f=p?a(p):d;if(!f.length)throw"Could not find Overlay: "+p;d&&d.index(f)==-1&&d.click(function(e){c.load(e);return e.preventDefault()});a.extend(c,{load:function(e){if(c.isOpened())return c;var h=q[b.effect];if(!h)throw'Overlay: cannot find effect : "'+b.effect+
'"';b.oneInstance&&a.each(s,function(){this.close(e)});e=e||a.Event();e.type="onBeforeLoad";i.trigger(e);if(e.isDefaultPrevented())return c;m=true;g&&a(f).expose(g);var j=b.top,r=b.left,u=f.outerWidth({margin:true}),v=f.outerHeight({margin:true});if(typeof j=="string")j=j=="center"?Math.max((o.height()-v)/2,0):parseInt(j,10)/100*o.height();if(r=="center")r=Math.max((o.width()-u)/2,0);h[0].call(c,{top:j,left:r},function(){if(m){e.type="onLoad";i.trigger(e)}});g&&b.closeOnClick&&a.mask.getMask().one("click",
c.close);b.closeOnClick&&a(document).bind("click."+n,function(l){a(l.target).parents(f).length||c.close(l)});b.closeOnEsc&&a(document).bind("keydown."+n,function(l){l.keyCode==27&&c.close(l)});return c},setOpened:function(z){m=z},close:function(e){if(!c.isOpened())return c;e=e||a.Event();e.type="onBeforeClose";i.trigger(e);if(!e.isDefaultPrevented()){m=false;q[b.effect][1].call(c,function(){e.type="onClose";i.trigger(e)});a(document).unbind("click."+n).unbind("keydown."+n);g&&a.mask.close();return c}},getOverlay:function(){return f},
getTrigger:function(){return d},getClosers:function(){return k},isOpened:function(){return m},getConf:function(){return b}});a.each("onBeforeLoad,onStart,onLoad,onBeforeClose,onClose".split(","),function(e,h){a.isFunction(b[h])&&a(c).bind(h,b[h]);c[h]=function(j){a(c).bind(h,j);return c}});k=f.find(b.close||".close");if(!k.length&&!b.close){k=a('<a class="close"></a>');f.prepend(k)}k.click(function(e){c.close(e)});b.load&&c.load()}a.tools=a.tools||{version:"1.2.3"};a.tools.overlay={addEffect:function(d,
b,c){q[d]=[b,c]},conf:{close:null,closeOnClick:true,closeOnEsc:true,closeSpeed:"fast",effect:"default",fixed:!a.browser.msie||a.browser.version>6,left:"center",load:false,mask:null,oneInstance:true,speed:"normal",target:null,top:"10%"}};var s=[],q={};a.tools.overlay.addEffect("default",function(d,b){var c=this.getConf(),i=a(window);if(!c.fixed){d.top+=i.scrollTop();d.left+=i.scrollLeft()}d.position=c.fixed?"fixed":"absolute";this.getOverlay().css(d).fadeIn(c.speed,b)},function(d){this.getOverlay().fadeOut(this.getConf().closeSpeed,
d)});a.fn.overlay=function(d){var b=this.data("overlay");if(b)return b;if(a.isFunction(d))d={onBeforeLoad:d};d=a.extend(true,{},a.tools.overlay.conf,d);this.each(function(){b=new t(a(this),d);s.push(b);a(this).data("overlay",b)});return d.api?b:this}})(jQuery);
(function(i){function j(b){var d=b.offset();return{top:d.top+b.height()/2,left:d.left+b.width()/2}}var k=i.tools.overlay,f=i(window);i.extend(k.conf,{start:{top:null,left:null},fadeInSpeed:"fast",zIndex:9999});function n(b,d){var a=this.getOverlay(),c=this.getConf(),g=this.getTrigger(),o=this,l=a.outerWidth({margin:true}),h=a.data("img");if(!h){var e=a.css("backgroundImage");if(!e)throw"background-image CSS property not set for overlay";e=e.slice(e.indexOf("(")+1,e.indexOf(")")).replace(/\"/g,"");
a.css("backgroundImage","none");h=i('<img src="'+e+'"/>');h.css({border:0,display:"none"}).width(l);i("body").append(h);a.data("img",h)}e=c.start.top||Math.round(f.height()/2);var m=c.start.left||Math.round(f.width()/2);if(g){g=j(g);e=g.top;m=g.left}h.css({position:"absolute",top:e,left:m,width:0,zIndex:c.zIndex}).show();b.top+=f.scrollTop();b.left+=f.scrollLeft();b.position="absolute";a.css(b);h.animate({top:a.css("top"),left:a.css("left"),width:l},c.speed,function(){if(c.fixed){b.top-=f.scrollTop();
b.left-=f.scrollLeft();b.position="fixed";h.add(a).css(b)}a.css("zIndex",c.zIndex+1).fadeIn(c.fadeInSpeed,function(){o.isOpened()&&!i(this).index(a)?d.call():a.hide()})})}function p(b){var d=this.getOverlay().hide(),a=this.getConf(),c=this.getTrigger();d=d.data("img");var g={top:a.start.top,left:a.start.left,width:0};c&&i.extend(g,j(c));a.fixed&&d.css({position:"absolute"}).animate({top:"+="+f.scrollTop(),left:"+="+f.scrollLeft()},0);d.animate(g,a.closeSpeed,b)}k.addEffect("apple",n,p)})(jQuery);
(function(d){function R(b,c){return 32-(new Date(b,c,32)).getDate()}function S(b,c){b=""+b;for(c=c||2;b.length<c;)b="0"+b;return b}function T(b,c,j){var m=b.getDate(),h=b.getDay(),t=b.getMonth();b=b.getFullYear();var f={d:m,dd:S(m),ddd:B[j].shortDays[h],dddd:B[j].days[h],m:t+1,mm:S(t+1),mmm:B[j].shortMonths[t],mmmm:B[j].months[t],yy:String(b).slice(2),yyyy:b};c=c.replace(X,function(o){return o in f?f[o]:o.slice(1,o.length-1)});return Y.html(c).html()}function y(b){return parseInt(b,10)}function U(b,
c){return b.getFullYear()===c.getFullYear()&&b.getMonth()==c.getMonth()&&b.getDate()==c.getDate()}function C(b){if(b){if(b.constructor==Date)return b;if(typeof b=="string"){var c=b.split("-");if(c.length==3)return new Date(y(c[0]),y(c[1])-1,y(c[2]));if(!/^-?\d+$/.test(b))return;b=y(b)}c=new Date;c.setDate(c.getDate()+b);return c}}function Z(b,c){function j(a,e,g){l=a;D=a.getFullYear();E=a.getMonth();G=a.getDate();g=g||d.Event("api");g.type="change";H.trigger(g,[a]);if(!g.isDefaultPrevented()){b.val(T(a,
e.format,e.lang));b.data("date",a);h.hide(g)}}function m(a){a.type="onShow";H.trigger(a);d(document).bind("keydown.d",function(e){var g=e.keyCode;if(g==8){b.val("");return h.hide(e)}if(g==27)return h.hide(e);if(d(V).index(g)>=0){if(!u){h.show(e);return e.preventDefault()}var i=d("#"+f.weeks+" a"),p=d("."+f.focus),q=i.index(p);p.removeClass(f.focus);if(g==74||g==40)q+=7;else if(g==75||g==38)q-=7;else if(g==76||g==39)q+=1;else if(g==72||g==37)q-=1;if(q==-1){h.addMonth(-1);p=d("#"+f.weeks+" a:last")}else if(q==
35){h.addMonth();p=d("#"+f.weeks+" a:first")}else p=i.eq(q);p.addClass(f.focus);return e.preventDefault()}if(g==34)return h.addMonth();if(g==33)return h.addMonth(-1);if(g==36)return h.today();if(g==13)d(e.target).is("select")||d("."+f.focus).click();return d([16,17,18,9]).index(g)>=0});d(document).bind("click.d",function(e){var g=e.target;if(!d(g).parents("#"+f.root).length&&g!=b[0]&&(!K||g!=K[0]))h.hide(e)})}var h=this,t=new Date,f=c.css,o=B[c.lang],k=d("#"+f.root),L=k.find("#"+f.title),K,I,J,D,
E,G,l=b.attr("data-value")||c.value||b.val(),r=b.attr("min")||c.min,s=b.attr("max")||c.max,u;l=C(l)||t;r=C(r||c.yearRange[0]*365);s=C(s||c.yearRange[1]*365);if(!o)throw"Dateinput: invalid language: "+c.lang;if(b.attr("type")=="date"){var M=d("<input/>");d.each("name,readonly,disabled,value,required".split(","),function(a,e){M.attr(e,b.attr(e))});b.replaceWith(M);b=M}b.addClass(f.input);var H=b.add(h);if(!k.length){k=d("<div><div><a/><div/><a/></div><div><div/><div/></div></div>").hide().css({position:"absolute"}).attr("id",
f.root);k.children().eq(0).attr("id",f.head).end().eq(1).attr("id",f.body).children().eq(0).attr("id",f.days).end().eq(1).attr("id",f.weeks).end().end().end().find("a").eq(0).attr("id",f.prev).end().eq(1).attr("id",f.next);L=k.find("#"+f.head).find("div").attr("id",f.title);if(c.selectors){var z=d("<select/>").attr("id",f.month),A=d("<select/>").attr("id",f.year);L.append(z.add(A))}for(var $=k.find("#"+f.days),N=0;N<7;N++)$.append(d("<span/>").text(o.shortDays[(N+c.firstDay)%7]));b.after(k)}if(c.trigger)K=
d("<a/>").attr("href","#").addClass(f.trigger).click(function(a){h.show();return a.preventDefault()}).insertAfter(b);var O=k.find("#"+f.weeks);A=k.find("#"+f.year);z=k.find("#"+f.month);d.extend(h,{show:function(a){if(!(b.is("[readonly]")||u)){a=a||d.Event();a.type="onBeforeShow";H.trigger(a);if(!a.isDefaultPrevented()){d.each(W,function(){this.hide()});u=true;z.unbind("change").change(function(){h.setValue(A.val(),d(this).val())});A.unbind("change").change(function(){h.setValue(d(this).val(),z.val())});
I=k.find("#"+f.prev).unbind("click").click(function(){I.hasClass(f.disabled)||h.addMonth(-1);return false});J=k.find("#"+f.next).unbind("click").click(function(){J.hasClass(f.disabled)||h.addMonth();return false});h.setValue(l);var e=b.position();k.css({top:e.top+b.outerHeight({margins:true})+c.offset[0],left:e.left+c.offset[1]});if(c.speed)k.show(c.speed,function(){m(a)});else{k.show();m(a)}return h}}},setValue:function(a,e,g){var i;if(parseInt(e,10)>=-1){a=y(a);e=y(e);g=y(g);i=new Date(a,e,g)}else{i=
a||l;a=i.getFullYear();e=i.getMonth();g=i.getDate()}if(e==-1){e=11;a--}else if(e==12){e=0;a++}if(!u){j(i,c);return h}E=e;D=a;i=new Date(a,e,1-c.firstDay);g=i.getDay();var p=R(a,e),q=R(a,e-1),P;if(c.selectors){z.empty();d.each(o.months,function(v,F){r<new Date(a,v+1,-1)&&s>new Date(a,v,0)&&z.append(d("<option/>").html(F).attr("value",v))});A.empty();for(i=a+c.yearRange[0];i<a+c.yearRange[1];i++)r<new Date(i+1,-1,0)&&s>new Date(i,0,0)&&A.append(d("<option/>").text(i));z.val(e);A.val(a)}else L.html(o.months[e]+
" "+a);O.empty();I.add(J).removeClass(f.disabled);for(var w=0,n,x;w<42;w++){n=d("<a/>");if(w%7===0){P=d("<div/>").addClass(f.week);O.append(P)}if(w<g){n.addClass(f.off);x=q-g+w+1;i=new Date(a,e-1,x)}else if(w>=g+p){n.addClass(f.off);x=w-p-g+1;i=new Date(a,e+1,x)}else{x=w-g+1;i=new Date(a,e,x);if(U(l,i))n.attr("id",f.current).addClass(f.focus);else U(t,i)&&n.attr("id",f.today)}r&&i<r&&n.add(I).addClass(f.disabled);s&&i>s&&n.add(J).addClass(f.disabled);n.attr("href","#"+x).text(x).data("date",i);P.append(n);
n.click(function(v){var F=d(this);if(!F.hasClass(f.disabled)){d("#"+f.current).removeAttr("id");F.attr("id",f.current);j(F.data("date"),c,v)}return false})}f.sunday&&O.find(f.week).each(function(){var v=c.firstDay?7-c.firstDay:0;d(this).children().slice(v,v+1).addClass(f.sunday)});return h},setMin:function(a,e){r=C(a);e&&l<r&&h.setValue(r);return h},setMax:function(a,e){s=C(a);e&&l>s&&h.setValue(s);return h},today:function(){return h.setValue(t)},addDay:function(a){return this.setValue(D,E,G+(a||
1))},addMonth:function(a){return this.setValue(D,E+(a||1),G)},addYear:function(a){return this.setValue(D+(a||1),E,G)},hide:function(a){if(u){a=a||d.Event();a.type="onHide";H.trigger(a);d(document).unbind("click.d").unbind("keydown.d");if(a.isDefaultPrevented())return;k.hide();u=false}return h},getConf:function(){return c},getInput:function(){return b},getCalendar:function(){return k},getValue:function(a){return a?T(l,a,c.lang):l},isOpen:function(){return u}});d.each(["onBeforeShow","onShow","change",
"onHide"],function(a,e){d.isFunction(c[e])&&d(h).bind(e,c[e]);h[e]=function(g){d(h).bind(e,g);return h}});b.bind("focus click",h.show).keydown(function(a){var e=a.keyCode;if(!u&&d(V).index(e)>=0){h.show(a);return a.preventDefault()}return a.shiftKey||a.ctrlKey||a.altKey||e==9?true:a.preventDefault()});C(b.val())&&j(l,c)}d.tools=d.tools||{version:"1.2.3"};var W=[],Q,V=[75,76,38,39,74,72,40,37],B={};Q=d.tools.dateinput={conf:{format:"mm/dd/yy",selectors:false,yearRange:[-5,5],lang:"en",offset:[0,0],
speed:0,firstDay:0,min:0,max:0,trigger:false,css:{prefix:"cal",input:"date",root:0,head:0,title:0,prev:0,next:0,month:0,year:0,days:0,body:0,weeks:0,today:0,current:0,week:0,off:0,sunday:0,focus:0,disabled:0,trigger:0}},localize:function(b,c){d.each(c,function(j,m){c[j]=m.split(",")});B[b]=c}};Q.localize("en",{months:"January,February,March,April,May,June,July,August,September,October,November,December",shortMonths:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec",days:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
shortDays:"Sun,Mon,Tue,Wed,Thu,Fri,Sat"});var X=/d{1,4}|m{1,4}|yy(?:yy)?|"[^"]*"|'[^']*'/g,Y=d("<a/>");d.expr[":"].date=function(b){var c=b.getAttribute("type");return c&&c=="date"||!!d(b).data("dateinput")};d.fn.dateinput=function(b){if(this.data("dateinput"))return this;b=d.extend(true,{},Q.conf,b);d.each(b.css,function(j,m){if(!m&&j!="prefix")b.css[j]=(b.css.prefix||"")+(m||j)});var c;this.each(function(){var j=new Z(d(this),b);W.push(j);j=j.getInput().data("dateinput",j);c=c?c.add(j):j});return c?
c:this}})(jQuery);
(function(e){function F(d,a){a=Math.pow(10,a);return Math.round(d*a)/a}function p(d,a){if(a=parseInt(d.css(a),10))return a;return(d=d[0].currentStyle)&&d.width&&parseInt(d.width,10)}function C(d){return(d=d.data("events"))&&d.onSlide}function G(d,a){function h(c,b,f,j){if(f===undefined)f=b/k*z;else if(j)f-=a.min;if(r)f=Math.round(f/r)*r;if(b===undefined||r)b=f*k/z;if(isNaN(f))return g;b=Math.max(0,Math.min(b,k));f=b/k*z;if(j||!n)f+=a.min;if(n)if(j)b=k-b;else f=a.max-f;f=F(f,t);var q=c.type=="click";
if(D&&l!==undefined&&!q){c.type="onSlide";A.trigger(c,[f,b]);if(c.isDefaultPrevented())return g}j=q?a.speed:0;q=q?function(){c.type="change";A.trigger(c,[f])}:null;if(n){m.animate({top:b},j,q);a.progress&&B.animate({height:k-b+m.width()/2},j)}else{m.animate({left:b},j,q);a.progress&&B.animate({width:b+m.width()/2},j)}l=f;H=b;d.val(f);return g}function s(){if(n=a.vertical||p(i,"height")>p(i,"width")){k=p(i,"height")-p(m,"height");u=i.offset().top+k}else{k=p(i,"width")-p(m,"width");u=i.offset().left}}
function v(){s();g.setValue(a.value||a.min)}var g=this,o=a.css,i=e("<div><div/><a href='#'/></div>").data("rangeinput",g),n,l,u,k,H;d.before(i);var m=i.addClass(o.slider).find("a").addClass(o.handle),B=i.find("div").addClass(o.progress);e.each("min,max,step,value".split(","),function(c,b){c=d.attr(b);if(parseFloat(c))a[b]=parseFloat(c,10)});var z=a.max-a.min,r=a.step=="any"?0:a.step,t=a.precision;if(t===undefined)try{t=r.toString().split(".")[1].length}catch(I){t=0}if(d.attr("type")=="range"){var w=
e("<input/>");e.each("name,readonly,disabled,required".split(","),function(c,b){w.attr(b,d.attr(b))});w.val(a.value);d.replaceWith(w);d=w}d.addClass(o.input);var A=e(g).add(d),D=true;e.extend(g,{getValue:function(){return l},setValue:function(c,b){return h(b||e.Event("api"),undefined,c,true)},getConf:function(){return a},getProgress:function(){return B},getHandle:function(){return m},getInput:function(){return d},step:function(c,b){b=b||e.Event();var f=a.step=="any"?1:a.step;g.setValue(l+f*(c||1),
b)},stepUp:function(c){return g.step(c||1)},stepDown:function(c){return g.step(-c||-1)}});e.each("onSlide,change".split(","),function(c,b){e.isFunction(a[b])&&e(g).bind(b,a[b]);g[b]=function(f){e(g).bind(b,f);return g}});m.drag({drag:false}).bind("dragStart",function(){D=C(e(g))||C(d)}).bind("drag",function(c,b,f){if(d.is(":disabled"))return false;h(c,n?b:f)}).bind("dragEnd",function(c){if(!c.isDefaultPrevented()){c.type="change";A.trigger(c,[l])}}).click(function(c){return c.preventDefault()});i.click(function(c){if(d.is(":disabled")||
c.target==m[0])return c.preventDefault();s();var b=m.width()/2;h(c,n?k-u-b+c.pageY:c.pageX-u-b)});a.keyboard&&d.keydown(function(c){if(!d.attr("readonly")){var b=c.keyCode,f=e([75,76,38,33,39]).index(b)!=-1,j=e([74,72,40,34,37]).index(b)!=-1;if((f||j)&&!(c.shiftKey||c.altKey||c.ctrlKey)){if(f)g.step(b==33?10:1,c);else if(j)g.step(b==34?-10:-1,c);return c.preventDefault()}}});d.blur(function(c){var b=e(this).val();b!==l&&g.setValue(b,c)});e.extend(d[0],{stepUp:g.stepUp,stepDown:g.stepDown});v();k||
e(window).load(v)}e.tools=e.tools||{version:"1.2.3"};var E;E=e.tools.rangeinput={conf:{min:0,max:100,step:"any",steps:0,value:0,precision:undefined,vertical:0,keyboard:true,progress:false,speed:100,css:{input:"range",slider:"slider",progress:"progress",handle:"handle"}}};var x,y;e.fn.drag=function(d){document.ondragstart=function(){return false};d=e.extend({x:true,y:true,drag:true},d);x=x||e(document).bind("mousedown mouseup",function(a){var h=e(a.target);if(a.type=="mousedown"&&h.data("drag")){var s=
h.position(),v=a.pageX-s.left,g=a.pageY-s.top,o=true;x.bind("mousemove.drag",function(i){var n=i.pageX-v;i=i.pageY-g;var l={};if(d.x)l.left=n;if(d.y)l.top=i;if(o){h.trigger("dragStart");o=false}d.drag&&h.css(l);h.trigger("drag",[i,n]);y=h});a.preventDefault()}else try{y&&y.trigger("dragEnd")}finally{x.unbind("mousemove.drag");y=null}});return this.data("drag",true)};e.expr[":"].range=function(d){var a=d.getAttribute("type");return a&&a=="range"||!!e(d).filter("input").data("rangeinput")};e.fn.rangeinput=
function(d){if(this.data("rangeinput"))return this;d=e.extend(true,{},E.conf,d);var a;this.each(function(){var h=new G(e(this),e.extend(true,{},d));h=h.getInput().data("rangeinput",h);a=a?a.add(h):h});return a?a:this}})(jQuery);
(function(d){function v(a,b,c){var k=a.offset().top,f=a.offset().left,l=c.position.split(/,?\s+/),g=l[0];l=l[1];k-=b.outerHeight()-c.offset[0];f+=a.outerWidth()+c.offset[1];c=b.outerHeight()+a.outerHeight();if(g=="center")k+=c/2;if(g=="bottom")k+=c;a=a.outerWidth();if(l=="center")f-=(a+b.outerWidth())/2;if(l=="left")f-=a;return{top:k,left:f}}function w(a){function b(){return this.getAttribute("type")==a}b.key="[type="+a+"]";return b}function s(a,b,c){function k(g,e,j){if(!(!c.grouped&&g.length)){var h;
if(j===false||d.isArray(j)){h=i.messages[e.key||e]||i.messages["*"];h=h[c.lang]||i.messages["*"].en;(e=h.match(/\$\d/g))&&d.isArray(j)&&d.each(e,function(n){h=h.replace(this,j[n])})}else h=j[c.lang]||j;g.push(h)}}var f=this,l=b.add(f);a=a.not(":button, :image, :reset, :submit");d.extend(f,{getConf:function(){return c},getForm:function(){return b},getInputs:function(){return a},invalidate:function(g,e){if(!e){var j=[];d.each(g,function(h,n){h=a.filter("[name="+h+"]");if(h.length){h.trigger("OI",[n]);
j.push({input:h,messages:[n]})}});g=j;e=d.Event()}e.type="onFail";l.trigger(e,[g]);e.isDefaultPrevented()||q[c.effect][0].call(f,g,e);return f},reset:function(g){g=g||a;g.removeClass(c.errorClass).each(function(){var e=d(this).data("msg.el");if(e){e.remove();d(this).data("msg.el",null)}}).unbind(c.errorInputEvent||"");return f},destroy:function(){b.unbind(c.formEvent).unbind("reset.V");a.unbind(c.inputEvent||"").unbind("change.V");return f.reset()},checkValidity:function(g,e){g=g||a;g=g.not(":disabled");
if(!g.length)return true;e=e||d.Event();e.type="onBeforeValidate";l.trigger(e,[g]);if(e.isDefaultPrevented())return e.result;var j=[],h=c.errorInputEvent+".v";g.each(function(){var p=[],m=d(this).unbind(h).data("messages",p);d.each(t,function(){var o=this,r=o[0];if(m.filter(r).length){o=o[1].call(f,m,m.val());if(o!==true){e.type="onBeforeFail";l.trigger(e,[m,r]);if(e.isDefaultPrevented())return false;var u=m.attr(c.messageAttr);if(u){p=[u];return false}else k(p,r,o)}}});if(p.length){j.push({input:m,
messages:p});m.trigger("OI",[p]);c.errorInputEvent&&m.bind(h,function(o){f.checkValidity(m,o)})}if(c.singleError&&j.length)return false});var n=q[c.effect];if(!n)throw'Validator: cannot find effect "'+c.effect+'"';if(j.length){f.invalidate(j,e);return false}else{n[1].call(f,g,e);e.type="onSuccess";l.trigger(e,[g]);g.unbind(h)}return true}});d.each("onBeforeValidate,onBeforeFail,onFail,onSuccess".split(","),function(g,e){d.isFunction(c[e])&&d(f).bind(e,c[e]);f[e]=function(j){d(f).bind(e,j);return f}});
c.formEvent&&b.bind(c.formEvent,function(g){if(!f.checkValidity(null,g))return g.preventDefault()});b.bind("reset.V",function(){f.reset()});a[0]&&a[0].validity&&a.each(function(){this.oninvalid=function(){return false}});if(b[0])b[0].checkValidity=f.checkValidity;c.inputEvent&&a.bind(c.inputEvent,function(g){f.checkValidity(d(this),g)});a.filter(":checkbox, select").filter("[required]").bind("change.V",function(g){var e=d(this);if(this.checked||e.is("select")&&d(this).val())q[c.effect][1].call(f,
e,g)})}d.tools=d.tools||{version:"1.2.3"};var x=/\[type=([a-z]+)\]/,y=/^-?[0-9]*(\.[0-9]+)?$/,z=/^([a-z0-9_\.\-\+]+)@([\da-z\.\-]+)\.([a-z\.]{2,6})$/i,A=/^(https?:\/\/)?([\da-z\.\-]+)\.([a-z\.]{2,6})([\/\w \.\-]*)*\/?$/i,i;i=d.tools.validator={conf:{grouped:false,effect:"default",errorClass:"invalid",inputEvent:null,errorInputEvent:"keyup",formEvent:"submit",lang:"en",message:"<div/>",messageAttr:"data-message",messageClass:"error",offset:[0,0],position:"center right",singleError:false,speed:"normal"},
messages:{"*":{en:"Please correct this value"}},localize:function(a,b){d.each(b,function(c,k){i.messages[c]=i.messages[c]||{};i.messages[c][a]=k})},localizeFn:function(a,b){i.messages[a]=i.messages[a]||{};d.extend(i.messages[a],b)},fn:function(a,b,c){if(d.isFunction(b))c=b;else{if(typeof b=="string")b={en:b};this.messages[a.key||a]=b}if(b=x.exec(a))a=w(b[1]);t.push([a,c])},addEffect:function(a,b,c){q[a]=[b,c]}};var t=[],q={"default":[function(a){var b=this.getConf();d.each(a,function(c,k){c=k.input;
c.addClass(b.errorClass);var f=c.data("msg.el");if(!f){f=d(b.message).addClass(b.messageClass).appendTo(document.body);c.data("msg.el",f)}f.css({visibility:"hidden"}).find("span").remove();d.each(k.messages,function(l,g){d("<span/>").html(g).appendTo(f)});f.outerWidth()==f.parent().width()&&f.add(f.find("p")).css({display:"inline"});k=v(c,f,b);f.css({visibility:"visible",position:"absolute",top:k.top,left:k.left}).fadeIn(b.speed)})},function(a){var b=this.getConf();a.removeClass(b.errorClass).each(function(){var c=
d(this).data("msg.el");c&&c.css({visibility:"hidden"})})}]};d.each("email,url,number".split(","),function(a,b){d.expr[":"][b]=function(c){return c.getAttribute("type")===b}});d.fn.oninvalid=function(a){return this[a?"bind":"trigger"]("OI",a)};i.fn(":email","Please enter a valid email address",function(a,b){return!b||z.test(b)});i.fn(":url","Please enter a valid URL",function(a,b){return!b||A.test(b)});i.fn(":number","Please enter a numeric value.",function(a,b){return y.test(b)});i.fn("[max]","Please enter a value smaller than $1",
function(a,b){if(d.tools.dateinput&&a.is(":date"))return true;a=a.attr("max");return parseFloat(b)<=parseFloat(a)?true:[a]});i.fn("[min]","Please enter a value larger than $1",function(a,b){if(d.tools.dateinput&&a.is(":date"))return true;a=a.attr("min");return parseFloat(b)>=parseFloat(a)?true:[a]});i.fn("[required]","Please complete this mandatory field.",function(a,b){if(a.is(":checkbox"))return a.is(":checked");return!!b});i.fn("[pattern]",function(a){var b=new RegExp("^"+a.attr("pattern")+"$");
return b.test(a.val())});d.fn.validator=function(a){var b=this.data("validator");if(b){b.destroy();this.removeData("validator")}a=d.extend(true,{},i.conf,a);if(this.is("form"))return this.each(function(){var c=d(this);b=new s(c.find(":input"),c,a);c.data("validator",b)});else{b=new s(this,this.eq(0).closest("form"),a);return this.data("validator",b)}}})(jQuery);
(function(){function f(a,b){if(b)for(key in b)if(b.hasOwnProperty(key))a[key]=b[key];return a}function l(a,b){var c=[];for(var d in a)if(a.hasOwnProperty(d))c[d]=b(a[d]);return c}function m(a,b,c){if(e.isSupported(b.version))a.innerHTML=e.getHTML(b,c);else if(b.expressInstall&&e.isSupported([6,65]))a.innerHTML=e.getHTML(f(b,{src:b.expressInstall}),{MMredirectURL:location.href,MMplayerType:"PlugIn",MMdoctitle:document.title});else{if(!a.innerHTML.replace(/\s/g,"")){a.innerHTML="<h2>Flash version "+
b.version+" or greater is required</h2><h3>"+(g[0]>0?"Your version is "+g:"You have no flash plugin installed")+"</h3>"+(a.tagName=="A"?"<p>Click here to download latest version</p>":"<p>Download latest version from <a href='"+k+"'>here</a></p>");if(a.tagName=="A")a.onclick=function(){location.href=k}}if(b.onFail){var d=b.onFail.call(this);if(typeof d=="string")a.innerHTML=d}}if(h)window[b.id]=document.getElementById(b.id);f(this,{getRoot:function(){return a},getOptions:function(){return b},getConf:function(){return c},
getApi:function(){return a.firstChild}})}var h=document.all,k="http://www.adobe.com/go/getflashplayer",n=typeof jQuery=="function",o=/(\d+)[^\d]+(\d+)[^\d]*(\d*)/,i={width:"100%",height:"100%",id:"_"+(""+Math.random()).slice(9),allowfullscreen:true,allowscriptaccess:"always",quality:"high",version:[3,0],onFail:null,expressInstall:null,w3c:false,cachebusting:false};window.attachEvent&&window.attachEvent("onbeforeunload",function(){__flash_unloadHandler=function(){};__flash_savedUnloadHandler=function(){}});
window.flashembed=function(a,b,c){if(typeof a=="string")a=document.getElementById(a.replace("#",""));if(a){if(typeof b=="string")b={src:b};return new m(a,f(f({},i),b),c)}};var e=f(window.flashembed,{conf:i,getVersion:function(){var a;try{a=navigator.plugins["Shockwave Flash"].description.slice(16)}catch(b){try{var c=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");a=c&&c.GetVariable("$version")}catch(d){}}return(a=o.exec(a))?[a[1],a[3]]:[0,0]},asString:function(a){if(a===null||a===undefined)return null;
var b=typeof a;if(b=="object"&&a.push)b="array";switch(b){case "string":a=a.replace(new RegExp('(["\\\\])',"g"),"\\$1");a=a.replace(/^\s?(\d+\.?\d+)%/,"$1pct");return'"'+a+'"';case "array":return"["+l(a,function(d){return e.asString(d)}).join(",")+"]";case "function":return'"function()"';case "object":b=[];for(var c in a)a.hasOwnProperty(c)&&b.push('"'+c+'":'+e.asString(a[c]));return"{"+b.join(",")+"}"}return String(a).replace(/\s/g," ").replace(/\'/g,'"')},getHTML:function(a,b){a=f({},a);var c='<object width="'+
a.width+'" height="'+a.height+'" id="'+a.id+'" name="'+a.id+'"';if(a.cachebusting)a.src+=(a.src.indexOf("?")!=-1?"&":"?")+Math.random();c+=a.w3c||!h?' data="'+a.src+'" type="application/x-shockwave-flash"':' classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"';c+=">";if(a.w3c||h)c+='<param name="movie" value="'+a.src+'" />';a.width=a.height=a.id=a.w3c=a.src=null;a.onFail=a.version=a.expressInstall=null;for(var d in a)if(a[d])c+='<param name="'+d+'" value="'+a[d]+'" />';a="";if(b){for(var j in b)if(b[j]){d=
b[j];a+=j+"="+(/function|object/.test(typeof d)?e.asString(d):d)+"&"}a=a.slice(0,-1);c+='<param name="flashvars" value=\''+a+"' />"}c+="</object>";return c},isSupported:function(a){return g[0]>a[0]||g[0]==a[0]&&g[1]>=a[1]}}),g=e.getVersion();if(n){jQuery.tools=jQuery.tools||{version:"1.2.3"};jQuery.tools.flashembed={conf:i};jQuery.fn.flashembed=function(a,b){return this.each(function(){$(this).data("flashembed",flashembed(this,a,b))})}}})();
(function(b){function h(c){if(c){var a=d.contentWindow.document;a.open().close();a.location.hash=c}}var g,d,f,i;b.tools=b.tools||{version:"1.2.3"};b.tools.history={init:function(c){if(!i){if(b.browser.msie&&b.browser.version<"8"){if(!d){d=b("<iframe/>").attr("src","javascript:false;").hide().get(0);b("body").append(d);setInterval(function(){var a=d.contentWindow.document;a=a.location.hash;g!==a&&b.event.trigger("hash",a)},100);h(location.hash||"#")}}else setInterval(function(){var a=location.hash;
a!==g&&b.event.trigger("hash",a)},100);f=!f?c:f.add(c);c.click(function(a){var e=b(this).attr("href");d&&h(e);if(e.slice(0,1)!="#"){location.href="#"+e;return a.preventDefault()}});i=true}}};b(window).bind("hash",function(c,a){a?f.filter(function(){var e=b(this).attr("href");return e==a||e==a.replace("#","")}).trigger("history",[a]):f.eq(0).trigger("history",[a]);g=a;window.location.hash=g});b.fn.history=function(c){b.tools.history.init(this);return this.bind("history",c)}})(jQuery);
(function(b){function k(){if(b.browser.msie){var a=b(document).height(),d=b(window).height();return[window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a-d<20?d:a]}return[b(document).width(),b(document).height()]}function h(a){if(a)return a.call(b.mask)}b.tools=b.tools||{version:"1.2.3"};var l;l=b.tools.expose={conf:{maskId:"exposeMask",loadSpeed:"slow",closeSpeed:"fast",closeOnClick:true,closeOnEsc:true,zIndex:9998,opacity:0.8,startOpacity:0,color:"#fff",onLoad:null,
onClose:null}};var c,i,f,g,j;b.mask={load:function(a,d){if(f)return this;if(typeof a=="string")a={color:a};a=a||g;g=a=b.extend(b.extend({},l.conf),a);c=b("#"+a.maskId);if(!c.length){c=b("<div/>").attr("id",a.maskId);b("body").append(c)}var m=k();c.css({position:"absolute",top:0,left:0,width:m[0],height:m[1],display:"none",opacity:a.startOpacity,zIndex:a.zIndex});a.color&&c.css("backgroundColor",a.color);if(h(a.onBeforeLoad)===false)return this;a.closeOnEsc&&b(document).bind("keydown.mask",function(e){e.keyCode==
27&&b.mask.close(e)});a.closeOnClick&&c.bind("click.mask",function(e){b.mask.close(e)});b(window).bind("resize.mask",function(){b.mask.fit()});if(d&&d.length){j=d.eq(0).css("zIndex");b.each(d,function(){var e=b(this);/relative|absolute|fixed/i.test(e.css("position"))||e.css("position","relative")});i=d.css({zIndex:Math.max(a.zIndex+1,j=="auto"?0:j)})}c.css({display:"block"}).fadeTo(a.loadSpeed,a.opacity,function(){b.mask.fit();h(a.onLoad)});f=true;return this},close:function(){if(f){if(h(g.onBeforeClose)===
false)return this;c.fadeOut(g.closeSpeed,function(){h(g.onClose);i&&i.css({zIndex:j})});b(document).unbind("keydown.mask");c.unbind("click.mask");b(window).unbind("resize.mask");f=false}return this},fit:function(){if(f){var a=k();c.css({width:a[0],height:a[1]})}},getMask:function(){return c},isLoaded:function(){return f},getConf:function(){return g},getExposed:function(){return i}};b.fn.mask=function(a){b.mask.load(a);return this};b.fn.expose=function(a){b.mask.load(a,this);return this}})(jQuery);
(function(b){function c(a){switch(a.type){case "mousemove":return b.extend(a.data,{clientX:a.clientX,clientY:a.clientY,pageX:a.pageX,pageY:a.pageY});case "DOMMouseScroll":b.extend(a,a.data);a.delta=-a.detail/3;break;case "mousewheel":a.delta=a.wheelDelta/120;break}a.type="wheel";return b.event.handle.call(this,a,a.delta)}b.fn.mousewheel=function(a){return this[a?"bind":"trigger"]("wheel",a)};b.event.special.wheel={setup:function(){b.event.add(this,d,c,{})},teardown:function(){b.event.remove(this,
d,c)}};var d=!b.browser.mozilla?"mousewheel":"DOMMouseScroll"+(b.browser.version<"1.9"?" mousemove":"")})(jQuery);
/**
 * Endless Scroll plugin for jQuery
 *
 * v1.4.1
 *
 * Copyright (c) 2008 Fred Wu
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

/**
 * Usage:
 * 
 * // using default options
 * $(document).endlessScroll();
 *
 * // using some custom options
 * $(document).endlessScroll({
 *   fireOnce: false,
 *   fireDelay: false,
 *   loader: "<div class=\"loading\"><div>",
 *   callback: function(){
 *     alert("test");
 *   }
 * });
 *
 * Configuration options:
 *
 * bottomPixels  integer          the number of pixels from the bottom of the page that triggers the event
 * fireOnce      boolean          only fire once until the execution of the current event is completed
 * fireDelay     integer          delay the subsequent firing, in milliseconds. 0 or false to disable delay.
 * loader        string           the HTML to be displayed during loading
 * data          string|function  plain HTML data, can be either a string or a function that returns a string
 * insertAfter   string           jQuery selector syntax: where to put the loader as well as the plain HTML data
 * callback      function         callback function, accepets one argument: fire sequence (the number of times 
 *                                the event triggered during the current page session)
 * resetCounter  function         resets the fire sequence counter if the function returns true, this function
 *                                could also perform hook actions since it is applied at the start of the event
 * ceaseFire     function         stops the event (no more endless scrolling) if the function returns true
 *
 * Usage tips:
 *
 * The plugin is more useful when used with the callback function, which can then make AJAX calls to retrieve content.
 * The fire sequence argument (for the callback function) is useful for 'pagination'-like features.
 */

(function($){
	
	$.fn.endlessScroll = function(options){
		
		var defaults = {
			bottomPixels: 50,
			fireOnce: true,
			fireDelay: 150,
			loader: "<br />Loading...<br />",
			data: "",
			insertAfter: "div:last",
			resetCounter: function(){ return false; },
			callback: function(){ return true; },
			ceaseFire: function(){ return false; }
		};
		
		var options = $.extend(defaults, options);
		
		var firing       = true;
		var fired        = false;
		var fireSequence = 0;
		
		if (options.ceaseFire.apply(this) === true)
		{
			firing = false;
		}
		
		if (firing === true)
		{
			$(this).scroll(function(){
				// calculates the actual height of the scrolling container
				var inner_wrap = $(".endless_scroll_inner_wrap", this);
				if (inner_wrap.length === 0) {
					$(this).wrapInner("<div class=\"endless_scroll_inner_wrap\" />");
				}
				
				if (
					inner_wrap.length > 0 &&
					(inner_wrap.height() - $(this).height() <= $(this).scrollTop() + options.bottomPixels)
				)
				{
					if ((options.fireOnce === false || (options.fireOnce === true && fired != true)))
					{
						if(options.resetCounter.apply(this) === true)
						{
							fireSequence = 0;
						}
						
						fired = true;
						fireSequence++;

						$(options.insertAfter).after("<div id=\"endless_scroll_loader\">" + options.loader + "</div>");

						if (typeof options.data == 'function')
						{
							data = options.data.apply(this);
						}
						else
						{
							data = options.data;
						}

						if (data !== false)
						{
							$("div#endless_scroll_loader").remove();
							$(options.insertAfter).after("<div id=\"endless_scroll_data\">" + data + "</div>");
							$("div#endless_scroll_data").hide().fadeIn();
							$("div#endless_scroll_data").removeAttr("id");

							var args = new Array();
							args[0] = fireSequence;
							options.callback.apply(this, args);

							if (options.fireDelay !== false || options.fireDelay !== 0)
							{
								// slight delay for preventing event firing twice
								$("body").after("<div id=\"endless_scroll_marker\"></div>");
								$("div#endless_scroll_marker").fadeTo(options.fireDelay, 1, function(){
									$(this).remove();
									fired = false;
								});
							}
							else
							{
								fired = false;
							}
						}
					}
				}
			});
		}
	};
	
})(jQuery);(function(a){a.placeHeld=function(c,b){var d=this;d.$el=a(c);d.el=c;d.$el.data("placeHeld",d);d.placeholderText=d.$el.attr("placeholder");d.init=function(){d.options=a.extend({},a.placeHeld.defaultOptions,b);d.$el.bind("blur",d.holdPlace).bind("focus",d.releasePlace).trigger("blur");d.$el.parents("form").bind("submit",d.clearPlace)};d.holdPlace=function(){d.placeholderText=d.$el.attr("placeholder");var e=d.$el.val();if(!e){d.$el.val(d.placeholderText).addClass(d.options.className)}};d.releasePlace=function(){d.placeholderText=d.$el.attr("placeholder");var e=d.$el.val();if(e==d.placeholderText){d.$el.val("").removeClass(d.options.className)}};d.clearPlace=function(){d.placeholderText=d.$el.attr("placeholder");var e=d.$el.val();if(e==d.placeholderText&&d.$el.hasClass(d.options.className)){d.$el.val("")}};d.init()};a.placeHeld.defaultOptions={className:"placeheld"};a.fn.placeHeld=function(b){if(!!("placeholder" in a("<input>")[0])){return}return this.each(function(){(new a.placeHeld(this,b))})}})(jQuery);/*!
 * jQuery hashchange event - v1.3 - 7/21/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery hashchange event
//
// *Version: 1.3, Last updated: 7/21/2010*
// 
// Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
// GitHub       - http://github.com/cowboy/jquery-hashchange/
// Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
// (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
// document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
// 
// About: Known issues
// 
// While this jQuery hashchange event implementation is quite stable and
// robust, there are a few unfortunate browser bugs surrounding expected
// hashchange event-based behaviors, independent of any JavaScript
// window.onhashchange abstraction. See the following examples for more
// information:
// 
// Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
// Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
// WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
// Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
// 
// Also note that should a browser natively support the window.onhashchange 
// event, but not report that it does, the fallback polling loop will be used.
// 
// About: Release History
// 
// 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
//         "removable" for mobile-only development. Added IE6/7 document.title
//         support. Attempted to make Iframe as hidden as possible by using
//         techniques from http://www.paciellogroup.com/blog/?p=604. Added 
//         support for the "shortcut" format $(window).hashchange( fn ) and
//         $(window).hashchange() like jQuery provides for built-in events.
//         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
//         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
//         and <jQuery.fn.hashchange.src> properties plus document-domain.html
//         file to address access denied issues when setting document.domain in
//         IE6/7.
// 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
//         from a page on another domain would cause an error in Safari 4. Also,
//         IE6/7 Iframe is now inserted after the body (this actually works),
//         which prevents the page from scrolling when the event is first bound.
//         Event can also now be bound before DOM ready, but it won't be usable
//         before then in IE6/7.
// 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
//         where browser version is incorrectly reported as 8.0, despite
//         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
// 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
//         window.onhashchange functionality into a separate plugin for users
//         who want just the basic event & back button support, without all the
//         extra awesomeness that BBQ provides. This plugin will be included as
//         part of jQuery BBQ, but also be available separately.

(function($,window,undefined){
  '$:nomunge'; // Used by YUI compressor.
  
  // Reused string.
  var str_hashchange = 'hashchange',
    
    // Method / object references.
    doc = document,
    fake_onhashchange,
    special = $.event.special,
    
    // Does the browser support window.onhashchange? Note that IE8 running in
    // IE7 compatibility mode reports true for 'onhashchange' in window, even
    // though the event isn't supported, so also test document.documentMode.
    doc_mode = doc.documentMode,
    supports_onhashchange = 'on' + str_hashchange in window && ( doc_mode === undefined || doc_mode > 7 );
  
  // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!
  function get_fragment( url ) {
    url = url || location.href;
    return '#' + url.replace( /^[^#]*#?(.*)$/, '$1' );
  };
  
  // Method: jQuery.fn.hashchange
  // 
  // Bind a handler to the window.onhashchange event or trigger all bound
  // window.onhashchange event handlers. This behavior is consistent with
  // jQuery's built-in event handlers.
  // 
  // Usage:
  // 
  // > jQuery(window).hashchange( [ handler ] );
  // 
  // Arguments:
  // 
  //  handler - (Function) Optional handler to be bound to the hashchange
  //    event. This is a "shortcut" for the more verbose form:
  //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
  //    all bound window.onhashchange event handlers will be triggered. This
  //    is a shortcut for the more verbose
  //    jQuery(window).trigger( 'hashchange' ). These forms are described in
  //    the <hashchange event> section.
  // 
  // Returns:
  // 
  //  (jQuery) The initial jQuery collection of elements.
  
  // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
  // $(elem).hashchange() for triggering, like jQuery does for built-in events.
  $.fn[ str_hashchange ] = function( fn ) {
    return fn ? this.bind( str_hashchange, fn ) : this.trigger( str_hashchange );
  };
  
  // Property: jQuery.fn.hashchange.delay
  // 
  // The numeric interval (in milliseconds) at which the <hashchange event>
  // polling loop executes. Defaults to 50.
  
  // Property: jQuery.fn.hashchange.domain
  // 
  // If you're setting document.domain in your JavaScript, and you want hash
  // history to work in IE6/7, not only must this property be set, but you must
  // also set document.domain BEFORE jQuery is loaded into the page. This
  // property is only applicable if you are supporting IE6/7 (or IE8 operating
  // in "IE7 compatibility" mode).
  // 
  // In addition, the <jQuery.fn.hashchange.src> property must be set to the
  // path of the included "document-domain.html" file, which can be renamed or
  // modified if necessary (note that the document.domain specified must be the
  // same in both your main JavaScript as well as in this file).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.domain = document.domain;
  
  // Property: jQuery.fn.hashchange.src
  // 
  // If, for some reason, you need to specify an Iframe src file (for example,
  // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
  // do so using this property. Note that when using this property, history
  // won't be recorded in IE6/7 until the Iframe src file loads. This property
  // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
  // compatibility" mode).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.src = 'path/to/file.html';
  
  $.fn[ str_hashchange ].delay = 50;
  /*
  $.fn[ str_hashchange ].domain = null;
  $.fn[ str_hashchange ].src = null;
  */
  
  // Event: hashchange event
  // 
  // Fired when location.hash changes. In browsers that support it, the native
  // HTML5 window.onhashchange event is used, otherwise a polling loop is
  // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
  // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
  // compatibility" mode), a hidden Iframe is created to allow the back button
  // and hash-based history to work.
  // 
  // Usage as described in <jQuery.fn.hashchange>:
  // 
  // > // Bind an event handler.
  // > jQuery(window).hashchange( function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).hashchange();
  // 
  // A more verbose usage that allows for event namespacing:
  // 
  // > // Bind an event handler.
  // > jQuery(window).bind( 'hashchange', function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).trigger( 'hashchange' );
  // 
  // Additional Notes:
  // 
  // * The polling loop and Iframe are not created until at least one handler
  //   is actually bound to the 'hashchange' event.
  // * If you need the bound handler(s) to execute immediately, in cases where
  //   a location.hash exists on page load, via bookmark or page refresh for
  //   example, use jQuery(window).hashchange() or the more verbose 
  //   jQuery(window).trigger( 'hashchange' ).
  // * The event can be bound before DOM ready, but since it won't be usable
  //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
  //   to bind it inside a DOM ready handler.
  
  // Override existing $.event.special.hashchange methods (allowing this plugin
  // to be defined after jQuery BBQ in BBQ's source code).
  special[ str_hashchange ] = $.extend( special[ str_hashchange ], {
    
    // Called only when the first 'hashchange' event is bound to window.
    setup: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to create our own. And we don't want to call this
      // until the user binds to the event, just in case they never do, since it
      // will create a polling loop and possibly even a hidden Iframe.
      $( fake_onhashchange.start );
    },
    
    // Called only when the last 'hashchange' event is unbound from window.
    teardown: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to stop ours (if possible).
      $( fake_onhashchange.stop );
    }
    
  });
  
  // fake_onhashchange does all the work of triggering the window.onhashchange
  // event for browsers that don't natively support it, including creating a
  // polling loop to watch for hash changes and in IE 6/7 creating a hidden
  // Iframe to enable back and forward.
  fake_onhashchange = (function(){
    var self = {},
      timeout_id,
      
      // Remember the initial hash so it doesn't get triggered immediately.
      last_hash = get_fragment(),
      
      fn_retval = function(val){ return val; },
      history_set = fn_retval,
      history_get = fn_retval;
    
    // Start the polling loop.
    self.start = function() {
      timeout_id || poll();
    };
    
    // Stop the polling loop.
    self.stop = function() {
      timeout_id && clearTimeout( timeout_id );
      timeout_id = undefined;
    };
    
    // This polling loop checks every $.fn.hashchange.delay milliseconds to see
    // if location.hash has changed, and triggers the 'hashchange' event on
    // window when necessary.
    function poll() {
      var hash = get_fragment(),
        history_hash = history_get( last_hash );
      
      if ( hash !== last_hash ) {
        history_set( last_hash = hash, history_hash );
        
        $(window).trigger( str_hashchange );
        
      } else if ( history_hash !== last_hash ) {
        location.href = location.href.replace( /#.*/, '' ) + history_hash;
      }
      
      timeout_id = setTimeout( poll, $.fn[ str_hashchange ].delay );
    };
    
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    $.browser.msie && !supports_onhashchange && (function(){
      // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
      // when running in "IE7 compatibility" mode.
      
      var iframe,
        iframe_src;
      
      // When the event is bound and polling starts in IE 6/7, create a hidden
      // Iframe for history handling.
      self.start = function(){
        if ( !iframe ) {
          iframe_src = $.fn[ str_hashchange ].src;
          iframe_src = iframe_src && iframe_src + get_fragment();
          
          // Create hidden Iframe. Attempt to make Iframe as hidden as possible
          // by using techniques from http://www.paciellogroup.com/blog/?p=604.
          iframe = $('<iframe tabindex="-1" title="empty"/>').hide()
            
            // When Iframe has completely loaded, initialize the history and
            // start polling.
            .one( 'load', function(){
              iframe_src || history_set( get_fragment() );
              poll();
            })
            
            // Load Iframe src if specified, otherwise nothing.
            .attr( 'src', iframe_src || 'javascript:0' )
            
            // Append Iframe after the end of the body to prevent unnecessary
            // initial page scrolling (yes, this works).
            .insertAfter( 'body' )[0].contentWindow;
          
          // Whenever `document.title` changes, update the Iframe's title to
          // prettify the back/next history menu entries. Since IE sometimes
          // errors with "Unspecified error" the very first time this is set
          // (yes, very useful) wrap this with a try/catch block.
          doc.onpropertychange = function(){
            try {
              if ( event.propertyName === 'title' ) {
                iframe.document.title = doc.title;
              }
            } catch(e) {}
          };
          
        }
      };
      
      // Override the "stop" method since an IE6/7 Iframe was created. Even
      // if there are no longer any bound event handlers, the polling loop
      // is still necessary for back/next to work at all!
      self.stop = fn_retval;
      
      // Get history by looking at the hidden Iframe's location.hash.
      history_get = function() {
        return get_fragment( iframe.location.href );
      };
      
      // Set a new history item by opening and then closing the Iframe
      // document, *then* setting its location.hash. If document.domain has
      // been set, update that as well.
      history_set = function( hash, history_hash ) {
        var iframe_doc = iframe.document,
          domain = $.fn[ str_hashchange ].domain;
        
        if ( hash !== history_hash ) {
          // Update Iframe with any initial `document.title` that might be set.
          iframe_doc.title = doc.title;
          
          // Opening the Iframe's document after it has been closed is what
          // actually adds a history entry.
          iframe_doc.open();
          
          // Set document.domain for the Iframe document as well, if necessary.
          domain && iframe_doc.write( '<script>document.domain="' + domain + '"</script>' );
          
          iframe_doc.close();
          
          // Update the Iframe's hash, for great justice.
          iframe.location.hash = hash;
        }
      };
      
    })();
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    return self;
  })();
  
})(jQuery,this);
/*
Copyright (c) 2010, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 3.1.1
build: 47
*/
/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

if (typeof YUI === 'undefined') {

/**
 * The YUI global namespace object.  If YUI is already defined, the
 * existing YUI object will not be overwritten so that defined
 * namespaces are preserved.  It is the constructor for the object
 * the end user interacts with.  As indicated below, each instance
 * has full custom event support, but only if the event system 
 * is available.
 *
 * @class YUI
 * @constructor
 * @global
 * @uses EventTarget
 * @param o* 0..n optional configuration objects.  these values
 * are store in Y.config.  See config for the list of supported 
 * properties.
 */
    /*global YUI*/
    /*global YUI_config*/
    var YUI = function() {

        var Y = this, a = arguments, i, l = a.length,
            globalConfig = (typeof YUI_config !== 'undefined') && YUI_config;

        // Allow instantiation without the new operator
        if (!(Y instanceof YUI)) {
            Y = new YUI();
            for (i=0; i<l; i++) {
                Y._config(a[i]);
            }
            return Y; 
        } else {
            // set up the core environment
            Y._init();
            if (globalConfig) {
                Y._config(globalConfig);
            }
            for (i=0; i<l; i++) {
                Y._config(a[i]);
            }
            // bind the specified additional modules for this instance
            Y._setup();
            return Y;
        }
    };
}

(function() {
    var p, prop,
        VERSION       = '3.1.1', 
        BASE          = 'http://yui.yahooapis.com/',
        DOC_LABEL     = 'yui3-js-enabled',
        NOOP          = function() {},
        SLICE         = Array.prototype.slice,
        APPLY_TO_AUTH = { 'io.xdrReady':      1,   // the functions applyTo 
                          'io.xdrResponse':   1,   // can call. this should
                          'SWF.eventHandler': 1 }, // be done at build time
        hasWin        = (typeof window != 'undefined'),
        win           = (hasWin) ? window : null,
        doc           = (hasWin) ? win.document : null,
        docEl         = doc && doc.documentElement,
        docClass      = docEl && docEl.className,
        instances     = {}, 
        time          = new Date().getTime(), 
        add           = function(el, type, fn, capture) {
                            if (el && el.addEventListener) {
                                el.addEventListener(type, fn, capture);
                            } else if (el && el.attachEvent) {
                                el.attachEvent("on" + type, fn);
                            } 
                        },
        remove        = function (el, type, fn, capture) {
                            if (el && el.removeEventListener) {
                                // this can throw an uncaught exception in FF
                                try {
                                    el.removeEventListener(type, fn, capture);
                                } catch(ex){}
                            } else if (el && el.detachEvent) {
                                el.detachEvent("on" + type, fn);
                            }
                        },
        handleLoad    = function() {
                            YUI.Env.windowLoaded = true;
                            YUI.Env.DOMReady = true;
                            if (hasWin) {
                                remove(window, 'load', handleLoad);
                            }
                        };

//  Stamp the documentElement (HTML) with a class of "yui-loaded" to 
//  enable styles that need to key off of JS being enabled.
if (docEl && docClass.indexOf(DOC_LABEL) == -1) {
    if (docClass) {
        docClass += ' ';
    }
    docClass += DOC_LABEL;
    docEl.className = docClass;
}

if (VERSION.indexOf('@') > -1) {
    VERSION = '3.0.0'; // dev time hack for cdn test
}
        
YUI.prototype = {
    _config: function(o) {
        o = o || {};
        var attr,
            name, 
            detail,
            config = this.config, 
            mods   = config.modules,
            groups = config.groups;
        for (name in o) {
            attr = o[name];
            if (mods && name == 'modules') {
                for (detail in attr) {
                    mods[detail] = attr[detail];
                }
            } else if (groups && name == 'groups') {
                for (detail in attr) {
                    groups[detail] = attr[detail];
                }
            } else if (name == 'win') {
                config[name] = attr.contentWindow || attr;
                config.doc = config[name].document;
            } else {
                config[name] = attr;
            }
        }
    },

    /**
     * Initialize this YUI instance
     * @private
     */
    _init: function() {
        var filter,
            Y     = this, 
            G_ENV = YUI.Env,
            Env   = Y.Env;

        Y.version = VERSION;

        if (!Env) {
            Y.Env = {
                mods:         {},
                base:         BASE,
                cdn:          BASE + VERSION + '/build/',
                bootstrapped: false,
                _idx:         0,
                _used:        {},
                _attached:    {},
                _yidx:        0,
                _uidx:        0,
                _guidp:       'y',
                _loaded:      {},
                getBase: function(srcPattern, comboPattern) {
                    var b, nodes, i, src, match;
                    // get from querystring
                    nodes = (doc && doc.getElementsByTagName('script')) || [];
                    for (i=0; i<nodes.length; i=i+1) {
                        src = nodes[i].src;
                        if (src) {
                            //src = "http://yui.yahooapis.com/combo?2.8.0r4/b
                            //uild/yuiloader-dom-event/yuiloader-dom-event.js
                            //&3.0.0/build/yui/yui-min.js"; // debug url
                            match = src.match(srcPattern);
                            b = match && match[1];
                            if (b) {
                                // this is to set up the path to the loader.  The file 
                                // filter for loader should match the yui include.
                                filter = match[2];
                                // extract correct path for mixed combo urls
                                // http://yuilibrary.com/projects/yui3/ticket/2528423
                                match = src.match(comboPattern);
                                if (match && match[3]) {
                                    b = match[1] + match[3];
                                }

                                break;
                            }
                        }
                    }

                    // use CDN default
                    return b || Env.cdn;
                }
            };

            Env = Y.Env;

            Env._loaded[VERSION] = {};

            if (G_ENV && Y !== YUI) {
                Env._yidx  = ++G_ENV._yidx;
                Env._guidp = ('yui_' + VERSION + '_' + 
                             Env._yidx + '_' + time).replace(/\./g, '_');
            }

            Y.id = Y.stamp(Y);
            instances[Y.id] = Y;

        }

        Y.constructor = YUI;

        // configuration defaults
        Y.config = Y.config || {
            win:               win,
            doc:               doc,
            debug:             true,
            useBrowserConsole: true,
            throwFail:         true,
            bootstrap:         true,
            fetchCSS:          true
        };

        Y.config.base = YUI.config.base || 
            Y.Env.getBase(/^(.*)yui\/yui([\.\-].*)js(\?.*)?$/, 
                          /^(.*\?)(.*\&)(.*)yui\/yui[\.\-].*js(\?.*)?$/);

        Y.config.loaderPath = YUI.config.loaderPath || 
            'loader/loader' + (filter || '-min.') + 'js';

    },
    
    /**
     * Finishes the instance setup. Attaches whatever modules were defined
     * when the yui modules was registered.
     * @method _setup
     * @private
     */
    _setup: function(o) {

        var i, Y = this,
            core = [],
            mods = YUI.Env.mods,
            extras = Y.config.core || ['get', 'intl-base', 'loader', 'yui-log', 'yui-later', 'yui-throttle'];


        for (i=0; i<extras.length; i++) {
            if (mods[extras[i]]) {
                core.push(extras[i]);
            }
        }

        Y.use('yui-base');
        Y.use.apply(Y, core);

    },

    /**
     * Executes a method on a YUI instance with
     * the specified id if the specified method is whitelisted.
     * @method applyTo
     * @param id {string} the YUI instance id
     * @param method {string} the name of the method to exectute.
     * Ex: 'Object.keys'
     * @param args {Array} the arguments to apply to the method
     * @return {object} the return value from the applied method or null
     */
    applyTo: function(id, method, args) {

        if (!(method in APPLY_TO_AUTH)) {
            this.log(method + ': applyTo not allowed', 'warn', 'yui');
            return null;
        }

        var instance = instances[id], nest, m, i;
        if (instance) {
            nest = method.split('.'); 
            m = instance;
            for (i=0; i<nest.length; i=i+1) {
                m = m[nest[i]];
                if (!m) {
                    this.log('applyTo not found: ' + method, 'warn', 'yui');
                }
            }
            return m.apply(instance, args);
        }

        return null;
    }, 

    /**
     * Registers a module with the YUI global.  The easiest way to create a 
     * first-class YUI module is to use the YUI component build tool.  
     *
     * http://yuilibrary.com/projects/builder 
     *
     * The build system will produce the YUI.add wrapper for you module, along
     * with any configuration info required for the module.
     * @method add
     * @param name {string} module name
     * @param fn {Function} entry point into the module that
     * is used to bind module to the YUI instance
     * @param version {string} version string
     * @param details optional config data: 
     * requires: features that must be present before this module can be attached.
     * optional: optional features that should be present if loadOptional is
     *           defined.  Note: modules are not often loaded this way in YUI 3,
     *           but this field is still useful to inform the user that certain
     *           features in the component will require additional dependencies.
     * use:      features that are included within this module which need to be
     *           be attached automatically when this module is attached.  This
     *           supports the YUI 3 rollup system -- a module with submodules 
     *           defined will need to have the submodules listed in the 'use'
     *           config.  The YUI component build tool does this for you.
     * @return {YUI} the YUI instance
     *
     */
    add: function(name, fn, version, details) {
        details = details || {};

        YUI.Env.mods[name] = {
            name: name, 
            fn: fn,
            version: version,
            details: details
        };

        return this;
    },

    /**
     * Executes the function associated with each required
     * module, binding the module to the YUI instance.
     * @method _attach
     * @private
     */
    _attach: function(r, fromLoader) {
        var i, name, mod, details, req, use,
            mods = YUI.Env.mods,
            done = this.Env._attached,
            len  = r.length;

        for (i=0; i<len; i++) {
            name = r[i]; 
            mod  = mods[name];
            if (!done[name] && mod) {

                done[name] = true;
                details    = mod.details; 
                req        = details.requires; 
                use        = details.use;

                if (req && req.length) {
                    this._attach(this.Array(req));
                }

                // this.log('attaching ' + name, 'info', 'yui');

                if (mod.fn) {
                    mod.fn(this, name);
                }

                if (use && use.length) {
                    this._attach(this.Array(use));
                }
            }
        }
    },

    /**
     * Attaches one or more modules to the YUI instance.  When this
     * is executed, the requirements are analyzed, and one of 
     * several things can happen:
     *
     * - All requirements are available on the page --  The modules
     *   are attached to the instance.  If supplied, the use callback
     *   is executed synchronously.  
     *
     * - Modules are missing, the Get utility is not available OR
     *   the 'bootstrap' config is false -- A warning is issued about
     *   the missing modules and all available modules are attached.
     *
     * - Modules are missing, the Loader is not available but the Get
     *   utility is and boostrap is not false -- The loader is bootstrapped
     *   before doing the following....
     *
     * - Modules are missing and the Loader is available -- The loader
     *   expands the dependency tree and fetches missing modules.  When
     *   the loader is finshed the callback supplied to use is executed
     *   asynchronously.
     *
     * @param modules* {string} 1-n modules to bind (uses arguments array)
     * @param *callback {function} callback function executed when 
     * the instance has the required functionality.  If included, it
     * must be the last parameter.
     * <code>
     * // loads and attaches drag and drop and its dependencies
     * YUI().use('dd', function(Y) &#123;&#125);
     * // attaches all modules that are available on the page
     * YUI().use('*', function(Y) &#123;&#125);
     * // intrinsic YUI gallery support (since 3.1.0)
     * YUI().use('gallery-yql', function(Y) &#123;&#125);
     * // intrinsic YUI 2in3 support (since 3.1.0)
     * YUI().use('yui2-datatable', function(Y) &#123;&#125);
     * </code>
     *
     * @return {YUI} the YUI instance
     */
    use: function() {

        if (!this.Array) {
            this._attach(['yui-base']);
        }

        var len, loader, handleBoot,
            Y        = this, 
            G_ENV    = YUI.Env,
            args     = SLICE.call(arguments, 0), 
            mods     = G_ENV.mods, 
            Env      = Y.Env,
            used     = Env._used,
            queue    = G_ENV._loaderQueue,
            firstArg = args[0], 
            callback = args[args.length - 1],
            YArray   = Y.Array,
            config   = Y.config,
            boot     = config.bootstrap,
            missing  = [], 
            r        = [], 
            fetchCSS = config.fetchCSS,
            process  = function(name) {

                // add this module to full list of things to attach
                r.push(name);

                // only attach a module once
                if (used[name]) {
                    return;
                }

                var m = mods[name], req, use;

                if (m) {
                    used[name] = true;
                    req = m.details.requires;
                    use = m.details.use;
                } else {
                    // CSS files don't register themselves, see if it has been loaded
                    if (!G_ENV._loaded[VERSION][name]) {
                        missing.push(name);
                    } else {
                        used[name] = true; // probably css
                    }
                }

                if (req) { // make sure requirements are attached
                    YArray.each(YArray(req), process);
                }

                if (use) { // make sure we grab the submodule dependencies too
                    YArray.each(YArray(use), process);
                }


            },

            handleLoader = function(fromLoader) {
                var response = fromLoader || {
                        success: true,
                        msg: 'not dynamic'
                    }, 
                    newData, redo, origMissing,
                    data = response.data;

                Y._loading = false;


                if (data) {
                    origMissing = missing.concat();
                    missing = [];
                    Y.Array.each(data, process);
                    redo = missing.length;
                    if (redo) {
                        if (missing.sort().join() == origMissing.sort().join()) {
                            redo = false;
                        }
                    }
                }

                if (redo && data) {
                    newData = data.concat();
                    newData.push(function() {
                        Y._attach(data);
                        if (callback) {
                            callback(Y, response);
                        }
                    });
                    Y._loading  = false;
                    Y.use.apply(Y, newData);
                } else {
                    if (data) {
                        Y._attach(data);
                    }
                    if (callback) {
                        callback(Y, response);
                    }
                }

                if (Y._useQueue && Y._useQueue.size() && !Y._loading) {
                    Y.use.apply(Y, Y._useQueue.next());
                }
            };


        if (Y._loading) {
            Y._useQueue = Y._useQueue || new Y.Queue();
            Y._useQueue.add(args);
            return Y;
        }


        // The last argument supplied to use can be a load complete callback
        if (typeof callback === 'function') {
            args.pop();
        } else {
            callback = null;
        }
 
        // YUI().use('*'); // bind everything available
        if (firstArg === "*") {
            args = Y.Object.keys(mods);
        }
        
        // use loader to expand dependencies and sort the 
        // requirements if it is available.
        if (Y.Loader) {
            loader = new Y.Loader(config);
            loader.require(args);
            loader.ignoreRegistered = true;
            // loader.allowRollup = false;
            loader.calculate(null, (fetchCSS) ? null : 'js');
            args = loader.sorted;
        }

        // process each requirement and any additional requirements 
        // the module metadata specifies
        YArray.each(args, process);

        len = missing.length;

        if (len) {
            missing = Y.Object.keys(YArray.hash(missing));
            len = missing.length;
        }

        // dynamic load
        if (boot && len && Y.Loader) {
            Y._loading = true;
            loader = new Y.Loader(config);
            loader.onEnd = handleLoader;
            loader.context = Y;
            loader.attaching = args;
            loader.data = args;
            loader.require((fetchCSS) ? missing : args);
            loader.insert(null, (fetchCSS) ? null : 'js');
        } else if (boot && len && Y.Get && !Env.bootstrapped) {

            Y._loading = true;
            args = YArray(arguments, 0, true);

            handleBoot = function() {
                Y._loading = false;
                queue.running = false;
                Env.bootstrapped = true;
                Y._attach(['loader']);
                Y.use.apply(Y, args);
            };

            if (G_ENV._bootstrapping) {
                queue.add(handleBoot);
            } else {
                G_ENV._bootstrapping = true;
                Y.Get.script(config.base + config.loaderPath, {
                    onEnd: handleBoot 
                });
            }

        } else {
            if (len) {
                Y.message('Requirement NOT loaded: ' + missing, 'warn', 'yui');
            }
            Y._attach(r);
            handleLoader();
        }

        return Y;
    },


    /**
     * Returns the namespace specified and creates it if it doesn't exist
     * <pre>
     * YUI.namespace("property.package");
     * YUI.namespace("YAHOO.property.package");
     * </pre>
     * Either of the above would create YUI.property, then
     * YUI.property.package (YAHOO is scrubbed out, this is
     * to remain compatible with YUI2)
     *
     * Be careful when naming packages. Reserved words may work in some browsers
     * and not others. For instance, the following will fail in Safari:
     * <pre>
     * YUI.namespace("really.long.nested.namespace");
     * </pre>
     * This fails because "long" is a future reserved word in ECMAScript
     *
     * @method namespace
     * @param  {string*} arguments 1-n namespaces to create 
     * @return {object}  A reference to the last namespace object created
     */
    namespace: function() {
        var a=arguments, o=null, i, j, d;
        for (i=0; i<a.length; i=i+1) {
            d = ("" + a[i]).split(".");
            o = this;
            for (j=(d[0] == "YAHOO") ? 1 : 0; j<d.length; j=j+1) {
                o[d[j]] = o[d[j]] || {};
                o = o[d[j]];
            }
        }
        return o;
    },

    // this is replaced if the log module is included
    log: NOOP,
    message: NOOP,

    /**
     * Report an error.  The reporting mechanism is controled by
     * the 'throwFail' configuration attribute.  If throwFail is
     * not specified, the message is written to the Logger, otherwise
     * a JS error is thrown
     * @method error
     * @param msg {string} the error message
     * @param e {Error} Optional JS error that was caught.  If supplied
     * and throwFail is specified, this error will be re-thrown.
     * @return {YUI} this YUI instance
     */
    error: function(msg, e) {
        if (this.config.throwFail) {
            throw (e || new Error(msg)); 
        } else {
            this.message(msg, "error"); // don't scrub this one
        }

        return this;
    },

    /**
     * Generate an id that is unique among all YUI instances
     * @method guid
     * @param pre {string} optional guid prefix
     * @return {string} the guid
     */
    guid: function(pre) {
        var id =  this.Env._guidp + (++this.Env._uidx);
        return (pre) ? (pre + id) : id;
    },

    /**
     * Returns a guid associated with an object.  If the object
     * does not have one, a new one is created unless readOnly
     * is specified.
     * @method stamp
     * @param o The object to stamp
     * @param readOnly {boolean} if true, a valid guid will only
     * be returned if the object has one assigned to it.
     * @return {string} The object's guid or null
     */
    stamp: function(o, readOnly) {
        if (!o) {
            return o;
        }
        var uid = (typeof o === 'string') ? o : o._yuid;
        if (!uid) {
            uid = this.guid();
            if (!readOnly) {
                try {
                    o._yuid = uid;
                } catch(e) {
                    uid = null;
                }
            }
        }
        return uid;
    }
};

// Give the YUI global the same properties as an instance.
// This makes it so that the YUI global can be used like the YAHOO
// global was used prior to 3.x.  More importantly, the YUI global
// provides global metadata, so env needs to be configured.
// //TODO review

    p = YUI.prototype;

    // inheritance utilities are not available yet
    for (prop in p) {
        YUI[prop] = p[prop];
    }

    // set up the environment
    YUI._init();

    // setTimeout(function() { YUI._attach(['yui-base']); }, 0);

    if (hasWin) {
        // add a window load event at load time so we can capture
        // the case where it fires before dynamic loading is
        // complete.
        add(window, 'load', handleLoad);
    } else {
        handleLoad();
    }

    YUI.Env.add = add;
    YUI.Env.remove = remove;

    /*global exports*/
    // Support the CommonJS method for exporting our single global
    if (typeof exports == 'object') {
        exports.YUI = YUI;
    }

})();

/**
 * The config object contains all of the configuration options for
 * the YUI instance.  This object is supplied by the implementer 
 * when instantiating a YUI instance.  Some properties have default
 * values if they are not supplied by the implementer.
 *
 * @class config
 * @static
 */

/**
 * Allows the YUI seed file to fetch the loader component and library
 * metadata to dynamically load additional dependencies.
 *
 * @property bootstrap
 * @type boolean
 * @default true
 */

/**
 * Log to the browser console if debug is on and the browser has a
 * supported console.
 *
 * @property useBrowserConsole
 * @type boolean
 * @default true
 */

/**
 * A hash of log sources that should be logged.  If specified, only log messages from these sources will be logged.
 *
 * @property logInclude
 * @type object
 */

/**
 * A hash of log sources that should be not be logged.  If specified, all sources are logged if not on this list.
 *
 * @property logExclude
 * @type object
 */

/**
 * Set to true if the yui seed file was dynamically loaded in 
 * order to bootstrap components relying on the window load event 
 * and the 'domready' custom event.
 *
 * @property injected
 * @type boolean
 * @default false
 */

/**
 * If throwFail is set, Y.fail will generate or re-throw a JS Error.  Otherwise the failure is logged.
 *
 * @property throwFail
 * @type boolean
 * @default true
 */

/**
 * The window/frame that this instance should operate in.
 *
 * @property win
 * @type Window
 * @default the window hosting YUI
 */

/**
 * The document associated with the 'win' configuration.
 *
 * @property doc
 * @type Document
 * @default the document hosting YUI
 */

/**
 * A list of modules that defines the YUI core (overrides the default).
 *
 * @property core
 * @type string[]
 */

/**
 * A list of languages in order of preference. This list is matched against
 * the list of available languages in modules that the YUI instance uses to
 * determine the best possible localization of language sensitive modules.
 * Languages are represented using BCP 47 language tags, such as "en-GB" for
 * English as used in the United Kingdom, or "zh-Hans-CN" for simplified
 * Chinese as used in China. The list can be provided as a comma-separated
 * list or as an array.
 *
 * @property lang
 * @type string|string[]
 */

/**
 * The default date format
 * @property dateFormat
 * @type string
 * @deprecated use configuration in DataType.Date.format() instead
 */

/**
 * The default locale
 * @property locale
 * @type string
 * @deprecated use config.lang instead
 */

/**
 * The default interval when polling in milliseconds.
 * @property pollInterval
 * @type int
 * @default 20
 */

/**
 * The number of dynamic nodes to insert by default before
 * automatically removing them.  This applies to script nodes
 * because remove the node will not make the evaluated script
 * unavailable.  Dynamic CSS is not auto purged, because removing
 * a linked style sheet will also remove the style definitions.
 * @property purgethreshold
 * @type int
 * @default 20
 */

/**
 * The default interval when polling in milliseconds.
 * @property windowResizeDelay
 * @type int
 * @default 40
 */

/**
 * Base directory for dynamic loading
 * @property base
 * @type string
 */

/*
 * The secure base dir (not implemented)
 * For dynamic loading.
 * @property secureBase
 * @type string
 */

/**
 * The YUI combo service base dir. Ex: http://yui.yahooapis.com/combo?
 * For dynamic loading.
 * @property comboBase
 * @type string
 */

/**
 * The root path to prepend to module path for the combo service. Ex: 3.0.0b1/build/
 * For dynamic loading.
 * @property root
 * @type string
 */

/**
 * A filter to apply to result urls.  This filter will modify the default
 * path for all modules.  The default path for the YUI library is the
 * minified version of the files (e.g., event-min.js).  The filter property
 * can be a predefined filter or a custom filter.  The valid predefined 
 * filters are:
 * <dl>
 *  <dt>DEBUG</dt>
 *  <dd>Selects the debug versions of the library (e.g., event-debug.js).
 *      This option will automatically include the Logger widget</dd>
 *  <dt>RAW</dt>
 *  <dd>Selects the non-minified version of the library (e.g., event.js).</dd>
 * </dl>
 * You can also define a custom filter, which must be an object literal 
 * containing a search expression and a replace string:
 * <pre>
 *  myFilter: &#123; 
 *      'searchExp': "-min\\.js", 
 *      'replaceStr': "-debug.js"
 *  &#125;
 * </pre>
 *
 * For dynamic loading.
 *
 * @property filter
 * @type string|object
 */

/**
 * The 'skin' config let's you configure application level skin
 * customizations.  It contains the following attributes which
 * can be specified to override the defaults:
 *
 *      // The default skin, which is automatically applied if not
 *      // overriden by a component-specific skin definition.
 *      // Change this in to apply a different skin globally
 *      defaultSkin: 'sam', 
 *
 *      // This is combined with the loader base property to get
 *      // the default root directory for a skin.
 *      base: 'assets/skins/',
 *
 *      // Any component-specific overrides can be specified here,
 *      // making it possible to load different skins for different
 *      // components.  It is possible to load more than one skin
 *      // for a given component as well.
 *      overrides: {
 *          slider: ['capsule', 'round']
 *      }
 *
 * For dynamic loading.
 *
 *  @property skin
 */

/**
 * Hash of per-component filter specification.  If specified for a given component, 
 * this overrides the filter config
 *
 * For dynamic loading.
 *
 * @property filters
 */

/**
 * Use the YUI combo service to reduce the number of http connections 
 * required to load your dependencies.  Turning this off will
 * disable combo handling for YUI and all module groups configured
 * with a combo service.
 *
 * For dynamic loading.
 *
 * @property combine
 * @type boolean
 * @default true if 'base' is not supplied, false if it is.
 */

/**
 * A list of modules that should never be dynamically loaded
 *
 * @property ignore
 * @type string[]
 */

/**
 * A list of modules that should always be loaded when required, even if already 
 * present on the page.
 *
 * @property force
 * @type string[]
 */

/**
 * Node or id for a node that should be used as the insertion point for new nodes
 * For dynamic loading.
 *
 * @property insertBefore
 * @type string
 */

/**
 * charset for dynamic nodes
 * @property charset
 * @type string
 * @deprecated use jsAttributes cssAttributes
 */

/**
 * Object literal containing attributes to add to dynamically loaded script nodes.
 * @property jsAttributes
 * @type string
 */

/**
 * Object literal containing attributes to add to dynamically loaded link nodes.
 * @property cssAttributes
 * @type string
 */

/**
 * Number of milliseconds before a timeout occurs when dynamically 
 * loading nodes. If not set, there is no timeout.
 * @property timeout
 * @type int
 */

/**
 * Callback for the 'CSSComplete' event.  When dynamically loading YUI 
 * components with CSS, this property fires when the CSS is finished
 * loading but script loading is still ongoing.  This provides an
 * opportunity to enhance the presentation of a loading page a little
 * bit before the entire loading process is done.
 *
 * @property onCSS
 * @type function
 */

/**
 * A hash of module definitions to add to the list of YUI components.  
 * These components can then be dynamically loaded side by side with
 * YUI via the use() method. This is a hash, the key is the module
 * name, and the value is an object literal specifying the metdata
 * for the module.  * See Loader.addModule for the supported module
 * metadata fields.  Also @see groups, which provides a way to
 * configure the base and combo spec for a 
 * <code>
 * modules: {
 * &nbsp; mymod1: {
 * &nbsp;   requires: ['node'],
 * &nbsp;   fullpath: 'http://myserver.mydomain.com/mymod1/mymod1.js'
 * &nbsp; },
 * &nbsp; mymod2: {
 * &nbsp;   requires: ['mymod1'],
 * &nbsp;   fullpath: 'http://myserver.mydomain.com/mymod2/mymod2.js'
 * &nbsp; }
 * }
 * </code>
 *
 * @property modules
 * @type object
 */

/**
 * A hash of module group definitions.  It for each group you
 * can specify a list of modules and the base path and
 * combo spec to use when dynamically loading the modules.  @see
 * @see modules for the details about the modules part of the
 * group definition.
 * <code>
 * &nbsp; groups: {
 * &nbsp;     yui2: {
 * &nbsp;         // specify whether or not this group has a combo service
 * &nbsp;         combine: true,
 * &nbsp;
 * &nbsp;         // the base path for non-combo paths
 * &nbsp;         base: 'http://yui.yahooapis.com/2.8.0r4/build/',
 * &nbsp;
 * &nbsp;         // the path to the combo service
 * &nbsp;         comboBase: 'http://yui.yahooapis.com/combo?',
 * &nbsp;
 * &nbsp;         // a fragment to prepend to the path attribute when
 * &nbsp;         // when building combo urls
 * &nbsp;         root: '2.8.0r4/build/',
 * &nbsp;
 * &nbsp;         // the module definitions
 * &nbsp;         modules:  {
 * &nbsp;             yui2_yde: {
 * &nbsp;                 path: "yahoo-dom-event/yahoo-dom-event.js"
 * &nbsp;             },
 * &nbsp;             yui2_anim: {
 * &nbsp;                 path: "animation/animation.js",
 * &nbsp;                 requires: ['yui2_yde']
 * &nbsp;             }
 * &nbsp;         }
 * &nbsp;     }
 * &nbsp; }
 * </code>
 * @property modules
 * @type object
 */
 
/**
 * The loader 'path' attribute to the loader itself.  This is combined
 * with the 'base' attribute to dynamically load the loader component
 * when boostrapping with the get utility alone.
 *
 * @property loaderPath
 * @type string
 * @default loader/loader-min.js
 */

/**
 * Specifies whether or not YUI().use(...) will attempt to load CSS
 * resources at all.  Any truthy value will cause CSS dependencies
 * to load when fetching script.  The special value 'force' will 
 * cause CSS dependencies to be loaded even if no script is needed.
 *
 * @property fetchCSS
 * @type boolean|string
 * @default true
 */

/**
 * The default gallery version to build gallery module urls
 * @property gallery
 * @type string
 * @since 3.1.0
 */

/**
 * The default YUI 2 version to build yui2 module urls.  This is for
 * intrinsic YUI 2 support via the 2in3 project.  Also @see the '2in3'
 * config for pulling different revisions of the wrapped YUI 2 
 * modules.
 * @since 3.1.0
 * @property yui2 
 * @type string
 * @default 2.8.0
 */

/**
 * The 2in3 project is a deployment of the various versions of YUI 2
 * deployed as first-class YUI 3 modules.  Eventually, the wrapper
 * for the modules will change (but the underlying YUI 2 code will
 * be the same), and you can select a particular version of
 * the wrapper modules via this config.
 * @since 3.1.0
 * @property 2in3
 * @type string
 * @default 1
 */

/**
 * Alternative console log function for use in environments without
 * a supported native console.
 * @since 3.1.0
 * @property logFn
 * @type Function
 */
YUI.add('yui-base', function(Y) {

/*
 * YUI stub
 * @module yui
 * @submodule yui-base
 */
/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */
(function() {
/**
 * Provides the language utilites and extensions used by the library
 * @class Lang
 * @static
 */
Y.Lang    = Y.Lang || {};

var L     = Y.Lang, 

ARRAY     = 'array',
BOOLEAN   = 'boolean',
DATE      = 'date',
ERROR     = 'error',
FUNCTION  = 'function',
NUMBER    = 'number',
NULL      = 'null',
OBJECT    = 'object',
REGEX     = 'regexp',
STRING    = 'string',
TOSTRING  = Object.prototype.toString,
UNDEFINED = 'undefined',

TYPES     = {
    'undefined'         : UNDEFINED,
    'number'            : NUMBER,
    'boolean'           : BOOLEAN,
    'string'            : STRING,
    '[object Function]' : FUNCTION,
    '[object RegExp]'   : REGEX,
    '[object Array]'    : ARRAY,
    '[object Date]'     : DATE,
    '[object Error]'    : ERROR 
},

TRIMREGEX = /^\s+|\s+$/g,
EMPTYSTRING = '';

/**
 * Determines whether or not the provided item is an array.
 * Returns false for array-like collections such as the
 * function arguments collection or HTMLElement collection
 * will return false.  You can use @see Array.test if you 
 * want to
 * @method isArray
 * @static
 * @param o The object to test
 * @return {boolean} true if o is an array
 */
L.isArray = function(o) { 
    return L.type(o) === ARRAY;
};

/**
 * Determines whether or not the provided item is a boolean
 * @method isBoolean
 * @static
 * @param o The object to test
 * @return {boolean} true if o is a boolean
 */
L.isBoolean = function(o) {
    return typeof o === BOOLEAN;
};

/**
 * Determines whether or not the provided item is a function
 * Note: Internet Explorer thinks certain functions are objects:
 *
 * var obj = document.createElement("object");
 * Y.Lang.isFunction(obj.getAttribute) // reports false in IE
 *
 * var input = document.createElement("input"); // append to body
 * Y.Lang.isFunction(input.focus) // reports false in IE
 *
 * You will have to implement additional tests if these functions
 * matter to you.
 *
 * @method isFunction
 * @static
 * @param o The object to test
 * @return {boolean} true if o is a function
 */
L.isFunction = function(o) {
    return L.type(o) === FUNCTION;
};
    
/**
 * Determines whether or not the supplied item is a date instance
 * @method isDate
 * @static
 * @param o The object to test
 * @return {boolean} true if o is a date
 */
L.isDate = function(o) {
    // return o instanceof Date;
    return L.type(o) === DATE && o.toString() !== 'Invalid Date' && !isNaN(o);
};

/**
 * Determines whether or not the provided item is null
 * @method isNull
 * @static
 * @param o The object to test
 * @return {boolean} true if o is null
 */
L.isNull = function(o) {
    return o === null;
};
    
/**
 * Determines whether or not the provided item is a legal number
 * @method isNumber
 * @static
 * @param o The object to test
 * @return {boolean} true if o is a number
 */
L.isNumber = function(o) {
    return typeof o === NUMBER && isFinite(o);
};
  
/**
 * Determines whether or not the provided item is of type object
 * or function
 * @method isObject
 * @static
 * @param o The object to test
 * @param failfn {boolean} fail if the input is a function
 * @return {boolean} true if o is an object
 */  
L.isObject = function(o, failfn) {
    var t = typeof o;
    return (o && (t === OBJECT || (!failfn && (t === FUNCTION || L.isFunction(o))))) || false;
};
    
/**
 * Determines whether or not the provided item is a string
 * @method isString
 * @static
 * @param o The object to test
 * @return {boolean} true if o is a string
 */
L.isString = function(o) {
    return typeof o === STRING;
};
    
/**
 * Determines whether or not the provided item is undefined
 * @method isUndefined
 * @static
 * @param o The object to test
 * @return {boolean} true if o is undefined
 */
L.isUndefined = function(o) {
    return typeof o === UNDEFINED;
};

/**
 * Returns a string without any leading or trailing whitespace.  If 
 * the input is not a string, the input will be returned untouched.
 * @method trim
 * @static
 * @param s {string} the string to trim
 * @return {string} the trimmed string
 */
L.trim = function(s){
    try {
        return s.replace(TRIMREGEX, EMPTYSTRING);
    } catch(e) {
        return s;
    }
};

/**
 * A convenience method for detecting a legitimate non-null value.
 * Returns false for null/undefined/NaN, true for other values, 
 * including 0/false/''
 * @method isValue
 * @static
 * @param o The item to test
 * @return {boolean} true if it is not null/undefined/NaN || false
 */
L.isValue = function(o) {
    var t = L.type(o);
    switch (t) {
        case NUMBER:
            return isFinite(o);
        case NULL:
        case UNDEFINED:
            return false;
        default:
            return !!(t);
    }
};

/**
 * Returns a string representing the type of the item passed in.
 * Known issues:
 *    typeof HTMLElementCollection returns function in Safari, but
 *    Y.type() reports object, which could be a good thing --
 *    but it actually caused the logic in Y.Lang.isObject to fail.
 * @method type
 * @param o the item to test
 * @return {string} the detected type
 */
L.type = function (o) {
    return  TYPES[typeof o] || TYPES[TOSTRING.call(o)] || (o ? OBJECT : NULL);
};

})();

/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

(function() {

var L = Y.Lang, Native = Array.prototype, LENGTH = 'length',

/**
 * Adds the following array utilities to the YUI instance.  Additional
 * array helpers can be found in the collection component.
 * @class Array
 */

/** 
 * Y.Array(o) returns an array:
 * - Arrays are return unmodified unless the start position is specified.
 * - "Array-like" collections (@see Array.test) are converted to arrays
 * - For everything else, a new array is created with the input as the sole item
 * - The start position is used if the input is or is like an array to return
 *   a subset of the collection.
 *
 *   //TODO this will not automatically convert elements that are also collections
 *   such as forms and selects.  Passing true as the third param will
 *   force a conversion.
 *
 * @method ()
 * @static
 *   @param o the item to arrayify
 *   @param i {int} if an array or array-like, this is the start index
 *   @param arraylike {boolean} if true, it forces the array-like fork.  This
 *   can be used to avoid multiple Array.test calls.
 *   @return {Array} the resulting array
 */
YArray = function(o, startIdx, arraylike) {
    var t = (arraylike) ? 2 : YArray.test(o), 
        l, a, start = startIdx || 0;

    if (t) {
        // IE errors when trying to slice HTMLElement collections
        try {
            return Native.slice.call(o, start);
        } catch(e) {
            a = [];
            l = o.length;
            for (; start<l; start++) {
                a.push(o[start]);
            }
            return a;
        }
    } else {
        return [o];
    }
};

Y.Array = YArray;

/** 
 * Evaluates the input to determine if it is an array, array-like, or 
 * something else.  This is used to handle the arguments collection 
 * available within functions, and HTMLElement collections
 *
 * @method test
 * @static
 *
 * @todo current implementation (intenionally) will not implicitly 
 * handle html elements that are array-like (forms, selects, etc).  
 *
 * @return {int} a number indicating the results:
 * 0: Not an array or an array-like collection
 * 1: A real array. 
 * 2: array-like collection.
 */
YArray.test = function(o) {
    var r = 0;
    if (L.isObject(o)) {
        if (L.isArray(o)) {
            r = 1; 
        } else {
            try {
                // indexed, but no tagName (element) or alert (window), or functions without apply/call (Safari HTMLElementCollection bug)
                if ((LENGTH in o) && !o.tagName && !o.alert && !o.apply) {
                    r = 2;
                }
                    
            } catch(e) {}
        }
    }
    return r;
};

/**
 * Executes the supplied function on each item in the array.
 * @method each
 * @param a {Array} the array to iterate
 * @param f {Function} the function to execute on each item.  The 
 * function receives three arguments: the value, the index, the full array.
 * @param o Optional context object
 * @static
 * @return {YUI} the YUI instance
 */
YArray.each = (Native.forEach) ?
    function (a, f, o) { 
        Native.forEach.call(a || [], f, o || Y);
        return Y;
    } :
    function (a, f, o) { 
        var l = (a && a.length) || 0, i;
        for (i = 0; i < l; i=i+1) {
            f.call(o || Y, a[i], i, a);
        }
        return Y;
    };

/**
 * Returns an object using the first array as keys, and
 * the second as values.  If the second array is not
 * provided the value is set to true for each.
 * @method hash
 * @static
 * @param k {Array} keyset
 * @param v {Array} optional valueset
 * @return {object} the hash
 */
YArray.hash = function(k, v) {
    var o = {}, l = k.length, vl = v && v.length, i;
    for (i=0; i<l; i=i+1) {
        if (k[i]) {
            o[k[i]] = (vl && vl > i) ? v[i] : true;
        }
    }

    return o;
};

/**
 * Returns the index of the first item in the array
 * that contains the specified value, -1 if the
 * value isn't found.
 * @method indexOf
 * @static
 * @param a {Array} the array to search
 * @param val the value to search for
 * @return {int} the index of the item that contains the value or -1
 */
YArray.indexOf = (Native.indexOf) ?
    function(a, val) {
        return Native.indexOf.call(a, val);
    } :
    function(a, val) {
        for (var i=0; i<a.length; i=i+1) {
            if (a[i] === val) {
                return i;
            }
        }

        return -1;
    };

/**
 * Numeric sort convenience function.
 * Y.ArrayAssert.itemsAreEqual([1, 2, 3], [3, 1, 2].sort(Y.Array.numericSort));
 * @method numericSort
 */
YArray.numericSort = function(a, b) { 
    return (a - b); 
};

/**
 * Executes the supplied function on each item in the array.
 * Returning true from the processing function will stop the 
 * processing of the remaining
 * items.
 * @method some
 * @param a {Array} the array to iterate
 * @param f {Function} the function to execute on each item. The function 
 * receives three arguments: the value, the index, the full array.
 * @param o Optional context object
 * @static
 * @return {boolean} true if the function returns true on
 * any of the items in the array
 */
YArray.some = (Native.some) ?
    function (a, f, o) { 
        return Native.some.call(a, f, o);
    } :
    function (a, f, o) {
        var l = a.length, i;
        for (i=0; i<l; i=i+1) {
            if (f.call(o, a[i], i, a)) {
                return true;
            }
        }
        return false;
    };

})();
/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

/**
 * A simple FIFO queue.  Items are added to the Queue with add(1..n items) and
 * removed using next().
 *
 * @class Queue
 * @param item* {MIXED} 0..n items to seed the queue
 */
function Queue() {
    this._init();
    this.add.apply(this, arguments);
}

Queue.prototype = {
    /**
     * Initialize the queue
     *
     * @method _init
     * @protected
     */
    _init: function () {
        /**
         * The collection of enqueued items
         *
         * @property _q
         * @type {Array}
         * @protected
         */
        this._q = [];
    },

    /**
     * Get the next item in the queue. FIFO support
     *
     * @method next
     * @return {MIXED} the next item in the queue
     */
    next: function () {
        return this._q.shift();
    },

    /**
     * Get the last in the queue. LIFO support
     *
     * @method last
     * @return {MIXED} the last item in the queue
     */
    last: function () {
        return this._q.pop();
    },

    /**
     * Add 0..n items to the end of the queue
     *
     * @method add
     * @param item* {MIXED} 0..n items
     */
    add: function () {
        Y.Array.each(Y.Array(arguments,0,true),function (fn) {
            this._q.push(fn);
        },this);

        return this;
    },

    /**
     * Returns the current number of queued items
     *
     * @method size
     * @return {Number}
     */
    size: function () {
        return this._q.length;
    }
};

Y.Queue = Queue;

YUI.Env._loaderQueue = YUI.Env._loaderQueue || new Queue();


/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

(function() {

var L = Y.Lang, 
DELIMITER = '__',
// FROZEN = {
//     'prototype': 1,
//     '_yuid': 1
// },

/*
 * IE will not enumerate native functions in a derived object even if the
 * function was overridden.  This is a workaround for specific functions 
 * we care about on the Object prototype. 
 * @property _iefix
 * @for YUI
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @private
 */
_iefix = function(r, s) {
    var fn = s.toString;
    if (L.isFunction(fn) && fn != Object.prototype.toString) {
        r.toString = fn;
    }
};


/**
 * Returns a new object containing all of the properties of
 * all the supplied objects.  The properties from later objects
 * will overwrite those in earlier objects.  Passing in a
 * single object will create a shallow copy of it.  For a deep
 * copy, use clone.
 * @method merge
 * @for YUI
 * @param arguments {Object*} the objects to merge
 * @return {object} the new merged object
 */
Y.merge = function() {
    var a = arguments, o = {}, i, l = a.length;
    for (i=0; i<l; i=i+1) {
        Y.mix(o, a[i], true);
    }
    return o;
};
   
/**
 * Applies the supplier's properties to the receiver.  By default
 * all prototype and static propertes on the supplier are applied
 * to the corresponding spot on the receiver.  By default all
 * properties are applied, and a property that is already on the
 * reciever will not be overwritten.  The default behavior can
 * be modified by supplying the appropriate parameters.
 *
 * //TODO add constants for the modes
 *
 * @method mix
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param ov {boolean} if true, properties already on the receiver
 * will be overwritten if found on the supplier.
 * @param wl {string[]} a whitelist.  If supplied, only properties in 
 * this list will be applied to the receiver.
 * @param {int} mode what should be copies, and to where
 *        default(0): object to object
 *        1: prototype to prototype (old augment)
 *        2: prototype to prototype and object props (new augment)
 *        3: prototype to object
 *        4: object to prototype
 * @param merge {boolean/int} merge objects instead of overwriting/ignoring.  A value of 2
 * will skip array merge
 * Used by Y.aggregate
 * @return {object} the augmented object
 */
Y.mix = function(r, s, ov, wl, mode, merge) {

    if (!s||!r) {
        return r || Y;
    }

    if (mode) {
        switch (mode) {
            case 1: // proto to proto
                return Y.mix(r.prototype, s.prototype, ov, wl, 0, merge);
            case 2: // object to object and proto to proto
                Y.mix(r.prototype, s.prototype, ov, wl, 0, merge);
                break; // pass through 
            case 3: // proto to static
                return Y.mix(r, s.prototype, ov, wl, 0, merge);
            case 4: // static to proto
                return Y.mix(r.prototype, s, ov, wl, 0, merge);
            default:  // object to object is what happens below
        }
    }

    // Maybe don't even need this wl && wl.length check anymore??
    var i, l, p, type;

    if (wl && wl.length) {
        for (i = 0, l = wl.length; i < l; ++i) {
            p = wl[i];
            type = L.type(r[p]);
            if (s.hasOwnProperty(p)) {
                if (merge && type == "object") {
                    Y.mix(r[p], s[p]);
                } else if (ov || !(p in r)) {
                    r[p] = s[p];
                }            
            }
        }
    } else {
        for (i in s) { 
            // if (s.hasOwnProperty(i) && !(i in FROZEN)) {
            if (s.hasOwnProperty(i)) {
                // check white list if it was supplied
                // if the receiver has this property, it is an object,
                // and merge is specified, merge the two objects.
                if (merge && L.isObject(r[i], true)) {
                    Y.mix(r[i], s[i], ov, wl, 0, true); // recursive
                // otherwise apply the property only if overwrite
                // is specified or the receiver doesn't have one.
                } else if (ov || !(i in r)) {
                    r[i] = s[i];
                }
                // if merge is specified and the receiver is an array,
                // append the array item
                // } else if (arr) {
                    // r.push(s[i]);
                // }
            }
        }
    
        if (Y.UA.ie) {
            _iefix(r, s);
        }
    }

    return r;
};

/**
 * Returns a wrapper for a function which caches the
 * return value of that function, keyed off of the combined 
 * argument values.
 * @function cached
 * @param source {function} the function to memoize
 * @param cache an optional cache seed
 * @param refetch if supplied, this value is tested against the cached
 * value.  If the values are equal, the wrapped function is executed again.
 * @return {Function} the wrapped function
 */
Y.cached = function(source, cache, refetch){
    cache = cache || {};

    return function(arg1, arg2) {

        var k = (arg2) ? Array.prototype.join.call(arguments, DELIMITER) : arg1;

        if (!(k in cache) || (refetch && cache[k] == refetch)) {
            cache[k] = source.apply(source, arguments);
        }

        return cache[k];
    };

};

})();

/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */
(function() {

/**
 * Adds the following Object utilities to the YUI instance
 * @class Object
 */

/**
 * Y.Object(o) returns a new object based upon the supplied object.  
 * //TODO Use native Object.create() when available
 * @method ()
 * @static
 * @param o the supplier object
 * @return {Object} the new object
 */
Y.Object = function(o) {
    var F = function() {};
    F.prototype = o;
    return new F();
}; 

var O = Y.Object,

owns = function(o, k) {
    return o && o.hasOwnProperty && o.hasOwnProperty(k);
},

UNDEFINED = undefined,

/**
 * Extracts the keys, values, or size from an object
 * 
 * @method _extract
 * @param o the object
 * @param what what to extract (0: keys, 1: values, 2: size)
 * @return {boolean|Array} the extracted info
 * @static
 * @private
 */
_extract = function(o, what) {
    var count = (what === 2), out = (count) ? 0 : [], i;

    for (i in o) {
        if (owns(o, i)) {
            if (count) {
                out++;
            } else {
                out.push((what) ? o[i] : i);
            }
        }
    }

    return out;
};

/**
 * Returns an array containing the object's keys
 * //TODO use native Object.keys() if available
 * @method keys
 * @static
 * @param o an object
 * @return {string[]} the keys
 */
O.keys = function(o) {
    return _extract(o);
};

/**
 * Returns an array containing the object's values
 * //TODO use native Object.values() if available
 * @method values
 * @static
 * @param o an object
 * @return {Array} the values
 */
O.values = function(o) {
    return _extract(o, 1);
};

/**
 * Returns the size of an object
 * //TODO use native Object.size() if available
 * @method size
 * @static
 * @param o an object
 * @return {int} the size
 */
O.size = function(o) {
    return _extract(o, 2);
};

/**
 * Returns true if the object contains a given key
 * @method hasKey
 * @static
 * @param o an object
 * @param k the key to query
 * @return {boolean} true if the object contains the key
 */
O.hasKey = owns;
/**
 * Returns true if the object contains a given value
 * @method hasValue
 * @static
 * @param o an object
 * @param v the value to query
 * @return {boolean} true if the object contains the value
 */
O.hasValue = function(o, v) {
    return (Y.Array.indexOf(O.values(o), v) > -1);
};

/**
 * Determines whether or not the property was added
 * to the object instance.  Returns false if the property is not present
 * in the object, or was inherited from the prototype.
 *
 * @method owns
 * @static
 * @param o {any} The object being testing
 * @param p {string} the property to look for
 * @return {boolean} true if the object has the property on the instance
 */
O.owns = owns;

/**
 * Executes a function on each item. The function
 * receives the value, the key, and the object
 * as paramters (in that order).
 * @method each
 * @static
 * @param o the object to iterate
 * @param f {Function} the function to execute on each item. The function 
 * receives three arguments: the value, the the key, the full object.
 * @param c the execution context
 * @param proto {boolean} include proto
 * @return {YUI} the YUI instance
 */
O.each = function (o, f, c, proto) {
    var s = c || Y, i;

    for (i in o) {
        if (proto || owns(o, i)) {
            f.call(s, o[i], i, o);
        }
    }
    return Y;
};

/*
 * Executes a function on each item, but halts if the
 * function returns true.  The function
 * receives the value, the key, and the object
 * as paramters (in that order).
 * @method some
 * @static
 * @param o the object to iterate
 * @param f {Function} the function to execute on each item. The function 
 * receives three arguments: the value, the the key, the full object.
 * @param c the execution context
 * @param proto {boolean} include proto
 * @return {boolean} true if any execution of the function returns true, false otherwise
 */
O.some = function (o, f, c, proto) {
    var s = c || Y, i;

    for (i in o) {
        if (proto || owns(o, i)) {
            if (f.call(s, o[i], i, o)) {
                return true;
            }
        }
    }
    return false;
};

/**
 * Retrieves the sub value at the provided path,
 * from the value object provided.
 *
 * @method getValue
 * @param o The object from which to extract the property value
 * @param path {Array} A path array, specifying the object traversal path
 * from which to obtain the sub value.
 * @return {Any} The value stored in the path, undefined if not found,
 * undefined if the source is not an object.  Returns the source object 
 * if an empty path is provided.
 */
O.getValue = function (o, path) {
    if (!Y.Lang.isObject(o)) {
        return UNDEFINED;
    }

    var i,
        p = Y.Array(path), 
        l = p.length;

    for (i=0; o !== UNDEFINED && i < l; i++) {
        o = o[p[i]];
    }

    return o;
};

/**
 * Sets the sub-attribute value at the provided path on the 
 * value object.  Returns the modified value object, or 
 * undefined if the path is invalid.
 *
 * @method setValue
 * @param o             The object on which to set the sub value.
 * @param path {Array}  A path array, specifying the object traversal path
 *                      at which to set the sub value.
 * @param val {Any}     The new value for the sub-attribute.
 * @return {Object}     The modified object, with the new sub value set, or 
 *                      undefined, if the path was invalid.
 */
O.setValue = function(o, path, val) {
    var i, 
        p       = Y.Array(path), 
        leafIdx = p.length-1, 
        ref     = o;

    if (leafIdx >= 0) {
        for (i=0; ref !== UNDEFINED && i < leafIdx; i++) {
            ref = ref[p[i]];
        }

        if (ref !== UNDEFINED) {
            ref[p[i]] = val;
        } else {
            return UNDEFINED;
        }
    }

    return o;
};

})();

/**
 * The YUI module contains the components required for building the YUI seed file.
 * This includes the script loading mechanism, a simple queue, and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

/**
 * YUI user agent detection.
 * Do not fork for a browser if it can be avoided.  Use feature detection when
 * you can.  Use the user agent as a last resort.  UA stores a version
 * number for the browser engine, 0 otherwise.  This value may or may not map
 * to the version number of the browser using the engine.  The value is 
 * presented as a float so that it can easily be used for boolean evaluation 
 * as well as for looking for a particular range of versions.  Because of this, 
 * some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 
 * reports 1.8).
 * @class UA
 * @static
 */
Y.UA = function() {

    var numberify = function(s) {
            var c = 0;
            return parseFloat(s.replace(/\./g, function() {
                return (c++ == 1) ? '' : '.';
            }));
        },

        win = Y.config.win,
    
        nav = win && win.navigator,

        o = {

        /**
         * Internet Explorer version number or 0.  Example: 6
         * @property ie
         * @type float
         * @static
         */
        ie: 0,

        /**
         * Opera version number or 0.  Example: 9.2
         * @property opera
         * @type float
         * @static
         */
        opera: 0,

        /**
         * Gecko engine revision number.  Will evaluate to 1 if Gecko 
         * is detected but the revision could not be found. Other browsers
         * will be 0.  Example: 1.8
         * <pre>
         * Firefox 1.0.0.4: 1.7.8   <-- Reports 1.7
         * Firefox 1.5.0.9: 1.8.0.9 <-- 1.8
         * Firefox 2.0.0.3: 1.8.1.3 <-- 1.81
         * Firefox 3.0   <-- 1.9
         * Firefox 3.5   <-- 1.91
         * </pre>
         * @property gecko
         * @type float
         * @static
         */
        gecko: 0,

        /**
         * AppleWebKit version.  KHTML browsers that are not WebKit browsers 
         * will evaluate to 1, other browsers 0.  Example: 418.9
         * <pre>
         * Safari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the 
         *                                   latest available for Mac OSX 10.3.
         * Safari 2.0.2:         416     <-- hasOwnProperty introduced
         * Safari 2.0.4:         418     <-- preventDefault fixed
         * Safari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run
         *                                   different versions of webkit
         * Safari 2.0.4 (419.3): 419     <-- Tiger installations that have been
         *                                   updated, but not updated
         *                                   to the latest patch.
         * Webkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG
         *                                   and many major issues fixed).
         * Safari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update
         *                                   from 2.x via the 10.4.11 OS patch
         * Webkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.
         *                                   yahoo.com user agent hack removed.
         * </pre>
         * http://en.wikipedia.org/wiki/Safari_version_history
         * @property webkit
         * @type float
         * @static
         */
        webkit: 0,

        /**
         * Chrome will be detected as webkit, but this property will also
         * be populated with the Chrome version number
         * @property chrome
         * @type float
         * @static
         */
        chrome: 0,

        /**
         * The mobile property will be set to a string containing any relevant
         * user agent information when a modern mobile browser is detected.
         * Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series
         * devices with the WebKit-based browser, and Opera Mini.  
         * @property mobile 
         * @type string
         * @static
         */
        mobile: null,

        /**
         * Adobe AIR version number or 0.  Only populated if webkit is detected.
         * Example: 1.0
         * @property air
         * @type float
         */
        air: 0,

        /**
         * Google Caja version number or 0.
         * @property caja
         * @type float
         */
        caja: nav && nav.cajaVersion,

        /**
         * Set to true if the page appears to be in SSL
         * @property secure
         * @type boolean
         * @static
         */
        secure: false,

        /**
         * The operating system.  Currently only detecting windows or macintosh
         * @property os
         * @type string
         * @static
         */
        os: null
        
    },

    ua = nav && nav.userAgent, 

    loc = win && win.location,

    href = loc && loc.href,
    
    m;

    o.secure = href && (href.toLowerCase().indexOf("https") === 0);

    if (ua) {

        if ((/windows|win32/i).test(ua)) {
            o.os = 'windows';
        } else if ((/macintosh/i).test(ua)) {
            o.os = 'macintosh';
        } else if ((/rhino/i).test(ua)) {
            o.os = 'rhino';
        }

        // Modern KHTML browsers should qualify as Safari X-Grade
        if ((/KHTML/).test(ua)) {
            o.webkit=1;
        }
        // Modern WebKit browsers are at least X-Grade
        m=ua.match(/AppleWebKit\/([^\s]*)/);
        if (m&&m[1]) {
            o.webkit=numberify(m[1]);

            // Mobile browser check
            if (/ Mobile\//.test(ua)) {
                o.mobile = "Apple"; // iPhone or iPod Touch
            } else {
                m=ua.match(/NokiaN[^\/]*|Android \d\.\d|webOS\/\d\.\d/);
                if (m) {
                    o.mobile = m[0]; // Nokia N-series, Android, webOS, ex: NokiaN95
                }
            }

            m=ua.match(/Chrome\/([^\s]*)/);
            if (m && m[1]) {
                o.chrome = numberify(m[1]); // Chrome
            } else {
                m=ua.match(/AdobeAIR\/([^\s]*)/);
                if (m) {
                    o.air = m[0]; // Adobe AIR 1.0 or better
                }
            }
        }

        if (!o.webkit) { // not webkit
            // //todo check Opera/8.01 (J2ME/MIDP; Opera Mini/2.0.4509/1316; fi; U; ssr)
            m=ua.match(/Opera[\s\/]([^\s]*)/);
            if (m&&m[1]) {
                o.opera=numberify(m[1]);
                m=ua.match(/Opera Mini[^;]*/);
                if (m) {
                    o.mobile = m[0]; // ex: Opera Mini/2.0.4509/1316
                }
            } else { // not opera or webkit
                m=ua.match(/MSIE\s([^;]*)/);
                if (m&&m[1]) {
                    o.ie=numberify(m[1]);
                } else { // not opera, webkit, or ie
                    m=ua.match(/Gecko\/([^\s]*)/);
                    if (m) {
                        o.gecko=1; // Gecko detected, look for revision
                        m=ua.match(/rv:([^\s\)]*)/);
                        if (m&&m[1]) {
                            o.gecko=numberify(m[1]);
                        }
                    }
                }
            }
        }
    }
    
    return o;
}();


}, '3.1.1' );
YUI.add('get', function(Y) {

(function() {

/**
 * Provides a mechanism to fetch remote resources and
 * insert them into a document.
 * @module yui
 * @submodule get
 */

var ua         = Y.UA, 
    L          = Y.Lang,
    TYPE_JS    = "text/javascript",
    TYPE_CSS   = "text/css",
    STYLESHEET = "stylesheet";

/**
 * Fetches and inserts one or more script or link nodes into the document 
 * @class Get
 * @static
 */
Y.Get = function() {

    /**
     * hash of queues to manage multiple requests
     * @property queues
     * @private
     */
    var _get, _purge, _track,

    queues = {}, 
        
    /**
     * queue index used to generate transaction ids
     * @property qidx
     * @type int
     * @private
     */
    qidx = 0, 
        
    /**
     * interal property used to prevent multiple simultaneous purge 
     * processes
     * @property purging
     * @type boolean
     * @private
     */
    purging,

    
    /** 
     * Generates an HTML element, this is not appended to a document
     * @method _node
     * @param type {string} the type of element
     * @param attr {string} the attributes
     * @param win {Window} optional window to create the element in
     * @return {HTMLElement} the generated node
     * @private
     */
    _node = function(type, attr, win) {
        var w = win || Y.config.win, d=w.document, n=d.createElement(type),
            i;

        for (i in attr) {
            if (attr[i] && attr.hasOwnProperty(i)) {
                n.setAttribute(i, attr[i]);
            }
        }

        return n;
    },

    /**
     * Generates a link node
     * @method _linkNode
     * @param url {string} the url for the css file
     * @param win {Window} optional window to create the node in
     * @param attributes optional attributes collection to apply to the new node
     * @return {HTMLElement} the generated node
     * @private
     */
    _linkNode = function(url, win, attributes) {
        var o = {
            id:   Y.guid(),
            type: TYPE_CSS,
            rel:  STYLESHEET,
            href: url
        };
        if (attributes) {
            Y.mix(o, attributes);
        }
        return _node("link", o, win);
    },

    /**
     * Generates a script node
     * @method _scriptNode
     * @param url {string} the url for the script file
     * @param win {Window} optional window to create the node in
     * @param attributes optional attributes collection to apply to the new node
     * @return {HTMLElement} the generated node
     * @private
     */
    _scriptNode = function(url, win, attributes) {
        var o = {
            id:   Y.guid(),
            type: TYPE_JS
        };

        if (attributes) {
            Y.mix(o, attributes);
        }

        o.src = url;

        return _node("script", o, win);
    },

    /**
     * Returns the data payload for callback functions
     * @method _returnData
     * @private
     */
    _returnData = function(q, msg, result) {
        return {
                tId: q.tId,
                win: q.win,
                data: q.data,
                nodes: q.nodes,
                msg: msg,
                statusText: result,
                purge: function() {
                    _purge(this.tId);
                }
            };
    },

    /**
     * The transaction is finished
     * @method _end
     * @param id {string} the id of the request
     * @private
     */
    _end = function(id, msg, result) {
        var q = queues[id], sc;
        if (q && q.onEnd) {
            sc = q.context || q;
            q.onEnd.call(sc, _returnData(q, msg, result));
        }
    },

    /*
     * The request failed, execute fail handler with whatever
     * was accomplished.  There isn't a failure case at the
     * moment unless you count aborted transactions
     * @method _fail
     * @param id {string} the id of the request
     * @private
     */
    _fail = function(id, msg) {

        var q = queues[id], sc;
        if (q.timer) {
            // q.timer.cancel();
            clearTimeout(q.timer);
        }

        // execute failure callback
        if (q.onFailure) {
            sc = q.context || q;
            q.onFailure.call(sc, _returnData(q, msg));
        }

        _end(id, msg, 'failure');
    },

    /**
     * The request is complete, so executing the requester's callback
     * @method _finish
     * @param id {string} the id of the request
     * @private
     */
    _finish = function(id) {
        var q = queues[id], msg, sc;
        if (q.timer) {
            // q.timer.cancel();
            clearTimeout(q.timer);
        }
        q.finished = true;

        if (q.aborted) {
            msg = "transaction " + id + " was aborted";
            _fail(id, msg);
            return;
        }

        // execute success callback
        if (q.onSuccess) {
            sc = q.context || q;
            q.onSuccess.call(sc, _returnData(q));
        }

        _end(id, msg, 'OK');
    },

    /**
     * Timeout detected
     * @method _timeout
     * @param id {string} the id of the request
     * @private
     */
    _timeout = function(id) {
        var q = queues[id], sc;
        if (q.onTimeout) {
            sc = q.context || q;
            q.onTimeout.call(sc, _returnData(q));
        }

        _end(id, 'timeout', 'timeout');
    },
    

    /**
     * Loads the next item for a given request
     * @method _next
     * @param id {string} the id of the request
     * @param loaded {string} the url that was just loaded, if any
     * @private
     */
    _next = function(id, loaded) {
        var q = queues[id], msg, w, d, h, n, url, s;

        if (q.timer) {
            // q.timer.cancel();
            clearTimeout(q.timer);
        }

        if (q.aborted) {
            msg = "transaction " + id + " was aborted";
            _fail(id, msg);
            return;
        }

        if (loaded) {
            q.url.shift(); 
            if (q.varName) {
                q.varName.shift(); 
            }
        } else {
            // This is the first pass: make sure the url is an array
            q.url = (L.isString(q.url)) ? [q.url] : q.url;
            if (q.varName) {
                q.varName = (L.isString(q.varName)) ? [q.varName] : q.varName;
            }
        }

        w = q.win; 
        d = w.document; 
        h = d.getElementsByTagName("head")[0];

        if (q.url.length === 0) {
            _finish(id);
            return;
        } 

        url = q.url[0];

        // if the url is undefined, this is probably a trailing comma problem in IE
        if (!url) {
            q.url.shift(); 
            return _next(id);
        }


        if (q.timeout) {
            // q.timer = L.later(q.timeout, q, _timeout, id);
            q.timer = setTimeout(function() { 
                _timeout(id);
            }, q.timeout);
        }

        if (q.type === "script") {
            n = _scriptNode(url, w, q.attributes);
        } else {
            n = _linkNode(url, w, q.attributes);
        }

        // track this node's load progress
        _track(q.type, n, id, url, w, q.url.length);

        // add the node to the queue so we can return it to the user supplied callback
        q.nodes.push(n);

        // add it to the head or insert it before 'insertBefore'
        if (q.insertBefore) {
            s = _get(q.insertBefore, id);
            if (s) {
                s.parentNode.insertBefore(n, s);
            }
        } else {
            h.appendChild(n);
        }
        

        // FireFox does not support the onload event for link nodes, so there is
        // no way to make the css requests synchronous. This means that the css 
        // rules in multiple files could be applied out of order in this browser
        // if a later request returns before an earlier one.  Safari too.
        if ((ua.webkit || ua.gecko) && q.type === "css") {
            _next(id, url);
        }
    },

    /**
     * Removes processed queues and corresponding nodes
     * @method _autoPurge
     * @private
     */
    _autoPurge = function() {
        if (purging) {
            return;
        }
        purging = true;

        var i, q;

        for (i in queues) {
            if (queues.hasOwnProperty(i)) {
                q = queues[i];
                if (q.autopurge && q.finished) {
                    _purge(q.tId);
                    delete queues[i];
                }
            }
        }

        purging = false;
    },

    /**
     * Saves the state for the request and begins loading
     * the requested urls
     * @method queue
     * @param type {string} the type of node to insert
     * @param url {string} the url to load
     * @param opts the hash of options for this request
     * @private
     */
    _queue = function(type, url, opts) {
        opts = opts || {};

        var id = "q" + (qidx++), q,
            thresh = opts.purgethreshold || Y.Get.PURGE_THRESH;

        if (qidx % thresh === 0) {
            _autoPurge();
        }

        queues[id] = Y.merge(opts, {
            tId: id,
            type: type,
            url: url,
            finished: false,
            nodes: []
        });

        q           = queues[id];
        q.win       = q.win || Y.config.win;
        q.context   = q.context || q;
        q.autopurge = ("autopurge" in q) ? q.autopurge : 
                      (type === "script") ? true : false;

        q.attributes = q.attributes || {};
        q.attributes.charset = opts.charset || q.attributes.charset || 'utf-8';
        // var charset = opts.charset || q.attributes.charset;
        // if (charset) {
        //     q.attributes.charset = charset;
        // }

        setTimeout(function() {
            _next(id);
        }, 0);

        return {
            tId: id
        };
    };

    /**
     * Detects when a node has been loaded.  In the case of
     * script nodes, this does not guarantee that contained
     * script is ready to use.
     * @method _track
     * @param type {string} the type of node to track
     * @param n {HTMLElement} the node to track
     * @param id {string} the id of the request
     * @param url {string} the url that is being loaded
     * @param win {Window} the targeted window
     * @param qlength the number of remaining items in the queue,
     * including this one
     * @param trackfn {Function} function to execute when finished
     * the default is _next
     * @private
     */
    _track = function(type, n, id, url, win, qlength, trackfn) {
        var f = trackfn || _next;

        // IE supports the readystatechange event for script and css nodes
        // Opera only for script nodes.  Opera support onload for script
        // nodes, but this doesn't fire when there is a load failure.
        // The onreadystatechange appears to be a better way to respond
        // to both success and failure.
        if (ua.ie) {
            n.onreadystatechange = function() {
                var rs = this.readyState;
                if ("loaded" === rs || "complete" === rs) {
                    n.onreadystatechange = null;
                    f(id, url);
                }
            };

        // webkit prior to 3.x is no longer supported
        } else if (ua.webkit) {
            if (type === "script") {
                // Safari 3.x supports the load event for script nodes (DOM2)
                n.addEventListener("load", function() {
                    f(id, url);
                });
            } 

        // FireFox and Opera support onload (but not DOM2 in FF) handlers for
        // script nodes.  Opera, but not FF, supports the onload event for link
        // nodes.
        } else { 
            n.onload = function() {
                f(id, url);
            };

            n.onerror = function(e) {
                _fail(id, e + ": " + url);
            };
        }
    };

    _get = function(nId, tId) {
        var q = queues[tId],
            n = (L.isString(nId)) ? q.win.document.getElementById(nId) : nId;
        if (!n) {
            _fail(tId, "target node not found: " + nId);
        }

        return n;
    };

    /**
     * Removes the nodes for the specified queue
     * @method _purge
     * @private
     */
    _purge = function(tId) {
        var n, l, d, h, s, i, node, attr,
            q = queues[tId];
        if (q) {
            n = q.nodes; 
            l = n.length;
            d = q.win.document;
            h = d.getElementsByTagName("head")[0];

            if (q.insertBefore) {
                s = _get(q.insertBefore, tId);
                if (s) {
                    h = s.parentNode;
                }
            }

            for (i=0; i<l; i=i+1) {
                node = n[i];
                if (node.clearAttributes) {
                    node.clearAttributes();
                } else {
                    for (attr in node) {
                        if (node.hasOwnProperty(attr)) {
                            delete node[attr];
                        }
                    }
                }

                h.removeChild(node);
            }
        }
        q.nodes = [];
    };

    return {

        /**
         * The number of request required before an automatic purge.
         * Can be configured via the 'purgethreshold' config
         * property PURGE_THRESH
         * @static
         * @type int
         * @default 20
         * @private
         */
        PURGE_THRESH: 20,

        /**
         * Called by the the helper for detecting script load in Safari
         * @method _finalize
         * @static
         * @param id {string} the transaction id
         * @private
         */
        _finalize: function(id) {
            setTimeout(function() {
                _finish(id);
            }, 0);
        },

        /**
         * Abort a transaction
         * @method abort
         * @static
         * @param o {string|object} Either the tId or the object returned from
         * script() or css()
         */
        abort: function(o) {
            var id = (L.isString(o)) ? o : o.tId,
                q = queues[id];
            if (q) {
                q.aborted = true;
            }
        }, 

        /**
         * Fetches and inserts one or more script nodes into the head
         * of the current document or the document in a specified window.
         *
         * @method script
         * @static
         * @param url {string|string[]} the url or urls to the script(s)
         * @param opts {object} Options: 
         * <dl>
         * <dt>onSuccess</dt>
         * <dd>
         * callback to execute when the script(s) are finished loading
         * The callback receives an object back with the following
         * data:
         * <dl>
         * <dt>win</dt>
         * <dd>the window the script(s) were inserted into</dd>
         * <dt>data</dt>
         * <dd>the data object passed in when the request was made</dd>
         * <dt>nodes</dt>
         * <dd>An array containing references to the nodes that were
         * inserted</dd>
         * <dt>purge</dt>
         * <dd>A function that, when executed, will remove the nodes
         * that were inserted</dd>
         * <dt>
         * </dl>
         * </dd>
         * <dt>onTimeout</dt>
         * <dd>
         * callback to execute when a timeout occurs.
         * The callback receives an object back with the following
         * data:
         * <dl>
         * <dt>win</dt>
         * <dd>the window the script(s) were inserted into</dd>
         * <dt>data</dt>
         * <dd>the data object passed in when the request was made</dd>
         * <dt>nodes</dt>
         * <dd>An array containing references to the nodes that were
         * inserted</dd>
         * <dt>purge</dt>
         * <dd>A function that, when executed, will remove the nodes
         * that were inserted</dd>
         * <dt>
         * </dl>
         * </dd>
         * <dt>onEnd</dt>
         * <dd>a function that executes when the transaction finishes, regardless of the exit path</dd>
         * <dt>onFailure</dt>
         * <dd>
         * callback to execute when the script load operation fails
         * The callback receives an object back with the following
         * data:
         * <dl>
         * <dt>win</dt>
         * <dd>the window the script(s) were inserted into</dd>
         * <dt>data</dt>
         * <dd>the data object passed in when the request was made</dd>
         * <dt>nodes</dt>
         * <dd>An array containing references to the nodes that were
         * inserted successfully</dd>
         * <dt>purge</dt>
         * <dd>A function that, when executed, will remove any nodes
         * that were inserted</dd>
         * <dt>
         * </dl>
         * </dd>
         * <dt>context</dt>
         * <dd>the execution context for the callbacks</dd>
         * <dt>win</dt>
         * <dd>a window other than the one the utility occupies</dd>
         * <dt>autopurge</dt>
         * <dd>
         * setting to true will let the utilities cleanup routine purge 
         * the script once loaded
         * </dd>
         * <dt>purgethreshold</dt>
         * <dd>
         * The number of transaction before autopurge should be initiated
         * </dd>
         * <dt>data</dt>
         * <dd>
         * data that is supplied to the callback when the script(s) are
         * loaded.
         * </dd>
         * <dt>insertBefore</dt>
         * <dd>node or node id that will become the new node's nextSibling</dd>
         * </dl>
         * <dt>charset</dt>
         * <dd>Node charset, default utf-8 (deprecated, use the attributes config)</dd>
         * <dt>attributes</dt>
         * <dd>An object literal containing additional attributes to add to the link tags</dd>
         * <dt>timeout</dt>
         * <dd>Number of milliseconds to wait before aborting and firing the timeout event</dd>
         * <pre>
         * &nbsp;&nbsp;Y.Get.script(
         * &nbsp;&nbsp;["http://yui.yahooapis.com/2.5.2/build/yahoo/yahoo-min.js",
         * &nbsp;&nbsp;&nbsp;"http://yui.yahooapis.com/2.5.2/build/event/event-min.js"], &#123;
         * &nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;
         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log("won't cause error because Y is the context");
         * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
         * &nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;
         * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
         * &nbsp;&nbsp;&nbsp;&nbsp;onTimeout: function(o) &#123;
         * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
         * &nbsp;&nbsp;&nbsp;&nbsp;data: "foo",
         * &nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, // 10 second timeout
         * &nbsp;&nbsp;&nbsp;&nbsp;context: Y, // make the YUI instance
         * &nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame
         * &nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes
         * &nbsp;&nbsp;&nbsp;&nbsp;purgetheshold: 1 // purge previous transaction before next transaction
         * &nbsp;&nbsp;&#125;);
         * </pre>
         * @return {tId: string} an object containing info about the transaction
         */
        script: function(url, opts) { 
            return _queue("script", url, opts); 
        },

        /**
         * Fetches and inserts one or more css link nodes into the 
         * head of the current document or the document in a specified
         * window.
         * @method css
         * @static
         * @param url {string} the url or urls to the css file(s)
         * @param opts Options: 
         * <dl>
         * <dt>onSuccess</dt>
         * <dd>
         * callback to execute when the css file(s) are finished loading
         * The callback receives an object back with the following
         * data:
         * <dl>win</dl>
         * <dd>the window the link nodes(s) were inserted into</dd>
         * <dt>data</dt>
         * <dd>the data object passed in when the request was made</dd>
         * <dt>nodes</dt>
         * <dd>An array containing references to the nodes that were
         * inserted</dd>
         * <dt>purge</dt>
         * <dd>A function that, when executed, will remove the nodes
         * that were inserted</dd>
         * <dt>
         * </dl>
         * </dd>
         * <dt>context</dt>
         * <dd>the execution context for the callbacks</dd>
         * <dt>win</dt>
         * <dd>a window other than the one the utility occupies</dd>
         * <dt>data</dt>
         * <dd>
         * data that is supplied to the callbacks when the nodes(s) are
         * loaded.
         * </dd>
         * <dt>insertBefore</dt>
         * <dd>node or node id that will become the new node's nextSibling</dd>
         * <dt>charset</dt>
         * <dd>Node charset, default utf-8 (deprecated, use the attributes config)</dd>
         * <dt>attributes</dt>
         * <dd>An object literal containing additional attributes to add to the link tags</dd>
         * </dl>
         * <pre>
         *      Y.Get.css("http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css");
         * </pre>
         * <pre>
         * &nbsp;&nbsp;Y.Get.css(
         * &nbsp;&nbsp;["http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css",
         * &nbsp;&nbsp;&nbsp;&nbsp;insertBefore: 'custom-styles' // nodes will be inserted before the specified node
         * &nbsp;&nbsp;&#125;);
         * </pre>
         * @return {tId: string} an object containing info about the transaction
         */
        css: function(url, opts) {
            return _queue("css", url, opts); 
        }
    };
}();

})();


}, '3.1.1' );
YUI.add('intl-base', function(Y) {

/** 
 * The Intl utility provides a central location for managing sets of localized resources (strings and formatting patterns).
 *
 * @class Intl
 * @uses EventTarget
 * @static
 */

var SPLIT_REGEX = /[, ]/;

Y.mix(Y.namespace("Intl"), {

 /**
    * Returns the language among those available that
    * best matches the preferred language list, using the Lookup
    * algorithm of BCP 47.
    * If none of the available languages meets the user's preferences,
    * then "" is returned.
    * Extended language ranges are not supported.
    *
    * @method lookupBestLang
    * @param {String[] | String} preferredLanguages The list of preferred languages
    * in descending preference order, represented as BCP 47 language
    * tags. A string array or a comma-separated list.
    * @param {String[]} availableLanguages The list of languages
    * that the application supports, represented as BCP 47 language
    * tags.
    *
    * @return {String} The available language that best matches the
    * preferred language list, or "".
    * @since 3.1.0
    */
    lookupBestLang : function (preferredLanguages, availableLanguages) {

        var i, language, result, index;

        // check whether the list of available languages contains language; if so return it
        function scan(language) {
            var i;
            for (i = 0; i < availableLanguages.length; i += 1) {
                if (language.toLowerCase() === availableLanguages[i].toLowerCase()) {
                    return availableLanguages[i];
                }
            }
        }

        if (Y.Lang.isString(preferredLanguages)) {
            preferredLanguages = preferredLanguages.split(SPLIT_REGEX);
        }

        for (i = 0; i < preferredLanguages.length; i += 1) {
            language = preferredLanguages[i];
            if (!language || language === "*") {
                continue;
            }
            // check the fallback sequence for one language
            while (language.length > 0) {
                result = scan(language);
                if (result) {
                    return result;
                } else {
                    index = language.lastIndexOf("-");
                    if (index >= 0) {
                        language = language.substring(0, index);
                        // one-character subtags get cut along with the following subtag
                        if (index >= 2 && language.charAt(index - 2) === "-") {
                            language = language.substring(0, index - 2);
                        }
                    } else {
                        // nothing available for this language
                        break;
                    }
                }
            }
        }

        return "";
    }
});


}, '3.1.1' ,{requires:['yui-base']});
YUI.add('yui-log', function(Y) {

/**
 * Provides console log capability and exposes a custom event for
 * console implementations.
 * @module yui
 * @submodule yui-log
 */
(function() {

var _published,
    INSTANCE  = Y,
    LOGEVENT  = 'yui:log',
    UNDEFINED = 'undefined',
    LEVELS    = { debug: 1, 
                  info:  1, 
                  warn:  1, 
                  error: 1 };

/**
 * If the 'debug' config is true, a 'yui:log' event will be
 * dispatched, which the Console widget and anything else
 * can consume.  If the 'useBrowserConsole' config is true, it will
 * write to the browser console if available.  YUI-specific log
 * messages will only be present in the -debug versions of the
 * JS files.  The build system is supposed to remove log statements
 * from the raw and minified versions of the files.
 *
 * @method log
 * @for YUI
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt)
 * @param  {String}  src  The source of the the message (opt)
 * @param  {boolean} silent If true, the log event won't fire
 * @return {YUI}      YUI instance
 */
INSTANCE.log = function(msg, cat, src, silent) {
    var bail, excl, incl, m, f,
        Y = INSTANCE, 
        c = Y.config;
    // suppress log message if the config is off or the event stack
    // or the event call stack contains a consumer of the yui:log event
    if (c.debug) {
        // apply source filters
        if (src) {
            excl = c.logExclude; 
            incl = c.logInclude;
            if (incl && !(src in incl)) {
                bail = 1;
            } else if (excl && (src in excl)) {
                bail = 1;
            }
        }
        if (!bail) {
            if (c.useBrowserConsole) {
                m = (src) ? src + ': ' + msg : msg;
                if (Y.Lang.isFunction(c.logFn)) {
                    c.logFn(msg, cat, src);
                } else if (typeof console != UNDEFINED && console.log) {
                    f = (cat && console[cat] && (cat in LEVELS)) ? cat : 'log';
                    console[f](m);
                } else if (typeof opera != UNDEFINED) {
                    opera.postError(m);
                }
            }
            if (Y.fire && !silent) {
                if (!_published) {
                    Y.publish(LOGEVENT, {
                        broadcast: 2
                    });

                    _published = 1;

                }
                Y.fire(LOGEVENT, {
                    msg: msg, 
                    cat: cat, 
                    src: src
                });
            }
        }
    }

    return Y;
};

/**
 * Write a system message.  This message will be preserved in the
 * minified and raw versions of the YUI files, unlike log statements.
 * @method message
 * @for YUI
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt)
 * @param  {String}  src  The source of the the message (opt)
 * @param  {boolean} silent If true, the log event won't fire
 * @return {YUI}      YUI instance
 */
INSTANCE.message = function() {
    return INSTANCE.log.apply(INSTANCE, arguments);
};

})();


}, '3.1.1' ,{requires:['yui-base']});
YUI.add('yui-later', function(Y) {

/**
 * Provides a setTimeout/setInterval wrapper
 * @module yui
 * @submodule yui-later
 */
(function() {
    var L = Y.Lang,

    /**
     * Executes the supplied function in the context of the supplied 
     * object 'when' milliseconds later.  Executes the function a 
     * single time unless periodic is set to true.
     * @method later
     * @for YUI
     * @param when {int} the number of milliseconds to wait until the fn 
     * is executed.
     * @param o the context object.
     * @param fn {Function|String} the function to execute or the name of 
     * the method in the 'o' object to execute.
     * @param data [Array] data that is provided to the function.  This accepts
     * either a single item or an array.  If an array is provided, the
     * function is executed with one parameter for each array item.  If
     * you need to pass a single array parameter, it needs to be wrapped in
     * an array [myarray].
     * @param periodic {boolean} if true, executes continuously at supplied 
     * interval until canceled.
     * @return {object} a timer object. Call the cancel() method on this object to 
     * stop the timer.
     */
    later = function(when, o, fn, data, periodic) {
        when = when || 0; 
        o = o || {};
        var m=fn, d=Y.Array(data), f, r;

        if (L.isString(fn)) {
            m = o[fn];
        }

        if (!m) {
        }

        f = function() {
            m.apply(o, d);
        };

        r = (periodic) ? setInterval(f, when) : setTimeout(f, when);

        return {
            id: r,
            interval: periodic,
            cancel: function() {
                if (this.interval) {
                    clearInterval(r);
                } else {
                    clearTimeout(r);
                }
            }
        };
    };

    Y.later = later;
    L.later = later;

})();


}, '3.1.1' ,{requires:['yui-base']});
YUI.add('yui-throttle', function(Y) {

/**
 * Provides a throttle/limiter for function calls
 * @module yui
 * @submodule yui-throttle
 */

/**
 * Throttles a call to a method based on the time between calls.
 * @method throttle
 * @for YUI
 * @param fn {function} The function call to throttle.
 * @param ms {int} The number of milliseconds to throttle the method call. Can set
 * globally with Y.config.throttleTime or by call. Passing a -1 will disable the throttle. Defaults to 150
 * @return {function} Returns a wrapped function that calls fn throttled.
 * @since 3.1.0
 */

/*! Based on work by Simon Willison: http://gist.github.com/292562 */

var throttle = function(fn, ms) {
    ms = (ms) ? ms : (Y.config.throttleTime || 150);

    if (ms === -1) {
        return (function() {
            fn.apply(null, arguments);
        });
    }

    var last = (new Date()).getTime();

    return (function() {
        var now = (new Date()).getTime();
        if (now - last > ms) {
            last = now;
            fn.apply(null, arguments);
        }
    });
};

Y.throttle = throttle;

// We added the redundant definition to later for backwards compatibility.
// I don't think we need to do the same thing here
// Y.Lang.throttle = throttle;



}, '3.1.1' ,{requires:['yui-base']});


YUI.add('yui', function(Y){}, '3.1.1' ,{use:['yui-base','get','intl-base','yui-log','yui-later','yui-throttle']});

